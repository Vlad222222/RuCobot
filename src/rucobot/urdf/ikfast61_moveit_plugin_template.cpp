/// autogenerated analytical inverse kinematics code from ikfast program part of OpenRAVE
/// \author Rosen Diankov
///
/// Licensed under the Apache License, Version 2.0 (the "License");
/// you may not use this file except in compliance with the License.
/// You may obtain a copy of the License at
///     http://www.apache.org/licenses/LICENSE-2.0
/// 
/// Unless required by applicable law or agreed to in writing, software
/// distributed under the License is distributed on an "AS IS" BASIS,
/// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
/// See the License for the specific language governing permissions and
/// limitations under the License.
///
/// ikfast version 0x10000049 generated on 2017-02-21 04:18:54.962176
/// To compile with gcc:
///     gcc -lstdc++ ik.cpp
/// To compile without any main function as a shared object (might need -llapack):
///     gcc -fPIC -lstdc++ -DIKFAST_NO_MAIN -DIKFAST_CLIBRARY -shared -Wl,-soname,libik.so -o libik.so ik.cpp
#define IKFAST_HAS_LIBRARY
#include "ikfast.h" // found inside share/openrave-X.Y/python/ikfast.h
using namespace ikfast;

// check if the included ikfast version matches what this file was compiled with
#define IKFAST_COMPILE_ASSERT(x) extern int __dummy[(int)x]
IKFAST_COMPILE_ASSERT(IKFAST_VERSION==0x10000049);

#include <cmath>
#include <vector>
#include <limits>
#include <algorithm>
#include <complex>

#ifndef IKFAST_ASSERT
#include <stdexcept>
#include <sstream>
#include <iostream>

#ifdef _MSC_VER
#ifndef __PRETTY_FUNCTION__
#define __PRETTY_FUNCTION__ __FUNCDNAME__
#endif
#endif

#ifndef __PRETTY_FUNCTION__
#define __PRETTY_FUNCTION__ __func__
#endif

#define IKFAST_ASSERT(b) { if( !(b) ) { std::stringstream ss; ss << "ikfast exception: " << __FILE__ << ":" << __LINE__ << ": " <<__PRETTY_FUNCTION__ << ": Assertion '" << #b << "' failed"; throw std::runtime_error(ss.str()); } }

#endif

#if defined(_MSC_VER)
#define IKFAST_ALIGNED16(x) __declspec(align(16)) x
#else
#define IKFAST_ALIGNED16(x) x __attribute((aligned(16)))
#endif

#define IK2PI  ((IkReal)6.28318530717959)
#define IKPI  ((IkReal)3.14159265358979)
#define IKPI_2  ((IkReal)1.57079632679490)

#ifdef _MSC_VER
#ifndef isnan
#define isnan _isnan
#endif
#ifndef isinf
#define isinf _isinf
#endif
//#ifndef isfinite
//#define isfinite _isfinite
//#endif
#endif // _MSC_VER

// lapack routines
extern "C" {
  void dgetrf_ (const int* m, const int* n, double* a, const int* lda, int* ipiv, int* info);
  void zgetrf_ (const int* m, const int* n, std::complex<double>* a, const int* lda, int* ipiv, int* info);
  void dgetri_(const int* n, const double* a, const int* lda, int* ipiv, double* work, const int* lwork, int* info);
  void dgesv_ (const int* n, const int* nrhs, double* a, const int* lda, int* ipiv, double* b, const int* ldb, int* info);
  void dgetrs_(const char *trans, const int *n, const int *nrhs, double *a, const int *lda, int *ipiv, double *b, const int *ldb, int *info);
  void dgeev_(const char *jobvl, const char *jobvr, const int *n, double *a, const int *lda, double *wr, double *wi,double *vl, const int *ldvl, double *vr, const int *ldvr, double *work, const int *lwork, int *info);
}

using namespace std; // necessary to get std math routines

#ifdef IKFAST_NAMESPACE
namespace IKFAST_NAMESPACE {
#endif

inline float IKabs(float f) { return fabsf(f); }
inline double IKabs(double f) { return fabs(f); }

inline float IKsqr(float f) { return f*f; }
inline double IKsqr(double f) { return f*f; }

inline float IKlog(float f) { return logf(f); }
inline double IKlog(double f) { return log(f); }

// allows asin and acos to exceed 1. has to be smaller than thresholds used for branch conds and evaluation
#ifndef IKFAST_SINCOS_THRESH
#define IKFAST_SINCOS_THRESH ((IkReal)1e-7)
#endif

// used to check input to atan2 for degenerate cases. has to be smaller than thresholds used for branch conds and evaluation
#ifndef IKFAST_ATAN2_MAGTHRESH
#define IKFAST_ATAN2_MAGTHRESH ((IkReal)1e-7)
#endif

// minimum distance of separate solutions
#ifndef IKFAST_SOLUTION_THRESH
#define IKFAST_SOLUTION_THRESH ((IkReal)1e-6)
#endif

// there are checkpoints in ikfast that are evaluated to make sure they are 0. This threshold speicfies by how much they can deviate
#ifndef IKFAST_EVALCOND_THRESH
#define IKFAST_EVALCOND_THRESH ((IkReal)0.00001)
#endif


inline float IKasin(float f)
{
IKFAST_ASSERT( f > -1-IKFAST_SINCOS_THRESH && f < 1+IKFAST_SINCOS_THRESH ); // any more error implies something is wrong with the solver
if( f <= -1 ) return float(-IKPI_2);
else if( f >= 1 ) return float(IKPI_2);
return asinf(f);
}
inline double IKasin(double f)
{
IKFAST_ASSERT( f > -1-IKFAST_SINCOS_THRESH && f < 1+IKFAST_SINCOS_THRESH ); // any more error implies something is wrong with the solver
if( f <= -1 ) return -IKPI_2;
else if( f >= 1 ) return IKPI_2;
return asin(f);
}

// return positive value in [0,y)
inline float IKfmod(float x, float y)
{
    while(x < 0) {
        x += y;
    }
    return fmodf(x,y);
}

// return positive value in [0,y)
inline double IKfmod(double x, double y)
{
    while(x < 0) {
        x += y;
    }
    return fmod(x,y);
}

inline float IKacos(float f)
{
IKFAST_ASSERT( f > -1-IKFAST_SINCOS_THRESH && f < 1+IKFAST_SINCOS_THRESH ); // any more error implies something is wrong with the solver
if( f <= -1 ) return float(IKPI);
else if( f >= 1 ) return float(0);
return acosf(f);
}
inline double IKacos(double f)
{
IKFAST_ASSERT( f > -1-IKFAST_SINCOS_THRESH && f < 1+IKFAST_SINCOS_THRESH ); // any more error implies something is wrong with the solver
if( f <= -1 ) return IKPI;
else if( f >= 1 ) return 0;
return acos(f);
}
inline float IKsin(float f) { return sinf(f); }
inline double IKsin(double f) { return sin(f); }
inline float IKcos(float f) { return cosf(f); }
inline double IKcos(double f) { return cos(f); }
inline float IKtan(float f) { return tanf(f); }
inline double IKtan(double f) { return tan(f); }
inline float IKsqrt(float f) { if( f <= 0.0f ) return 0.0f; return sqrtf(f); }
inline double IKsqrt(double f) { if( f <= 0.0 ) return 0.0; return sqrt(f); }
inline float IKatan2Simple(float fy, float fx) {
    return atan2f(fy,fx);
}
inline float IKatan2(float fy, float fx) {
    if( isnan(fy) ) {
        IKFAST_ASSERT(!isnan(fx)); // if both are nan, probably wrong value will be returned
        return float(IKPI_2);
    }
    else if( isnan(fx) ) {
        return 0;
    }
    return atan2f(fy,fx);
}
inline double IKatan2Simple(double fy, double fx) {
    return atan2(fy,fx);
}
inline double IKatan2(double fy, double fx) {
    if( isnan(fy) ) {
        IKFAST_ASSERT(!isnan(fx)); // if both are nan, probably wrong value will be returned
        return IKPI_2;
    }
    else if( isnan(fx) ) {
        return 0;
    }
    return atan2(fy,fx);
}

template <typename T>
struct CheckValue
{
    T value;
    bool valid;
};

template <typename T>
inline CheckValue<T> IKatan2WithCheck(T fy, T fx, T epsilon)
{
    CheckValue<T> ret;
    ret.valid = false;
    ret.value = 0;
    if( !isnan(fy) && !isnan(fx) ) {
        if( IKabs(fy) >= IKFAST_ATAN2_MAGTHRESH || IKabs(fx) > IKFAST_ATAN2_MAGTHRESH ) {
            ret.value = IKatan2Simple(fy,fx);
            ret.valid = true;
        }
    }
    return ret;
}

inline float IKsign(float f) {
    if( f > 0 ) {
        return float(1);
    }
    else if( f < 0 ) {
        return float(-1);
    }
    return 0;
}

inline double IKsign(double f) {
    if( f > 0 ) {
        return 1.0;
    }
    else if( f < 0 ) {
        return -1.0;
    }
    return 0;
}

template <typename T>
inline CheckValue<T> IKPowWithIntegerCheck(T f, int n)
{
    CheckValue<T> ret;
    ret.valid = true;
    if( n == 0 ) {
        ret.value = 1.0;
        return ret;
    }
    else if( n == 1 )
    {
        ret.value = f;
        return ret;
    }
    else if( n < 0 )
    {
        if( f == 0 )
        {
            ret.valid = false;
            ret.value = (T)1.0e30;
            return ret;
        }
        if( n == -1 ) {
            ret.value = T(1.0)/f;
            return ret;
        }
    }

    int num = n > 0 ? n : -n;
    if( num == 2 ) {
        ret.value = f*f;
    }
    else if( num == 3 ) {
        ret.value = f*f*f;
    }
    else {
        ret.value = 1.0;
        while(num>0) {
            if( num & 1 ) {
                ret.value *= f;
            }
            num >>= 1;
            f *= f;
        }
    }
    
    if( n < 0 ) {
        ret.value = T(1.0)/ret.value;
    }
    return ret;
}

/// solves the forward kinematics equations.
/// \param pfree is an array specifying the free joints of the chain.
IKFAST_API void ComputeFk(const IkReal* j, IkReal* eetrans, IkReal* eerot) {
IkReal x0,x1,x2,x3,x4,x5,x6,x7,x8,x9,x10,x11,x12,x13,x14;
x0=IKsin(j[1]);
x1=IKcos(j[1]);
x2=IKsin(j[2]);
x3=IKcos(j[2]);
x4=IKcos(j[3]);
x5=IKsin(j[3]);
x6=((0.29)*x3);
x7=((0.29)*x2);
x8=((((-0.511154255842196)*x1))+(((0.146795896805068)*x0)));
x9=((((0.0181157120800272)*x0))+(((-0.0630802599313394)*x1)));
x10=((((0.0994021100426501)*x1))+(((-0.0285468069985741)*x0)));
x11=((((0.805400547163128)*x1))+(((-0.231299053576899)*x0)));
x12=(x3*x9);
x13=(x10*x3);
x14=(x11*x2);
eerot[0]=((((((((0.00413000607730841)*(((((0.980583922797878)*(((((-0.233054011708033)*(IKcos(j[1]))))+(((-0.811511442202281)*(IKsin(j[1]))))+(((((((-0.0181157120800272)*(IKsin(j[1]))))+(((0.0630802599313394)*(IKcos(j[1]))))))*(IKcos(j[2]))))+(((((((-0.146795896805068)*(IKsin(j[1]))))+(((0.511154255842196)*(IKcos(j[1]))))))*(IKsin(j[2]))))))*(IKsin(j[3]))))+(((0.980583922797878)*(((((-0.147909480226238)*(IKcos(j[1]))))+(((((((-0.0994021100426501)*(IKcos(j[1]))))+(((0.0285468069985741)*(IKsin(j[1]))))))*(IKcos(j[2]))))+(((-0.515031836328808)*(IKsin(j[1]))))+(((((((0.231299053576899)*(IKsin(j[1]))))+(((-0.805400547163128)*(IKcos(j[1]))))))*(IKsin(j[2]))))))*(IKcos(j[3]))))))*(IKcos(j[5]))))+(((0.00413000607730841)*(((((0.196099898904425)*(((((-1.0)*(((((-0.0181157120800272)*(IKsin(j[1]))))+(((0.0630802599313394)*(IKcos(j[1]))))))*(IKcos(j[2]))))+(((0.233054011708033)*(IKcos(j[1]))))+(((0.811511442202281)*(IKsin(j[1]))))+(((-1.0)*(((((-0.146795896805068)*(IKsin(j[1]))))+(((0.511154255842196)*(IKcos(j[1]))))))*(IKsin(j[2]))))))*(IKsin(j[3]))))+(((0.196099898904425)*(((((0.147909480226238)*(IKcos(j[1]))))+(((-1.0)*(((((0.231299053576899)*(IKsin(j[1]))))+(((-0.805400547163128)*(IKcos(j[1]))))))*(IKsin(j[2]))))+(((0.515031836328808)*(IKsin(j[1]))))+(((-1.0)*(((((-0.0994021100426501)*(IKcos(j[1]))))+(((0.0285468069985741)*(IKsin(j[1]))))))*(IKcos(j[2]))))))*(IKcos(j[3]))))))*(IKsin(j[5]))))+(((0.00413000607730841)*(((((0.980583922797878)*(((((-4.78075867782499e-7)*(IKcos(j[1]))))+(((((((-0.945998281949174)*(((((-0.0994021100426501)*(IKcos(j[1]))))+(((0.0285468069985741)*(IKsin(j[1]))))))*(IKcos(j[2]))))+(((-0.945998281949174)*(((((0.231299053576899)*(IKsin(j[1]))))+(((-0.805400547163128)*(IKcos(j[1]))))))*(IKsin(j[2]))))+(((0.48721923231618)*(IKsin(j[1]))))+(((0.139922114178016)*(IKcos(j[1]))))))*(IKsin(j[3]))))+(((((((0.309231318852313)*(IKcos(j[1]))))+(((-0.0888066337163656)*(IKsin(j[1]))))))*(IKcos(j[2]))))+(((-1.66469581065319e-6)*(IKsin(j[1]))))+(((((((0.0109601621006988)*(IKsin(j[1]))))+(((-0.0381641014798386)*(IKcos(j[1]))))))*(IKsin(j[2]))))+(((((((-0.945998281949174)*(((((0.146795896805068)*(IKsin(j[1]))))+(((-0.511154255842196)*(IKcos(j[1]))))))*(IKsin(j[2]))))+(((-0.945998281949174)*(((((-0.0630802599313394)*(IKcos(j[1]))))+(((0.0181157120800272)*(IKsin(j[1]))))))*(IKcos(j[2]))))+(((-0.220468694677162)*(IKcos(j[1]))))+(((-0.767688430105455)*(IKsin(j[1]))))))*(IKcos(j[3]))))))*(IKcos(j[4]))))+(((0.980583922797878)*(((((((((0.111370552686976)*(IKcos(j[1]))))+(((-0.0319839656473641)*(IKsin(j[1]))))))*(IKsin(j[2]))))+(((((((0.25915568546757)*(IKsin(j[1]))))+(((-0.9023994160297)*(IKcos(j[1]))))))*(IKcos(j[2]))))+(((((((0.0479480584043816)*(IKcos(j[1]))))+(((-0.324171637484235)*(((((0.231299053576899)*(IKsin(j[1]))))+(((-0.805400547163128)*(IKcos(j[1]))))))*(IKsin(j[2]))))+(((-0.324171637484235)*(((((-0.0994021100426501)*(IKcos(j[1]))))+(((0.0285468069985741)*(IKsin(j[1]))))))*(IKcos(j[2]))))+(((0.166958713739222)*(IKsin(j[1]))))))*(IKsin(j[3]))))+(((((((-0.324171637484235)*(((((-0.0630802599313394)*(IKcos(j[1]))))+(((0.0181157120800272)*(IKsin(j[1]))))))*(IKcos(j[2]))))+(((-0.324171637484235)*(((((0.146795896805068)*(IKsin(j[1]))))+(((-0.511154255842196)*(IKcos(j[1]))))))*(IKsin(j[2]))))+(((-0.0755495005976634)*(IKcos(j[1]))))+(((-0.263068993055907)*(IKsin(j[1]))))))*(IKcos(j[3]))))+(((4.85791844427626e-6)*(IKsin(j[1]))))+(((1.39512189614552e-6)*(IKcos(j[1]))))))*(IKsin(j[4]))))))*(IKsin(j[5]))))+(((0.00413000607730841)*(((((0.196099898904425)*(((((-4.78075867782499e-7)*(IKcos(j[1]))))+(((((((-0.945998281949174)*(((((-0.0994021100426501)*(IKcos(j[1]))))+(((0.0285468069985741)*(IKsin(j[1]))))))*(IKcos(j[2]))))+(((-0.945998281949174)*(((((0.231299053576899)*(IKsin(j[1]))))+(((-0.805400547163128)*(IKcos(j[1]))))))*(IKsin(j[2]))))+(((0.48721923231618)*(IKsin(j[1]))))+(((0.139922114178016)*(IKcos(j[1]))))))*(IKsin(j[3]))))+(((((((0.309231318852313)*(IKcos(j[1]))))+(((-0.0888066337163656)*(IKsin(j[1]))))))*(IKcos(j[2]))))+(((-1.66469581065319e-6)*(IKsin(j[1]))))+(((((((0.0109601621006988)*(IKsin(j[1]))))+(((-0.0381641014798386)*(IKcos(j[1]))))))*(IKsin(j[2]))))+(((((((-0.945998281949174)*(((((0.146795896805068)*(IKsin(j[1]))))+(((-0.511154255842196)*(IKcos(j[1]))))))*(IKsin(j[2]))))+(((-0.945998281949174)*(((((-0.0630802599313394)*(IKcos(j[1]))))+(((0.0181157120800272)*(IKsin(j[1]))))))*(IKcos(j[2]))))+(((-0.220468694677162)*(IKcos(j[1]))))+(((-0.767688430105455)*(IKsin(j[1]))))))*(IKcos(j[3]))))))*(IKcos(j[4]))))+(((0.196099898904425)*(((((((((0.111370552686976)*(IKcos(j[1]))))+(((-0.0319839656473641)*(IKsin(j[1]))))))*(IKsin(j[2]))))+(((((((0.25915568546757)*(IKsin(j[1]))))+(((-0.9023994160297)*(IKcos(j[1]))))))*(IKcos(j[2]))))+(((((((0.0479480584043816)*(IKcos(j[1]))))+(((-0.324171637484235)*(((((0.231299053576899)*(IKsin(j[1]))))+(((-0.805400547163128)*(IKcos(j[1]))))))*(IKsin(j[2]))))+(((-0.324171637484235)*(((((-0.0994021100426501)*(IKcos(j[1]))))+(((0.0285468069985741)*(IKsin(j[1]))))))*(IKcos(j[2]))))+(((0.166958713739222)*(IKsin(j[1]))))))*(IKsin(j[3]))))+(((((((-0.324171637484235)*(((((-0.0630802599313394)*(IKcos(j[1]))))+(((0.0181157120800272)*(IKsin(j[1]))))))*(IKcos(j[2]))))+(((-0.324171637484235)*(((((0.146795896805068)*(IKsin(j[1]))))+(((-0.511154255842196)*(IKcos(j[1]))))))*(IKsin(j[2]))))+(((-0.0755495005976634)*(IKcos(j[1]))))+(((-0.263068993055907)*(IKsin(j[1]))))))*(IKcos(j[3]))))+(((4.85791844427626e-6)*(IKsin(j[1]))))+(((1.39512189614552e-6)*(IKcos(j[1]))))))*(IKsin(j[4]))))))*(IKcos(j[5]))))))*(IKcos(j[6]))))+(((((((-0.999991471488533)*(((((((((0.324171637484235)*(((((-0.0630802599313394)*(IKcos(j[1]))))+(((0.0181157120800272)*(IKsin(j[1]))))))*(IKcos(j[2]))))+(((0.0755495005976634)*(IKcos(j[1]))))+(((0.324171637484235)*(((((0.146795896805068)*(IKsin(j[1]))))+(((-0.511154255842196)*(IKcos(j[1]))))))*(IKsin(j[2]))))+(((0.263068993055907)*(IKsin(j[1]))))))*(IKcos(j[3]))))+(((-1.39512189614552e-6)*(IKcos(j[1]))))+(((((((0.324171637484235)*(((((-0.0994021100426501)*(IKcos(j[1]))))+(((0.0285468069985741)*(IKsin(j[1]))))))*(IKcos(j[2]))))+(((0.324171637484235)*(((((0.231299053576899)*(IKsin(j[1]))))+(((-0.805400547163128)*(IKcos(j[1]))))))*(IKsin(j[2]))))+(((-0.0479480584043816)*(IKcos(j[1]))))+(((-0.166958713739222)*(IKsin(j[1]))))))*(IKsin(j[3]))))+(((((((-0.111370552686976)*(IKcos(j[1]))))+(((0.0319839656473641)*(IKsin(j[1]))))))*(IKsin(j[2]))))+(((((((-0.25915568546757)*(IKsin(j[1]))))+(((0.9023994160297)*(IKcos(j[1]))))))*(IKcos(j[2]))))+(((-4.85791844427626e-6)*(IKsin(j[1]))))))*(IKcos(j[4]))))+(((-0.999991471488533)*(((((-4.78075867782499e-7)*(IKcos(j[1]))))+(((((((-0.945998281949174)*(((((-0.0994021100426501)*(IKcos(j[1]))))+(((0.0285468069985741)*(IKsin(j[1]))))))*(IKcos(j[2]))))+(((-0.945998281949174)*(((((0.231299053576899)*(IKsin(j[1]))))+(((-0.805400547163128)*(IKcos(j[1]))))))*(IKsin(j[2]))))+(((0.48721923231618)*(IKsin(j[1]))))+(((0.139922114178016)*(IKcos(j[1]))))))*(IKsin(j[3]))))+(((((((0.309231318852313)*(IKcos(j[1]))))+(((-0.0888066337163656)*(IKsin(j[1]))))))*(IKcos(j[2]))))+(((-1.66469581065319e-6)*(IKsin(j[1]))))+(((((((0.0109601621006988)*(IKsin(j[1]))))+(((-0.0381641014798386)*(IKcos(j[1]))))))*(IKsin(j[2]))))+(((((((-0.945998281949174)*(((((0.146795896805068)*(IKsin(j[1]))))+(((-0.511154255842196)*(IKcos(j[1]))))))*(IKsin(j[2]))))+(((-0.945998281949174)*(((((-0.0630802599313394)*(IKcos(j[1]))))+(((0.0181157120800272)*(IKsin(j[1]))))))*(IKcos(j[2]))))+(((-0.220468694677162)*(IKcos(j[1]))))+(((-0.767688430105455)*(IKsin(j[1]))))))*(IKcos(j[3]))))))*(IKsin(j[4]))))))*(IKcos(j[6]))))+(((((((0.00413000607730841)*(((((-1.0)*(((((0.324171637484235)*(((((-0.0630802599313394)*(IKcos(j[1]))))+(((0.0181157120800272)*(IKsin(j[1]))))))*(IKcos(j[2]))))+(((0.0755495005976634)*(IKcos(j[1]))))+(((0.324171637484235)*(((((0.146795896805068)*(IKsin(j[1]))))+(((-0.511154255842196)*(IKcos(j[1]))))))*(IKsin(j[2]))))+(((0.263068993055907)*(IKsin(j[1]))))))*(IKcos(j[3]))))+(((-1.0)*(((((-0.25915568546757)*(IKsin(j[1]))))+(((0.9023994160297)*(IKcos(j[1]))))))*(IKcos(j[2]))))+(((4.85791844427626e-6)*(IKsin(j[1]))))+(((-1.0)*(((((0.324171637484235)*(((((-0.0994021100426501)*(IKcos(j[1]))))+(((0.0285468069985741)*(IKsin(j[1]))))))*(IKcos(j[2]))))+(((0.324171637484235)*(((((0.231299053576899)*(IKsin(j[1]))))+(((-0.805400547163128)*(IKcos(j[1]))))))*(IKsin(j[2]))))+(((-0.0479480584043816)*(IKcos(j[1]))))+(((-0.166958713739222)*(IKsin(j[1]))))))*(IKsin(j[3]))))+(((-1.0)*(((((-0.111370552686976)*(IKcos(j[1]))))+(((0.0319839656473641)*(IKsin(j[1]))))))*(IKsin(j[2]))))+(((1.39512189614552e-6)*(IKcos(j[1]))))))*(IKcos(j[4]))))+(((0.00413000607730841)*(((((-1.0)*(((((0.309231318852313)*(IKcos(j[1]))))+(((-0.0888066337163656)*(IKsin(j[1]))))))*(IKcos(j[2]))))+(((4.78075867782499e-7)*(IKcos(j[1]))))+(((1.66469581065319e-6)*(IKsin(j[1]))))+(((-1.0)*(((((-0.945998281949174)*(((((-0.0994021100426501)*(IKcos(j[1]))))+(((0.0285468069985741)*(IKsin(j[1]))))))*(IKcos(j[2]))))+(((-0.945998281949174)*(((((0.231299053576899)*(IKsin(j[1]))))+(((-0.805400547163128)*(IKcos(j[1]))))))*(IKsin(j[2]))))+(((0.48721923231618)*(IKsin(j[1]))))+(((0.139922114178016)*(IKcos(j[1]))))))*(IKsin(j[3]))))+(((-1.0)*(((((0.0109601621006988)*(IKsin(j[1]))))+(((-0.0381641014798386)*(IKcos(j[1]))))))*(IKsin(j[2]))))+(((-1.0)*(((((-0.945998281949174)*(((((0.146795896805068)*(IKsin(j[1]))))+(((-0.511154255842196)*(IKcos(j[1]))))))*(IKsin(j[2]))))+(((-0.945998281949174)*(((((-0.0630802599313394)*(IKcos(j[1]))))+(((0.0181157120800272)*(IKsin(j[1]))))))*(IKcos(j[2]))))+(((-0.220468694677162)*(IKcos(j[1]))))+(((-0.767688430105455)*(IKsin(j[1]))))))*(IKcos(j[3]))))))*(IKsin(j[4]))))))*(IKsin(j[6]))))+(((((((-0.999991471488533)*(((((0.196099898904425)*(((((-4.78075867782499e-7)*(IKcos(j[1]))))+(((((((-0.945998281949174)*(((((-0.0994021100426501)*(IKcos(j[1]))))+(((0.0285468069985741)*(IKsin(j[1]))))))*(IKcos(j[2]))))+(((-0.945998281949174)*(((((0.231299053576899)*(IKsin(j[1]))))+(((-0.805400547163128)*(IKcos(j[1]))))))*(IKsin(j[2]))))+(((0.48721923231618)*(IKsin(j[1]))))+(((0.139922114178016)*(IKcos(j[1]))))))*(IKsin(j[3]))))+(((((((0.309231318852313)*(IKcos(j[1]))))+(((-0.0888066337163656)*(IKsin(j[1]))))))*(IKcos(j[2]))))+(((-1.66469581065319e-6)*(IKsin(j[1]))))+(((((((0.0109601621006988)*(IKsin(j[1]))))+(((-0.0381641014798386)*(IKcos(j[1]))))))*(IKsin(j[2]))))+(((((((-0.945998281949174)*(((((0.146795896805068)*(IKsin(j[1]))))+(((-0.511154255842196)*(IKcos(j[1]))))))*(IKsin(j[2]))))+(((-0.945998281949174)*(((((-0.0630802599313394)*(IKcos(j[1]))))+(((0.0181157120800272)*(IKsin(j[1]))))))*(IKcos(j[2]))))+(((-0.220468694677162)*(IKcos(j[1]))))+(((-0.767688430105455)*(IKsin(j[1]))))))*(IKcos(j[3]))))))*(IKcos(j[4]))))+(((0.196099898904425)*(((((((((0.111370552686976)*(IKcos(j[1]))))+(((-0.0319839656473641)*(IKsin(j[1]))))))*(IKsin(j[2]))))+(((((((0.25915568546757)*(IKsin(j[1]))))+(((-0.9023994160297)*(IKcos(j[1]))))))*(IKcos(j[2]))))+(((((((0.0479480584043816)*(IKcos(j[1]))))+(((-0.324171637484235)*(((((0.231299053576899)*(IKsin(j[1]))))+(((-0.805400547163128)*(IKcos(j[1]))))))*(IKsin(j[2]))))+(((-0.324171637484235)*(((((-0.0994021100426501)*(IKcos(j[1]))))+(((0.0285468069985741)*(IKsin(j[1]))))))*(IKcos(j[2]))))+(((0.166958713739222)*(IKsin(j[1]))))))*(IKsin(j[3]))))+(((((((-0.324171637484235)*(((((-0.0630802599313394)*(IKcos(j[1]))))+(((0.0181157120800272)*(IKsin(j[1]))))))*(IKcos(j[2]))))+(((-0.324171637484235)*(((((0.146795896805068)*(IKsin(j[1]))))+(((-0.511154255842196)*(IKcos(j[1]))))))*(IKsin(j[2]))))+(((-0.0755495005976634)*(IKcos(j[1]))))+(((-0.263068993055907)*(IKsin(j[1]))))))*(IKcos(j[3]))))+(((4.85791844427626e-6)*(IKsin(j[1]))))+(((1.39512189614552e-6)*(IKcos(j[1]))))))*(IKsin(j[4]))))))*(IKcos(j[5]))))+(((-0.999991471488533)*(((((0.196099898904425)*(((((-1.0)*(((((-0.0181157120800272)*(IKsin(j[1]))))+(((0.0630802599313394)*(IKcos(j[1]))))))*(IKcos(j[2]))))+(((0.233054011708033)*(IKcos(j[1]))))+(((0.811511442202281)*(IKsin(j[1]))))+(((-1.0)*(((((-0.146795896805068)*(IKsin(j[1]))))+(((0.511154255842196)*(IKcos(j[1]))))))*(IKsin(j[2]))))))*(IKsin(j[3]))))+(((0.196099898904425)*(((((0.147909480226238)*(IKcos(j[1]))))+(((-1.0)*(((((0.231299053576899)*(IKsin(j[1]))))+(((-0.805400547163128)*(IKcos(j[1]))))))*(IKsin(j[2]))))+(((0.515031836328808)*(IKsin(j[1]))))+(((-1.0)*(((((-0.0994021100426501)*(IKcos(j[1]))))+(((0.0285468069985741)*(IKsin(j[1]))))))*(IKcos(j[2]))))))*(IKcos(j[3]))))))*(IKsin(j[5]))))+(((-0.999991471488533)*(((((0.980583922797878)*(((((-0.233054011708033)*(IKcos(j[1]))))+(((-0.811511442202281)*(IKsin(j[1]))))+(((((((-0.0181157120800272)*(IKsin(j[1]))))+(((0.0630802599313394)*(IKcos(j[1]))))))*(IKcos(j[2]))))+(((((((-0.146795896805068)*(IKsin(j[1]))))+(((0.511154255842196)*(IKcos(j[1]))))))*(IKsin(j[2]))))))*(IKsin(j[3]))))+(((0.980583922797878)*(((((-0.147909480226238)*(IKcos(j[1]))))+(((((((-0.0994021100426501)*(IKcos(j[1]))))+(((0.0285468069985741)*(IKsin(j[1]))))))*(IKcos(j[2]))))+(((-0.515031836328808)*(IKsin(j[1]))))+(((((((0.231299053576899)*(IKsin(j[1]))))+(((-0.805400547163128)*(IKcos(j[1]))))))*(IKsin(j[2]))))))*(IKcos(j[3]))))))*(IKcos(j[5]))))+(((-0.999991471488533)*(((((0.980583922797878)*(((((-4.78075867782499e-7)*(IKcos(j[1]))))+(((((((-0.945998281949174)*(((((-0.0994021100426501)*(IKcos(j[1]))))+(((0.0285468069985741)*(IKsin(j[1]))))))*(IKcos(j[2]))))+(((-0.945998281949174)*(((((0.231299053576899)*(IKsin(j[1]))))+(((-0.805400547163128)*(IKcos(j[1]))))))*(IKsin(j[2]))))+(((0.48721923231618)*(IKsin(j[1]))))+(((0.139922114178016)*(IKcos(j[1]))))))*(IKsin(j[3]))))+(((((((0.309231318852313)*(IKcos(j[1]))))+(((-0.0888066337163656)*(IKsin(j[1]))))))*(IKcos(j[2]))))+(((-1.66469581065319e-6)*(IKsin(j[1]))))+(((((((0.0109601621006988)*(IKsin(j[1]))))+(((-0.0381641014798386)*(IKcos(j[1]))))))*(IKsin(j[2]))))+(((((((-0.945998281949174)*(((((0.146795896805068)*(IKsin(j[1]))))+(((-0.511154255842196)*(IKcos(j[1]))))))*(IKsin(j[2]))))+(((-0.945998281949174)*(((((-0.0630802599313394)*(IKcos(j[1]))))+(((0.0181157120800272)*(IKsin(j[1]))))))*(IKcos(j[2]))))+(((-0.220468694677162)*(IKcos(j[1]))))+(((-0.767688430105455)*(IKsin(j[1]))))))*(IKcos(j[3]))))))*(IKcos(j[4]))))+(((0.980583922797878)*(((((((((0.111370552686976)*(IKcos(j[1]))))+(((-0.0319839656473641)*(IKsin(j[1]))))))*(IKsin(j[2]))))+(((((((0.25915568546757)*(IKsin(j[1]))))+(((-0.9023994160297)*(IKcos(j[1]))))))*(IKcos(j[2]))))+(((((((0.0479480584043816)*(IKcos(j[1]))))+(((-0.324171637484235)*(((((0.231299053576899)*(IKsin(j[1]))))+(((-0.805400547163128)*(IKcos(j[1]))))))*(IKsin(j[2]))))+(((-0.324171637484235)*(((((-0.0994021100426501)*(IKcos(j[1]))))+(((0.0285468069985741)*(IKsin(j[1]))))))*(IKcos(j[2]))))+(((0.166958713739222)*(IKsin(j[1]))))))*(IKsin(j[3]))))+(((((((-0.324171637484235)*(((((-0.0630802599313394)*(IKcos(j[1]))))+(((0.0181157120800272)*(IKsin(j[1]))))))*(IKcos(j[2]))))+(((-0.324171637484235)*(((((0.146795896805068)*(IKsin(j[1]))))+(((-0.511154255842196)*(IKcos(j[1]))))))*(IKsin(j[2]))))+(((-0.0755495005976634)*(IKcos(j[1]))))+(((-0.263068993055907)*(IKsin(j[1]))))))*(IKcos(j[3]))))+(((4.85791844427626e-6)*(IKsin(j[1]))))+(((1.39512189614552e-6)*(IKcos(j[1]))))))*(IKsin(j[4]))))))*(IKsin(j[5]))))))*(IKsin(j[6])))));
eerot[1]=((((((((-0.196099898904425)*(((((-0.147909480226238)*(IKcos(j[1]))))+(((((((-0.0994021100426501)*(IKcos(j[1]))))+(((0.0285468069985741)*(IKsin(j[1]))))))*(IKcos(j[2]))))+(((-0.515031836328808)*(IKsin(j[1]))))+(((((((0.231299053576899)*(IKsin(j[1]))))+(((-0.805400547163128)*(IKcos(j[1]))))))*(IKsin(j[2]))))))*(IKcos(j[3]))))+(((-0.196099898904425)*(((((-0.233054011708033)*(IKcos(j[1]))))+(((-0.811511442202281)*(IKsin(j[1]))))+(((((((-0.0181157120800272)*(IKsin(j[1]))))+(((0.0630802599313394)*(IKcos(j[1]))))))*(IKcos(j[2]))))+(((((((-0.146795896805068)*(IKsin(j[1]))))+(((0.511154255842196)*(IKcos(j[1]))))))*(IKsin(j[2]))))))*(IKsin(j[3]))))))*(IKcos(j[5]))))+(((((((0.980583922797878)*(((((-1.0)*(((((-0.0181157120800272)*(IKsin(j[1]))))+(((0.0630802599313394)*(IKcos(j[1]))))))*(IKcos(j[2]))))+(((0.233054011708033)*(IKcos(j[1]))))+(((0.811511442202281)*(IKsin(j[1]))))+(((-1.0)*(((((-0.146795896805068)*(IKsin(j[1]))))+(((0.511154255842196)*(IKcos(j[1]))))))*(IKsin(j[2]))))))*(IKsin(j[3]))))+(((0.980583922797878)*(((((0.147909480226238)*(IKcos(j[1]))))+(((-1.0)*(((((0.231299053576899)*(IKsin(j[1]))))+(((-0.805400547163128)*(IKcos(j[1]))))))*(IKsin(j[2]))))+(((0.515031836328808)*(IKsin(j[1]))))+(((-1.0)*(((((-0.0994021100426501)*(IKcos(j[1]))))+(((0.0285468069985741)*(IKsin(j[1]))))))*(IKcos(j[2]))))))*(IKcos(j[3]))))))*(IKsin(j[5]))))+(((((((0.980583922797878)*(((((-4.78075867782499e-7)*(IKcos(j[1]))))+(((((((-0.945998281949174)*(((((-0.0994021100426501)*(IKcos(j[1]))))+(((0.0285468069985741)*(IKsin(j[1]))))))*(IKcos(j[2]))))+(((-0.945998281949174)*(((((0.231299053576899)*(IKsin(j[1]))))+(((-0.805400547163128)*(IKcos(j[1]))))))*(IKsin(j[2]))))+(((0.48721923231618)*(IKsin(j[1]))))+(((0.139922114178016)*(IKcos(j[1]))))))*(IKsin(j[3]))))+(((((((0.309231318852313)*(IKcos(j[1]))))+(((-0.0888066337163656)*(IKsin(j[1]))))))*(IKcos(j[2]))))+(((-1.66469581065319e-6)*(IKsin(j[1]))))+(((((((0.0109601621006988)*(IKsin(j[1]))))+(((-0.0381641014798386)*(IKcos(j[1]))))))*(IKsin(j[2]))))+(((((((-0.945998281949174)*(((((0.146795896805068)*(IKsin(j[1]))))+(((-0.511154255842196)*(IKcos(j[1]))))))*(IKsin(j[2]))))+(((-0.945998281949174)*(((((-0.0630802599313394)*(IKcos(j[1]))))+(((0.0181157120800272)*(IKsin(j[1]))))))*(IKcos(j[2]))))+(((-0.220468694677162)*(IKcos(j[1]))))+(((-0.767688430105455)*(IKsin(j[1]))))))*(IKcos(j[3]))))))*(IKcos(j[4]))))+(((0.980583922797878)*(((((((((0.111370552686976)*(IKcos(j[1]))))+(((-0.0319839656473641)*(IKsin(j[1]))))))*(IKsin(j[2]))))+(((((((0.25915568546757)*(IKsin(j[1]))))+(((-0.9023994160297)*(IKcos(j[1]))))))*(IKcos(j[2]))))+(((((((0.0479480584043816)*(IKcos(j[1]))))+(((-0.324171637484235)*(((((0.231299053576899)*(IKsin(j[1]))))+(((-0.805400547163128)*(IKcos(j[1]))))))*(IKsin(j[2]))))+(((-0.324171637484235)*(((((-0.0994021100426501)*(IKcos(j[1]))))+(((0.0285468069985741)*(IKsin(j[1]))))))*(IKcos(j[2]))))+(((0.166958713739222)*(IKsin(j[1]))))))*(IKsin(j[3]))))+(((((((-0.324171637484235)*(((((-0.0630802599313394)*(IKcos(j[1]))))+(((0.0181157120800272)*(IKsin(j[1]))))))*(IKcos(j[2]))))+(((-0.324171637484235)*(((((0.146795896805068)*(IKsin(j[1]))))+(((-0.511154255842196)*(IKcos(j[1]))))))*(IKsin(j[2]))))+(((-0.0755495005976634)*(IKcos(j[1]))))+(((-0.263068993055907)*(IKsin(j[1]))))))*(IKcos(j[3]))))+(((4.85791844427626e-6)*(IKsin(j[1]))))+(((1.39512189614552e-6)*(IKcos(j[1]))))))*(IKsin(j[4]))))))*(IKcos(j[5]))))+(((((((-0.196099898904425)*(((((((((0.111370552686976)*(IKcos(j[1]))))+(((-0.0319839656473641)*(IKsin(j[1]))))))*(IKsin(j[2]))))+(((((((0.25915568546757)*(IKsin(j[1]))))+(((-0.9023994160297)*(IKcos(j[1]))))))*(IKcos(j[2]))))+(((((((0.0479480584043816)*(IKcos(j[1]))))+(((-0.324171637484235)*(((((0.231299053576899)*(IKsin(j[1]))))+(((-0.805400547163128)*(IKcos(j[1]))))))*(IKsin(j[2]))))+(((-0.324171637484235)*(((((-0.0994021100426501)*(IKcos(j[1]))))+(((0.0285468069985741)*(IKsin(j[1]))))))*(IKcos(j[2]))))+(((0.166958713739222)*(IKsin(j[1]))))))*(IKsin(j[3]))))+(((((((-0.324171637484235)*(((((-0.0630802599313394)*(IKcos(j[1]))))+(((0.0181157120800272)*(IKsin(j[1]))))))*(IKcos(j[2]))))+(((-0.324171637484235)*(((((0.146795896805068)*(IKsin(j[1]))))+(((-0.511154255842196)*(IKcos(j[1]))))))*(IKsin(j[2]))))+(((-0.0755495005976634)*(IKcos(j[1]))))+(((-0.263068993055907)*(IKsin(j[1]))))))*(IKcos(j[3]))))+(((4.85791844427626e-6)*(IKsin(j[1]))))+(((1.39512189614552e-6)*(IKcos(j[1]))))))*(IKsin(j[4]))))+(((-0.196099898904425)*(((((-4.78075867782499e-7)*(IKcos(j[1]))))+(((((((-0.945998281949174)*(((((-0.0994021100426501)*(IKcos(j[1]))))+(((0.0285468069985741)*(IKsin(j[1]))))))*(IKcos(j[2]))))+(((-0.945998281949174)*(((((0.231299053576899)*(IKsin(j[1]))))+(((-0.805400547163128)*(IKcos(j[1]))))))*(IKsin(j[2]))))+(((0.48721923231618)*(IKsin(j[1]))))+(((0.139922114178016)*(IKcos(j[1]))))))*(IKsin(j[3]))))+(((((((0.309231318852313)*(IKcos(j[1]))))+(((-0.0888066337163656)*(IKsin(j[1]))))))*(IKcos(j[2]))))+(((-1.66469581065319e-6)*(IKsin(j[1]))))+(((((((0.0109601621006988)*(IKsin(j[1]))))+(((-0.0381641014798386)*(IKcos(j[1]))))))*(IKsin(j[2]))))+(((((((-0.945998281949174)*(((((0.146795896805068)*(IKsin(j[1]))))+(((-0.511154255842196)*(IKcos(j[1]))))))*(IKsin(j[2]))))+(((-0.945998281949174)*(((((-0.0630802599313394)*(IKcos(j[1]))))+(((0.0181157120800272)*(IKsin(j[1]))))))*(IKcos(j[2]))))+(((-0.220468694677162)*(IKcos(j[1]))))+(((-0.767688430105455)*(IKsin(j[1]))))))*(IKcos(j[3]))))))*(IKcos(j[4]))))))*(IKsin(j[5])))));
eerot[2]=((((((((0.999991471488533)*(((((-1.0)*(((((0.309231318852313)*(IKcos(j[1]))))+(((-0.0888066337163656)*(IKsin(j[1]))))))*(IKcos(j[2]))))+(((4.78075867782499e-7)*(IKcos(j[1]))))+(((1.66469581065319e-6)*(IKsin(j[1]))))+(((-1.0)*(((((-0.945998281949174)*(((((-0.0994021100426501)*(IKcos(j[1]))))+(((0.0285468069985741)*(IKsin(j[1]))))))*(IKcos(j[2]))))+(((-0.945998281949174)*(((((0.231299053576899)*(IKsin(j[1]))))+(((-0.805400547163128)*(IKcos(j[1]))))))*(IKsin(j[2]))))+(((0.48721923231618)*(IKsin(j[1]))))+(((0.139922114178016)*(IKcos(j[1]))))))*(IKsin(j[3]))))+(((-1.0)*(((((0.0109601621006988)*(IKsin(j[1]))))+(((-0.0381641014798386)*(IKcos(j[1]))))))*(IKsin(j[2]))))+(((-1.0)*(((((-0.945998281949174)*(((((0.146795896805068)*(IKsin(j[1]))))+(((-0.511154255842196)*(IKcos(j[1]))))))*(IKsin(j[2]))))+(((-0.945998281949174)*(((((-0.0630802599313394)*(IKcos(j[1]))))+(((0.0181157120800272)*(IKsin(j[1]))))))*(IKcos(j[2]))))+(((-0.220468694677162)*(IKcos(j[1]))))+(((-0.767688430105455)*(IKsin(j[1]))))))*(IKcos(j[3]))))))*(IKsin(j[4]))))+(((0.999991471488533)*(((((-1.0)*(((((0.324171637484235)*(((((-0.0630802599313394)*(IKcos(j[1]))))+(((0.0181157120800272)*(IKsin(j[1]))))))*(IKcos(j[2]))))+(((0.0755495005976634)*(IKcos(j[1]))))+(((0.324171637484235)*(((((0.146795896805068)*(IKsin(j[1]))))+(((-0.511154255842196)*(IKcos(j[1]))))))*(IKsin(j[2]))))+(((0.263068993055907)*(IKsin(j[1]))))))*(IKcos(j[3]))))+(((-1.0)*(((((-0.25915568546757)*(IKsin(j[1]))))+(((0.9023994160297)*(IKcos(j[1]))))))*(IKcos(j[2]))))+(((4.85791844427626e-6)*(IKsin(j[1]))))+(((-1.0)*(((((0.324171637484235)*(((((-0.0994021100426501)*(IKcos(j[1]))))+(((0.0285468069985741)*(IKsin(j[1]))))))*(IKcos(j[2]))))+(((0.324171637484235)*(((((0.231299053576899)*(IKsin(j[1]))))+(((-0.805400547163128)*(IKcos(j[1]))))))*(IKsin(j[2]))))+(((-0.0479480584043816)*(IKcos(j[1]))))+(((-0.166958713739222)*(IKsin(j[1]))))))*(IKsin(j[3]))))+(((-1.0)*(((((-0.111370552686976)*(IKcos(j[1]))))+(((0.0319839656473641)*(IKsin(j[1]))))))*(IKsin(j[2]))))+(((1.39512189614552e-6)*(IKcos(j[1]))))))*(IKcos(j[4]))))))*(IKsin(j[6]))))+(((((((0.00413000607730841)*(((((0.980583922797878)*(((((-0.233054011708033)*(IKcos(j[1]))))+(((-0.811511442202281)*(IKsin(j[1]))))+(((((((-0.0181157120800272)*(IKsin(j[1]))))+(((0.0630802599313394)*(IKcos(j[1]))))))*(IKcos(j[2]))))+(((((((-0.146795896805068)*(IKsin(j[1]))))+(((0.511154255842196)*(IKcos(j[1]))))))*(IKsin(j[2]))))))*(IKsin(j[3]))))+(((0.980583922797878)*(((((-0.147909480226238)*(IKcos(j[1]))))+(((((((-0.0994021100426501)*(IKcos(j[1]))))+(((0.0285468069985741)*(IKsin(j[1]))))))*(IKcos(j[2]))))+(((-0.515031836328808)*(IKsin(j[1]))))+(((((((0.231299053576899)*(IKsin(j[1]))))+(((-0.805400547163128)*(IKcos(j[1]))))))*(IKsin(j[2]))))))*(IKcos(j[3]))))))*(IKcos(j[5]))))+(((0.00413000607730841)*(((((0.196099898904425)*(((((-1.0)*(((((-0.0181157120800272)*(IKsin(j[1]))))+(((0.0630802599313394)*(IKcos(j[1]))))))*(IKcos(j[2]))))+(((0.233054011708033)*(IKcos(j[1]))))+(((0.811511442202281)*(IKsin(j[1]))))+(((-1.0)*(((((-0.146795896805068)*(IKsin(j[1]))))+(((0.511154255842196)*(IKcos(j[1]))))))*(IKsin(j[2]))))))*(IKsin(j[3]))))+(((0.196099898904425)*(((((0.147909480226238)*(IKcos(j[1]))))+(((-1.0)*(((((0.231299053576899)*(IKsin(j[1]))))+(((-0.805400547163128)*(IKcos(j[1]))))))*(IKsin(j[2]))))+(((0.515031836328808)*(IKsin(j[1]))))+(((-1.0)*(((((-0.0994021100426501)*(IKcos(j[1]))))+(((0.0285468069985741)*(IKsin(j[1]))))))*(IKcos(j[2]))))))*(IKcos(j[3]))))))*(IKsin(j[5]))))+(((0.00413000607730841)*(((((0.980583922797878)*(((((-4.78075867782499e-7)*(IKcos(j[1]))))+(((((((-0.945998281949174)*(((((-0.0994021100426501)*(IKcos(j[1]))))+(((0.0285468069985741)*(IKsin(j[1]))))))*(IKcos(j[2]))))+(((-0.945998281949174)*(((((0.231299053576899)*(IKsin(j[1]))))+(((-0.805400547163128)*(IKcos(j[1]))))))*(IKsin(j[2]))))+(((0.48721923231618)*(IKsin(j[1]))))+(((0.139922114178016)*(IKcos(j[1]))))))*(IKsin(j[3]))))+(((((((0.309231318852313)*(IKcos(j[1]))))+(((-0.0888066337163656)*(IKsin(j[1]))))))*(IKcos(j[2]))))+(((-1.66469581065319e-6)*(IKsin(j[1]))))+(((((((0.0109601621006988)*(IKsin(j[1]))))+(((-0.0381641014798386)*(IKcos(j[1]))))))*(IKsin(j[2]))))+(((((((-0.945998281949174)*(((((0.146795896805068)*(IKsin(j[1]))))+(((-0.511154255842196)*(IKcos(j[1]))))))*(IKsin(j[2]))))+(((-0.945998281949174)*(((((-0.0630802599313394)*(IKcos(j[1]))))+(((0.0181157120800272)*(IKsin(j[1]))))))*(IKcos(j[2]))))+(((-0.220468694677162)*(IKcos(j[1]))))+(((-0.767688430105455)*(IKsin(j[1]))))))*(IKcos(j[3]))))))*(IKcos(j[4]))))+(((0.980583922797878)*(((((((((0.111370552686976)*(IKcos(j[1]))))+(((-0.0319839656473641)*(IKsin(j[1]))))))*(IKsin(j[2]))))+(((((((0.25915568546757)*(IKsin(j[1]))))+(((-0.9023994160297)*(IKcos(j[1]))))))*(IKcos(j[2]))))+(((((((0.0479480584043816)*(IKcos(j[1]))))+(((-0.324171637484235)*(((((0.231299053576899)*(IKsin(j[1]))))+(((-0.805400547163128)*(IKcos(j[1]))))))*(IKsin(j[2]))))+(((-0.324171637484235)*(((((-0.0994021100426501)*(IKcos(j[1]))))+(((0.0285468069985741)*(IKsin(j[1]))))))*(IKcos(j[2]))))+(((0.166958713739222)*(IKsin(j[1]))))))*(IKsin(j[3]))))+(((((((-0.324171637484235)*(((((-0.0630802599313394)*(IKcos(j[1]))))+(((0.0181157120800272)*(IKsin(j[1]))))))*(IKcos(j[2]))))+(((-0.324171637484235)*(((((0.146795896805068)*(IKsin(j[1]))))+(((-0.511154255842196)*(IKcos(j[1]))))))*(IKsin(j[2]))))+(((-0.0755495005976634)*(IKcos(j[1]))))+(((-0.263068993055907)*(IKsin(j[1]))))))*(IKcos(j[3]))))+(((4.85791844427626e-6)*(IKsin(j[1]))))+(((1.39512189614552e-6)*(IKcos(j[1]))))))*(IKsin(j[4]))))))*(IKsin(j[5]))))+(((0.00413000607730841)*(((((0.196099898904425)*(((((-4.78075867782499e-7)*(IKcos(j[1]))))+(((((((-0.945998281949174)*(((((-0.0994021100426501)*(IKcos(j[1]))))+(((0.0285468069985741)*(IKsin(j[1]))))))*(IKcos(j[2]))))+(((-0.945998281949174)*(((((0.231299053576899)*(IKsin(j[1]))))+(((-0.805400547163128)*(IKcos(j[1]))))))*(IKsin(j[2]))))+(((0.48721923231618)*(IKsin(j[1]))))+(((0.139922114178016)*(IKcos(j[1]))))))*(IKsin(j[3]))))+(((((((0.309231318852313)*(IKcos(j[1]))))+(((-0.0888066337163656)*(IKsin(j[1]))))))*(IKcos(j[2]))))+(((-1.66469581065319e-6)*(IKsin(j[1]))))+(((((((0.0109601621006988)*(IKsin(j[1]))))+(((-0.0381641014798386)*(IKcos(j[1]))))))*(IKsin(j[2]))))+(((((((-0.945998281949174)*(((((0.146795896805068)*(IKsin(j[1]))))+(((-0.511154255842196)*(IKcos(j[1]))))))*(IKsin(j[2]))))+(((-0.945998281949174)*(((((-0.0630802599313394)*(IKcos(j[1]))))+(((0.0181157120800272)*(IKsin(j[1]))))))*(IKcos(j[2]))))+(((-0.220468694677162)*(IKcos(j[1]))))+(((-0.767688430105455)*(IKsin(j[1]))))))*(IKcos(j[3]))))))*(IKcos(j[4]))))+(((0.196099898904425)*(((((((((0.111370552686976)*(IKcos(j[1]))))+(((-0.0319839656473641)*(IKsin(j[1]))))))*(IKsin(j[2]))))+(((((((0.25915568546757)*(IKsin(j[1]))))+(((-0.9023994160297)*(IKcos(j[1]))))))*(IKcos(j[2]))))+(((((((0.0479480584043816)*(IKcos(j[1]))))+(((-0.324171637484235)*(((((0.231299053576899)*(IKsin(j[1]))))+(((-0.805400547163128)*(IKcos(j[1]))))))*(IKsin(j[2]))))+(((-0.324171637484235)*(((((-0.0994021100426501)*(IKcos(j[1]))))+(((0.0285468069985741)*(IKsin(j[1]))))))*(IKcos(j[2]))))+(((0.166958713739222)*(IKsin(j[1]))))))*(IKsin(j[3]))))+(((((((-0.324171637484235)*(((((-0.0630802599313394)*(IKcos(j[1]))))+(((0.0181157120800272)*(IKsin(j[1]))))))*(IKcos(j[2]))))+(((-0.324171637484235)*(((((0.146795896805068)*(IKsin(j[1]))))+(((-0.511154255842196)*(IKcos(j[1]))))))*(IKsin(j[2]))))+(((-0.0755495005976634)*(IKcos(j[1]))))+(((-0.263068993055907)*(IKsin(j[1]))))))*(IKcos(j[3]))))+(((4.85791844427626e-6)*(IKsin(j[1]))))+(((1.39512189614552e-6)*(IKcos(j[1]))))))*(IKsin(j[4]))))))*(IKcos(j[5]))))))*(IKsin(j[6]))))+(((((((0.999991471488533)*(((((0.980583922797878)*(((((-4.78075867782499e-7)*(IKcos(j[1]))))+(((((((-0.945998281949174)*(((((-0.0994021100426501)*(IKcos(j[1]))))+(((0.0285468069985741)*(IKsin(j[1]))))))*(IKcos(j[2]))))+(((-0.945998281949174)*(((((0.231299053576899)*(IKsin(j[1]))))+(((-0.805400547163128)*(IKcos(j[1]))))))*(IKsin(j[2]))))+(((0.48721923231618)*(IKsin(j[1]))))+(((0.139922114178016)*(IKcos(j[1]))))))*(IKsin(j[3]))))+(((((((0.309231318852313)*(IKcos(j[1]))))+(((-0.0888066337163656)*(IKsin(j[1]))))))*(IKcos(j[2]))))+(((-1.66469581065319e-6)*(IKsin(j[1]))))+(((((((0.0109601621006988)*(IKsin(j[1]))))+(((-0.0381641014798386)*(IKcos(j[1]))))))*(IKsin(j[2]))))+(((((((-0.945998281949174)*(((((0.146795896805068)*(IKsin(j[1]))))+(((-0.511154255842196)*(IKcos(j[1]))))))*(IKsin(j[2]))))+(((-0.945998281949174)*(((((-0.0630802599313394)*(IKcos(j[1]))))+(((0.0181157120800272)*(IKsin(j[1]))))))*(IKcos(j[2]))))+(((-0.220468694677162)*(IKcos(j[1]))))+(((-0.767688430105455)*(IKsin(j[1]))))))*(IKcos(j[3]))))))*(IKcos(j[4]))))+(((0.980583922797878)*(((((((((0.111370552686976)*(IKcos(j[1]))))+(((-0.0319839656473641)*(IKsin(j[1]))))))*(IKsin(j[2]))))+(((((((0.25915568546757)*(IKsin(j[1]))))+(((-0.9023994160297)*(IKcos(j[1]))))))*(IKcos(j[2]))))+(((((((0.0479480584043816)*(IKcos(j[1]))))+(((-0.324171637484235)*(((((0.231299053576899)*(IKsin(j[1]))))+(((-0.805400547163128)*(IKcos(j[1]))))))*(IKsin(j[2]))))+(((-0.324171637484235)*(((((-0.0994021100426501)*(IKcos(j[1]))))+(((0.0285468069985741)*(IKsin(j[1]))))))*(IKcos(j[2]))))+(((0.166958713739222)*(IKsin(j[1]))))))*(IKsin(j[3]))))+(((((((-0.324171637484235)*(((((-0.0630802599313394)*(IKcos(j[1]))))+(((0.0181157120800272)*(IKsin(j[1]))))))*(IKcos(j[2]))))+(((-0.324171637484235)*(((((0.146795896805068)*(IKsin(j[1]))))+(((-0.511154255842196)*(IKcos(j[1]))))))*(IKsin(j[2]))))+(((-0.0755495005976634)*(IKcos(j[1]))))+(((-0.263068993055907)*(IKsin(j[1]))))))*(IKcos(j[3]))))+(((4.85791844427626e-6)*(IKsin(j[1]))))+(((1.39512189614552e-6)*(IKcos(j[1]))))))*(IKsin(j[4]))))))*(IKsin(j[5]))))+(((0.999991471488533)*(((((0.980583922797878)*(((((-0.233054011708033)*(IKcos(j[1]))))+(((-0.811511442202281)*(IKsin(j[1]))))+(((((((-0.0181157120800272)*(IKsin(j[1]))))+(((0.0630802599313394)*(IKcos(j[1]))))))*(IKcos(j[2]))))+(((((((-0.146795896805068)*(IKsin(j[1]))))+(((0.511154255842196)*(IKcos(j[1]))))))*(IKsin(j[2]))))))*(IKsin(j[3]))))+(((0.980583922797878)*(((((-0.147909480226238)*(IKcos(j[1]))))+(((((((-0.0994021100426501)*(IKcos(j[1]))))+(((0.0285468069985741)*(IKsin(j[1]))))))*(IKcos(j[2]))))+(((-0.515031836328808)*(IKsin(j[1]))))+(((((((0.231299053576899)*(IKsin(j[1]))))+(((-0.805400547163128)*(IKcos(j[1]))))))*(IKsin(j[2]))))))*(IKcos(j[3]))))))*(IKcos(j[5]))))+(((0.999991471488533)*(((((0.196099898904425)*(((((-4.78075867782499e-7)*(IKcos(j[1]))))+(((((((-0.945998281949174)*(((((-0.0994021100426501)*(IKcos(j[1]))))+(((0.0285468069985741)*(IKsin(j[1]))))))*(IKcos(j[2]))))+(((-0.945998281949174)*(((((0.231299053576899)*(IKsin(j[1]))))+(((-0.805400547163128)*(IKcos(j[1]))))))*(IKsin(j[2]))))+(((0.48721923231618)*(IKsin(j[1]))))+(((0.139922114178016)*(IKcos(j[1]))))))*(IKsin(j[3]))))+(((((((0.309231318852313)*(IKcos(j[1]))))+(((-0.0888066337163656)*(IKsin(j[1]))))))*(IKcos(j[2]))))+(((-1.66469581065319e-6)*(IKsin(j[1]))))+(((((((0.0109601621006988)*(IKsin(j[1]))))+(((-0.0381641014798386)*(IKcos(j[1]))))))*(IKsin(j[2]))))+(((((((-0.945998281949174)*(((((0.146795896805068)*(IKsin(j[1]))))+(((-0.511154255842196)*(IKcos(j[1]))))))*(IKsin(j[2]))))+(((-0.945998281949174)*(((((-0.0630802599313394)*(IKcos(j[1]))))+(((0.0181157120800272)*(IKsin(j[1]))))))*(IKcos(j[2]))))+(((-0.220468694677162)*(IKcos(j[1]))))+(((-0.767688430105455)*(IKsin(j[1]))))))*(IKcos(j[3]))))))*(IKcos(j[4]))))+(((0.196099898904425)*(((((((((0.111370552686976)*(IKcos(j[1]))))+(((-0.0319839656473641)*(IKsin(j[1]))))))*(IKsin(j[2]))))+(((((((0.25915568546757)*(IKsin(j[1]))))+(((-0.9023994160297)*(IKcos(j[1]))))))*(IKcos(j[2]))))+(((((((0.0479480584043816)*(IKcos(j[1]))))+(((-0.324171637484235)*(((((0.231299053576899)*(IKsin(j[1]))))+(((-0.805400547163128)*(IKcos(j[1]))))))*(IKsin(j[2]))))+(((-0.324171637484235)*(((((-0.0994021100426501)*(IKcos(j[1]))))+(((0.0285468069985741)*(IKsin(j[1]))))))*(IKcos(j[2]))))+(((0.166958713739222)*(IKsin(j[1]))))))*(IKsin(j[3]))))+(((((((-0.324171637484235)*(((((-0.0630802599313394)*(IKcos(j[1]))))+(((0.0181157120800272)*(IKsin(j[1]))))))*(IKcos(j[2]))))+(((-0.324171637484235)*(((((0.146795896805068)*(IKsin(j[1]))))+(((-0.511154255842196)*(IKcos(j[1]))))))*(IKsin(j[2]))))+(((-0.0755495005976634)*(IKcos(j[1]))))+(((-0.263068993055907)*(IKsin(j[1]))))))*(IKcos(j[3]))))+(((4.85791844427626e-6)*(IKsin(j[1]))))+(((1.39512189614552e-6)*(IKcos(j[1]))))))*(IKsin(j[4]))))))*(IKcos(j[5]))))+(((0.999991471488533)*(((((0.196099898904425)*(((((-1.0)*(((((-0.0181157120800272)*(IKsin(j[1]))))+(((0.0630802599313394)*(IKcos(j[1]))))))*(IKcos(j[2]))))+(((0.233054011708033)*(IKcos(j[1]))))+(((0.811511442202281)*(IKsin(j[1]))))+(((-1.0)*(((((-0.146795896805068)*(IKsin(j[1]))))+(((0.511154255842196)*(IKcos(j[1]))))))*(IKsin(j[2]))))))*(IKsin(j[3]))))+(((0.196099898904425)*(((((0.147909480226238)*(IKcos(j[1]))))+(((-1.0)*(((((0.231299053576899)*(IKsin(j[1]))))+(((-0.805400547163128)*(IKcos(j[1]))))))*(IKsin(j[2]))))+(((0.515031836328808)*(IKsin(j[1]))))+(((-1.0)*(((((-0.0994021100426501)*(IKcos(j[1]))))+(((0.0285468069985741)*(IKsin(j[1]))))))*(IKcos(j[2]))))))*(IKcos(j[3]))))))*(IKsin(j[5]))))))*(IKcos(j[6]))))+(((((((0.00413000607730841)*(((((-4.78075867782499e-7)*(IKcos(j[1]))))+(((((((-0.945998281949174)*(((((-0.0994021100426501)*(IKcos(j[1]))))+(((0.0285468069985741)*(IKsin(j[1]))))))*(IKcos(j[2]))))+(((-0.945998281949174)*(((((0.231299053576899)*(IKsin(j[1]))))+(((-0.805400547163128)*(IKcos(j[1]))))))*(IKsin(j[2]))))+(((0.48721923231618)*(IKsin(j[1]))))+(((0.139922114178016)*(IKcos(j[1]))))))*(IKsin(j[3]))))+(((((((0.309231318852313)*(IKcos(j[1]))))+(((-0.0888066337163656)*(IKsin(j[1]))))))*(IKcos(j[2]))))+(((-1.66469581065319e-6)*(IKsin(j[1]))))+(((((((0.0109601621006988)*(IKsin(j[1]))))+(((-0.0381641014798386)*(IKcos(j[1]))))))*(IKsin(j[2]))))+(((((((-0.945998281949174)*(((((0.146795896805068)*(IKsin(j[1]))))+(((-0.511154255842196)*(IKcos(j[1]))))))*(IKsin(j[2]))))+(((-0.945998281949174)*(((((-0.0630802599313394)*(IKcos(j[1]))))+(((0.0181157120800272)*(IKsin(j[1]))))))*(IKcos(j[2]))))+(((-0.220468694677162)*(IKcos(j[1]))))+(((-0.767688430105455)*(IKsin(j[1]))))))*(IKcos(j[3]))))))*(IKsin(j[4]))))+(((0.00413000607730841)*(((((((((0.324171637484235)*(((((-0.0630802599313394)*(IKcos(j[1]))))+(((0.0181157120800272)*(IKsin(j[1]))))))*(IKcos(j[2]))))+(((0.0755495005976634)*(IKcos(j[1]))))+(((0.324171637484235)*(((((0.146795896805068)*(IKsin(j[1]))))+(((-0.511154255842196)*(IKcos(j[1]))))))*(IKsin(j[2]))))+(((0.263068993055907)*(IKsin(j[1]))))))*(IKcos(j[3]))))+(((-1.39512189614552e-6)*(IKcos(j[1]))))+(((((((0.324171637484235)*(((((-0.0994021100426501)*(IKcos(j[1]))))+(((0.0285468069985741)*(IKsin(j[1]))))))*(IKcos(j[2]))))+(((0.324171637484235)*(((((0.231299053576899)*(IKsin(j[1]))))+(((-0.805400547163128)*(IKcos(j[1]))))))*(IKsin(j[2]))))+(((-0.0479480584043816)*(IKcos(j[1]))))+(((-0.166958713739222)*(IKsin(j[1]))))))*(IKsin(j[3]))))+(((((((-0.111370552686976)*(IKcos(j[1]))))+(((0.0319839656473641)*(IKsin(j[1]))))))*(IKsin(j[2]))))+(((((((-0.25915568546757)*(IKsin(j[1]))))+(((0.9023994160297)*(IKcos(j[1]))))))*(IKcos(j[2]))))+(((-4.85791844427626e-6)*(IKsin(j[1]))))))*(IKcos(j[4]))))))*(IKcos(j[6])))));
eetrans[0]=((0.246)+((x3*(((((-0.000328739310097174)*x0))+(((0.00114469478422776)*x1))))))+((x4*(((((0.008)*x12))+(((0.00649209153761825)*x0))+(((0.00186443209366427)*x1))+(((0.008)*x2*x8))))))+((x5*((((x7*x8))+(((0.235338318238662)*x0))+(((0.0675856633953297)*x1))+((x6*x9))))))+((x4*(((((0.149359232535354)*x0))+(((0.0428937492656089)*x1))+((x11*x7))+((x10*x6))))))+(((0.0833604671736343)*x1))+(((0.29026717191969)*x0))+((x5*(((((-0.008)*x13))+(((-0.008)*x14))+(((-0.00412025469063046)*x0))+(((-0.0011832758418099)*x1))))))+((x2*(((((-0.000141273684925732)*x1))+(((4.05717002971248e-5)*x0)))))));
eerot[3]=((((((((0.00413000607730841)*(((((0.196099898904425)*(((((-1.0)*(((((-0.103420015812922)*(((((0.946191894238107)*(IKcos(j[0]))))+(((-0.168906816209186)*(IKsin(j[0]))))))*(IKsin(j[1]))))+(((-0.103420015812922)*(((((0.271732233620001)*(IKcos(j[0]))))+(((-0.0485075244479057)*(IKsin(j[0]))))))*(IKcos(j[1]))))))*(IKcos(j[2]))))+(((-1.0)*(((((-0.101810558420961)*(IKsin(j[0]))))+(((-0.0181744288701722)*(IKcos(j[0]))))))*(IKsin(j[2]))))+(((-1.0)*(((((-0.0905086834657259)*(IKsin(j[0]))))+(((0.507016736064526)*(IKcos(j[0]))))))*(IKcos(j[1]))))+(((-1.0)*(((((-0.145607662687148)*(IKcos(j[0]))))+(((0.0259927472111257)*(IKsin(j[0]))))))*(IKsin(j[1]))))+(((-1.0)*(((((0.837955424564001)*(((((0.168906816209186)*(IKsin(j[0]))))+(((-0.946191894238107)*(IKcos(j[0]))))))*(IKsin(j[1]))))+(((0.837955424564001)*(((((0.0485075244479057)*(IKsin(j[0]))))+(((-0.271732233620001)*(IKcos(j[0]))))))*(IKcos(j[1]))))))*(IKsin(j[2]))))+(((-1.0)*(((((0.824914877803331)*(IKsin(j[0]))))+(((0.147257386690619)*(IKcos(j[0]))))))*(IKcos(j[2]))))))*(IKcos(j[3]))))+(((0.196099898904425)*(((((-1.0)*(((((-0.22942714606775)*(IKcos(j[0]))))+(((0.0409555493238159)*(IKsin(j[0]))))))*(IKsin(j[1]))))+(((-1.0)*(((((0.0646086535405889)*(IKsin(j[0]))))+(((0.0115334342172636)*(IKcos(j[0]))))))*(IKsin(j[2]))))+(((-1.0)*(((((-0.142610275851393)*(IKsin(j[0]))))+(((0.798882425671523)*(IKcos(j[0]))))))*(IKcos(j[1]))))+(((-1.0)*(((((-0.531815483588428)*(((((0.168906816209186)*(IKsin(j[0]))))+(((-0.946191894238107)*(IKcos(j[0]))))))*(IKsin(j[1]))))+(((-0.531815483588428)*(((((0.0485075244479057)*(IKsin(j[0]))))+(((-0.271732233620001)*(IKcos(j[0]))))))*(IKcos(j[1]))))))*(IKsin(j[2]))))+(((-1.0)*(((((-0.0934581434992053)*(IKcos(j[0]))))+(((-0.52353919050829)*(IKsin(j[0]))))))*(IKcos(j[2]))))+(((-1.0)*(((((0.0656300100348293)*(((((0.271732233620001)*(IKcos(j[0]))))+(((-0.0485075244479057)*(IKsin(j[0]))))))*(IKcos(j[1]))))+(((0.0656300100348293)*(((((0.946191894238107)*(IKcos(j[0]))))+(((-0.168906816209186)*(IKsin(j[0]))))))*(IKsin(j[1]))))))*(IKcos(j[2]))))))*(IKsin(j[3]))))))*(IKsin(j[5]))))+(((0.00413000607730841)*(((((0.980583922797878)*(((((((((0.837955424564001)*(((((0.168906816209186)*(IKsin(j[0]))))+(((-0.946191894238107)*(IKcos(j[0]))))))*(IKsin(j[1]))))+(((0.837955424564001)*(((((0.0485075244479057)*(IKsin(j[0]))))+(((-0.271732233620001)*(IKcos(j[0]))))))*(IKcos(j[1]))))))*(IKsin(j[2]))))+(((((((-0.101810558420961)*(IKsin(j[0]))))+(((-0.0181744288701722)*(IKcos(j[0]))))))*(IKsin(j[2]))))+(((((((-0.145607662687148)*(IKcos(j[0]))))+(((0.0259927472111257)*(IKsin(j[0]))))))*(IKsin(j[1]))))+(((((((-0.103420015812922)*(((((0.946191894238107)*(IKcos(j[0]))))+(((-0.168906816209186)*(IKsin(j[0]))))))*(IKsin(j[1]))))+(((-0.103420015812922)*(((((0.271732233620001)*(IKcos(j[0]))))+(((-0.0485075244479057)*(IKsin(j[0]))))))*(IKcos(j[1]))))))*(IKcos(j[2]))))+(((((((0.824914877803331)*(IKsin(j[0]))))+(((0.147257386690619)*(IKcos(j[0]))))))*(IKcos(j[2]))))+(((((((-0.0905086834657259)*(IKsin(j[0]))))+(((0.507016736064526)*(IKcos(j[0]))))))*(IKcos(j[1]))))))*(IKcos(j[3]))))+(((0.980583922797878)*(((((((((0.0656300100348293)*(((((0.271732233620001)*(IKcos(j[0]))))+(((-0.0485075244479057)*(IKsin(j[0]))))))*(IKcos(j[1]))))+(((0.0656300100348293)*(((((0.946191894238107)*(IKcos(j[0]))))+(((-0.168906816209186)*(IKsin(j[0]))))))*(IKsin(j[1]))))))*(IKcos(j[2]))))+(((((((-0.0934581434992053)*(IKcos(j[0]))))+(((-0.52353919050829)*(IKsin(j[0]))))))*(IKcos(j[2]))))+(((((((0.0646086535405889)*(IKsin(j[0]))))+(((0.0115334342172636)*(IKcos(j[0]))))))*(IKsin(j[2]))))+(((((((-0.142610275851393)*(IKsin(j[0]))))+(((0.798882425671523)*(IKcos(j[0]))))))*(IKcos(j[1]))))+(((((((-0.531815483588428)*(((((0.168906816209186)*(IKsin(j[0]))))+(((-0.946191894238107)*(IKcos(j[0]))))))*(IKsin(j[1]))))+(((-0.531815483588428)*(((((0.0485075244479057)*(IKsin(j[0]))))+(((-0.271732233620001)*(IKcos(j[0]))))))*(IKcos(j[1]))))))*(IKsin(j[2]))))+(((((((-0.22942714606775)*(IKcos(j[0]))))+(((0.0409555493238159)*(IKsin(j[0]))))))*(IKsin(j[1]))))))*(IKsin(j[3]))))))*(IKcos(j[5]))))+(((0.00413000607730841)*(((((0.980583922797878)*(((((((((0.321730674246603)*(((((0.946191894238107)*(IKcos(j[0]))))+(((-0.168906816209186)*(IKsin(j[0]))))))*(IKsin(j[1]))))+(((0.321730674246603)*(((((0.271732233620001)*(IKcos(j[0]))))+(((-0.0485075244479057)*(IKsin(j[0]))))))*(IKcos(j[1]))))))*(IKcos(j[2]))))+(((((((8.40142576392187e-8)*(IKsin(j[0]))))+(((-4.70635888845422e-7)*(IKcos(j[0]))))))*(IKsin(j[1]))))+(((((((0.0397067222902749)*(((((0.0485075244479057)*(IKsin(j[0]))))+(((-0.271732233620001)*(IKcos(j[0]))))))*(IKcos(j[1]))))+(((0.0397067222902749)*(((((0.168906816209186)*(IKsin(j[0]))))+(((-0.946191894238107)*(IKcos(j[0]))))))*(IKsin(j[1]))))))*(IKsin(j[2]))))+(((((((1.63878924936753e-6)*(IKcos(j[0]))))+(((-2.92543908095302e-7)*(IKsin(j[0]))))))*(IKcos(j[1]))))+(((((((-0.945998281949174)*(((((0.142610275851393)*(IKsin(j[0]))))+(((-0.798882425671523)*(IKcos(j[0]))))))*(IKcos(j[1]))))+(((-0.945998281949174)*(((((-0.0409555493238159)*(IKsin(j[0]))))+(((0.22942714606775)*(IKcos(j[0]))))))*(IKsin(j[1]))))+(((-0.945998281949174)*(((((0.52353919050829)*(IKsin(j[0]))))+(((0.0934581434992053)*(IKcos(j[0]))))))*(IKcos(j[2]))))+(((-0.945998281949174)*(((((-0.0115334342172636)*(IKcos(j[0]))))+(((-0.0646086535405889)*(IKsin(j[0]))))))*(IKsin(j[2]))))+(((-0.945998281949174)*(((((0.531815483588428)*(((((0.0485075244479057)*(IKsin(j[0]))))+(((-0.271732233620001)*(IKcos(j[0]))))))*(IKcos(j[1]))))+(((0.531815483588428)*(((((0.168906816209186)*(IKsin(j[0]))))+(((-0.946191894238107)*(IKcos(j[0]))))))*(IKsin(j[1]))))))*(IKsin(j[2]))))+(((-0.945998281949174)*(((((-0.0656300100348293)*(((((0.946191894238107)*(IKcos(j[0]))))+(((-0.168906816209186)*(IKsin(j[0]))))))*(IKsin(j[1]))))+(((-0.0656300100348293)*(((((0.271732233620001)*(IKcos(j[0]))))+(((-0.0485075244479057)*(IKsin(j[0]))))))*(IKcos(j[1]))))))*(IKcos(j[2]))))))*(IKcos(j[3]))))+(((((((0.0565390674956448)*(IKcos(j[0]))))+(((0.31672379228264)*(IKsin(j[0]))))))*(IKsin(j[2]))))+(((((((0.0069778272054965)*(IKcos(j[0]))))+(((0.039088792799564)*(IKsin(j[0]))))))*(IKcos(j[2]))))+(((((((-0.945998281949174)*(((((0.837955424564001)*(((((0.168906816209186)*(IKsin(j[0]))))+(((-0.946191894238107)*(IKcos(j[0]))))))*(IKsin(j[1]))))+(((0.837955424564001)*(((((0.0485075244479057)*(IKsin(j[0]))))+(((-0.271732233620001)*(IKcos(j[0]))))))*(IKcos(j[1]))))))*(IKsin(j[2]))))+(((-0.945998281949174)*(((((0.824914877803331)*(IKsin(j[0]))))+(((0.147257386690619)*(IKcos(j[0]))))))*(IKcos(j[2]))))+(((-0.945998281949174)*(((((-0.101810558420961)*(IKsin(j[0]))))+(((-0.0181744288701722)*(IKcos(j[0]))))))*(IKsin(j[2]))))+(((-0.945998281949174)*(((((-0.0905086834657259)*(IKsin(j[0]))))+(((0.507016736064526)*(IKcos(j[0]))))))*(IKcos(j[1]))))+(((-0.945998281949174)*(((((-0.145607662687148)*(IKcos(j[0]))))+(((0.0259927472111257)*(IKsin(j[0]))))))*(IKsin(j[1]))))+(((-0.945998281949174)*(((((-0.103420015812922)*(((((0.946191894238107)*(IKcos(j[0]))))+(((-0.168906816209186)*(IKsin(j[0]))))))*(IKsin(j[1]))))+(((-0.103420015812922)*(((((0.271732233620001)*(IKcos(j[0]))))+(((-0.0485075244479057)*(IKsin(j[0]))))))*(IKcos(j[1]))))))*(IKcos(j[2]))))))*(IKsin(j[3]))))))*(IKcos(j[4]))))+(((0.980583922797878)*(((((((((-0.020362708469395)*(IKcos(j[0]))))+(((-0.114068988634618)*(IKsin(j[0]))))))*(IKcos(j[2]))))+(((((((-0.324171637484235)*(((((-0.145607662687148)*(IKcos(j[0]))))+(((0.0259927472111257)*(IKsin(j[0]))))))*(IKsin(j[1]))))+(((-0.324171637484235)*(((((-0.0905086834657259)*(IKsin(j[0]))))+(((0.507016736064526)*(IKcos(j[0]))))))*(IKcos(j[1]))))+(((-0.324171637484235)*(((((0.837955424564001)*(((((0.168906816209186)*(IKsin(j[0]))))+(((-0.946191894238107)*(IKcos(j[0]))))))*(IKsin(j[1]))))+(((0.837955424564001)*(((((0.0485075244479057)*(IKsin(j[0]))))+(((-0.271732233620001)*(IKcos(j[0]))))))*(IKcos(j[1]))))))*(IKsin(j[2]))))+(((-0.324171637484235)*(((((-0.103420015812922)*(((((0.946191894238107)*(IKcos(j[0]))))+(((-0.168906816209186)*(IKsin(j[0]))))))*(IKsin(j[1]))))+(((-0.103420015812922)*(((((0.271732233620001)*(IKcos(j[0]))))+(((-0.0485075244479057)*(IKsin(j[0]))))))*(IKcos(j[1]))))))*(IKcos(j[2]))))+(((-0.324171637484235)*(((((-0.101810558420961)*(IKsin(j[0]))))+(((-0.0181744288701722)*(IKcos(j[0]))))))*(IKsin(j[2]))))+(((-0.324171637484235)*(((((0.824914877803331)*(IKsin(j[0]))))+(((0.147257386690619)*(IKcos(j[0]))))))*(IKcos(j[2]))))))*(IKsin(j[3]))))+(((((((-0.324171637484235)*(((((0.531815483588428)*(((((0.0485075244479057)*(IKsin(j[0]))))+(((-0.271732233620001)*(IKcos(j[0]))))))*(IKcos(j[1]))))+(((0.531815483588428)*(((((0.168906816209186)*(IKsin(j[0]))))+(((-0.946191894238107)*(IKcos(j[0]))))))*(IKsin(j[1]))))))*(IKsin(j[2]))))+(((-0.324171637484235)*(((((0.52353919050829)*(IKsin(j[0]))))+(((0.0934581434992053)*(IKcos(j[0]))))))*(IKcos(j[2]))))+(((-0.324171637484235)*(((((-0.0409555493238159)*(IKsin(j[0]))))+(((0.22942714606775)*(IKcos(j[0]))))))*(IKsin(j[1]))))+(((-0.324171637484235)*(((((0.142610275851393)*(IKsin(j[0]))))+(((-0.798882425671523)*(IKcos(j[0]))))))*(IKcos(j[1]))))+(((-0.324171637484235)*(((((-0.0656300100348293)*(((((0.946191894238107)*(IKcos(j[0]))))+(((-0.168906816209186)*(IKsin(j[0]))))))*(IKsin(j[1]))))+(((-0.0656300100348293)*(((((0.271732233620001)*(IKcos(j[0]))))+(((-0.0485075244479057)*(IKsin(j[0]))))))*(IKcos(j[1]))))))*(IKcos(j[2]))))+(((-0.324171637484235)*(((((-0.0115334342172636)*(IKcos(j[0]))))+(((-0.0646086535405889)*(IKsin(j[0]))))))*(IKsin(j[2]))))))*(IKcos(j[3]))))+(((((((8.53702182586258e-7)*(IKsin(j[0]))))+(((-4.78231786842813e-6)*(IKcos(j[0]))))))*(IKcos(j[1]))))+(((((((-0.164992413059238)*(IKcos(j[0]))))+(((-0.924263966079929)*(IKsin(j[0]))))))*(IKsin(j[2]))))+(((((((1.37341053562418e-6)*(IKcos(j[0]))))+(((-2.45170564589572e-7)*(IKsin(j[0]))))))*(IKsin(j[1]))))+(((((((-0.115872231636118)*(((((0.168906816209186)*(IKsin(j[0]))))+(((-0.946191894238107)*(IKcos(j[0]))))))*(IKsin(j[1]))))+(((-0.115872231636118)*(((((0.0485075244479057)*(IKsin(j[0]))))+(((-0.271732233620001)*(IKcos(j[0]))))))*(IKcos(j[1]))))))*(IKsin(j[2]))))+(((((((-0.938875058440104)*(((((0.271732233620001)*(IKcos(j[0]))))+(((-0.0485075244479057)*(IKsin(j[0]))))))*(IKcos(j[1]))))+(((-0.938875058440104)*(((((0.946191894238107)*(IKcos(j[0]))))+(((-0.168906816209186)*(IKsin(j[0]))))))*(IKsin(j[1]))))))*(IKcos(j[2]))))))*(IKsin(j[4]))))))*(IKsin(j[5]))))+(((0.00413000607730841)*(((((0.196099898904425)*(((((((((-0.020362708469395)*(IKcos(j[0]))))+(((-0.114068988634618)*(IKsin(j[0]))))))*(IKcos(j[2]))))+(((((((-0.324171637484235)*(((((-0.145607662687148)*(IKcos(j[0]))))+(((0.0259927472111257)*(IKsin(j[0]))))))*(IKsin(j[1]))))+(((-0.324171637484235)*(((((-0.0905086834657259)*(IKsin(j[0]))))+(((0.507016736064526)*(IKcos(j[0]))))))*(IKcos(j[1]))))+(((-0.324171637484235)*(((((0.837955424564001)*(((((0.168906816209186)*(IKsin(j[0]))))+(((-0.946191894238107)*(IKcos(j[0]))))))*(IKsin(j[1]))))+(((0.837955424564001)*(((((0.0485075244479057)*(IKsin(j[0]))))+(((-0.271732233620001)*(IKcos(j[0]))))))*(IKcos(j[1]))))))*(IKsin(j[2]))))+(((-0.324171637484235)*(((((-0.103420015812922)*(((((0.946191894238107)*(IKcos(j[0]))))+(((-0.168906816209186)*(IKsin(j[0]))))))*(IKsin(j[1]))))+(((-0.103420015812922)*(((((0.271732233620001)*(IKcos(j[0]))))+(((-0.0485075244479057)*(IKsin(j[0]))))))*(IKcos(j[1]))))))*(IKcos(j[2]))))+(((-0.324171637484235)*(((((-0.101810558420961)*(IKsin(j[0]))))+(((-0.0181744288701722)*(IKcos(j[0]))))))*(IKsin(j[2]))))+(((-0.324171637484235)*(((((0.824914877803331)*(IKsin(j[0]))))+(((0.147257386690619)*(IKcos(j[0]))))))*(IKcos(j[2]))))))*(IKsin(j[3]))))+(((((((-0.324171637484235)*(((((0.531815483588428)*(((((0.0485075244479057)*(IKsin(j[0]))))+(((-0.271732233620001)*(IKcos(j[0]))))))*(IKcos(j[1]))))+(((0.531815483588428)*(((((0.168906816209186)*(IKsin(j[0]))))+(((-0.946191894238107)*(IKcos(j[0]))))))*(IKsin(j[1]))))))*(IKsin(j[2]))))+(((-0.324171637484235)*(((((0.52353919050829)*(IKsin(j[0]))))+(((0.0934581434992053)*(IKcos(j[0]))))))*(IKcos(j[2]))))+(((-0.324171637484235)*(((((-0.0409555493238159)*(IKsin(j[0]))))+(((0.22942714606775)*(IKcos(j[0]))))))*(IKsin(j[1]))))+(((-0.324171637484235)*(((((0.142610275851393)*(IKsin(j[0]))))+(((-0.798882425671523)*(IKcos(j[0]))))))*(IKcos(j[1]))))+(((-0.324171637484235)*(((((-0.0656300100348293)*(((((0.946191894238107)*(IKcos(j[0]))))+(((-0.168906816209186)*(IKsin(j[0]))))))*(IKsin(j[1]))))+(((-0.0656300100348293)*(((((0.271732233620001)*(IKcos(j[0]))))+(((-0.0485075244479057)*(IKsin(j[0]))))))*(IKcos(j[1]))))))*(IKcos(j[2]))))+(((-0.324171637484235)*(((((-0.0115334342172636)*(IKcos(j[0]))))+(((-0.0646086535405889)*(IKsin(j[0]))))))*(IKsin(j[2]))))))*(IKcos(j[3]))))+(((((((8.53702182586258e-7)*(IKsin(j[0]))))+(((-4.78231786842813e-6)*(IKcos(j[0]))))))*(IKcos(j[1]))))+(((((((-0.164992413059238)*(IKcos(j[0]))))+(((-0.924263966079929)*(IKsin(j[0]))))))*(IKsin(j[2]))))+(((((((1.37341053562418e-6)*(IKcos(j[0]))))+(((-2.45170564589572e-7)*(IKsin(j[0]))))))*(IKsin(j[1]))))+(((((((-0.115872231636118)*(((((0.168906816209186)*(IKsin(j[0]))))+(((-0.946191894238107)*(IKcos(j[0]))))))*(IKsin(j[1]))))+(((-0.115872231636118)*(((((0.0485075244479057)*(IKsin(j[0]))))+(((-0.271732233620001)*(IKcos(j[0]))))))*(IKcos(j[1]))))))*(IKsin(j[2]))))+(((((((-0.938875058440104)*(((((0.271732233620001)*(IKcos(j[0]))))+(((-0.0485075244479057)*(IKsin(j[0]))))))*(IKcos(j[1]))))+(((-0.938875058440104)*(((((0.946191894238107)*(IKcos(j[0]))))+(((-0.168906816209186)*(IKsin(j[0]))))))*(IKsin(j[1]))))))*(IKcos(j[2]))))))*(IKsin(j[4]))))+(((0.196099898904425)*(((((((((0.321730674246603)*(((((0.946191894238107)*(IKcos(j[0]))))+(((-0.168906816209186)*(IKsin(j[0]))))))*(IKsin(j[1]))))+(((0.321730674246603)*(((((0.271732233620001)*(IKcos(j[0]))))+(((-0.0485075244479057)*(IKsin(j[0]))))))*(IKcos(j[1]))))))*(IKcos(j[2]))))+(((((((8.40142576392187e-8)*(IKsin(j[0]))))+(((-4.70635888845422e-7)*(IKcos(j[0]))))))*(IKsin(j[1]))))+(((((((0.0397067222902749)*(((((0.0485075244479057)*(IKsin(j[0]))))+(((-0.271732233620001)*(IKcos(j[0]))))))*(IKcos(j[1]))))+(((0.0397067222902749)*(((((0.168906816209186)*(IKsin(j[0]))))+(((-0.946191894238107)*(IKcos(j[0]))))))*(IKsin(j[1]))))))*(IKsin(j[2]))))+(((((((1.63878924936753e-6)*(IKcos(j[0]))))+(((-2.92543908095302e-7)*(IKsin(j[0]))))))*(IKcos(j[1]))))+(((((((-0.945998281949174)*(((((0.142610275851393)*(IKsin(j[0]))))+(((-0.798882425671523)*(IKcos(j[0]))))))*(IKcos(j[1]))))+(((-0.945998281949174)*(((((-0.0409555493238159)*(IKsin(j[0]))))+(((0.22942714606775)*(IKcos(j[0]))))))*(IKsin(j[1]))))+(((-0.945998281949174)*(((((0.52353919050829)*(IKsin(j[0]))))+(((0.0934581434992053)*(IKcos(j[0]))))))*(IKcos(j[2]))))+(((-0.945998281949174)*(((((-0.0115334342172636)*(IKcos(j[0]))))+(((-0.0646086535405889)*(IKsin(j[0]))))))*(IKsin(j[2]))))+(((-0.945998281949174)*(((((0.531815483588428)*(((((0.0485075244479057)*(IKsin(j[0]))))+(((-0.271732233620001)*(IKcos(j[0]))))))*(IKcos(j[1]))))+(((0.531815483588428)*(((((0.168906816209186)*(IKsin(j[0]))))+(((-0.946191894238107)*(IKcos(j[0]))))))*(IKsin(j[1]))))))*(IKsin(j[2]))))+(((-0.945998281949174)*(((((-0.0656300100348293)*(((((0.946191894238107)*(IKcos(j[0]))))+(((-0.168906816209186)*(IKsin(j[0]))))))*(IKsin(j[1]))))+(((-0.0656300100348293)*(((((0.271732233620001)*(IKcos(j[0]))))+(((-0.0485075244479057)*(IKsin(j[0]))))))*(IKcos(j[1]))))))*(IKcos(j[2]))))))*(IKcos(j[3]))))+(((((((0.0565390674956448)*(IKcos(j[0]))))+(((0.31672379228264)*(IKsin(j[0]))))))*(IKsin(j[2]))))+(((((((0.0069778272054965)*(IKcos(j[0]))))+(((0.039088792799564)*(IKsin(j[0]))))))*(IKcos(j[2]))))+(((((((-0.945998281949174)*(((((0.837955424564001)*(((((0.168906816209186)*(IKsin(j[0]))))+(((-0.946191894238107)*(IKcos(j[0]))))))*(IKsin(j[1]))))+(((0.837955424564001)*(((((0.0485075244479057)*(IKsin(j[0]))))+(((-0.271732233620001)*(IKcos(j[0]))))))*(IKcos(j[1]))))))*(IKsin(j[2]))))+(((-0.945998281949174)*(((((0.824914877803331)*(IKsin(j[0]))))+(((0.147257386690619)*(IKcos(j[0]))))))*(IKcos(j[2]))))+(((-0.945998281949174)*(((((-0.101810558420961)*(IKsin(j[0]))))+(((-0.0181744288701722)*(IKcos(j[0]))))))*(IKsin(j[2]))))+(((-0.945998281949174)*(((((-0.0905086834657259)*(IKsin(j[0]))))+(((0.507016736064526)*(IKcos(j[0]))))))*(IKcos(j[1]))))+(((-0.945998281949174)*(((((-0.145607662687148)*(IKcos(j[0]))))+(((0.0259927472111257)*(IKsin(j[0]))))))*(IKsin(j[1]))))+(((-0.945998281949174)*(((((-0.103420015812922)*(((((0.946191894238107)*(IKcos(j[0]))))+(((-0.168906816209186)*(IKsin(j[0]))))))*(IKsin(j[1]))))+(((-0.103420015812922)*(((((0.271732233620001)*(IKcos(j[0]))))+(((-0.0485075244479057)*(IKsin(j[0]))))))*(IKcos(j[1]))))))*(IKcos(j[2]))))))*(IKsin(j[3]))))))*(IKcos(j[4]))))))*(IKcos(j[5]))))))*(IKcos(j[6]))))+(((((((0.00413000607730841)*(((((-1.0)*(((((-0.945998281949174)*(((((0.837955424564001)*(((((0.168906816209186)*(IKsin(j[0]))))+(((-0.946191894238107)*(IKcos(j[0]))))))*(IKsin(j[1]))))+(((0.837955424564001)*(((((0.0485075244479057)*(IKsin(j[0]))))+(((-0.271732233620001)*(IKcos(j[0]))))))*(IKcos(j[1]))))))*(IKsin(j[2]))))+(((-0.945998281949174)*(((((0.824914877803331)*(IKsin(j[0]))))+(((0.147257386690619)*(IKcos(j[0]))))))*(IKcos(j[2]))))+(((-0.945998281949174)*(((((-0.101810558420961)*(IKsin(j[0]))))+(((-0.0181744288701722)*(IKcos(j[0]))))))*(IKsin(j[2]))))+(((-0.945998281949174)*(((((-0.0905086834657259)*(IKsin(j[0]))))+(((0.507016736064526)*(IKcos(j[0]))))))*(IKcos(j[1]))))+(((-0.945998281949174)*(((((-0.145607662687148)*(IKcos(j[0]))))+(((0.0259927472111257)*(IKsin(j[0]))))))*(IKsin(j[1]))))+(((-0.945998281949174)*(((((-0.103420015812922)*(((((0.946191894238107)*(IKcos(j[0]))))+(((-0.168906816209186)*(IKsin(j[0]))))))*(IKsin(j[1]))))+(((-0.103420015812922)*(((((0.271732233620001)*(IKcos(j[0]))))+(((-0.0485075244479057)*(IKsin(j[0]))))))*(IKcos(j[1]))))))*(IKcos(j[2]))))))*(IKsin(j[3]))))+(((-1.0)*(((((0.0565390674956448)*(IKcos(j[0]))))+(((0.31672379228264)*(IKsin(j[0]))))))*(IKsin(j[2]))))+(((-1.0)*(((((0.321730674246603)*(((((0.946191894238107)*(IKcos(j[0]))))+(((-0.168906816209186)*(IKsin(j[0]))))))*(IKsin(j[1]))))+(((0.321730674246603)*(((((0.271732233620001)*(IKcos(j[0]))))+(((-0.0485075244479057)*(IKsin(j[0]))))))*(IKcos(j[1]))))))*(IKcos(j[2]))))+(((-1.0)*(((((1.63878924936753e-6)*(IKcos(j[0]))))+(((-2.92543908095302e-7)*(IKsin(j[0]))))))*(IKcos(j[1]))))+(((-1.0)*(((((-0.945998281949174)*(((((0.142610275851393)*(IKsin(j[0]))))+(((-0.798882425671523)*(IKcos(j[0]))))))*(IKcos(j[1]))))+(((-0.945998281949174)*(((((-0.0409555493238159)*(IKsin(j[0]))))+(((0.22942714606775)*(IKcos(j[0]))))))*(IKsin(j[1]))))+(((-0.945998281949174)*(((((0.52353919050829)*(IKsin(j[0]))))+(((0.0934581434992053)*(IKcos(j[0]))))))*(IKcos(j[2]))))+(((-0.945998281949174)*(((((-0.0115334342172636)*(IKcos(j[0]))))+(((-0.0646086535405889)*(IKsin(j[0]))))))*(IKsin(j[2]))))+(((-0.945998281949174)*(((((0.531815483588428)*(((((0.0485075244479057)*(IKsin(j[0]))))+(((-0.271732233620001)*(IKcos(j[0]))))))*(IKcos(j[1]))))+(((0.531815483588428)*(((((0.168906816209186)*(IKsin(j[0]))))+(((-0.946191894238107)*(IKcos(j[0]))))))*(IKsin(j[1]))))))*(IKsin(j[2]))))+(((-0.945998281949174)*(((((-0.0656300100348293)*(((((0.946191894238107)*(IKcos(j[0]))))+(((-0.168906816209186)*(IKsin(j[0]))))))*(IKsin(j[1]))))+(((-0.0656300100348293)*(((((0.271732233620001)*(IKcos(j[0]))))+(((-0.0485075244479057)*(IKsin(j[0]))))))*(IKcos(j[1]))))))*(IKcos(j[2]))))))*(IKcos(j[3]))))+(((-1.0)*(((((8.40142576392187e-8)*(IKsin(j[0]))))+(((-4.70635888845422e-7)*(IKcos(j[0]))))))*(IKsin(j[1]))))+(((-1.0)*(((((0.0069778272054965)*(IKcos(j[0]))))+(((0.039088792799564)*(IKsin(j[0]))))))*(IKcos(j[2]))))+(((-1.0)*(((((0.0397067222902749)*(((((0.0485075244479057)*(IKsin(j[0]))))+(((-0.271732233620001)*(IKcos(j[0]))))))*(IKcos(j[1]))))+(((0.0397067222902749)*(((((0.168906816209186)*(IKsin(j[0]))))+(((-0.946191894238107)*(IKcos(j[0]))))))*(IKsin(j[1]))))))*(IKsin(j[2]))))))*(IKsin(j[4]))))+(((0.00413000607730841)*(((((-1.0)*(((((0.115872231636118)*(((((0.0485075244479057)*(IKsin(j[0]))))+(((-0.271732233620001)*(IKcos(j[0]))))))*(IKcos(j[1]))))+(((0.115872231636118)*(((((0.168906816209186)*(IKsin(j[0]))))+(((-0.946191894238107)*(IKcos(j[0]))))))*(IKsin(j[1]))))))*(IKsin(j[2]))))+(((-1.0)*(((((0.938875058440104)*(((((0.271732233620001)*(IKcos(j[0]))))+(((-0.0485075244479057)*(IKsin(j[0]))))))*(IKcos(j[1]))))+(((0.938875058440104)*(((((0.946191894238107)*(IKcos(j[0]))))+(((-0.168906816209186)*(IKsin(j[0]))))))*(IKsin(j[1]))))))*(IKcos(j[2]))))+(((-1.0)*(((((0.924263966079929)*(IKsin(j[0]))))+(((0.164992413059238)*(IKcos(j[0]))))))*(IKsin(j[2]))))+(((-1.0)*(((((0.324171637484235)*(((((0.52353919050829)*(IKsin(j[0]))))+(((0.0934581434992053)*(IKcos(j[0]))))))*(IKcos(j[2]))))+(((0.324171637484235)*(((((0.531815483588428)*(((((0.0485075244479057)*(IKsin(j[0]))))+(((-0.271732233620001)*(IKcos(j[0]))))))*(IKcos(j[1]))))+(((0.531815483588428)*(((((0.168906816209186)*(IKsin(j[0]))))+(((-0.946191894238107)*(IKcos(j[0]))))))*(IKsin(j[1]))))))*(IKsin(j[2]))))+(((0.324171637484235)*(((((0.142610275851393)*(IKsin(j[0]))))+(((-0.798882425671523)*(IKcos(j[0]))))))*(IKcos(j[1]))))+(((0.324171637484235)*(((((-0.0409555493238159)*(IKsin(j[0]))))+(((0.22942714606775)*(IKcos(j[0]))))))*(IKsin(j[1]))))+(((0.324171637484235)*(((((-0.0115334342172636)*(IKcos(j[0]))))+(((-0.0646086535405889)*(IKsin(j[0]))))))*(IKsin(j[2]))))+(((0.324171637484235)*(((((-0.0656300100348293)*(((((0.946191894238107)*(IKcos(j[0]))))+(((-0.168906816209186)*(IKsin(j[0]))))))*(IKsin(j[1]))))+(((-0.0656300100348293)*(((((0.271732233620001)*(IKcos(j[0]))))+(((-0.0485075244479057)*(IKsin(j[0]))))))*(IKcos(j[1]))))))*(IKcos(j[2]))))))*(IKcos(j[3]))))+(((-1.0)*(((((0.324171637484235)*(((((0.824914877803331)*(IKsin(j[0]))))+(((0.147257386690619)*(IKcos(j[0]))))))*(IKcos(j[2]))))+(((0.324171637484235)*(((((-0.145607662687148)*(IKcos(j[0]))))+(((0.0259927472111257)*(IKsin(j[0]))))))*(IKsin(j[1]))))+(((0.324171637484235)*(((((-0.0905086834657259)*(IKsin(j[0]))))+(((0.507016736064526)*(IKcos(j[0]))))))*(IKcos(j[1]))))+(((0.324171637484235)*(((((-0.101810558420961)*(IKsin(j[0]))))+(((-0.0181744288701722)*(IKcos(j[0]))))))*(IKsin(j[2]))))+(((0.324171637484235)*(((((-0.103420015812922)*(((((0.946191894238107)*(IKcos(j[0]))))+(((-0.168906816209186)*(IKsin(j[0]))))))*(IKsin(j[1]))))+(((-0.103420015812922)*(((((0.271732233620001)*(IKcos(j[0]))))+(((-0.0485075244479057)*(IKsin(j[0]))))))*(IKcos(j[1]))))))*(IKcos(j[2]))))+(((0.324171637484235)*(((((0.837955424564001)*(((((0.168906816209186)*(IKsin(j[0]))))+(((-0.946191894238107)*(IKcos(j[0]))))))*(IKsin(j[1]))))+(((0.837955424564001)*(((((0.0485075244479057)*(IKsin(j[0]))))+(((-0.271732233620001)*(IKcos(j[0]))))))*(IKcos(j[1]))))))*(IKsin(j[2]))))))*(IKsin(j[3]))))+(((-1.0)*(((((0.114068988634618)*(IKsin(j[0]))))+(((0.020362708469395)*(IKcos(j[0]))))))*(IKcos(j[2]))))+(((-1.0)*(((((2.45170564589572e-7)*(IKsin(j[0]))))+(((-1.37341053562418e-6)*(IKcos(j[0]))))))*(IKsin(j[1]))))+(((-1.0)*(((((4.78231786842813e-6)*(IKcos(j[0]))))+(((-8.53702182586258e-7)*(IKsin(j[0]))))))*(IKcos(j[1]))))))*(IKcos(j[4]))))))*(IKsin(j[6]))))+(((((((-0.999991471488533)*(((((((((0.321730674246603)*(((((0.946191894238107)*(IKcos(j[0]))))+(((-0.168906816209186)*(IKsin(j[0]))))))*(IKsin(j[1]))))+(((0.321730674246603)*(((((0.271732233620001)*(IKcos(j[0]))))+(((-0.0485075244479057)*(IKsin(j[0]))))))*(IKcos(j[1]))))))*(IKcos(j[2]))))+(((((((8.40142576392187e-8)*(IKsin(j[0]))))+(((-4.70635888845422e-7)*(IKcos(j[0]))))))*(IKsin(j[1]))))+(((((((0.0397067222902749)*(((((0.0485075244479057)*(IKsin(j[0]))))+(((-0.271732233620001)*(IKcos(j[0]))))))*(IKcos(j[1]))))+(((0.0397067222902749)*(((((0.168906816209186)*(IKsin(j[0]))))+(((-0.946191894238107)*(IKcos(j[0]))))))*(IKsin(j[1]))))))*(IKsin(j[2]))))+(((((((1.63878924936753e-6)*(IKcos(j[0]))))+(((-2.92543908095302e-7)*(IKsin(j[0]))))))*(IKcos(j[1]))))+(((((((-0.945998281949174)*(((((0.142610275851393)*(IKsin(j[0]))))+(((-0.798882425671523)*(IKcos(j[0]))))))*(IKcos(j[1]))))+(((-0.945998281949174)*(((((-0.0409555493238159)*(IKsin(j[0]))))+(((0.22942714606775)*(IKcos(j[0]))))))*(IKsin(j[1]))))+(((-0.945998281949174)*(((((0.52353919050829)*(IKsin(j[0]))))+(((0.0934581434992053)*(IKcos(j[0]))))))*(IKcos(j[2]))))+(((-0.945998281949174)*(((((-0.0115334342172636)*(IKcos(j[0]))))+(((-0.0646086535405889)*(IKsin(j[0]))))))*(IKsin(j[2]))))+(((-0.945998281949174)*(((((0.531815483588428)*(((((0.0485075244479057)*(IKsin(j[0]))))+(((-0.271732233620001)*(IKcos(j[0]))))))*(IKcos(j[1]))))+(((0.531815483588428)*(((((0.168906816209186)*(IKsin(j[0]))))+(((-0.946191894238107)*(IKcos(j[0]))))))*(IKsin(j[1]))))))*(IKsin(j[2]))))+(((-0.945998281949174)*(((((-0.0656300100348293)*(((((0.946191894238107)*(IKcos(j[0]))))+(((-0.168906816209186)*(IKsin(j[0]))))))*(IKsin(j[1]))))+(((-0.0656300100348293)*(((((0.271732233620001)*(IKcos(j[0]))))+(((-0.0485075244479057)*(IKsin(j[0]))))))*(IKcos(j[1]))))))*(IKcos(j[2]))))))*(IKcos(j[3]))))+(((((((0.0565390674956448)*(IKcos(j[0]))))+(((0.31672379228264)*(IKsin(j[0]))))))*(IKsin(j[2]))))+(((((((0.0069778272054965)*(IKcos(j[0]))))+(((0.039088792799564)*(IKsin(j[0]))))))*(IKcos(j[2]))))+(((((((-0.945998281949174)*(((((0.837955424564001)*(((((0.168906816209186)*(IKsin(j[0]))))+(((-0.946191894238107)*(IKcos(j[0]))))))*(IKsin(j[1]))))+(((0.837955424564001)*(((((0.0485075244479057)*(IKsin(j[0]))))+(((-0.271732233620001)*(IKcos(j[0]))))))*(IKcos(j[1]))))))*(IKsin(j[2]))))+(((-0.945998281949174)*(((((0.824914877803331)*(IKsin(j[0]))))+(((0.147257386690619)*(IKcos(j[0]))))))*(IKcos(j[2]))))+(((-0.945998281949174)*(((((-0.101810558420961)*(IKsin(j[0]))))+(((-0.0181744288701722)*(IKcos(j[0]))))))*(IKsin(j[2]))))+(((-0.945998281949174)*(((((-0.0905086834657259)*(IKsin(j[0]))))+(((0.507016736064526)*(IKcos(j[0]))))))*(IKcos(j[1]))))+(((-0.945998281949174)*(((((-0.145607662687148)*(IKcos(j[0]))))+(((0.0259927472111257)*(IKsin(j[0]))))))*(IKsin(j[1]))))+(((-0.945998281949174)*(((((-0.103420015812922)*(((((0.946191894238107)*(IKcos(j[0]))))+(((-0.168906816209186)*(IKsin(j[0]))))))*(IKsin(j[1]))))+(((-0.103420015812922)*(((((0.271732233620001)*(IKcos(j[0]))))+(((-0.0485075244479057)*(IKsin(j[0]))))))*(IKcos(j[1]))))))*(IKcos(j[2]))))))*(IKsin(j[3]))))))*(IKsin(j[4]))))+(((-0.999991471488533)*(((((((((0.115872231636118)*(((((0.0485075244479057)*(IKsin(j[0]))))+(((-0.271732233620001)*(IKcos(j[0]))))))*(IKcos(j[1]))))+(((0.115872231636118)*(((((0.168906816209186)*(IKsin(j[0]))))+(((-0.946191894238107)*(IKcos(j[0]))))))*(IKsin(j[1]))))))*(IKsin(j[2]))))+(((((((0.114068988634618)*(IKsin(j[0]))))+(((0.020362708469395)*(IKcos(j[0]))))))*(IKcos(j[2]))))+(((((((0.924263966079929)*(IKsin(j[0]))))+(((0.164992413059238)*(IKcos(j[0]))))))*(IKsin(j[2]))))+(((((((4.78231786842813e-6)*(IKcos(j[0]))))+(((-8.53702182586258e-7)*(IKsin(j[0]))))))*(IKcos(j[1]))))+(((((((0.324171637484235)*(((((0.52353919050829)*(IKsin(j[0]))))+(((0.0934581434992053)*(IKcos(j[0]))))))*(IKcos(j[2]))))+(((0.324171637484235)*(((((0.531815483588428)*(((((0.0485075244479057)*(IKsin(j[0]))))+(((-0.271732233620001)*(IKcos(j[0]))))))*(IKcos(j[1]))))+(((0.531815483588428)*(((((0.168906816209186)*(IKsin(j[0]))))+(((-0.946191894238107)*(IKcos(j[0]))))))*(IKsin(j[1]))))))*(IKsin(j[2]))))+(((0.324171637484235)*(((((0.142610275851393)*(IKsin(j[0]))))+(((-0.798882425671523)*(IKcos(j[0]))))))*(IKcos(j[1]))))+(((0.324171637484235)*(((((-0.0409555493238159)*(IKsin(j[0]))))+(((0.22942714606775)*(IKcos(j[0]))))))*(IKsin(j[1]))))+(((0.324171637484235)*(((((-0.0115334342172636)*(IKcos(j[0]))))+(((-0.0646086535405889)*(IKsin(j[0]))))))*(IKsin(j[2]))))+(((0.324171637484235)*(((((-0.0656300100348293)*(((((0.946191894238107)*(IKcos(j[0]))))+(((-0.168906816209186)*(IKsin(j[0]))))))*(IKsin(j[1]))))+(((-0.0656300100348293)*(((((0.271732233620001)*(IKcos(j[0]))))+(((-0.0485075244479057)*(IKsin(j[0]))))))*(IKcos(j[1]))))))*(IKcos(j[2]))))))*(IKcos(j[3]))))+(((((((2.45170564589572e-7)*(IKsin(j[0]))))+(((-1.37341053562418e-6)*(IKcos(j[0]))))))*(IKsin(j[1]))))+(((((((0.324171637484235)*(((((0.824914877803331)*(IKsin(j[0]))))+(((0.147257386690619)*(IKcos(j[0]))))))*(IKcos(j[2]))))+(((0.324171637484235)*(((((-0.145607662687148)*(IKcos(j[0]))))+(((0.0259927472111257)*(IKsin(j[0]))))))*(IKsin(j[1]))))+(((0.324171637484235)*(((((-0.0905086834657259)*(IKsin(j[0]))))+(((0.507016736064526)*(IKcos(j[0]))))))*(IKcos(j[1]))))+(((0.324171637484235)*(((((-0.101810558420961)*(IKsin(j[0]))))+(((-0.0181744288701722)*(IKcos(j[0]))))))*(IKsin(j[2]))))+(((0.324171637484235)*(((((-0.103420015812922)*(((((0.946191894238107)*(IKcos(j[0]))))+(((-0.168906816209186)*(IKsin(j[0]))))))*(IKsin(j[1]))))+(((-0.103420015812922)*(((((0.271732233620001)*(IKcos(j[0]))))+(((-0.0485075244479057)*(IKsin(j[0]))))))*(IKcos(j[1]))))))*(IKcos(j[2]))))+(((0.324171637484235)*(((((0.837955424564001)*(((((0.168906816209186)*(IKsin(j[0]))))+(((-0.946191894238107)*(IKcos(j[0]))))))*(IKsin(j[1]))))+(((0.837955424564001)*(((((0.0485075244479057)*(IKsin(j[0]))))+(((-0.271732233620001)*(IKcos(j[0]))))))*(IKcos(j[1]))))))*(IKsin(j[2]))))))*(IKsin(j[3]))))+(((((((0.938875058440104)*(((((0.271732233620001)*(IKcos(j[0]))))+(((-0.0485075244479057)*(IKsin(j[0]))))))*(IKcos(j[1]))))+(((0.938875058440104)*(((((0.946191894238107)*(IKcos(j[0]))))+(((-0.168906816209186)*(IKsin(j[0]))))))*(IKsin(j[1]))))))*(IKcos(j[2]))))))*(IKcos(j[4]))))))*(IKcos(j[6]))))+(((((((-0.999991471488533)*(((((0.980583922797878)*(((((((((0.837955424564001)*(((((0.168906816209186)*(IKsin(j[0]))))+(((-0.946191894238107)*(IKcos(j[0]))))))*(IKsin(j[1]))))+(((0.837955424564001)*(((((0.0485075244479057)*(IKsin(j[0]))))+(((-0.271732233620001)*(IKcos(j[0]))))))*(IKcos(j[1]))))))*(IKsin(j[2]))))+(((((((-0.101810558420961)*(IKsin(j[0]))))+(((-0.0181744288701722)*(IKcos(j[0]))))))*(IKsin(j[2]))))+(((((((-0.145607662687148)*(IKcos(j[0]))))+(((0.0259927472111257)*(IKsin(j[0]))))))*(IKsin(j[1]))))+(((((((-0.103420015812922)*(((((0.946191894238107)*(IKcos(j[0]))))+(((-0.168906816209186)*(IKsin(j[0]))))))*(IKsin(j[1]))))+(((-0.103420015812922)*(((((0.271732233620001)*(IKcos(j[0]))))+(((-0.0485075244479057)*(IKsin(j[0]))))))*(IKcos(j[1]))))))*(IKcos(j[2]))))+(((((((0.824914877803331)*(IKsin(j[0]))))+(((0.147257386690619)*(IKcos(j[0]))))))*(IKcos(j[2]))))+(((((((-0.0905086834657259)*(IKsin(j[0]))))+(((0.507016736064526)*(IKcos(j[0]))))))*(IKcos(j[1]))))))*(IKcos(j[3]))))+(((0.980583922797878)*(((((((((0.0656300100348293)*(((((0.271732233620001)*(IKcos(j[0]))))+(((-0.0485075244479057)*(IKsin(j[0]))))))*(IKcos(j[1]))))+(((0.0656300100348293)*(((((0.946191894238107)*(IKcos(j[0]))))+(((-0.168906816209186)*(IKsin(j[0]))))))*(IKsin(j[1]))))))*(IKcos(j[2]))))+(((((((-0.0934581434992053)*(IKcos(j[0]))))+(((-0.52353919050829)*(IKsin(j[0]))))))*(IKcos(j[2]))))+(((((((0.0646086535405889)*(IKsin(j[0]))))+(((0.0115334342172636)*(IKcos(j[0]))))))*(IKsin(j[2]))))+(((((((-0.142610275851393)*(IKsin(j[0]))))+(((0.798882425671523)*(IKcos(j[0]))))))*(IKcos(j[1]))))+(((((((-0.531815483588428)*(((((0.168906816209186)*(IKsin(j[0]))))+(((-0.946191894238107)*(IKcos(j[0]))))))*(IKsin(j[1]))))+(((-0.531815483588428)*(((((0.0485075244479057)*(IKsin(j[0]))))+(((-0.271732233620001)*(IKcos(j[0]))))))*(IKcos(j[1]))))))*(IKsin(j[2]))))+(((((((-0.22942714606775)*(IKcos(j[0]))))+(((0.0409555493238159)*(IKsin(j[0]))))))*(IKsin(j[1]))))))*(IKsin(j[3]))))))*(IKcos(j[5]))))+(((-0.999991471488533)*(((((0.980583922797878)*(((((((((0.321730674246603)*(((((0.946191894238107)*(IKcos(j[0]))))+(((-0.168906816209186)*(IKsin(j[0]))))))*(IKsin(j[1]))))+(((0.321730674246603)*(((((0.271732233620001)*(IKcos(j[0]))))+(((-0.0485075244479057)*(IKsin(j[0]))))))*(IKcos(j[1]))))))*(IKcos(j[2]))))+(((((((8.40142576392187e-8)*(IKsin(j[0]))))+(((-4.70635888845422e-7)*(IKcos(j[0]))))))*(IKsin(j[1]))))+(((((((0.0397067222902749)*(((((0.0485075244479057)*(IKsin(j[0]))))+(((-0.271732233620001)*(IKcos(j[0]))))))*(IKcos(j[1]))))+(((0.0397067222902749)*(((((0.168906816209186)*(IKsin(j[0]))))+(((-0.946191894238107)*(IKcos(j[0]))))))*(IKsin(j[1]))))))*(IKsin(j[2]))))+(((((((1.63878924936753e-6)*(IKcos(j[0]))))+(((-2.92543908095302e-7)*(IKsin(j[0]))))))*(IKcos(j[1]))))+(((((((-0.945998281949174)*(((((0.142610275851393)*(IKsin(j[0]))))+(((-0.798882425671523)*(IKcos(j[0]))))))*(IKcos(j[1]))))+(((-0.945998281949174)*(((((-0.0409555493238159)*(IKsin(j[0]))))+(((0.22942714606775)*(IKcos(j[0]))))))*(IKsin(j[1]))))+(((-0.945998281949174)*(((((0.52353919050829)*(IKsin(j[0]))))+(((0.0934581434992053)*(IKcos(j[0]))))))*(IKcos(j[2]))))+(((-0.945998281949174)*(((((-0.0115334342172636)*(IKcos(j[0]))))+(((-0.0646086535405889)*(IKsin(j[0]))))))*(IKsin(j[2]))))+(((-0.945998281949174)*(((((0.531815483588428)*(((((0.0485075244479057)*(IKsin(j[0]))))+(((-0.271732233620001)*(IKcos(j[0]))))))*(IKcos(j[1]))))+(((0.531815483588428)*(((((0.168906816209186)*(IKsin(j[0]))))+(((-0.946191894238107)*(IKcos(j[0]))))))*(IKsin(j[1]))))))*(IKsin(j[2]))))+(((-0.945998281949174)*(((((-0.0656300100348293)*(((((0.946191894238107)*(IKcos(j[0]))))+(((-0.168906816209186)*(IKsin(j[0]))))))*(IKsin(j[1]))))+(((-0.0656300100348293)*(((((0.271732233620001)*(IKcos(j[0]))))+(((-0.0485075244479057)*(IKsin(j[0]))))))*(IKcos(j[1]))))))*(IKcos(j[2]))))))*(IKcos(j[3]))))+(((((((0.0565390674956448)*(IKcos(j[0]))))+(((0.31672379228264)*(IKsin(j[0]))))))*(IKsin(j[2]))))+(((((((0.0069778272054965)*(IKcos(j[0]))))+(((0.039088792799564)*(IKsin(j[0]))))))*(IKcos(j[2]))))+(((((((-0.945998281949174)*(((((0.837955424564001)*(((((0.168906816209186)*(IKsin(j[0]))))+(((-0.946191894238107)*(IKcos(j[0]))))))*(IKsin(j[1]))))+(((0.837955424564001)*(((((0.0485075244479057)*(IKsin(j[0]))))+(((-0.271732233620001)*(IKcos(j[0]))))))*(IKcos(j[1]))))))*(IKsin(j[2]))))+(((-0.945998281949174)*(((((0.824914877803331)*(IKsin(j[0]))))+(((0.147257386690619)*(IKcos(j[0]))))))*(IKcos(j[2]))))+(((-0.945998281949174)*(((((-0.101810558420961)*(IKsin(j[0]))))+(((-0.0181744288701722)*(IKcos(j[0]))))))*(IKsin(j[2]))))+(((-0.945998281949174)*(((((-0.0905086834657259)*(IKsin(j[0]))))+(((0.507016736064526)*(IKcos(j[0]))))))*(IKcos(j[1]))))+(((-0.945998281949174)*(((((-0.145607662687148)*(IKcos(j[0]))))+(((0.0259927472111257)*(IKsin(j[0]))))))*(IKsin(j[1]))))+(((-0.945998281949174)*(((((-0.103420015812922)*(((((0.946191894238107)*(IKcos(j[0]))))+(((-0.168906816209186)*(IKsin(j[0]))))))*(IKsin(j[1]))))+(((-0.103420015812922)*(((((0.271732233620001)*(IKcos(j[0]))))+(((-0.0485075244479057)*(IKsin(j[0]))))))*(IKcos(j[1]))))))*(IKcos(j[2]))))))*(IKsin(j[3]))))))*(IKcos(j[4]))))+(((0.980583922797878)*(((((((((-0.020362708469395)*(IKcos(j[0]))))+(((-0.114068988634618)*(IKsin(j[0]))))))*(IKcos(j[2]))))+(((((((-0.324171637484235)*(((((-0.145607662687148)*(IKcos(j[0]))))+(((0.0259927472111257)*(IKsin(j[0]))))))*(IKsin(j[1]))))+(((-0.324171637484235)*(((((-0.0905086834657259)*(IKsin(j[0]))))+(((0.507016736064526)*(IKcos(j[0]))))))*(IKcos(j[1]))))+(((-0.324171637484235)*(((((0.837955424564001)*(((((0.168906816209186)*(IKsin(j[0]))))+(((-0.946191894238107)*(IKcos(j[0]))))))*(IKsin(j[1]))))+(((0.837955424564001)*(((((0.0485075244479057)*(IKsin(j[0]))))+(((-0.271732233620001)*(IKcos(j[0]))))))*(IKcos(j[1]))))))*(IKsin(j[2]))))+(((-0.324171637484235)*(((((-0.103420015812922)*(((((0.946191894238107)*(IKcos(j[0]))))+(((-0.168906816209186)*(IKsin(j[0]))))))*(IKsin(j[1]))))+(((-0.103420015812922)*(((((0.271732233620001)*(IKcos(j[0]))))+(((-0.0485075244479057)*(IKsin(j[0]))))))*(IKcos(j[1]))))))*(IKcos(j[2]))))+(((-0.324171637484235)*(((((-0.101810558420961)*(IKsin(j[0]))))+(((-0.0181744288701722)*(IKcos(j[0]))))))*(IKsin(j[2]))))+(((-0.324171637484235)*(((((0.824914877803331)*(IKsin(j[0]))))+(((0.147257386690619)*(IKcos(j[0]))))))*(IKcos(j[2]))))))*(IKsin(j[3]))))+(((((((-0.324171637484235)*(((((0.531815483588428)*(((((0.0485075244479057)*(IKsin(j[0]))))+(((-0.271732233620001)*(IKcos(j[0]))))))*(IKcos(j[1]))))+(((0.531815483588428)*(((((0.168906816209186)*(IKsin(j[0]))))+(((-0.946191894238107)*(IKcos(j[0]))))))*(IKsin(j[1]))))))*(IKsin(j[2]))))+(((-0.324171637484235)*(((((0.52353919050829)*(IKsin(j[0]))))+(((0.0934581434992053)*(IKcos(j[0]))))))*(IKcos(j[2]))))+(((-0.324171637484235)*(((((-0.0409555493238159)*(IKsin(j[0]))))+(((0.22942714606775)*(IKcos(j[0]))))))*(IKsin(j[1]))))+(((-0.324171637484235)*(((((0.142610275851393)*(IKsin(j[0]))))+(((-0.798882425671523)*(IKcos(j[0]))))))*(IKcos(j[1]))))+(((-0.324171637484235)*(((((-0.0656300100348293)*(((((0.946191894238107)*(IKcos(j[0]))))+(((-0.168906816209186)*(IKsin(j[0]))))))*(IKsin(j[1]))))+(((-0.0656300100348293)*(((((0.271732233620001)*(IKcos(j[0]))))+(((-0.0485075244479057)*(IKsin(j[0]))))))*(IKcos(j[1]))))))*(IKcos(j[2]))))+(((-0.324171637484235)*(((((-0.0115334342172636)*(IKcos(j[0]))))+(((-0.0646086535405889)*(IKsin(j[0]))))))*(IKsin(j[2]))))))*(IKcos(j[3]))))+(((((((8.53702182586258e-7)*(IKsin(j[0]))))+(((-4.78231786842813e-6)*(IKcos(j[0]))))))*(IKcos(j[1]))))+(((((((-0.164992413059238)*(IKcos(j[0]))))+(((-0.924263966079929)*(IKsin(j[0]))))))*(IKsin(j[2]))))+(((((((1.37341053562418e-6)*(IKcos(j[0]))))+(((-2.45170564589572e-7)*(IKsin(j[0]))))))*(IKsin(j[1]))))+(((((((-0.115872231636118)*(((((0.168906816209186)*(IKsin(j[0]))))+(((-0.946191894238107)*(IKcos(j[0]))))))*(IKsin(j[1]))))+(((-0.115872231636118)*(((((0.0485075244479057)*(IKsin(j[0]))))+(((-0.271732233620001)*(IKcos(j[0]))))))*(IKcos(j[1]))))))*(IKsin(j[2]))))+(((((((-0.938875058440104)*(((((0.271732233620001)*(IKcos(j[0]))))+(((-0.0485075244479057)*(IKsin(j[0]))))))*(IKcos(j[1]))))+(((-0.938875058440104)*(((((0.946191894238107)*(IKcos(j[0]))))+(((-0.168906816209186)*(IKsin(j[0]))))))*(IKsin(j[1]))))))*(IKcos(j[2]))))))*(IKsin(j[4]))))))*(IKsin(j[5]))))+(((-0.999991471488533)*(((((0.196099898904425)*(((((-1.0)*(((((-0.103420015812922)*(((((0.946191894238107)*(IKcos(j[0]))))+(((-0.168906816209186)*(IKsin(j[0]))))))*(IKsin(j[1]))))+(((-0.103420015812922)*(((((0.271732233620001)*(IKcos(j[0]))))+(((-0.0485075244479057)*(IKsin(j[0]))))))*(IKcos(j[1]))))))*(IKcos(j[2]))))+(((-1.0)*(((((-0.101810558420961)*(IKsin(j[0]))))+(((-0.0181744288701722)*(IKcos(j[0]))))))*(IKsin(j[2]))))+(((-1.0)*(((((-0.0905086834657259)*(IKsin(j[0]))))+(((0.507016736064526)*(IKcos(j[0]))))))*(IKcos(j[1]))))+(((-1.0)*(((((-0.145607662687148)*(IKcos(j[0]))))+(((0.0259927472111257)*(IKsin(j[0]))))))*(IKsin(j[1]))))+(((-1.0)*(((((0.837955424564001)*(((((0.168906816209186)*(IKsin(j[0]))))+(((-0.946191894238107)*(IKcos(j[0]))))))*(IKsin(j[1]))))+(((0.837955424564001)*(((((0.0485075244479057)*(IKsin(j[0]))))+(((-0.271732233620001)*(IKcos(j[0]))))))*(IKcos(j[1]))))))*(IKsin(j[2]))))+(((-1.0)*(((((0.824914877803331)*(IKsin(j[0]))))+(((0.147257386690619)*(IKcos(j[0]))))))*(IKcos(j[2]))))))*(IKcos(j[3]))))+(((0.196099898904425)*(((((-1.0)*(((((-0.22942714606775)*(IKcos(j[0]))))+(((0.0409555493238159)*(IKsin(j[0]))))))*(IKsin(j[1]))))+(((-1.0)*(((((0.0646086535405889)*(IKsin(j[0]))))+(((0.0115334342172636)*(IKcos(j[0]))))))*(IKsin(j[2]))))+(((-1.0)*(((((-0.142610275851393)*(IKsin(j[0]))))+(((0.798882425671523)*(IKcos(j[0]))))))*(IKcos(j[1]))))+(((-1.0)*(((((-0.531815483588428)*(((((0.168906816209186)*(IKsin(j[0]))))+(((-0.946191894238107)*(IKcos(j[0]))))))*(IKsin(j[1]))))+(((-0.531815483588428)*(((((0.0485075244479057)*(IKsin(j[0]))))+(((-0.271732233620001)*(IKcos(j[0]))))))*(IKcos(j[1]))))))*(IKsin(j[2]))))+(((-1.0)*(((((-0.0934581434992053)*(IKcos(j[0]))))+(((-0.52353919050829)*(IKsin(j[0]))))))*(IKcos(j[2]))))+(((-1.0)*(((((0.0656300100348293)*(((((0.271732233620001)*(IKcos(j[0]))))+(((-0.0485075244479057)*(IKsin(j[0]))))))*(IKcos(j[1]))))+(((0.0656300100348293)*(((((0.946191894238107)*(IKcos(j[0]))))+(((-0.168906816209186)*(IKsin(j[0]))))))*(IKsin(j[1]))))))*(IKcos(j[2]))))))*(IKsin(j[3]))))))*(IKsin(j[5]))))+(((-0.999991471488533)*(((((0.196099898904425)*(((((((((-0.020362708469395)*(IKcos(j[0]))))+(((-0.114068988634618)*(IKsin(j[0]))))))*(IKcos(j[2]))))+(((((((-0.324171637484235)*(((((-0.145607662687148)*(IKcos(j[0]))))+(((0.0259927472111257)*(IKsin(j[0]))))))*(IKsin(j[1]))))+(((-0.324171637484235)*(((((-0.0905086834657259)*(IKsin(j[0]))))+(((0.507016736064526)*(IKcos(j[0]))))))*(IKcos(j[1]))))+(((-0.324171637484235)*(((((0.837955424564001)*(((((0.168906816209186)*(IKsin(j[0]))))+(((-0.946191894238107)*(IKcos(j[0]))))))*(IKsin(j[1]))))+(((0.837955424564001)*(((((0.0485075244479057)*(IKsin(j[0]))))+(((-0.271732233620001)*(IKcos(j[0]))))))*(IKcos(j[1]))))))*(IKsin(j[2]))))+(((-0.324171637484235)*(((((-0.103420015812922)*(((((0.946191894238107)*(IKcos(j[0]))))+(((-0.168906816209186)*(IKsin(j[0]))))))*(IKsin(j[1]))))+(((-0.103420015812922)*(((((0.271732233620001)*(IKcos(j[0]))))+(((-0.0485075244479057)*(IKsin(j[0]))))))*(IKcos(j[1]))))))*(IKcos(j[2]))))+(((-0.324171637484235)*(((((-0.101810558420961)*(IKsin(j[0]))))+(((-0.0181744288701722)*(IKcos(j[0]))))))*(IKsin(j[2]))))+(((-0.324171637484235)*(((((0.824914877803331)*(IKsin(j[0]))))+(((0.147257386690619)*(IKcos(j[0]))))))*(IKcos(j[2]))))))*(IKsin(j[3]))))+(((((((-0.324171637484235)*(((((0.531815483588428)*(((((0.0485075244479057)*(IKsin(j[0]))))+(((-0.271732233620001)*(IKcos(j[0]))))))*(IKcos(j[1]))))+(((0.531815483588428)*(((((0.168906816209186)*(IKsin(j[0]))))+(((-0.946191894238107)*(IKcos(j[0]))))))*(IKsin(j[1]))))))*(IKsin(j[2]))))+(((-0.324171637484235)*(((((0.52353919050829)*(IKsin(j[0]))))+(((0.0934581434992053)*(IKcos(j[0]))))))*(IKcos(j[2]))))+(((-0.324171637484235)*(((((-0.0409555493238159)*(IKsin(j[0]))))+(((0.22942714606775)*(IKcos(j[0]))))))*(IKsin(j[1]))))+(((-0.324171637484235)*(((((0.142610275851393)*(IKsin(j[0]))))+(((-0.798882425671523)*(IKcos(j[0]))))))*(IKcos(j[1]))))+(((-0.324171637484235)*(((((-0.0656300100348293)*(((((0.946191894238107)*(IKcos(j[0]))))+(((-0.168906816209186)*(IKsin(j[0]))))))*(IKsin(j[1]))))+(((-0.0656300100348293)*(((((0.271732233620001)*(IKcos(j[0]))))+(((-0.0485075244479057)*(IKsin(j[0]))))))*(IKcos(j[1]))))))*(IKcos(j[2]))))+(((-0.324171637484235)*(((((-0.0115334342172636)*(IKcos(j[0]))))+(((-0.0646086535405889)*(IKsin(j[0]))))))*(IKsin(j[2]))))))*(IKcos(j[3]))))+(((((((8.53702182586258e-7)*(IKsin(j[0]))))+(((-4.78231786842813e-6)*(IKcos(j[0]))))))*(IKcos(j[1]))))+(((((((-0.164992413059238)*(IKcos(j[0]))))+(((-0.924263966079929)*(IKsin(j[0]))))))*(IKsin(j[2]))))+(((((((1.37341053562418e-6)*(IKcos(j[0]))))+(((-2.45170564589572e-7)*(IKsin(j[0]))))))*(IKsin(j[1]))))+(((((((-0.115872231636118)*(((((0.168906816209186)*(IKsin(j[0]))))+(((-0.946191894238107)*(IKcos(j[0]))))))*(IKsin(j[1]))))+(((-0.115872231636118)*(((((0.0485075244479057)*(IKsin(j[0]))))+(((-0.271732233620001)*(IKcos(j[0]))))))*(IKcos(j[1]))))))*(IKsin(j[2]))))+(((((((-0.938875058440104)*(((((0.271732233620001)*(IKcos(j[0]))))+(((-0.0485075244479057)*(IKsin(j[0]))))))*(IKcos(j[1]))))+(((-0.938875058440104)*(((((0.946191894238107)*(IKcos(j[0]))))+(((-0.168906816209186)*(IKsin(j[0]))))))*(IKsin(j[1]))))))*(IKcos(j[2]))))))*(IKsin(j[4]))))+(((0.196099898904425)*(((((((((0.321730674246603)*(((((0.946191894238107)*(IKcos(j[0]))))+(((-0.168906816209186)*(IKsin(j[0]))))))*(IKsin(j[1]))))+(((0.321730674246603)*(((((0.271732233620001)*(IKcos(j[0]))))+(((-0.0485075244479057)*(IKsin(j[0]))))))*(IKcos(j[1]))))))*(IKcos(j[2]))))+(((((((8.40142576392187e-8)*(IKsin(j[0]))))+(((-4.70635888845422e-7)*(IKcos(j[0]))))))*(IKsin(j[1]))))+(((((((0.0397067222902749)*(((((0.0485075244479057)*(IKsin(j[0]))))+(((-0.271732233620001)*(IKcos(j[0]))))))*(IKcos(j[1]))))+(((0.0397067222902749)*(((((0.168906816209186)*(IKsin(j[0]))))+(((-0.946191894238107)*(IKcos(j[0]))))))*(IKsin(j[1]))))))*(IKsin(j[2]))))+(((((((1.63878924936753e-6)*(IKcos(j[0]))))+(((-2.92543908095302e-7)*(IKsin(j[0]))))))*(IKcos(j[1]))))+(((((((-0.945998281949174)*(((((0.142610275851393)*(IKsin(j[0]))))+(((-0.798882425671523)*(IKcos(j[0]))))))*(IKcos(j[1]))))+(((-0.945998281949174)*(((((-0.0409555493238159)*(IKsin(j[0]))))+(((0.22942714606775)*(IKcos(j[0]))))))*(IKsin(j[1]))))+(((-0.945998281949174)*(((((0.52353919050829)*(IKsin(j[0]))))+(((0.0934581434992053)*(IKcos(j[0]))))))*(IKcos(j[2]))))+(((-0.945998281949174)*(((((-0.0115334342172636)*(IKcos(j[0]))))+(((-0.0646086535405889)*(IKsin(j[0]))))))*(IKsin(j[2]))))+(((-0.945998281949174)*(((((0.531815483588428)*(((((0.0485075244479057)*(IKsin(j[0]))))+(((-0.271732233620001)*(IKcos(j[0]))))))*(IKcos(j[1]))))+(((0.531815483588428)*(((((0.168906816209186)*(IKsin(j[0]))))+(((-0.946191894238107)*(IKcos(j[0]))))))*(IKsin(j[1]))))))*(IKsin(j[2]))))+(((-0.945998281949174)*(((((-0.0656300100348293)*(((((0.946191894238107)*(IKcos(j[0]))))+(((-0.168906816209186)*(IKsin(j[0]))))))*(IKsin(j[1]))))+(((-0.0656300100348293)*(((((0.271732233620001)*(IKcos(j[0]))))+(((-0.0485075244479057)*(IKsin(j[0]))))))*(IKcos(j[1]))))))*(IKcos(j[2]))))))*(IKcos(j[3]))))+(((((((0.0565390674956448)*(IKcos(j[0]))))+(((0.31672379228264)*(IKsin(j[0]))))))*(IKsin(j[2]))))+(((((((0.0069778272054965)*(IKcos(j[0]))))+(((0.039088792799564)*(IKsin(j[0]))))))*(IKcos(j[2]))))+(((((((-0.945998281949174)*(((((0.837955424564001)*(((((0.168906816209186)*(IKsin(j[0]))))+(((-0.946191894238107)*(IKcos(j[0]))))))*(IKsin(j[1]))))+(((0.837955424564001)*(((((0.0485075244479057)*(IKsin(j[0]))))+(((-0.271732233620001)*(IKcos(j[0]))))))*(IKcos(j[1]))))))*(IKsin(j[2]))))+(((-0.945998281949174)*(((((0.824914877803331)*(IKsin(j[0]))))+(((0.147257386690619)*(IKcos(j[0]))))))*(IKcos(j[2]))))+(((-0.945998281949174)*(((((-0.101810558420961)*(IKsin(j[0]))))+(((-0.0181744288701722)*(IKcos(j[0]))))))*(IKsin(j[2]))))+(((-0.945998281949174)*(((((-0.0905086834657259)*(IKsin(j[0]))))+(((0.507016736064526)*(IKcos(j[0]))))))*(IKcos(j[1]))))+(((-0.945998281949174)*(((((-0.145607662687148)*(IKcos(j[0]))))+(((0.0259927472111257)*(IKsin(j[0]))))))*(IKsin(j[1]))))+(((-0.945998281949174)*(((((-0.103420015812922)*(((((0.946191894238107)*(IKcos(j[0]))))+(((-0.168906816209186)*(IKsin(j[0]))))))*(IKsin(j[1]))))+(((-0.103420015812922)*(((((0.271732233620001)*(IKcos(j[0]))))+(((-0.0485075244479057)*(IKsin(j[0]))))))*(IKcos(j[1]))))))*(IKcos(j[2]))))))*(IKsin(j[3]))))))*(IKcos(j[4]))))))*(IKcos(j[5]))))))*(IKsin(j[6])))));
eerot[4]=((((((((0.980583922797878)*(((((-1.0)*(((((-0.103420015812922)*(((((0.946191894238107)*(IKcos(j[0]))))+(((-0.168906816209186)*(IKsin(j[0]))))))*(IKsin(j[1]))))+(((-0.103420015812922)*(((((0.271732233620001)*(IKcos(j[0]))))+(((-0.0485075244479057)*(IKsin(j[0]))))))*(IKcos(j[1]))))))*(IKcos(j[2]))))+(((-1.0)*(((((-0.101810558420961)*(IKsin(j[0]))))+(((-0.0181744288701722)*(IKcos(j[0]))))))*(IKsin(j[2]))))+(((-1.0)*(((((-0.0905086834657259)*(IKsin(j[0]))))+(((0.507016736064526)*(IKcos(j[0]))))))*(IKcos(j[1]))))+(((-1.0)*(((((-0.145607662687148)*(IKcos(j[0]))))+(((0.0259927472111257)*(IKsin(j[0]))))))*(IKsin(j[1]))))+(((-1.0)*(((((0.837955424564001)*(((((0.168906816209186)*(IKsin(j[0]))))+(((-0.946191894238107)*(IKcos(j[0]))))))*(IKsin(j[1]))))+(((0.837955424564001)*(((((0.0485075244479057)*(IKsin(j[0]))))+(((-0.271732233620001)*(IKcos(j[0]))))))*(IKcos(j[1]))))))*(IKsin(j[2]))))+(((-1.0)*(((((0.824914877803331)*(IKsin(j[0]))))+(((0.147257386690619)*(IKcos(j[0]))))))*(IKcos(j[2]))))))*(IKcos(j[3]))))+(((0.980583922797878)*(((((-1.0)*(((((-0.22942714606775)*(IKcos(j[0]))))+(((0.0409555493238159)*(IKsin(j[0]))))))*(IKsin(j[1]))))+(((-1.0)*(((((0.0646086535405889)*(IKsin(j[0]))))+(((0.0115334342172636)*(IKcos(j[0]))))))*(IKsin(j[2]))))+(((-1.0)*(((((-0.142610275851393)*(IKsin(j[0]))))+(((0.798882425671523)*(IKcos(j[0]))))))*(IKcos(j[1]))))+(((-1.0)*(((((-0.531815483588428)*(((((0.168906816209186)*(IKsin(j[0]))))+(((-0.946191894238107)*(IKcos(j[0]))))))*(IKsin(j[1]))))+(((-0.531815483588428)*(((((0.0485075244479057)*(IKsin(j[0]))))+(((-0.271732233620001)*(IKcos(j[0]))))))*(IKcos(j[1]))))))*(IKsin(j[2]))))+(((-1.0)*(((((-0.0934581434992053)*(IKcos(j[0]))))+(((-0.52353919050829)*(IKsin(j[0]))))))*(IKcos(j[2]))))+(((-1.0)*(((((0.0656300100348293)*(((((0.271732233620001)*(IKcos(j[0]))))+(((-0.0485075244479057)*(IKsin(j[0]))))))*(IKcos(j[1]))))+(((0.0656300100348293)*(((((0.946191894238107)*(IKcos(j[0]))))+(((-0.168906816209186)*(IKsin(j[0]))))))*(IKsin(j[1]))))))*(IKcos(j[2]))))))*(IKsin(j[3]))))))*(IKsin(j[5]))))+(((((((-0.196099898904425)*(((((((((0.0656300100348293)*(((((0.271732233620001)*(IKcos(j[0]))))+(((-0.0485075244479057)*(IKsin(j[0]))))))*(IKcos(j[1]))))+(((0.0656300100348293)*(((((0.946191894238107)*(IKcos(j[0]))))+(((-0.168906816209186)*(IKsin(j[0]))))))*(IKsin(j[1]))))))*(IKcos(j[2]))))+(((((((-0.0934581434992053)*(IKcos(j[0]))))+(((-0.52353919050829)*(IKsin(j[0]))))))*(IKcos(j[2]))))+(((((((0.0646086535405889)*(IKsin(j[0]))))+(((0.0115334342172636)*(IKcos(j[0]))))))*(IKsin(j[2]))))+(((((((-0.142610275851393)*(IKsin(j[0]))))+(((0.798882425671523)*(IKcos(j[0]))))))*(IKcos(j[1]))))+(((((((-0.531815483588428)*(((((0.168906816209186)*(IKsin(j[0]))))+(((-0.946191894238107)*(IKcos(j[0]))))))*(IKsin(j[1]))))+(((-0.531815483588428)*(((((0.0485075244479057)*(IKsin(j[0]))))+(((-0.271732233620001)*(IKcos(j[0]))))))*(IKcos(j[1]))))))*(IKsin(j[2]))))+(((((((-0.22942714606775)*(IKcos(j[0]))))+(((0.0409555493238159)*(IKsin(j[0]))))))*(IKsin(j[1]))))))*(IKsin(j[3]))))+(((-0.196099898904425)*(((((((((0.837955424564001)*(((((0.168906816209186)*(IKsin(j[0]))))+(((-0.946191894238107)*(IKcos(j[0]))))))*(IKsin(j[1]))))+(((0.837955424564001)*(((((0.0485075244479057)*(IKsin(j[0]))))+(((-0.271732233620001)*(IKcos(j[0]))))))*(IKcos(j[1]))))))*(IKsin(j[2]))))+(((((((-0.101810558420961)*(IKsin(j[0]))))+(((-0.0181744288701722)*(IKcos(j[0]))))))*(IKsin(j[2]))))+(((((((-0.145607662687148)*(IKcos(j[0]))))+(((0.0259927472111257)*(IKsin(j[0]))))))*(IKsin(j[1]))))+(((((((-0.103420015812922)*(((((0.946191894238107)*(IKcos(j[0]))))+(((-0.168906816209186)*(IKsin(j[0]))))))*(IKsin(j[1]))))+(((-0.103420015812922)*(((((0.271732233620001)*(IKcos(j[0]))))+(((-0.0485075244479057)*(IKsin(j[0]))))))*(IKcos(j[1]))))))*(IKcos(j[2]))))+(((((((0.824914877803331)*(IKsin(j[0]))))+(((0.147257386690619)*(IKcos(j[0]))))))*(IKcos(j[2]))))+(((((((-0.0905086834657259)*(IKsin(j[0]))))+(((0.507016736064526)*(IKcos(j[0]))))))*(IKcos(j[1]))))))*(IKcos(j[3]))))))*(IKcos(j[5]))))+(((((((0.980583922797878)*(((((((((0.321730674246603)*(((((0.946191894238107)*(IKcos(j[0]))))+(((-0.168906816209186)*(IKsin(j[0]))))))*(IKsin(j[1]))))+(((0.321730674246603)*(((((0.271732233620001)*(IKcos(j[0]))))+(((-0.0485075244479057)*(IKsin(j[0]))))))*(IKcos(j[1]))))))*(IKcos(j[2]))))+(((((((8.40142576392187e-8)*(IKsin(j[0]))))+(((-4.70635888845422e-7)*(IKcos(j[0]))))))*(IKsin(j[1]))))+(((((((0.0397067222902749)*(((((0.0485075244479057)*(IKsin(j[0]))))+(((-0.271732233620001)*(IKcos(j[0]))))))*(IKcos(j[1]))))+(((0.0397067222902749)*(((((0.168906816209186)*(IKsin(j[0]))))+(((-0.946191894238107)*(IKcos(j[0]))))))*(IKsin(j[1]))))))*(IKsin(j[2]))))+(((((((1.63878924936753e-6)*(IKcos(j[0]))))+(((-2.92543908095302e-7)*(IKsin(j[0]))))))*(IKcos(j[1]))))+(((((((-0.945998281949174)*(((((0.142610275851393)*(IKsin(j[0]))))+(((-0.798882425671523)*(IKcos(j[0]))))))*(IKcos(j[1]))))+(((-0.945998281949174)*(((((-0.0409555493238159)*(IKsin(j[0]))))+(((0.22942714606775)*(IKcos(j[0]))))))*(IKsin(j[1]))))+(((-0.945998281949174)*(((((0.52353919050829)*(IKsin(j[0]))))+(((0.0934581434992053)*(IKcos(j[0]))))))*(IKcos(j[2]))))+(((-0.945998281949174)*(((((-0.0115334342172636)*(IKcos(j[0]))))+(((-0.0646086535405889)*(IKsin(j[0]))))))*(IKsin(j[2]))))+(((-0.945998281949174)*(((((0.531815483588428)*(((((0.0485075244479057)*(IKsin(j[0]))))+(((-0.271732233620001)*(IKcos(j[0]))))))*(IKcos(j[1]))))+(((0.531815483588428)*(((((0.168906816209186)*(IKsin(j[0]))))+(((-0.946191894238107)*(IKcos(j[0]))))))*(IKsin(j[1]))))))*(IKsin(j[2]))))+(((-0.945998281949174)*(((((-0.0656300100348293)*(((((0.946191894238107)*(IKcos(j[0]))))+(((-0.168906816209186)*(IKsin(j[0]))))))*(IKsin(j[1]))))+(((-0.0656300100348293)*(((((0.271732233620001)*(IKcos(j[0]))))+(((-0.0485075244479057)*(IKsin(j[0]))))))*(IKcos(j[1]))))))*(IKcos(j[2]))))))*(IKcos(j[3]))))+(((((((0.0565390674956448)*(IKcos(j[0]))))+(((0.31672379228264)*(IKsin(j[0]))))))*(IKsin(j[2]))))+(((((((0.0069778272054965)*(IKcos(j[0]))))+(((0.039088792799564)*(IKsin(j[0]))))))*(IKcos(j[2]))))+(((((((-0.945998281949174)*(((((0.837955424564001)*(((((0.168906816209186)*(IKsin(j[0]))))+(((-0.946191894238107)*(IKcos(j[0]))))))*(IKsin(j[1]))))+(((0.837955424564001)*(((((0.0485075244479057)*(IKsin(j[0]))))+(((-0.271732233620001)*(IKcos(j[0]))))))*(IKcos(j[1]))))))*(IKsin(j[2]))))+(((-0.945998281949174)*(((((0.824914877803331)*(IKsin(j[0]))))+(((0.147257386690619)*(IKcos(j[0]))))))*(IKcos(j[2]))))+(((-0.945998281949174)*(((((-0.101810558420961)*(IKsin(j[0]))))+(((-0.0181744288701722)*(IKcos(j[0]))))))*(IKsin(j[2]))))+(((-0.945998281949174)*(((((-0.0905086834657259)*(IKsin(j[0]))))+(((0.507016736064526)*(IKcos(j[0]))))))*(IKcos(j[1]))))+(((-0.945998281949174)*(((((-0.145607662687148)*(IKcos(j[0]))))+(((0.0259927472111257)*(IKsin(j[0]))))))*(IKsin(j[1]))))+(((-0.945998281949174)*(((((-0.103420015812922)*(((((0.946191894238107)*(IKcos(j[0]))))+(((-0.168906816209186)*(IKsin(j[0]))))))*(IKsin(j[1]))))+(((-0.103420015812922)*(((((0.271732233620001)*(IKcos(j[0]))))+(((-0.0485075244479057)*(IKsin(j[0]))))))*(IKcos(j[1]))))))*(IKcos(j[2]))))))*(IKsin(j[3]))))))*(IKcos(j[4]))))+(((0.980583922797878)*(((((((((-0.020362708469395)*(IKcos(j[0]))))+(((-0.114068988634618)*(IKsin(j[0]))))))*(IKcos(j[2]))))+(((((((-0.324171637484235)*(((((-0.145607662687148)*(IKcos(j[0]))))+(((0.0259927472111257)*(IKsin(j[0]))))))*(IKsin(j[1]))))+(((-0.324171637484235)*(((((-0.0905086834657259)*(IKsin(j[0]))))+(((0.507016736064526)*(IKcos(j[0]))))))*(IKcos(j[1]))))+(((-0.324171637484235)*(((((0.837955424564001)*(((((0.168906816209186)*(IKsin(j[0]))))+(((-0.946191894238107)*(IKcos(j[0]))))))*(IKsin(j[1]))))+(((0.837955424564001)*(((((0.0485075244479057)*(IKsin(j[0]))))+(((-0.271732233620001)*(IKcos(j[0]))))))*(IKcos(j[1]))))))*(IKsin(j[2]))))+(((-0.324171637484235)*(((((-0.103420015812922)*(((((0.946191894238107)*(IKcos(j[0]))))+(((-0.168906816209186)*(IKsin(j[0]))))))*(IKsin(j[1]))))+(((-0.103420015812922)*(((((0.271732233620001)*(IKcos(j[0]))))+(((-0.0485075244479057)*(IKsin(j[0]))))))*(IKcos(j[1]))))))*(IKcos(j[2]))))+(((-0.324171637484235)*(((((-0.101810558420961)*(IKsin(j[0]))))+(((-0.0181744288701722)*(IKcos(j[0]))))))*(IKsin(j[2]))))+(((-0.324171637484235)*(((((0.824914877803331)*(IKsin(j[0]))))+(((0.147257386690619)*(IKcos(j[0]))))))*(IKcos(j[2]))))))*(IKsin(j[3]))))+(((((((-0.324171637484235)*(((((0.531815483588428)*(((((0.0485075244479057)*(IKsin(j[0]))))+(((-0.271732233620001)*(IKcos(j[0]))))))*(IKcos(j[1]))))+(((0.531815483588428)*(((((0.168906816209186)*(IKsin(j[0]))))+(((-0.946191894238107)*(IKcos(j[0]))))))*(IKsin(j[1]))))))*(IKsin(j[2]))))+(((-0.324171637484235)*(((((0.52353919050829)*(IKsin(j[0]))))+(((0.0934581434992053)*(IKcos(j[0]))))))*(IKcos(j[2]))))+(((-0.324171637484235)*(((((-0.0409555493238159)*(IKsin(j[0]))))+(((0.22942714606775)*(IKcos(j[0]))))))*(IKsin(j[1]))))+(((-0.324171637484235)*(((((0.142610275851393)*(IKsin(j[0]))))+(((-0.798882425671523)*(IKcos(j[0]))))))*(IKcos(j[1]))))+(((-0.324171637484235)*(((((-0.0656300100348293)*(((((0.946191894238107)*(IKcos(j[0]))))+(((-0.168906816209186)*(IKsin(j[0]))))))*(IKsin(j[1]))))+(((-0.0656300100348293)*(((((0.271732233620001)*(IKcos(j[0]))))+(((-0.0485075244479057)*(IKsin(j[0]))))))*(IKcos(j[1]))))))*(IKcos(j[2]))))+(((-0.324171637484235)*(((((-0.0115334342172636)*(IKcos(j[0]))))+(((-0.0646086535405889)*(IKsin(j[0]))))))*(IKsin(j[2]))))))*(IKcos(j[3]))))+(((((((8.53702182586258e-7)*(IKsin(j[0]))))+(((-4.78231786842813e-6)*(IKcos(j[0]))))))*(IKcos(j[1]))))+(((((((-0.164992413059238)*(IKcos(j[0]))))+(((-0.924263966079929)*(IKsin(j[0]))))))*(IKsin(j[2]))))+(((((((1.37341053562418e-6)*(IKcos(j[0]))))+(((-2.45170564589572e-7)*(IKsin(j[0]))))))*(IKsin(j[1]))))+(((((((-0.115872231636118)*(((((0.168906816209186)*(IKsin(j[0]))))+(((-0.946191894238107)*(IKcos(j[0]))))))*(IKsin(j[1]))))+(((-0.115872231636118)*(((((0.0485075244479057)*(IKsin(j[0]))))+(((-0.271732233620001)*(IKcos(j[0]))))))*(IKcos(j[1]))))))*(IKsin(j[2]))))+(((((((-0.938875058440104)*(((((0.271732233620001)*(IKcos(j[0]))))+(((-0.0485075244479057)*(IKsin(j[0]))))))*(IKcos(j[1]))))+(((-0.938875058440104)*(((((0.946191894238107)*(IKcos(j[0]))))+(((-0.168906816209186)*(IKsin(j[0]))))))*(IKsin(j[1]))))))*(IKcos(j[2]))))))*(IKsin(j[4]))))))*(IKcos(j[5]))))+(((((((-0.196099898904425)*(((((((((-0.020362708469395)*(IKcos(j[0]))))+(((-0.114068988634618)*(IKsin(j[0]))))))*(IKcos(j[2]))))+(((((((-0.324171637484235)*(((((-0.145607662687148)*(IKcos(j[0]))))+(((0.0259927472111257)*(IKsin(j[0]))))))*(IKsin(j[1]))))+(((-0.324171637484235)*(((((-0.0905086834657259)*(IKsin(j[0]))))+(((0.507016736064526)*(IKcos(j[0]))))))*(IKcos(j[1]))))+(((-0.324171637484235)*(((((0.837955424564001)*(((((0.168906816209186)*(IKsin(j[0]))))+(((-0.946191894238107)*(IKcos(j[0]))))))*(IKsin(j[1]))))+(((0.837955424564001)*(((((0.0485075244479057)*(IKsin(j[0]))))+(((-0.271732233620001)*(IKcos(j[0]))))))*(IKcos(j[1]))))))*(IKsin(j[2]))))+(((-0.324171637484235)*(((((-0.103420015812922)*(((((0.946191894238107)*(IKcos(j[0]))))+(((-0.168906816209186)*(IKsin(j[0]))))))*(IKsin(j[1]))))+(((-0.103420015812922)*(((((0.271732233620001)*(IKcos(j[0]))))+(((-0.0485075244479057)*(IKsin(j[0]))))))*(IKcos(j[1]))))))*(IKcos(j[2]))))+(((-0.324171637484235)*(((((-0.101810558420961)*(IKsin(j[0]))))+(((-0.0181744288701722)*(IKcos(j[0]))))))*(IKsin(j[2]))))+(((-0.324171637484235)*(((((0.824914877803331)*(IKsin(j[0]))))+(((0.147257386690619)*(IKcos(j[0]))))))*(IKcos(j[2]))))))*(IKsin(j[3]))))+(((((((-0.324171637484235)*(((((0.531815483588428)*(((((0.0485075244479057)*(IKsin(j[0]))))+(((-0.271732233620001)*(IKcos(j[0]))))))*(IKcos(j[1]))))+(((0.531815483588428)*(((((0.168906816209186)*(IKsin(j[0]))))+(((-0.946191894238107)*(IKcos(j[0]))))))*(IKsin(j[1]))))))*(IKsin(j[2]))))+(((-0.324171637484235)*(((((0.52353919050829)*(IKsin(j[0]))))+(((0.0934581434992053)*(IKcos(j[0]))))))*(IKcos(j[2]))))+(((-0.324171637484235)*(((((-0.0409555493238159)*(IKsin(j[0]))))+(((0.22942714606775)*(IKcos(j[0]))))))*(IKsin(j[1]))))+(((-0.324171637484235)*(((((0.142610275851393)*(IKsin(j[0]))))+(((-0.798882425671523)*(IKcos(j[0]))))))*(IKcos(j[1]))))+(((-0.324171637484235)*(((((-0.0656300100348293)*(((((0.946191894238107)*(IKcos(j[0]))))+(((-0.168906816209186)*(IKsin(j[0]))))))*(IKsin(j[1]))))+(((-0.0656300100348293)*(((((0.271732233620001)*(IKcos(j[0]))))+(((-0.0485075244479057)*(IKsin(j[0]))))))*(IKcos(j[1]))))))*(IKcos(j[2]))))+(((-0.324171637484235)*(((((-0.0115334342172636)*(IKcos(j[0]))))+(((-0.0646086535405889)*(IKsin(j[0]))))))*(IKsin(j[2]))))))*(IKcos(j[3]))))+(((((((8.53702182586258e-7)*(IKsin(j[0]))))+(((-4.78231786842813e-6)*(IKcos(j[0]))))))*(IKcos(j[1]))))+(((((((-0.164992413059238)*(IKcos(j[0]))))+(((-0.924263966079929)*(IKsin(j[0]))))))*(IKsin(j[2]))))+(((((((1.37341053562418e-6)*(IKcos(j[0]))))+(((-2.45170564589572e-7)*(IKsin(j[0]))))))*(IKsin(j[1]))))+(((((((-0.115872231636118)*(((((0.168906816209186)*(IKsin(j[0]))))+(((-0.946191894238107)*(IKcos(j[0]))))))*(IKsin(j[1]))))+(((-0.115872231636118)*(((((0.0485075244479057)*(IKsin(j[0]))))+(((-0.271732233620001)*(IKcos(j[0]))))))*(IKcos(j[1]))))))*(IKsin(j[2]))))+(((((((-0.938875058440104)*(((((0.271732233620001)*(IKcos(j[0]))))+(((-0.0485075244479057)*(IKsin(j[0]))))))*(IKcos(j[1]))))+(((-0.938875058440104)*(((((0.946191894238107)*(IKcos(j[0]))))+(((-0.168906816209186)*(IKsin(j[0]))))))*(IKsin(j[1]))))))*(IKcos(j[2]))))))*(IKsin(j[4]))))+(((-0.196099898904425)*(((((((((0.321730674246603)*(((((0.946191894238107)*(IKcos(j[0]))))+(((-0.168906816209186)*(IKsin(j[0]))))))*(IKsin(j[1]))))+(((0.321730674246603)*(((((0.271732233620001)*(IKcos(j[0]))))+(((-0.0485075244479057)*(IKsin(j[0]))))))*(IKcos(j[1]))))))*(IKcos(j[2]))))+(((((((8.40142576392187e-8)*(IKsin(j[0]))))+(((-4.70635888845422e-7)*(IKcos(j[0]))))))*(IKsin(j[1]))))+(((((((0.0397067222902749)*(((((0.0485075244479057)*(IKsin(j[0]))))+(((-0.271732233620001)*(IKcos(j[0]))))))*(IKcos(j[1]))))+(((0.0397067222902749)*(((((0.168906816209186)*(IKsin(j[0]))))+(((-0.946191894238107)*(IKcos(j[0]))))))*(IKsin(j[1]))))))*(IKsin(j[2]))))+(((((((1.63878924936753e-6)*(IKcos(j[0]))))+(((-2.92543908095302e-7)*(IKsin(j[0]))))))*(IKcos(j[1]))))+(((((((-0.945998281949174)*(((((0.142610275851393)*(IKsin(j[0]))))+(((-0.798882425671523)*(IKcos(j[0]))))))*(IKcos(j[1]))))+(((-0.945998281949174)*(((((-0.0409555493238159)*(IKsin(j[0]))))+(((0.22942714606775)*(IKcos(j[0]))))))*(IKsin(j[1]))))+(((-0.945998281949174)*(((((0.52353919050829)*(IKsin(j[0]))))+(((0.0934581434992053)*(IKcos(j[0]))))))*(IKcos(j[2]))))+(((-0.945998281949174)*(((((-0.0115334342172636)*(IKcos(j[0]))))+(((-0.0646086535405889)*(IKsin(j[0]))))))*(IKsin(j[2]))))+(((-0.945998281949174)*(((((0.531815483588428)*(((((0.0485075244479057)*(IKsin(j[0]))))+(((-0.271732233620001)*(IKcos(j[0]))))))*(IKcos(j[1]))))+(((0.531815483588428)*(((((0.168906816209186)*(IKsin(j[0]))))+(((-0.946191894238107)*(IKcos(j[0]))))))*(IKsin(j[1]))))))*(IKsin(j[2]))))+(((-0.945998281949174)*(((((-0.0656300100348293)*(((((0.946191894238107)*(IKcos(j[0]))))+(((-0.168906816209186)*(IKsin(j[0]))))))*(IKsin(j[1]))))+(((-0.0656300100348293)*(((((0.271732233620001)*(IKcos(j[0]))))+(((-0.0485075244479057)*(IKsin(j[0]))))))*(IKcos(j[1]))))))*(IKcos(j[2]))))))*(IKcos(j[3]))))+(((((((0.0565390674956448)*(IKcos(j[0]))))+(((0.31672379228264)*(IKsin(j[0]))))))*(IKsin(j[2]))))+(((((((0.0069778272054965)*(IKcos(j[0]))))+(((0.039088792799564)*(IKsin(j[0]))))))*(IKcos(j[2]))))+(((((((-0.945998281949174)*(((((0.837955424564001)*(((((0.168906816209186)*(IKsin(j[0]))))+(((-0.946191894238107)*(IKcos(j[0]))))))*(IKsin(j[1]))))+(((0.837955424564001)*(((((0.0485075244479057)*(IKsin(j[0]))))+(((-0.271732233620001)*(IKcos(j[0]))))))*(IKcos(j[1]))))))*(IKsin(j[2]))))+(((-0.945998281949174)*(((((0.824914877803331)*(IKsin(j[0]))))+(((0.147257386690619)*(IKcos(j[0]))))))*(IKcos(j[2]))))+(((-0.945998281949174)*(((((-0.101810558420961)*(IKsin(j[0]))))+(((-0.0181744288701722)*(IKcos(j[0]))))))*(IKsin(j[2]))))+(((-0.945998281949174)*(((((-0.0905086834657259)*(IKsin(j[0]))))+(((0.507016736064526)*(IKcos(j[0]))))))*(IKcos(j[1]))))+(((-0.945998281949174)*(((((-0.145607662687148)*(IKcos(j[0]))))+(((0.0259927472111257)*(IKsin(j[0]))))))*(IKsin(j[1]))))+(((-0.945998281949174)*(((((-0.103420015812922)*(((((0.946191894238107)*(IKcos(j[0]))))+(((-0.168906816209186)*(IKsin(j[0]))))))*(IKsin(j[1]))))+(((-0.103420015812922)*(((((0.271732233620001)*(IKcos(j[0]))))+(((-0.0485075244479057)*(IKsin(j[0]))))))*(IKcos(j[1]))))))*(IKcos(j[2]))))))*(IKsin(j[3]))))))*(IKcos(j[4]))))))*(IKsin(j[5])))));
eerot[5]=((((((((0.00413000607730841)*(((((((((0.321730674246603)*(((((0.946191894238107)*(IKcos(j[0]))))+(((-0.168906816209186)*(IKsin(j[0]))))))*(IKsin(j[1]))))+(((0.321730674246603)*(((((0.271732233620001)*(IKcos(j[0]))))+(((-0.0485075244479057)*(IKsin(j[0]))))))*(IKcos(j[1]))))))*(IKcos(j[2]))))+(((((((8.40142576392187e-8)*(IKsin(j[0]))))+(((-4.70635888845422e-7)*(IKcos(j[0]))))))*(IKsin(j[1]))))+(((((((0.0397067222902749)*(((((0.0485075244479057)*(IKsin(j[0]))))+(((-0.271732233620001)*(IKcos(j[0]))))))*(IKcos(j[1]))))+(((0.0397067222902749)*(((((0.168906816209186)*(IKsin(j[0]))))+(((-0.946191894238107)*(IKcos(j[0]))))))*(IKsin(j[1]))))))*(IKsin(j[2]))))+(((((((1.63878924936753e-6)*(IKcos(j[0]))))+(((-2.92543908095302e-7)*(IKsin(j[0]))))))*(IKcos(j[1]))))+(((((((-0.945998281949174)*(((((0.142610275851393)*(IKsin(j[0]))))+(((-0.798882425671523)*(IKcos(j[0]))))))*(IKcos(j[1]))))+(((-0.945998281949174)*(((((-0.0409555493238159)*(IKsin(j[0]))))+(((0.22942714606775)*(IKcos(j[0]))))))*(IKsin(j[1]))))+(((-0.945998281949174)*(((((0.52353919050829)*(IKsin(j[0]))))+(((0.0934581434992053)*(IKcos(j[0]))))))*(IKcos(j[2]))))+(((-0.945998281949174)*(((((-0.0115334342172636)*(IKcos(j[0]))))+(((-0.0646086535405889)*(IKsin(j[0]))))))*(IKsin(j[2]))))+(((-0.945998281949174)*(((((0.531815483588428)*(((((0.0485075244479057)*(IKsin(j[0]))))+(((-0.271732233620001)*(IKcos(j[0]))))))*(IKcos(j[1]))))+(((0.531815483588428)*(((((0.168906816209186)*(IKsin(j[0]))))+(((-0.946191894238107)*(IKcos(j[0]))))))*(IKsin(j[1]))))))*(IKsin(j[2]))))+(((-0.945998281949174)*(((((-0.0656300100348293)*(((((0.946191894238107)*(IKcos(j[0]))))+(((-0.168906816209186)*(IKsin(j[0]))))))*(IKsin(j[1]))))+(((-0.0656300100348293)*(((((0.271732233620001)*(IKcos(j[0]))))+(((-0.0485075244479057)*(IKsin(j[0]))))))*(IKcos(j[1]))))))*(IKcos(j[2]))))))*(IKcos(j[3]))))+(((((((0.0565390674956448)*(IKcos(j[0]))))+(((0.31672379228264)*(IKsin(j[0]))))))*(IKsin(j[2]))))+(((((((0.0069778272054965)*(IKcos(j[0]))))+(((0.039088792799564)*(IKsin(j[0]))))))*(IKcos(j[2]))))+(((((((-0.945998281949174)*(((((0.837955424564001)*(((((0.168906816209186)*(IKsin(j[0]))))+(((-0.946191894238107)*(IKcos(j[0]))))))*(IKsin(j[1]))))+(((0.837955424564001)*(((((0.0485075244479057)*(IKsin(j[0]))))+(((-0.271732233620001)*(IKcos(j[0]))))))*(IKcos(j[1]))))))*(IKsin(j[2]))))+(((-0.945998281949174)*(((((0.824914877803331)*(IKsin(j[0]))))+(((0.147257386690619)*(IKcos(j[0]))))))*(IKcos(j[2]))))+(((-0.945998281949174)*(((((-0.101810558420961)*(IKsin(j[0]))))+(((-0.0181744288701722)*(IKcos(j[0]))))))*(IKsin(j[2]))))+(((-0.945998281949174)*(((((-0.0905086834657259)*(IKsin(j[0]))))+(((0.507016736064526)*(IKcos(j[0]))))))*(IKcos(j[1]))))+(((-0.945998281949174)*(((((-0.145607662687148)*(IKcos(j[0]))))+(((0.0259927472111257)*(IKsin(j[0]))))))*(IKsin(j[1]))))+(((-0.945998281949174)*(((((-0.103420015812922)*(((((0.946191894238107)*(IKcos(j[0]))))+(((-0.168906816209186)*(IKsin(j[0]))))))*(IKsin(j[1]))))+(((-0.103420015812922)*(((((0.271732233620001)*(IKcos(j[0]))))+(((-0.0485075244479057)*(IKsin(j[0]))))))*(IKcos(j[1]))))))*(IKcos(j[2]))))))*(IKsin(j[3]))))))*(IKsin(j[4]))))+(((0.00413000607730841)*(((((((((0.115872231636118)*(((((0.0485075244479057)*(IKsin(j[0]))))+(((-0.271732233620001)*(IKcos(j[0]))))))*(IKcos(j[1]))))+(((0.115872231636118)*(((((0.168906816209186)*(IKsin(j[0]))))+(((-0.946191894238107)*(IKcos(j[0]))))))*(IKsin(j[1]))))))*(IKsin(j[2]))))+(((((((0.114068988634618)*(IKsin(j[0]))))+(((0.020362708469395)*(IKcos(j[0]))))))*(IKcos(j[2]))))+(((((((0.924263966079929)*(IKsin(j[0]))))+(((0.164992413059238)*(IKcos(j[0]))))))*(IKsin(j[2]))))+(((((((4.78231786842813e-6)*(IKcos(j[0]))))+(((-8.53702182586258e-7)*(IKsin(j[0]))))))*(IKcos(j[1]))))+(((((((0.324171637484235)*(((((0.52353919050829)*(IKsin(j[0]))))+(((0.0934581434992053)*(IKcos(j[0]))))))*(IKcos(j[2]))))+(((0.324171637484235)*(((((0.531815483588428)*(((((0.0485075244479057)*(IKsin(j[0]))))+(((-0.271732233620001)*(IKcos(j[0]))))))*(IKcos(j[1]))))+(((0.531815483588428)*(((((0.168906816209186)*(IKsin(j[0]))))+(((-0.946191894238107)*(IKcos(j[0]))))))*(IKsin(j[1]))))))*(IKsin(j[2]))))+(((0.324171637484235)*(((((0.142610275851393)*(IKsin(j[0]))))+(((-0.798882425671523)*(IKcos(j[0]))))))*(IKcos(j[1]))))+(((0.324171637484235)*(((((-0.0409555493238159)*(IKsin(j[0]))))+(((0.22942714606775)*(IKcos(j[0]))))))*(IKsin(j[1]))))+(((0.324171637484235)*(((((-0.0115334342172636)*(IKcos(j[0]))))+(((-0.0646086535405889)*(IKsin(j[0]))))))*(IKsin(j[2]))))+(((0.324171637484235)*(((((-0.0656300100348293)*(((((0.946191894238107)*(IKcos(j[0]))))+(((-0.168906816209186)*(IKsin(j[0]))))))*(IKsin(j[1]))))+(((-0.0656300100348293)*(((((0.271732233620001)*(IKcos(j[0]))))+(((-0.0485075244479057)*(IKsin(j[0]))))))*(IKcos(j[1]))))))*(IKcos(j[2]))))))*(IKcos(j[3]))))+(((((((2.45170564589572e-7)*(IKsin(j[0]))))+(((-1.37341053562418e-6)*(IKcos(j[0]))))))*(IKsin(j[1]))))+(((((((0.324171637484235)*(((((0.824914877803331)*(IKsin(j[0]))))+(((0.147257386690619)*(IKcos(j[0]))))))*(IKcos(j[2]))))+(((0.324171637484235)*(((((-0.145607662687148)*(IKcos(j[0]))))+(((0.0259927472111257)*(IKsin(j[0]))))))*(IKsin(j[1]))))+(((0.324171637484235)*(((((-0.0905086834657259)*(IKsin(j[0]))))+(((0.507016736064526)*(IKcos(j[0]))))))*(IKcos(j[1]))))+(((0.324171637484235)*(((((-0.101810558420961)*(IKsin(j[0]))))+(((-0.0181744288701722)*(IKcos(j[0]))))))*(IKsin(j[2]))))+(((0.324171637484235)*(((((-0.103420015812922)*(((((0.946191894238107)*(IKcos(j[0]))))+(((-0.168906816209186)*(IKsin(j[0]))))))*(IKsin(j[1]))))+(((-0.103420015812922)*(((((0.271732233620001)*(IKcos(j[0]))))+(((-0.0485075244479057)*(IKsin(j[0]))))))*(IKcos(j[1]))))))*(IKcos(j[2]))))+(((0.324171637484235)*(((((0.837955424564001)*(((((0.168906816209186)*(IKsin(j[0]))))+(((-0.946191894238107)*(IKcos(j[0]))))))*(IKsin(j[1]))))+(((0.837955424564001)*(((((0.0485075244479057)*(IKsin(j[0]))))+(((-0.271732233620001)*(IKcos(j[0]))))))*(IKcos(j[1]))))))*(IKsin(j[2]))))))*(IKsin(j[3]))))+(((((((0.938875058440104)*(((((0.271732233620001)*(IKcos(j[0]))))+(((-0.0485075244479057)*(IKsin(j[0]))))))*(IKcos(j[1]))))+(((0.938875058440104)*(((((0.946191894238107)*(IKcos(j[0]))))+(((-0.168906816209186)*(IKsin(j[0]))))))*(IKsin(j[1]))))))*(IKcos(j[2]))))))*(IKcos(j[4]))))))*(IKcos(j[6]))))+(((((((0.999991471488533)*(((((0.196099898904425)*(((((-1.0)*(((((-0.103420015812922)*(((((0.946191894238107)*(IKcos(j[0]))))+(((-0.168906816209186)*(IKsin(j[0]))))))*(IKsin(j[1]))))+(((-0.103420015812922)*(((((0.271732233620001)*(IKcos(j[0]))))+(((-0.0485075244479057)*(IKsin(j[0]))))))*(IKcos(j[1]))))))*(IKcos(j[2]))))+(((-1.0)*(((((-0.101810558420961)*(IKsin(j[0]))))+(((-0.0181744288701722)*(IKcos(j[0]))))))*(IKsin(j[2]))))+(((-1.0)*(((((-0.0905086834657259)*(IKsin(j[0]))))+(((0.507016736064526)*(IKcos(j[0]))))))*(IKcos(j[1]))))+(((-1.0)*(((((-0.145607662687148)*(IKcos(j[0]))))+(((0.0259927472111257)*(IKsin(j[0]))))))*(IKsin(j[1]))))+(((-1.0)*(((((0.837955424564001)*(((((0.168906816209186)*(IKsin(j[0]))))+(((-0.946191894238107)*(IKcos(j[0]))))))*(IKsin(j[1]))))+(((0.837955424564001)*(((((0.0485075244479057)*(IKsin(j[0]))))+(((-0.271732233620001)*(IKcos(j[0]))))))*(IKcos(j[1]))))))*(IKsin(j[2]))))+(((-1.0)*(((((0.824914877803331)*(IKsin(j[0]))))+(((0.147257386690619)*(IKcos(j[0]))))))*(IKcos(j[2]))))))*(IKcos(j[3]))))+(((0.196099898904425)*(((((-1.0)*(((((-0.22942714606775)*(IKcos(j[0]))))+(((0.0409555493238159)*(IKsin(j[0]))))))*(IKsin(j[1]))))+(((-1.0)*(((((0.0646086535405889)*(IKsin(j[0]))))+(((0.0115334342172636)*(IKcos(j[0]))))))*(IKsin(j[2]))))+(((-1.0)*(((((-0.142610275851393)*(IKsin(j[0]))))+(((0.798882425671523)*(IKcos(j[0]))))))*(IKcos(j[1]))))+(((-1.0)*(((((-0.531815483588428)*(((((0.168906816209186)*(IKsin(j[0]))))+(((-0.946191894238107)*(IKcos(j[0]))))))*(IKsin(j[1]))))+(((-0.531815483588428)*(((((0.0485075244479057)*(IKsin(j[0]))))+(((-0.271732233620001)*(IKcos(j[0]))))))*(IKcos(j[1]))))))*(IKsin(j[2]))))+(((-1.0)*(((((-0.0934581434992053)*(IKcos(j[0]))))+(((-0.52353919050829)*(IKsin(j[0]))))))*(IKcos(j[2]))))+(((-1.0)*(((((0.0656300100348293)*(((((0.271732233620001)*(IKcos(j[0]))))+(((-0.0485075244479057)*(IKsin(j[0]))))))*(IKcos(j[1]))))+(((0.0656300100348293)*(((((0.946191894238107)*(IKcos(j[0]))))+(((-0.168906816209186)*(IKsin(j[0]))))))*(IKsin(j[1]))))))*(IKcos(j[2]))))))*(IKsin(j[3]))))))*(IKsin(j[5]))))+(((0.999991471488533)*(((((0.980583922797878)*(((((((((0.837955424564001)*(((((0.168906816209186)*(IKsin(j[0]))))+(((-0.946191894238107)*(IKcos(j[0]))))))*(IKsin(j[1]))))+(((0.837955424564001)*(((((0.0485075244479057)*(IKsin(j[0]))))+(((-0.271732233620001)*(IKcos(j[0]))))))*(IKcos(j[1]))))))*(IKsin(j[2]))))+(((((((-0.101810558420961)*(IKsin(j[0]))))+(((-0.0181744288701722)*(IKcos(j[0]))))))*(IKsin(j[2]))))+(((((((-0.145607662687148)*(IKcos(j[0]))))+(((0.0259927472111257)*(IKsin(j[0]))))))*(IKsin(j[1]))))+(((((((-0.103420015812922)*(((((0.946191894238107)*(IKcos(j[0]))))+(((-0.168906816209186)*(IKsin(j[0]))))))*(IKsin(j[1]))))+(((-0.103420015812922)*(((((0.271732233620001)*(IKcos(j[0]))))+(((-0.0485075244479057)*(IKsin(j[0]))))))*(IKcos(j[1]))))))*(IKcos(j[2]))))+(((((((0.824914877803331)*(IKsin(j[0]))))+(((0.147257386690619)*(IKcos(j[0]))))))*(IKcos(j[2]))))+(((((((-0.0905086834657259)*(IKsin(j[0]))))+(((0.507016736064526)*(IKcos(j[0]))))))*(IKcos(j[1]))))))*(IKcos(j[3]))))+(((0.980583922797878)*(((((((((0.0656300100348293)*(((((0.271732233620001)*(IKcos(j[0]))))+(((-0.0485075244479057)*(IKsin(j[0]))))))*(IKcos(j[1]))))+(((0.0656300100348293)*(((((0.946191894238107)*(IKcos(j[0]))))+(((-0.168906816209186)*(IKsin(j[0]))))))*(IKsin(j[1]))))))*(IKcos(j[2]))))+(((((((-0.0934581434992053)*(IKcos(j[0]))))+(((-0.52353919050829)*(IKsin(j[0]))))))*(IKcos(j[2]))))+(((((((0.0646086535405889)*(IKsin(j[0]))))+(((0.0115334342172636)*(IKcos(j[0]))))))*(IKsin(j[2]))))+(((((((-0.142610275851393)*(IKsin(j[0]))))+(((0.798882425671523)*(IKcos(j[0]))))))*(IKcos(j[1]))))+(((((((-0.531815483588428)*(((((0.168906816209186)*(IKsin(j[0]))))+(((-0.946191894238107)*(IKcos(j[0]))))))*(IKsin(j[1]))))+(((-0.531815483588428)*(((((0.0485075244479057)*(IKsin(j[0]))))+(((-0.271732233620001)*(IKcos(j[0]))))))*(IKcos(j[1]))))))*(IKsin(j[2]))))+(((((((-0.22942714606775)*(IKcos(j[0]))))+(((0.0409555493238159)*(IKsin(j[0]))))))*(IKsin(j[1]))))))*(IKsin(j[3]))))))*(IKcos(j[5]))))+(((0.999991471488533)*(((((0.980583922797878)*(((((((((0.321730674246603)*(((((0.946191894238107)*(IKcos(j[0]))))+(((-0.168906816209186)*(IKsin(j[0]))))))*(IKsin(j[1]))))+(((0.321730674246603)*(((((0.271732233620001)*(IKcos(j[0]))))+(((-0.0485075244479057)*(IKsin(j[0]))))))*(IKcos(j[1]))))))*(IKcos(j[2]))))+(((((((8.40142576392187e-8)*(IKsin(j[0]))))+(((-4.70635888845422e-7)*(IKcos(j[0]))))))*(IKsin(j[1]))))+(((((((0.0397067222902749)*(((((0.0485075244479057)*(IKsin(j[0]))))+(((-0.271732233620001)*(IKcos(j[0]))))))*(IKcos(j[1]))))+(((0.0397067222902749)*(((((0.168906816209186)*(IKsin(j[0]))))+(((-0.946191894238107)*(IKcos(j[0]))))))*(IKsin(j[1]))))))*(IKsin(j[2]))))+(((((((1.63878924936753e-6)*(IKcos(j[0]))))+(((-2.92543908095302e-7)*(IKsin(j[0]))))))*(IKcos(j[1]))))+(((((((-0.945998281949174)*(((((0.142610275851393)*(IKsin(j[0]))))+(((-0.798882425671523)*(IKcos(j[0]))))))*(IKcos(j[1]))))+(((-0.945998281949174)*(((((-0.0409555493238159)*(IKsin(j[0]))))+(((0.22942714606775)*(IKcos(j[0]))))))*(IKsin(j[1]))))+(((-0.945998281949174)*(((((0.52353919050829)*(IKsin(j[0]))))+(((0.0934581434992053)*(IKcos(j[0]))))))*(IKcos(j[2]))))+(((-0.945998281949174)*(((((-0.0115334342172636)*(IKcos(j[0]))))+(((-0.0646086535405889)*(IKsin(j[0]))))))*(IKsin(j[2]))))+(((-0.945998281949174)*(((((0.531815483588428)*(((((0.0485075244479057)*(IKsin(j[0]))))+(((-0.271732233620001)*(IKcos(j[0]))))))*(IKcos(j[1]))))+(((0.531815483588428)*(((((0.168906816209186)*(IKsin(j[0]))))+(((-0.946191894238107)*(IKcos(j[0]))))))*(IKsin(j[1]))))))*(IKsin(j[2]))))+(((-0.945998281949174)*(((((-0.0656300100348293)*(((((0.946191894238107)*(IKcos(j[0]))))+(((-0.168906816209186)*(IKsin(j[0]))))))*(IKsin(j[1]))))+(((-0.0656300100348293)*(((((0.271732233620001)*(IKcos(j[0]))))+(((-0.0485075244479057)*(IKsin(j[0]))))))*(IKcos(j[1]))))))*(IKcos(j[2]))))))*(IKcos(j[3]))))+(((((((0.0565390674956448)*(IKcos(j[0]))))+(((0.31672379228264)*(IKsin(j[0]))))))*(IKsin(j[2]))))+(((((((0.0069778272054965)*(IKcos(j[0]))))+(((0.039088792799564)*(IKsin(j[0]))))))*(IKcos(j[2]))))+(((((((-0.945998281949174)*(((((0.837955424564001)*(((((0.168906816209186)*(IKsin(j[0]))))+(((-0.946191894238107)*(IKcos(j[0]))))))*(IKsin(j[1]))))+(((0.837955424564001)*(((((0.0485075244479057)*(IKsin(j[0]))))+(((-0.271732233620001)*(IKcos(j[0]))))))*(IKcos(j[1]))))))*(IKsin(j[2]))))+(((-0.945998281949174)*(((((0.824914877803331)*(IKsin(j[0]))))+(((0.147257386690619)*(IKcos(j[0]))))))*(IKcos(j[2]))))+(((-0.945998281949174)*(((((-0.101810558420961)*(IKsin(j[0]))))+(((-0.0181744288701722)*(IKcos(j[0]))))))*(IKsin(j[2]))))+(((-0.945998281949174)*(((((-0.0905086834657259)*(IKsin(j[0]))))+(((0.507016736064526)*(IKcos(j[0]))))))*(IKcos(j[1]))))+(((-0.945998281949174)*(((((-0.145607662687148)*(IKcos(j[0]))))+(((0.0259927472111257)*(IKsin(j[0]))))))*(IKsin(j[1]))))+(((-0.945998281949174)*(((((-0.103420015812922)*(((((0.946191894238107)*(IKcos(j[0]))))+(((-0.168906816209186)*(IKsin(j[0]))))))*(IKsin(j[1]))))+(((-0.103420015812922)*(((((0.271732233620001)*(IKcos(j[0]))))+(((-0.0485075244479057)*(IKsin(j[0]))))))*(IKcos(j[1]))))))*(IKcos(j[2]))))))*(IKsin(j[3]))))))*(IKcos(j[4]))))+(((0.980583922797878)*(((((((((-0.020362708469395)*(IKcos(j[0]))))+(((-0.114068988634618)*(IKsin(j[0]))))))*(IKcos(j[2]))))+(((((((-0.324171637484235)*(((((-0.145607662687148)*(IKcos(j[0]))))+(((0.0259927472111257)*(IKsin(j[0]))))))*(IKsin(j[1]))))+(((-0.324171637484235)*(((((-0.0905086834657259)*(IKsin(j[0]))))+(((0.507016736064526)*(IKcos(j[0]))))))*(IKcos(j[1]))))+(((-0.324171637484235)*(((((0.837955424564001)*(((((0.168906816209186)*(IKsin(j[0]))))+(((-0.946191894238107)*(IKcos(j[0]))))))*(IKsin(j[1]))))+(((0.837955424564001)*(((((0.0485075244479057)*(IKsin(j[0]))))+(((-0.271732233620001)*(IKcos(j[0]))))))*(IKcos(j[1]))))))*(IKsin(j[2]))))+(((-0.324171637484235)*(((((-0.103420015812922)*(((((0.946191894238107)*(IKcos(j[0]))))+(((-0.168906816209186)*(IKsin(j[0]))))))*(IKsin(j[1]))))+(((-0.103420015812922)*(((((0.271732233620001)*(IKcos(j[0]))))+(((-0.0485075244479057)*(IKsin(j[0]))))))*(IKcos(j[1]))))))*(IKcos(j[2]))))+(((-0.324171637484235)*(((((-0.101810558420961)*(IKsin(j[0]))))+(((-0.0181744288701722)*(IKcos(j[0]))))))*(IKsin(j[2]))))+(((-0.324171637484235)*(((((0.824914877803331)*(IKsin(j[0]))))+(((0.147257386690619)*(IKcos(j[0]))))))*(IKcos(j[2]))))))*(IKsin(j[3]))))+(((((((-0.324171637484235)*(((((0.531815483588428)*(((((0.0485075244479057)*(IKsin(j[0]))))+(((-0.271732233620001)*(IKcos(j[0]))))))*(IKcos(j[1]))))+(((0.531815483588428)*(((((0.168906816209186)*(IKsin(j[0]))))+(((-0.946191894238107)*(IKcos(j[0]))))))*(IKsin(j[1]))))))*(IKsin(j[2]))))+(((-0.324171637484235)*(((((0.52353919050829)*(IKsin(j[0]))))+(((0.0934581434992053)*(IKcos(j[0]))))))*(IKcos(j[2]))))+(((-0.324171637484235)*(((((-0.0409555493238159)*(IKsin(j[0]))))+(((0.22942714606775)*(IKcos(j[0]))))))*(IKsin(j[1]))))+(((-0.324171637484235)*(((((0.142610275851393)*(IKsin(j[0]))))+(((-0.798882425671523)*(IKcos(j[0]))))))*(IKcos(j[1]))))+(((-0.324171637484235)*(((((-0.0656300100348293)*(((((0.946191894238107)*(IKcos(j[0]))))+(((-0.168906816209186)*(IKsin(j[0]))))))*(IKsin(j[1]))))+(((-0.0656300100348293)*(((((0.271732233620001)*(IKcos(j[0]))))+(((-0.0485075244479057)*(IKsin(j[0]))))))*(IKcos(j[1]))))))*(IKcos(j[2]))))+(((-0.324171637484235)*(((((-0.0115334342172636)*(IKcos(j[0]))))+(((-0.0646086535405889)*(IKsin(j[0]))))))*(IKsin(j[2]))))))*(IKcos(j[3]))))+(((((((8.53702182586258e-7)*(IKsin(j[0]))))+(((-4.78231786842813e-6)*(IKcos(j[0]))))))*(IKcos(j[1]))))+(((((((-0.164992413059238)*(IKcos(j[0]))))+(((-0.924263966079929)*(IKsin(j[0]))))))*(IKsin(j[2]))))+(((((((1.37341053562418e-6)*(IKcos(j[0]))))+(((-2.45170564589572e-7)*(IKsin(j[0]))))))*(IKsin(j[1]))))+(((((((-0.115872231636118)*(((((0.168906816209186)*(IKsin(j[0]))))+(((-0.946191894238107)*(IKcos(j[0]))))))*(IKsin(j[1]))))+(((-0.115872231636118)*(((((0.0485075244479057)*(IKsin(j[0]))))+(((-0.271732233620001)*(IKcos(j[0]))))))*(IKcos(j[1]))))))*(IKsin(j[2]))))+(((((((-0.938875058440104)*(((((0.271732233620001)*(IKcos(j[0]))))+(((-0.0485075244479057)*(IKsin(j[0]))))))*(IKcos(j[1]))))+(((-0.938875058440104)*(((((0.946191894238107)*(IKcos(j[0]))))+(((-0.168906816209186)*(IKsin(j[0]))))))*(IKsin(j[1]))))))*(IKcos(j[2]))))))*(IKsin(j[4]))))))*(IKsin(j[5]))))+(((0.999991471488533)*(((((0.196099898904425)*(((((((((-0.020362708469395)*(IKcos(j[0]))))+(((-0.114068988634618)*(IKsin(j[0]))))))*(IKcos(j[2]))))+(((((((-0.324171637484235)*(((((-0.145607662687148)*(IKcos(j[0]))))+(((0.0259927472111257)*(IKsin(j[0]))))))*(IKsin(j[1]))))+(((-0.324171637484235)*(((((-0.0905086834657259)*(IKsin(j[0]))))+(((0.507016736064526)*(IKcos(j[0]))))))*(IKcos(j[1]))))+(((-0.324171637484235)*(((((0.837955424564001)*(((((0.168906816209186)*(IKsin(j[0]))))+(((-0.946191894238107)*(IKcos(j[0]))))))*(IKsin(j[1]))))+(((0.837955424564001)*(((((0.0485075244479057)*(IKsin(j[0]))))+(((-0.271732233620001)*(IKcos(j[0]))))))*(IKcos(j[1]))))))*(IKsin(j[2]))))+(((-0.324171637484235)*(((((-0.103420015812922)*(((((0.946191894238107)*(IKcos(j[0]))))+(((-0.168906816209186)*(IKsin(j[0]))))))*(IKsin(j[1]))))+(((-0.103420015812922)*(((((0.271732233620001)*(IKcos(j[0]))))+(((-0.0485075244479057)*(IKsin(j[0]))))))*(IKcos(j[1]))))))*(IKcos(j[2]))))+(((-0.324171637484235)*(((((-0.101810558420961)*(IKsin(j[0]))))+(((-0.0181744288701722)*(IKcos(j[0]))))))*(IKsin(j[2]))))+(((-0.324171637484235)*(((((0.824914877803331)*(IKsin(j[0]))))+(((0.147257386690619)*(IKcos(j[0]))))))*(IKcos(j[2]))))))*(IKsin(j[3]))))+(((((((-0.324171637484235)*(((((0.531815483588428)*(((((0.0485075244479057)*(IKsin(j[0]))))+(((-0.271732233620001)*(IKcos(j[0]))))))*(IKcos(j[1]))))+(((0.531815483588428)*(((((0.168906816209186)*(IKsin(j[0]))))+(((-0.946191894238107)*(IKcos(j[0]))))))*(IKsin(j[1]))))))*(IKsin(j[2]))))+(((-0.324171637484235)*(((((0.52353919050829)*(IKsin(j[0]))))+(((0.0934581434992053)*(IKcos(j[0]))))))*(IKcos(j[2]))))+(((-0.324171637484235)*(((((-0.0409555493238159)*(IKsin(j[0]))))+(((0.22942714606775)*(IKcos(j[0]))))))*(IKsin(j[1]))))+(((-0.324171637484235)*(((((0.142610275851393)*(IKsin(j[0]))))+(((-0.798882425671523)*(IKcos(j[0]))))))*(IKcos(j[1]))))+(((-0.324171637484235)*(((((-0.0656300100348293)*(((((0.946191894238107)*(IKcos(j[0]))))+(((-0.168906816209186)*(IKsin(j[0]))))))*(IKsin(j[1]))))+(((-0.0656300100348293)*(((((0.271732233620001)*(IKcos(j[0]))))+(((-0.0485075244479057)*(IKsin(j[0]))))))*(IKcos(j[1]))))))*(IKcos(j[2]))))+(((-0.324171637484235)*(((((-0.0115334342172636)*(IKcos(j[0]))))+(((-0.0646086535405889)*(IKsin(j[0]))))))*(IKsin(j[2]))))))*(IKcos(j[3]))))+(((((((8.53702182586258e-7)*(IKsin(j[0]))))+(((-4.78231786842813e-6)*(IKcos(j[0]))))))*(IKcos(j[1]))))+(((((((-0.164992413059238)*(IKcos(j[0]))))+(((-0.924263966079929)*(IKsin(j[0]))))))*(IKsin(j[2]))))+(((((((1.37341053562418e-6)*(IKcos(j[0]))))+(((-2.45170564589572e-7)*(IKsin(j[0]))))))*(IKsin(j[1]))))+(((((((-0.115872231636118)*(((((0.168906816209186)*(IKsin(j[0]))))+(((-0.946191894238107)*(IKcos(j[0]))))))*(IKsin(j[1]))))+(((-0.115872231636118)*(((((0.0485075244479057)*(IKsin(j[0]))))+(((-0.271732233620001)*(IKcos(j[0]))))))*(IKcos(j[1]))))))*(IKsin(j[2]))))+(((((((-0.938875058440104)*(((((0.271732233620001)*(IKcos(j[0]))))+(((-0.0485075244479057)*(IKsin(j[0]))))))*(IKcos(j[1]))))+(((-0.938875058440104)*(((((0.946191894238107)*(IKcos(j[0]))))+(((-0.168906816209186)*(IKsin(j[0]))))))*(IKsin(j[1]))))))*(IKcos(j[2]))))))*(IKsin(j[4]))))+(((0.196099898904425)*(((((((((0.321730674246603)*(((((0.946191894238107)*(IKcos(j[0]))))+(((-0.168906816209186)*(IKsin(j[0]))))))*(IKsin(j[1]))))+(((0.321730674246603)*(((((0.271732233620001)*(IKcos(j[0]))))+(((-0.0485075244479057)*(IKsin(j[0]))))))*(IKcos(j[1]))))))*(IKcos(j[2]))))+(((((((8.40142576392187e-8)*(IKsin(j[0]))))+(((-4.70635888845422e-7)*(IKcos(j[0]))))))*(IKsin(j[1]))))+(((((((0.0397067222902749)*(((((0.0485075244479057)*(IKsin(j[0]))))+(((-0.271732233620001)*(IKcos(j[0]))))))*(IKcos(j[1]))))+(((0.0397067222902749)*(((((0.168906816209186)*(IKsin(j[0]))))+(((-0.946191894238107)*(IKcos(j[0]))))))*(IKsin(j[1]))))))*(IKsin(j[2]))))+(((((((1.63878924936753e-6)*(IKcos(j[0]))))+(((-2.92543908095302e-7)*(IKsin(j[0]))))))*(IKcos(j[1]))))+(((((((-0.945998281949174)*(((((0.142610275851393)*(IKsin(j[0]))))+(((-0.798882425671523)*(IKcos(j[0]))))))*(IKcos(j[1]))))+(((-0.945998281949174)*(((((-0.0409555493238159)*(IKsin(j[0]))))+(((0.22942714606775)*(IKcos(j[0]))))))*(IKsin(j[1]))))+(((-0.945998281949174)*(((((0.52353919050829)*(IKsin(j[0]))))+(((0.0934581434992053)*(IKcos(j[0]))))))*(IKcos(j[2]))))+(((-0.945998281949174)*(((((-0.0115334342172636)*(IKcos(j[0]))))+(((-0.0646086535405889)*(IKsin(j[0]))))))*(IKsin(j[2]))))+(((-0.945998281949174)*(((((0.531815483588428)*(((((0.0485075244479057)*(IKsin(j[0]))))+(((-0.271732233620001)*(IKcos(j[0]))))))*(IKcos(j[1]))))+(((0.531815483588428)*(((((0.168906816209186)*(IKsin(j[0]))))+(((-0.946191894238107)*(IKcos(j[0]))))))*(IKsin(j[1]))))))*(IKsin(j[2]))))+(((-0.945998281949174)*(((((-0.0656300100348293)*(((((0.946191894238107)*(IKcos(j[0]))))+(((-0.168906816209186)*(IKsin(j[0]))))))*(IKsin(j[1]))))+(((-0.0656300100348293)*(((((0.271732233620001)*(IKcos(j[0]))))+(((-0.0485075244479057)*(IKsin(j[0]))))))*(IKcos(j[1]))))))*(IKcos(j[2]))))))*(IKcos(j[3]))))+(((((((0.0565390674956448)*(IKcos(j[0]))))+(((0.31672379228264)*(IKsin(j[0]))))))*(IKsin(j[2]))))+(((((((0.0069778272054965)*(IKcos(j[0]))))+(((0.039088792799564)*(IKsin(j[0]))))))*(IKcos(j[2]))))+(((((((-0.945998281949174)*(((((0.837955424564001)*(((((0.168906816209186)*(IKsin(j[0]))))+(((-0.946191894238107)*(IKcos(j[0]))))))*(IKsin(j[1]))))+(((0.837955424564001)*(((((0.0485075244479057)*(IKsin(j[0]))))+(((-0.271732233620001)*(IKcos(j[0]))))))*(IKcos(j[1]))))))*(IKsin(j[2]))))+(((-0.945998281949174)*(((((0.824914877803331)*(IKsin(j[0]))))+(((0.147257386690619)*(IKcos(j[0]))))))*(IKcos(j[2]))))+(((-0.945998281949174)*(((((-0.101810558420961)*(IKsin(j[0]))))+(((-0.0181744288701722)*(IKcos(j[0]))))))*(IKsin(j[2]))))+(((-0.945998281949174)*(((((-0.0905086834657259)*(IKsin(j[0]))))+(((0.507016736064526)*(IKcos(j[0]))))))*(IKcos(j[1]))))+(((-0.945998281949174)*(((((-0.145607662687148)*(IKcos(j[0]))))+(((0.0259927472111257)*(IKsin(j[0]))))))*(IKsin(j[1]))))+(((-0.945998281949174)*(((((-0.103420015812922)*(((((0.946191894238107)*(IKcos(j[0]))))+(((-0.168906816209186)*(IKsin(j[0]))))))*(IKsin(j[1]))))+(((-0.103420015812922)*(((((0.271732233620001)*(IKcos(j[0]))))+(((-0.0485075244479057)*(IKsin(j[0]))))))*(IKcos(j[1]))))))*(IKcos(j[2]))))))*(IKsin(j[3]))))))*(IKcos(j[4]))))))*(IKcos(j[5]))))))*(IKcos(j[6]))))+(((((((0.999991471488533)*(((((-1.0)*(((((-0.945998281949174)*(((((0.837955424564001)*(((((0.168906816209186)*(IKsin(j[0]))))+(((-0.946191894238107)*(IKcos(j[0]))))))*(IKsin(j[1]))))+(((0.837955424564001)*(((((0.0485075244479057)*(IKsin(j[0]))))+(((-0.271732233620001)*(IKcos(j[0]))))))*(IKcos(j[1]))))))*(IKsin(j[2]))))+(((-0.945998281949174)*(((((0.824914877803331)*(IKsin(j[0]))))+(((0.147257386690619)*(IKcos(j[0]))))))*(IKcos(j[2]))))+(((-0.945998281949174)*(((((-0.101810558420961)*(IKsin(j[0]))))+(((-0.0181744288701722)*(IKcos(j[0]))))))*(IKsin(j[2]))))+(((-0.945998281949174)*(((((-0.0905086834657259)*(IKsin(j[0]))))+(((0.507016736064526)*(IKcos(j[0]))))))*(IKcos(j[1]))))+(((-0.945998281949174)*(((((-0.145607662687148)*(IKcos(j[0]))))+(((0.0259927472111257)*(IKsin(j[0]))))))*(IKsin(j[1]))))+(((-0.945998281949174)*(((((-0.103420015812922)*(((((0.946191894238107)*(IKcos(j[0]))))+(((-0.168906816209186)*(IKsin(j[0]))))))*(IKsin(j[1]))))+(((-0.103420015812922)*(((((0.271732233620001)*(IKcos(j[0]))))+(((-0.0485075244479057)*(IKsin(j[0]))))))*(IKcos(j[1]))))))*(IKcos(j[2]))))))*(IKsin(j[3]))))+(((-1.0)*(((((0.0565390674956448)*(IKcos(j[0]))))+(((0.31672379228264)*(IKsin(j[0]))))))*(IKsin(j[2]))))+(((-1.0)*(((((0.321730674246603)*(((((0.946191894238107)*(IKcos(j[0]))))+(((-0.168906816209186)*(IKsin(j[0]))))))*(IKsin(j[1]))))+(((0.321730674246603)*(((((0.271732233620001)*(IKcos(j[0]))))+(((-0.0485075244479057)*(IKsin(j[0]))))))*(IKcos(j[1]))))))*(IKcos(j[2]))))+(((-1.0)*(((((1.63878924936753e-6)*(IKcos(j[0]))))+(((-2.92543908095302e-7)*(IKsin(j[0]))))))*(IKcos(j[1]))))+(((-1.0)*(((((-0.945998281949174)*(((((0.142610275851393)*(IKsin(j[0]))))+(((-0.798882425671523)*(IKcos(j[0]))))))*(IKcos(j[1]))))+(((-0.945998281949174)*(((((-0.0409555493238159)*(IKsin(j[0]))))+(((0.22942714606775)*(IKcos(j[0]))))))*(IKsin(j[1]))))+(((-0.945998281949174)*(((((0.52353919050829)*(IKsin(j[0]))))+(((0.0934581434992053)*(IKcos(j[0]))))))*(IKcos(j[2]))))+(((-0.945998281949174)*(((((-0.0115334342172636)*(IKcos(j[0]))))+(((-0.0646086535405889)*(IKsin(j[0]))))))*(IKsin(j[2]))))+(((-0.945998281949174)*(((((0.531815483588428)*(((((0.0485075244479057)*(IKsin(j[0]))))+(((-0.271732233620001)*(IKcos(j[0]))))))*(IKcos(j[1]))))+(((0.531815483588428)*(((((0.168906816209186)*(IKsin(j[0]))))+(((-0.946191894238107)*(IKcos(j[0]))))))*(IKsin(j[1]))))))*(IKsin(j[2]))))+(((-0.945998281949174)*(((((-0.0656300100348293)*(((((0.946191894238107)*(IKcos(j[0]))))+(((-0.168906816209186)*(IKsin(j[0]))))))*(IKsin(j[1]))))+(((-0.0656300100348293)*(((((0.271732233620001)*(IKcos(j[0]))))+(((-0.0485075244479057)*(IKsin(j[0]))))))*(IKcos(j[1]))))))*(IKcos(j[2]))))))*(IKcos(j[3]))))+(((-1.0)*(((((8.40142576392187e-8)*(IKsin(j[0]))))+(((-4.70635888845422e-7)*(IKcos(j[0]))))))*(IKsin(j[1]))))+(((-1.0)*(((((0.0069778272054965)*(IKcos(j[0]))))+(((0.039088792799564)*(IKsin(j[0]))))))*(IKcos(j[2]))))+(((-1.0)*(((((0.0397067222902749)*(((((0.0485075244479057)*(IKsin(j[0]))))+(((-0.271732233620001)*(IKcos(j[0]))))))*(IKcos(j[1]))))+(((0.0397067222902749)*(((((0.168906816209186)*(IKsin(j[0]))))+(((-0.946191894238107)*(IKcos(j[0]))))))*(IKsin(j[1]))))))*(IKsin(j[2]))))))*(IKsin(j[4]))))+(((0.999991471488533)*(((((-1.0)*(((((0.115872231636118)*(((((0.0485075244479057)*(IKsin(j[0]))))+(((-0.271732233620001)*(IKcos(j[0]))))))*(IKcos(j[1]))))+(((0.115872231636118)*(((((0.168906816209186)*(IKsin(j[0]))))+(((-0.946191894238107)*(IKcos(j[0]))))))*(IKsin(j[1]))))))*(IKsin(j[2]))))+(((-1.0)*(((((0.938875058440104)*(((((0.271732233620001)*(IKcos(j[0]))))+(((-0.0485075244479057)*(IKsin(j[0]))))))*(IKcos(j[1]))))+(((0.938875058440104)*(((((0.946191894238107)*(IKcos(j[0]))))+(((-0.168906816209186)*(IKsin(j[0]))))))*(IKsin(j[1]))))))*(IKcos(j[2]))))+(((-1.0)*(((((0.924263966079929)*(IKsin(j[0]))))+(((0.164992413059238)*(IKcos(j[0]))))))*(IKsin(j[2]))))+(((-1.0)*(((((0.324171637484235)*(((((0.52353919050829)*(IKsin(j[0]))))+(((0.0934581434992053)*(IKcos(j[0]))))))*(IKcos(j[2]))))+(((0.324171637484235)*(((((0.531815483588428)*(((((0.0485075244479057)*(IKsin(j[0]))))+(((-0.271732233620001)*(IKcos(j[0]))))))*(IKcos(j[1]))))+(((0.531815483588428)*(((((0.168906816209186)*(IKsin(j[0]))))+(((-0.946191894238107)*(IKcos(j[0]))))))*(IKsin(j[1]))))))*(IKsin(j[2]))))+(((0.324171637484235)*(((((0.142610275851393)*(IKsin(j[0]))))+(((-0.798882425671523)*(IKcos(j[0]))))))*(IKcos(j[1]))))+(((0.324171637484235)*(((((-0.0409555493238159)*(IKsin(j[0]))))+(((0.22942714606775)*(IKcos(j[0]))))))*(IKsin(j[1]))))+(((0.324171637484235)*(((((-0.0115334342172636)*(IKcos(j[0]))))+(((-0.0646086535405889)*(IKsin(j[0]))))))*(IKsin(j[2]))))+(((0.324171637484235)*(((((-0.0656300100348293)*(((((0.946191894238107)*(IKcos(j[0]))))+(((-0.168906816209186)*(IKsin(j[0]))))))*(IKsin(j[1]))))+(((-0.0656300100348293)*(((((0.271732233620001)*(IKcos(j[0]))))+(((-0.0485075244479057)*(IKsin(j[0]))))))*(IKcos(j[1]))))))*(IKcos(j[2]))))))*(IKcos(j[3]))))+(((-1.0)*(((((0.324171637484235)*(((((0.824914877803331)*(IKsin(j[0]))))+(((0.147257386690619)*(IKcos(j[0]))))))*(IKcos(j[2]))))+(((0.324171637484235)*(((((-0.145607662687148)*(IKcos(j[0]))))+(((0.0259927472111257)*(IKsin(j[0]))))))*(IKsin(j[1]))))+(((0.324171637484235)*(((((-0.0905086834657259)*(IKsin(j[0]))))+(((0.507016736064526)*(IKcos(j[0]))))))*(IKcos(j[1]))))+(((0.324171637484235)*(((((-0.101810558420961)*(IKsin(j[0]))))+(((-0.0181744288701722)*(IKcos(j[0]))))))*(IKsin(j[2]))))+(((0.324171637484235)*(((((-0.103420015812922)*(((((0.946191894238107)*(IKcos(j[0]))))+(((-0.168906816209186)*(IKsin(j[0]))))))*(IKsin(j[1]))))+(((-0.103420015812922)*(((((0.271732233620001)*(IKcos(j[0]))))+(((-0.0485075244479057)*(IKsin(j[0]))))))*(IKcos(j[1]))))))*(IKcos(j[2]))))+(((0.324171637484235)*(((((0.837955424564001)*(((((0.168906816209186)*(IKsin(j[0]))))+(((-0.946191894238107)*(IKcos(j[0]))))))*(IKsin(j[1]))))+(((0.837955424564001)*(((((0.0485075244479057)*(IKsin(j[0]))))+(((-0.271732233620001)*(IKcos(j[0]))))))*(IKcos(j[1]))))))*(IKsin(j[2]))))))*(IKsin(j[3]))))+(((-1.0)*(((((0.114068988634618)*(IKsin(j[0]))))+(((0.020362708469395)*(IKcos(j[0]))))))*(IKcos(j[2]))))+(((-1.0)*(((((2.45170564589572e-7)*(IKsin(j[0]))))+(((-1.37341053562418e-6)*(IKcos(j[0]))))))*(IKsin(j[1]))))+(((-1.0)*(((((4.78231786842813e-6)*(IKcos(j[0]))))+(((-8.53702182586258e-7)*(IKsin(j[0]))))))*(IKcos(j[1]))))))*(IKcos(j[4]))))))*(IKsin(j[6]))))+(((((((0.00413000607730841)*(((((0.196099898904425)*(((((-1.0)*(((((-0.103420015812922)*(((((0.946191894238107)*(IKcos(j[0]))))+(((-0.168906816209186)*(IKsin(j[0]))))))*(IKsin(j[1]))))+(((-0.103420015812922)*(((((0.271732233620001)*(IKcos(j[0]))))+(((-0.0485075244479057)*(IKsin(j[0]))))))*(IKcos(j[1]))))))*(IKcos(j[2]))))+(((-1.0)*(((((-0.101810558420961)*(IKsin(j[0]))))+(((-0.0181744288701722)*(IKcos(j[0]))))))*(IKsin(j[2]))))+(((-1.0)*(((((-0.0905086834657259)*(IKsin(j[0]))))+(((0.507016736064526)*(IKcos(j[0]))))))*(IKcos(j[1]))))+(((-1.0)*(((((-0.145607662687148)*(IKcos(j[0]))))+(((0.0259927472111257)*(IKsin(j[0]))))))*(IKsin(j[1]))))+(((-1.0)*(((((0.837955424564001)*(((((0.168906816209186)*(IKsin(j[0]))))+(((-0.946191894238107)*(IKcos(j[0]))))))*(IKsin(j[1]))))+(((0.837955424564001)*(((((0.0485075244479057)*(IKsin(j[0]))))+(((-0.271732233620001)*(IKcos(j[0]))))))*(IKcos(j[1]))))))*(IKsin(j[2]))))+(((-1.0)*(((((0.824914877803331)*(IKsin(j[0]))))+(((0.147257386690619)*(IKcos(j[0]))))))*(IKcos(j[2]))))))*(IKcos(j[3]))))+(((0.196099898904425)*(((((-1.0)*(((((-0.22942714606775)*(IKcos(j[0]))))+(((0.0409555493238159)*(IKsin(j[0]))))))*(IKsin(j[1]))))+(((-1.0)*(((((0.0646086535405889)*(IKsin(j[0]))))+(((0.0115334342172636)*(IKcos(j[0]))))))*(IKsin(j[2]))))+(((-1.0)*(((((-0.142610275851393)*(IKsin(j[0]))))+(((0.798882425671523)*(IKcos(j[0]))))))*(IKcos(j[1]))))+(((-1.0)*(((((-0.531815483588428)*(((((0.168906816209186)*(IKsin(j[0]))))+(((-0.946191894238107)*(IKcos(j[0]))))))*(IKsin(j[1]))))+(((-0.531815483588428)*(((((0.0485075244479057)*(IKsin(j[0]))))+(((-0.271732233620001)*(IKcos(j[0]))))))*(IKcos(j[1]))))))*(IKsin(j[2]))))+(((-1.0)*(((((-0.0934581434992053)*(IKcos(j[0]))))+(((-0.52353919050829)*(IKsin(j[0]))))))*(IKcos(j[2]))))+(((-1.0)*(((((0.0656300100348293)*(((((0.271732233620001)*(IKcos(j[0]))))+(((-0.0485075244479057)*(IKsin(j[0]))))))*(IKcos(j[1]))))+(((0.0656300100348293)*(((((0.946191894238107)*(IKcos(j[0]))))+(((-0.168906816209186)*(IKsin(j[0]))))))*(IKsin(j[1]))))))*(IKcos(j[2]))))))*(IKsin(j[3]))))))*(IKsin(j[5]))))+(((0.00413000607730841)*(((((0.980583922797878)*(((((((((0.837955424564001)*(((((0.168906816209186)*(IKsin(j[0]))))+(((-0.946191894238107)*(IKcos(j[0]))))))*(IKsin(j[1]))))+(((0.837955424564001)*(((((0.0485075244479057)*(IKsin(j[0]))))+(((-0.271732233620001)*(IKcos(j[0]))))))*(IKcos(j[1]))))))*(IKsin(j[2]))))+(((((((-0.101810558420961)*(IKsin(j[0]))))+(((-0.0181744288701722)*(IKcos(j[0]))))))*(IKsin(j[2]))))+(((((((-0.145607662687148)*(IKcos(j[0]))))+(((0.0259927472111257)*(IKsin(j[0]))))))*(IKsin(j[1]))))+(((((((-0.103420015812922)*(((((0.946191894238107)*(IKcos(j[0]))))+(((-0.168906816209186)*(IKsin(j[0]))))))*(IKsin(j[1]))))+(((-0.103420015812922)*(((((0.271732233620001)*(IKcos(j[0]))))+(((-0.0485075244479057)*(IKsin(j[0]))))))*(IKcos(j[1]))))))*(IKcos(j[2]))))+(((((((0.824914877803331)*(IKsin(j[0]))))+(((0.147257386690619)*(IKcos(j[0]))))))*(IKcos(j[2]))))+(((((((-0.0905086834657259)*(IKsin(j[0]))))+(((0.507016736064526)*(IKcos(j[0]))))))*(IKcos(j[1]))))))*(IKcos(j[3]))))+(((0.980583922797878)*(((((((((0.0656300100348293)*(((((0.271732233620001)*(IKcos(j[0]))))+(((-0.0485075244479057)*(IKsin(j[0]))))))*(IKcos(j[1]))))+(((0.0656300100348293)*(((((0.946191894238107)*(IKcos(j[0]))))+(((-0.168906816209186)*(IKsin(j[0]))))))*(IKsin(j[1]))))))*(IKcos(j[2]))))+(((((((-0.0934581434992053)*(IKcos(j[0]))))+(((-0.52353919050829)*(IKsin(j[0]))))))*(IKcos(j[2]))))+(((((((0.0646086535405889)*(IKsin(j[0]))))+(((0.0115334342172636)*(IKcos(j[0]))))))*(IKsin(j[2]))))+(((((((-0.142610275851393)*(IKsin(j[0]))))+(((0.798882425671523)*(IKcos(j[0]))))))*(IKcos(j[1]))))+(((((((-0.531815483588428)*(((((0.168906816209186)*(IKsin(j[0]))))+(((-0.946191894238107)*(IKcos(j[0]))))))*(IKsin(j[1]))))+(((-0.531815483588428)*(((((0.0485075244479057)*(IKsin(j[0]))))+(((-0.271732233620001)*(IKcos(j[0]))))))*(IKcos(j[1]))))))*(IKsin(j[2]))))+(((((((-0.22942714606775)*(IKcos(j[0]))))+(((0.0409555493238159)*(IKsin(j[0]))))))*(IKsin(j[1]))))))*(IKsin(j[3]))))))*(IKcos(j[5]))))+(((0.00413000607730841)*(((((0.980583922797878)*(((((((((0.321730674246603)*(((((0.946191894238107)*(IKcos(j[0]))))+(((-0.168906816209186)*(IKsin(j[0]))))))*(IKsin(j[1]))))+(((0.321730674246603)*(((((0.271732233620001)*(IKcos(j[0]))))+(((-0.0485075244479057)*(IKsin(j[0]))))))*(IKcos(j[1]))))))*(IKcos(j[2]))))+(((((((8.40142576392187e-8)*(IKsin(j[0]))))+(((-4.70635888845422e-7)*(IKcos(j[0]))))))*(IKsin(j[1]))))+(((((((0.0397067222902749)*(((((0.0485075244479057)*(IKsin(j[0]))))+(((-0.271732233620001)*(IKcos(j[0]))))))*(IKcos(j[1]))))+(((0.0397067222902749)*(((((0.168906816209186)*(IKsin(j[0]))))+(((-0.946191894238107)*(IKcos(j[0]))))))*(IKsin(j[1]))))))*(IKsin(j[2]))))+(((((((1.63878924936753e-6)*(IKcos(j[0]))))+(((-2.92543908095302e-7)*(IKsin(j[0]))))))*(IKcos(j[1]))))+(((((((-0.945998281949174)*(((((0.142610275851393)*(IKsin(j[0]))))+(((-0.798882425671523)*(IKcos(j[0]))))))*(IKcos(j[1]))))+(((-0.945998281949174)*(((((-0.0409555493238159)*(IKsin(j[0]))))+(((0.22942714606775)*(IKcos(j[0]))))))*(IKsin(j[1]))))+(((-0.945998281949174)*(((((0.52353919050829)*(IKsin(j[0]))))+(((0.0934581434992053)*(IKcos(j[0]))))))*(IKcos(j[2]))))+(((-0.945998281949174)*(((((-0.0115334342172636)*(IKcos(j[0]))))+(((-0.0646086535405889)*(IKsin(j[0]))))))*(IKsin(j[2]))))+(((-0.945998281949174)*(((((0.531815483588428)*(((((0.0485075244479057)*(IKsin(j[0]))))+(((-0.271732233620001)*(IKcos(j[0]))))))*(IKcos(j[1]))))+(((0.531815483588428)*(((((0.168906816209186)*(IKsin(j[0]))))+(((-0.946191894238107)*(IKcos(j[0]))))))*(IKsin(j[1]))))))*(IKsin(j[2]))))+(((-0.945998281949174)*(((((-0.0656300100348293)*(((((0.946191894238107)*(IKcos(j[0]))))+(((-0.168906816209186)*(IKsin(j[0]))))))*(IKsin(j[1]))))+(((-0.0656300100348293)*(((((0.271732233620001)*(IKcos(j[0]))))+(((-0.0485075244479057)*(IKsin(j[0]))))))*(IKcos(j[1]))))))*(IKcos(j[2]))))))*(IKcos(j[3]))))+(((((((0.0565390674956448)*(IKcos(j[0]))))+(((0.31672379228264)*(IKsin(j[0]))))))*(IKsin(j[2]))))+(((((((0.0069778272054965)*(IKcos(j[0]))))+(((0.039088792799564)*(IKsin(j[0]))))))*(IKcos(j[2]))))+(((((((-0.945998281949174)*(((((0.837955424564001)*(((((0.168906816209186)*(IKsin(j[0]))))+(((-0.946191894238107)*(IKcos(j[0]))))))*(IKsin(j[1]))))+(((0.837955424564001)*(((((0.0485075244479057)*(IKsin(j[0]))))+(((-0.271732233620001)*(IKcos(j[0]))))))*(IKcos(j[1]))))))*(IKsin(j[2]))))+(((-0.945998281949174)*(((((0.824914877803331)*(IKsin(j[0]))))+(((0.147257386690619)*(IKcos(j[0]))))))*(IKcos(j[2]))))+(((-0.945998281949174)*(((((-0.101810558420961)*(IKsin(j[0]))))+(((-0.0181744288701722)*(IKcos(j[0]))))))*(IKsin(j[2]))))+(((-0.945998281949174)*(((((-0.0905086834657259)*(IKsin(j[0]))))+(((0.507016736064526)*(IKcos(j[0]))))))*(IKcos(j[1]))))+(((-0.945998281949174)*(((((-0.145607662687148)*(IKcos(j[0]))))+(((0.0259927472111257)*(IKsin(j[0]))))))*(IKsin(j[1]))))+(((-0.945998281949174)*(((((-0.103420015812922)*(((((0.946191894238107)*(IKcos(j[0]))))+(((-0.168906816209186)*(IKsin(j[0]))))))*(IKsin(j[1]))))+(((-0.103420015812922)*(((((0.271732233620001)*(IKcos(j[0]))))+(((-0.0485075244479057)*(IKsin(j[0]))))))*(IKcos(j[1]))))))*(IKcos(j[2]))))))*(IKsin(j[3]))))))*(IKcos(j[4]))))+(((0.980583922797878)*(((((((((-0.020362708469395)*(IKcos(j[0]))))+(((-0.114068988634618)*(IKsin(j[0]))))))*(IKcos(j[2]))))+(((((((-0.324171637484235)*(((((-0.145607662687148)*(IKcos(j[0]))))+(((0.0259927472111257)*(IKsin(j[0]))))))*(IKsin(j[1]))))+(((-0.324171637484235)*(((((-0.0905086834657259)*(IKsin(j[0]))))+(((0.507016736064526)*(IKcos(j[0]))))))*(IKcos(j[1]))))+(((-0.324171637484235)*(((((0.837955424564001)*(((((0.168906816209186)*(IKsin(j[0]))))+(((-0.946191894238107)*(IKcos(j[0]))))))*(IKsin(j[1]))))+(((0.837955424564001)*(((((0.0485075244479057)*(IKsin(j[0]))))+(((-0.271732233620001)*(IKcos(j[0]))))))*(IKcos(j[1]))))))*(IKsin(j[2]))))+(((-0.324171637484235)*(((((-0.103420015812922)*(((((0.946191894238107)*(IKcos(j[0]))))+(((-0.168906816209186)*(IKsin(j[0]))))))*(IKsin(j[1]))))+(((-0.103420015812922)*(((((0.271732233620001)*(IKcos(j[0]))))+(((-0.0485075244479057)*(IKsin(j[0]))))))*(IKcos(j[1]))))))*(IKcos(j[2]))))+(((-0.324171637484235)*(((((-0.101810558420961)*(IKsin(j[0]))))+(((-0.0181744288701722)*(IKcos(j[0]))))))*(IKsin(j[2]))))+(((-0.324171637484235)*(((((0.824914877803331)*(IKsin(j[0]))))+(((0.147257386690619)*(IKcos(j[0]))))))*(IKcos(j[2]))))))*(IKsin(j[3]))))+(((((((-0.324171637484235)*(((((0.531815483588428)*(((((0.0485075244479057)*(IKsin(j[0]))))+(((-0.271732233620001)*(IKcos(j[0]))))))*(IKcos(j[1]))))+(((0.531815483588428)*(((((0.168906816209186)*(IKsin(j[0]))))+(((-0.946191894238107)*(IKcos(j[0]))))))*(IKsin(j[1]))))))*(IKsin(j[2]))))+(((-0.324171637484235)*(((((0.52353919050829)*(IKsin(j[0]))))+(((0.0934581434992053)*(IKcos(j[0]))))))*(IKcos(j[2]))))+(((-0.324171637484235)*(((((-0.0409555493238159)*(IKsin(j[0]))))+(((0.22942714606775)*(IKcos(j[0]))))))*(IKsin(j[1]))))+(((-0.324171637484235)*(((((0.142610275851393)*(IKsin(j[0]))))+(((-0.798882425671523)*(IKcos(j[0]))))))*(IKcos(j[1]))))+(((-0.324171637484235)*(((((-0.0656300100348293)*(((((0.946191894238107)*(IKcos(j[0]))))+(((-0.168906816209186)*(IKsin(j[0]))))))*(IKsin(j[1]))))+(((-0.0656300100348293)*(((((0.271732233620001)*(IKcos(j[0]))))+(((-0.0485075244479057)*(IKsin(j[0]))))))*(IKcos(j[1]))))))*(IKcos(j[2]))))+(((-0.324171637484235)*(((((-0.0115334342172636)*(IKcos(j[0]))))+(((-0.0646086535405889)*(IKsin(j[0]))))))*(IKsin(j[2]))))))*(IKcos(j[3]))))+(((((((8.53702182586258e-7)*(IKsin(j[0]))))+(((-4.78231786842813e-6)*(IKcos(j[0]))))))*(IKcos(j[1]))))+(((((((-0.164992413059238)*(IKcos(j[0]))))+(((-0.924263966079929)*(IKsin(j[0]))))))*(IKsin(j[2]))))+(((((((1.37341053562418e-6)*(IKcos(j[0]))))+(((-2.45170564589572e-7)*(IKsin(j[0]))))))*(IKsin(j[1]))))+(((((((-0.115872231636118)*(((((0.168906816209186)*(IKsin(j[0]))))+(((-0.946191894238107)*(IKcos(j[0]))))))*(IKsin(j[1]))))+(((-0.115872231636118)*(((((0.0485075244479057)*(IKsin(j[0]))))+(((-0.271732233620001)*(IKcos(j[0]))))))*(IKcos(j[1]))))))*(IKsin(j[2]))))+(((((((-0.938875058440104)*(((((0.271732233620001)*(IKcos(j[0]))))+(((-0.0485075244479057)*(IKsin(j[0]))))))*(IKcos(j[1]))))+(((-0.938875058440104)*(((((0.946191894238107)*(IKcos(j[0]))))+(((-0.168906816209186)*(IKsin(j[0]))))))*(IKsin(j[1]))))))*(IKcos(j[2]))))))*(IKsin(j[4]))))))*(IKsin(j[5]))))+(((0.00413000607730841)*(((((0.196099898904425)*(((((((((-0.020362708469395)*(IKcos(j[0]))))+(((-0.114068988634618)*(IKsin(j[0]))))))*(IKcos(j[2]))))+(((((((-0.324171637484235)*(((((-0.145607662687148)*(IKcos(j[0]))))+(((0.0259927472111257)*(IKsin(j[0]))))))*(IKsin(j[1]))))+(((-0.324171637484235)*(((((-0.0905086834657259)*(IKsin(j[0]))))+(((0.507016736064526)*(IKcos(j[0]))))))*(IKcos(j[1]))))+(((-0.324171637484235)*(((((0.837955424564001)*(((((0.168906816209186)*(IKsin(j[0]))))+(((-0.946191894238107)*(IKcos(j[0]))))))*(IKsin(j[1]))))+(((0.837955424564001)*(((((0.0485075244479057)*(IKsin(j[0]))))+(((-0.271732233620001)*(IKcos(j[0]))))))*(IKcos(j[1]))))))*(IKsin(j[2]))))+(((-0.324171637484235)*(((((-0.103420015812922)*(((((0.946191894238107)*(IKcos(j[0]))))+(((-0.168906816209186)*(IKsin(j[0]))))))*(IKsin(j[1]))))+(((-0.103420015812922)*(((((0.271732233620001)*(IKcos(j[0]))))+(((-0.0485075244479057)*(IKsin(j[0]))))))*(IKcos(j[1]))))))*(IKcos(j[2]))))+(((-0.324171637484235)*(((((-0.101810558420961)*(IKsin(j[0]))))+(((-0.0181744288701722)*(IKcos(j[0]))))))*(IKsin(j[2]))))+(((-0.324171637484235)*(((((0.824914877803331)*(IKsin(j[0]))))+(((0.147257386690619)*(IKcos(j[0]))))))*(IKcos(j[2]))))))*(IKsin(j[3]))))+(((((((-0.324171637484235)*(((((0.531815483588428)*(((((0.0485075244479057)*(IKsin(j[0]))))+(((-0.271732233620001)*(IKcos(j[0]))))))*(IKcos(j[1]))))+(((0.531815483588428)*(((((0.168906816209186)*(IKsin(j[0]))))+(((-0.946191894238107)*(IKcos(j[0]))))))*(IKsin(j[1]))))))*(IKsin(j[2]))))+(((-0.324171637484235)*(((((0.52353919050829)*(IKsin(j[0]))))+(((0.0934581434992053)*(IKcos(j[0]))))))*(IKcos(j[2]))))+(((-0.324171637484235)*(((((-0.0409555493238159)*(IKsin(j[0]))))+(((0.22942714606775)*(IKcos(j[0]))))))*(IKsin(j[1]))))+(((-0.324171637484235)*(((((0.142610275851393)*(IKsin(j[0]))))+(((-0.798882425671523)*(IKcos(j[0]))))))*(IKcos(j[1]))))+(((-0.324171637484235)*(((((-0.0656300100348293)*(((((0.946191894238107)*(IKcos(j[0]))))+(((-0.168906816209186)*(IKsin(j[0]))))))*(IKsin(j[1]))))+(((-0.0656300100348293)*(((((0.271732233620001)*(IKcos(j[0]))))+(((-0.0485075244479057)*(IKsin(j[0]))))))*(IKcos(j[1]))))))*(IKcos(j[2]))))+(((-0.324171637484235)*(((((-0.0115334342172636)*(IKcos(j[0]))))+(((-0.0646086535405889)*(IKsin(j[0]))))))*(IKsin(j[2]))))))*(IKcos(j[3]))))+(((((((8.53702182586258e-7)*(IKsin(j[0]))))+(((-4.78231786842813e-6)*(IKcos(j[0]))))))*(IKcos(j[1]))))+(((((((-0.164992413059238)*(IKcos(j[0]))))+(((-0.924263966079929)*(IKsin(j[0]))))))*(IKsin(j[2]))))+(((((((1.37341053562418e-6)*(IKcos(j[0]))))+(((-2.45170564589572e-7)*(IKsin(j[0]))))))*(IKsin(j[1]))))+(((((((-0.115872231636118)*(((((0.168906816209186)*(IKsin(j[0]))))+(((-0.946191894238107)*(IKcos(j[0]))))))*(IKsin(j[1]))))+(((-0.115872231636118)*(((((0.0485075244479057)*(IKsin(j[0]))))+(((-0.271732233620001)*(IKcos(j[0]))))))*(IKcos(j[1]))))))*(IKsin(j[2]))))+(((((((-0.938875058440104)*(((((0.271732233620001)*(IKcos(j[0]))))+(((-0.0485075244479057)*(IKsin(j[0]))))))*(IKcos(j[1]))))+(((-0.938875058440104)*(((((0.946191894238107)*(IKcos(j[0]))))+(((-0.168906816209186)*(IKsin(j[0]))))))*(IKsin(j[1]))))))*(IKcos(j[2]))))))*(IKsin(j[4]))))+(((0.196099898904425)*(((((((((0.321730674246603)*(((((0.946191894238107)*(IKcos(j[0]))))+(((-0.168906816209186)*(IKsin(j[0]))))))*(IKsin(j[1]))))+(((0.321730674246603)*(((((0.271732233620001)*(IKcos(j[0]))))+(((-0.0485075244479057)*(IKsin(j[0]))))))*(IKcos(j[1]))))))*(IKcos(j[2]))))+(((((((8.40142576392187e-8)*(IKsin(j[0]))))+(((-4.70635888845422e-7)*(IKcos(j[0]))))))*(IKsin(j[1]))))+(((((((0.0397067222902749)*(((((0.0485075244479057)*(IKsin(j[0]))))+(((-0.271732233620001)*(IKcos(j[0]))))))*(IKcos(j[1]))))+(((0.0397067222902749)*(((((0.168906816209186)*(IKsin(j[0]))))+(((-0.946191894238107)*(IKcos(j[0]))))))*(IKsin(j[1]))))))*(IKsin(j[2]))))+(((((((1.63878924936753e-6)*(IKcos(j[0]))))+(((-2.92543908095302e-7)*(IKsin(j[0]))))))*(IKcos(j[1]))))+(((((((-0.945998281949174)*(((((0.142610275851393)*(IKsin(j[0]))))+(((-0.798882425671523)*(IKcos(j[0]))))))*(IKcos(j[1]))))+(((-0.945998281949174)*(((((-0.0409555493238159)*(IKsin(j[0]))))+(((0.22942714606775)*(IKcos(j[0]))))))*(IKsin(j[1]))))+(((-0.945998281949174)*(((((0.52353919050829)*(IKsin(j[0]))))+(((0.0934581434992053)*(IKcos(j[0]))))))*(IKcos(j[2]))))+(((-0.945998281949174)*(((((-0.0115334342172636)*(IKcos(j[0]))))+(((-0.0646086535405889)*(IKsin(j[0]))))))*(IKsin(j[2]))))+(((-0.945998281949174)*(((((0.531815483588428)*(((((0.0485075244479057)*(IKsin(j[0]))))+(((-0.271732233620001)*(IKcos(j[0]))))))*(IKcos(j[1]))))+(((0.531815483588428)*(((((0.168906816209186)*(IKsin(j[0]))))+(((-0.946191894238107)*(IKcos(j[0]))))))*(IKsin(j[1]))))))*(IKsin(j[2]))))+(((-0.945998281949174)*(((((-0.0656300100348293)*(((((0.946191894238107)*(IKcos(j[0]))))+(((-0.168906816209186)*(IKsin(j[0]))))))*(IKsin(j[1]))))+(((-0.0656300100348293)*(((((0.271732233620001)*(IKcos(j[0]))))+(((-0.0485075244479057)*(IKsin(j[0]))))))*(IKcos(j[1]))))))*(IKcos(j[2]))))))*(IKcos(j[3]))))+(((((((0.0565390674956448)*(IKcos(j[0]))))+(((0.31672379228264)*(IKsin(j[0]))))))*(IKsin(j[2]))))+(((((((0.0069778272054965)*(IKcos(j[0]))))+(((0.039088792799564)*(IKsin(j[0]))))))*(IKcos(j[2]))))+(((((((-0.945998281949174)*(((((0.837955424564001)*(((((0.168906816209186)*(IKsin(j[0]))))+(((-0.946191894238107)*(IKcos(j[0]))))))*(IKsin(j[1]))))+(((0.837955424564001)*(((((0.0485075244479057)*(IKsin(j[0]))))+(((-0.271732233620001)*(IKcos(j[0]))))))*(IKcos(j[1]))))))*(IKsin(j[2]))))+(((-0.945998281949174)*(((((0.824914877803331)*(IKsin(j[0]))))+(((0.147257386690619)*(IKcos(j[0]))))))*(IKcos(j[2]))))+(((-0.945998281949174)*(((((-0.101810558420961)*(IKsin(j[0]))))+(((-0.0181744288701722)*(IKcos(j[0]))))))*(IKsin(j[2]))))+(((-0.945998281949174)*(((((-0.0905086834657259)*(IKsin(j[0]))))+(((0.507016736064526)*(IKcos(j[0]))))))*(IKcos(j[1]))))+(((-0.945998281949174)*(((((-0.145607662687148)*(IKcos(j[0]))))+(((0.0259927472111257)*(IKsin(j[0]))))))*(IKsin(j[1]))))+(((-0.945998281949174)*(((((-0.103420015812922)*(((((0.946191894238107)*(IKcos(j[0]))))+(((-0.168906816209186)*(IKsin(j[0]))))))*(IKsin(j[1]))))+(((-0.103420015812922)*(((((0.271732233620001)*(IKcos(j[0]))))+(((-0.0485075244479057)*(IKsin(j[0]))))))*(IKcos(j[1]))))))*(IKcos(j[2]))))))*(IKsin(j[3]))))))*(IKcos(j[4]))))))*(IKcos(j[5]))))))*(IKsin(j[6])))));
eetrans[1]=((0.39)+(((((((((((-0.000516869228324711)*(IKsin(j[0]))))+(((-9.22674737381088e-5)*(IKcos(j[0]))))))*(IKsin(j[2]))))+(((((((0.001835417168542)*(IKcos(j[0]))))+(((-0.000327644394590527)*(IKsin(j[0]))))))*(IKsin(j[1]))))+(((((((0.00425452386870742)*(((((0.0485075244479057)*(IKsin(j[0]))))+(((-0.271732233620001)*(IKcos(j[0]))))))*(IKcos(j[1]))))+(((0.00425452386870742)*(((((0.168906816209186)*(IKsin(j[0]))))+(((-0.946191894238107)*(IKcos(j[0]))))))*(IKsin(j[1]))))))*(IKsin(j[2]))))+(((((((-0.000525040080278634)*(((((0.271732233620001)*(IKcos(j[0]))))+(((-0.0485075244479057)*(IKsin(j[0]))))))*(IKcos(j[1]))))+(((-0.000525040080278634)*(((((0.946191894238107)*(IKcos(j[0]))))+(((-0.168906816209186)*(IKsin(j[0]))))))*(IKsin(j[1]))))))*(IKcos(j[2]))))+(((((((0.00418831352406632)*(IKsin(j[0]))))+(((0.000747665147993643)*(IKcos(j[0]))))))*(IKcos(j[2]))))+(((((((-0.00639105940537218)*(IKcos(j[0]))))+(((0.00114088220681115)*(IKsin(j[0]))))))*(IKcos(j[1]))))))*(IKcos(j[3]))))+(((((((0.0437624762245011)*(IKcos(j[0]))))+(((-0.00781213681233521)*(IKsin(j[0]))))))*(IKsin(j[1]))))+(((((((((((0.00670364339651201)*(((((0.0485075244479057)*(IKsin(j[0]))))+(((-0.271732233620001)*(IKcos(j[0]))))))*(IKcos(j[1]))))+(((0.00670364339651201)*(((((0.168906816209186)*(IKsin(j[0]))))+(((-0.946191894238107)*(IKcos(j[0]))))))*(IKsin(j[1]))))))*(IKsin(j[2]))))+(((((((0.00405613388851621)*(IKcos(j[0]))))+(((-0.000724069467725807)*(IKsin(j[0]))))))*(IKcos(j[1]))))+(((((((-0.000145395430961378)*(IKcos(j[0]))))+(((-0.000814484467367692)*(IKsin(j[0]))))))*(IKsin(j[2]))))+(((((((-0.000827360126503373)*(((((0.946191894238107)*(IKcos(j[0]))))+(((-0.168906816209186)*(IKsin(j[0]))))))*(IKsin(j[1]))))+(((-0.000827360126503373)*(((((0.271732233620001)*(IKcos(j[0]))))+(((-0.0485075244479057)*(IKsin(j[0]))))))*(IKcos(j[1]))))))*(IKcos(j[2]))))+(((((((0.00117805909352496)*(IKcos(j[0]))))+(((0.00659931902242665)*(IKsin(j[0]))))))*(IKcos(j[2]))))+(((((((-0.00116486130149719)*(IKcos(j[0]))))+(((0.000207941977689006)*(IKsin(j[0]))))))*(IKsin(j[1]))))))*(IKsin(j[3]))))+(((((((0.0272024427504895)*(IKsin(j[0]))))+(((-0.152384204567047)*(IKcos(j[0]))))))*(IKcos(j[1]))))+(((((((0.000144696654289374)*(IKsin(j[0]))))+(((2.58301210790009e-5)*(IKcos(j[0]))))))*(IKcos(j[2]))))+(((((((0.00119096418209844)*(((((0.271732233620001)*(IKcos(j[0]))))+(((-0.0485075244479057)*(IKsin(j[0]))))))*(IKcos(j[1]))))+(((0.00119096418209844)*(((((0.946191894238107)*(IKcos(j[0]))))+(((-0.168906816209186)*(IKsin(j[0]))))))*(IKsin(j[1]))))))*(IKcos(j[2]))))+(((((((6.06637617807226e-9)*(IKcos(j[0]))))+(((-1.08292228289538e-9)*(IKsin(j[0]))))))*(IKcos(j[1]))))+(((((((0.00117242999322435)*(IKsin(j[0]))))+(((0.000209293081656699)*(IKcos(j[0]))))))*(IKsin(j[2]))))+(((((((3.10999166828607e-10)*(IKsin(j[0]))))+(((-1.74217297662869e-9)*(IKcos(j[0]))))))*(IKsin(j[1]))))+(((((((((((0.151826365247404)*(IKsin(j[0]))))+(((0.0271028616147695)*(IKcos(j[0]))))))*(IKcos(j[2]))))+(((((((-0.0187365095267708)*(IKsin(j[0]))))+(((-0.00334469592300644)*(IKcos(j[0]))))))*(IKsin(j[2]))))+(((((((0.0413569799969041)*(IKsin(j[0]))))+(((-0.231675903444742)*(IKcos(j[0]))))))*(IKcos(j[1]))))+(((((((0.0665338723596475)*(IKcos(j[0]))))+(((-0.0118771093039066)*(IKsin(j[0]))))))*(IKsin(j[1]))))+(((((((-0.0190327029101005)*(((((0.271732233620001)*(IKcos(j[0]))))+(((-0.0485075244479057)*(IKsin(j[0]))))))*(IKcos(j[1]))))+(((-0.0190327029101005)*(((((0.946191894238107)*(IKcos(j[0]))))+(((-0.168906816209186)*(IKsin(j[0]))))))*(IKsin(j[1]))))))*(IKcos(j[2]))))+(((((((0.154226490240644)*(((((0.168906816209186)*(IKsin(j[0]))))+(((-0.946191894238107)*(IKcos(j[0]))))))*(IKsin(j[1]))))+(((0.154226490240644)*(((((0.0485075244479057)*(IKsin(j[0]))))+(((-0.271732233620001)*(IKcos(j[0]))))))*(IKcos(j[1]))))))*(IKsin(j[2]))))))*(IKsin(j[3]))))+(((0.00140587)*(IKsin(j[0]))))+(((((((((((0.00527058437234994)*(IKcos(j[0]))))+(((0.0295250619420788)*(IKsin(j[0]))))))*(IKsin(j[2]))))+(((((((0.0262475182050605)*(IKsin(j[0]))))+(((-0.147034853458712)*(IKcos(j[0]))))))*(IKcos(j[1]))))+(((((((-0.0427046421402796)*(IKcos(j[0]))))+(((-0.239225314562966)*(IKsin(j[0]))))))*(IKcos(j[2]))))+(((((((-0.24300707312356)*(((((0.168906816209186)*(IKsin(j[0]))))+(((-0.946191894238107)*(IKcos(j[0]))))))*(IKsin(j[1]))))+(((-0.24300707312356)*(((((0.0485075244479057)*(IKsin(j[0]))))+(((-0.271732233620001)*(IKcos(j[0]))))))*(IKcos(j[1]))))))*(IKsin(j[2]))))+(((((((-0.00753789669122646)*(IKsin(j[0]))))+(((0.042226222179273)*(IKcos(j[0]))))))*(IKsin(j[1]))))+(((((((0.0299918045857473)*(((((0.271732233620001)*(IKcos(j[0]))))+(((-0.0485075244479057)*(IKsin(j[0]))))))*(IKcos(j[1]))))+(((0.0299918045857473)*(((((0.946191894238107)*(IKcos(j[0]))))+(((-0.168906816209186)*(IKsin(j[0]))))))*(IKsin(j[1]))))))*(IKcos(j[2]))))))*(IKcos(j[3]))))+(((((((-0.133365737158539)*(IKcos(j[0]))))+(((0.0238074138998821)*(IKsin(j[0]))))))*(IKcos(j[1]))))+(((-0.0078755)*(IKcos(j[0]))))+(((((((0.0383007088044757)*(IKcos(j[0]))))+(((-0.00683714458146813)*(IKsin(j[0]))))))*(IKsin(j[1]))))+(((((((0.000146984070284826)*(((((0.0485075244479057)*(IKsin(j[0]))))+(((-0.271732233620001)*(IKcos(j[0]))))))*(IKcos(j[1]))))+(((0.000146984070284826)*(((((0.168906816209186)*(IKsin(j[0]))))+(((-0.946191894238107)*(IKcos(j[0]))))))*(IKsin(j[1]))))))*(IKsin(j[2])))));
eerot[6]=((((((((-0.00413000607730841)*(((((0.196099898904425)*(((((-1.0)*(((((0.0409555493238159)*(IKcos(j[0]))))+(((0.22942714606775)*(IKsin(j[0]))))))*(IKsin(j[1]))))+(((-1.0)*(((((-0.531815483588428)*(((((0.946191894238107)*(IKsin(j[0]))))+(((0.168906816209186)*(IKcos(j[0]))))))*(IKsin(j[1]))))+(((-0.531815483588428)*(((((0.271732233620001)*(IKsin(j[0]))))+(((0.0485075244479057)*(IKcos(j[0]))))))*(IKcos(j[1]))))))*(IKsin(j[2]))))+(((-1.0)*(((((-0.52353919050829)*(IKcos(j[0]))))+(((0.0934581434992053)*(IKsin(j[0]))))))*(IKcos(j[2]))))+(((-1.0)*(((((-0.142610275851393)*(IKcos(j[0]))))+(((-0.798882425671523)*(IKsin(j[0]))))))*(IKcos(j[1]))))+(((-1.0)*(((((0.0656300100348293)*(((((-0.168906816209186)*(IKcos(j[0]))))+(((-0.946191894238107)*(IKsin(j[0]))))))*(IKsin(j[1]))))+(((0.0656300100348293)*(((((-0.271732233620001)*(IKsin(j[0]))))+(((-0.0485075244479057)*(IKcos(j[0]))))))*(IKcos(j[1]))))))*(IKcos(j[2]))))+(((-1.0)*(((((-0.0115334342172636)*(IKsin(j[0]))))+(((0.0646086535405889)*(IKcos(j[0]))))))*(IKsin(j[2]))))))*(IKsin(j[3]))))+(((0.196099898904425)*(((((-1.0)*(((((-0.0905086834657259)*(IKcos(j[0]))))+(((-0.507016736064526)*(IKsin(j[0]))))))*(IKcos(j[1]))))+(((-1.0)*(((((0.145607662687148)*(IKsin(j[0]))))+(((0.0259927472111257)*(IKcos(j[0]))))))*(IKsin(j[1]))))+(((-1.0)*(((((-0.101810558420961)*(IKcos(j[0]))))+(((0.0181744288701722)*(IKsin(j[0]))))))*(IKsin(j[2]))))+(((-1.0)*(((((-0.103420015812922)*(((((-0.271732233620001)*(IKsin(j[0]))))+(((-0.0485075244479057)*(IKcos(j[0]))))))*(IKcos(j[1]))))+(((-0.103420015812922)*(((((-0.168906816209186)*(IKcos(j[0]))))+(((-0.946191894238107)*(IKsin(j[0]))))))*(IKsin(j[1]))))))*(IKcos(j[2]))))+(((-1.0)*(((((0.837955424564001)*(((((0.271732233620001)*(IKsin(j[0]))))+(((0.0485075244479057)*(IKcos(j[0]))))))*(IKcos(j[1]))))+(((0.837955424564001)*(((((0.946191894238107)*(IKsin(j[0]))))+(((0.168906816209186)*(IKcos(j[0]))))))*(IKsin(j[1]))))))*(IKsin(j[2]))))+(((-1.0)*(((((0.824914877803331)*(IKcos(j[0]))))+(((-0.147257386690619)*(IKsin(j[0]))))))*(IKcos(j[2]))))))*(IKcos(j[3]))))))*(IKsin(j[5]))))+(((-0.00413000607730841)*(((((0.196099898904425)*(((((((((8.53702182586258e-7)*(IKcos(j[0]))))+(((4.78231786842813e-6)*(IKsin(j[0]))))))*(IKcos(j[1]))))+(((((((-0.324171637484235)*(((((0.531815483588428)*(((((0.946191894238107)*(IKsin(j[0]))))+(((0.168906816209186)*(IKcos(j[0]))))))*(IKsin(j[1]))))+(((0.531815483588428)*(((((0.271732233620001)*(IKsin(j[0]))))+(((0.0485075244479057)*(IKcos(j[0]))))))*(IKcos(j[1]))))))*(IKsin(j[2]))))+(((-0.324171637484235)*(((((-0.0656300100348293)*(((((-0.271732233620001)*(IKsin(j[0]))))+(((-0.0485075244479057)*(IKcos(j[0]))))))*(IKcos(j[1]))))+(((-0.0656300100348293)*(((((-0.168906816209186)*(IKcos(j[0]))))+(((-0.946191894238107)*(IKsin(j[0]))))))*(IKsin(j[1]))))))*(IKcos(j[2]))))+(((-0.324171637484235)*(((((0.798882425671523)*(IKsin(j[0]))))+(((0.142610275851393)*(IKcos(j[0]))))))*(IKcos(j[1]))))+(((-0.324171637484235)*(((((-0.0934581434992053)*(IKsin(j[0]))))+(((0.52353919050829)*(IKcos(j[0]))))))*(IKcos(j[2]))))+(((-0.324171637484235)*(((((0.0115334342172636)*(IKsin(j[0]))))+(((-0.0646086535405889)*(IKcos(j[0]))))))*(IKsin(j[2]))))+(((-0.324171637484235)*(((((-0.0409555493238159)*(IKcos(j[0]))))+(((-0.22942714606775)*(IKsin(j[0]))))))*(IKsin(j[1]))))))*(IKcos(j[3]))))+(((((((-0.324171637484235)*(((((0.837955424564001)*(((((0.271732233620001)*(IKsin(j[0]))))+(((0.0485075244479057)*(IKcos(j[0]))))))*(IKcos(j[1]))))+(((0.837955424564001)*(((((0.946191894238107)*(IKsin(j[0]))))+(((0.168906816209186)*(IKcos(j[0]))))))*(IKsin(j[1]))))))*(IKsin(j[2]))))+(((-0.324171637484235)*(((((-0.103420015812922)*(((((-0.271732233620001)*(IKsin(j[0]))))+(((-0.0485075244479057)*(IKcos(j[0]))))))*(IKcos(j[1]))))+(((-0.103420015812922)*(((((-0.168906816209186)*(IKcos(j[0]))))+(((-0.946191894238107)*(IKsin(j[0]))))))*(IKsin(j[1]))))))*(IKcos(j[2]))))+(((-0.324171637484235)*(((((-0.0905086834657259)*(IKcos(j[0]))))+(((-0.507016736064526)*(IKsin(j[0]))))))*(IKcos(j[1]))))+(((-0.324171637484235)*(((((0.145607662687148)*(IKsin(j[0]))))+(((0.0259927472111257)*(IKcos(j[0]))))))*(IKsin(j[1]))))+(((-0.324171637484235)*(((((0.824914877803331)*(IKcos(j[0]))))+(((-0.147257386690619)*(IKsin(j[0]))))))*(IKcos(j[2]))))+(((-0.324171637484235)*(((((-0.101810558420961)*(IKcos(j[0]))))+(((0.0181744288701722)*(IKsin(j[0]))))))*(IKsin(j[2]))))))*(IKsin(j[3]))))+(((((((-0.114068988634618)*(IKcos(j[0]))))+(((0.020362708469395)*(IKsin(j[0]))))))*(IKcos(j[2]))))+(((((((0.164992413059238)*(IKsin(j[0]))))+(((-0.924263966079929)*(IKcos(j[0]))))))*(IKsin(j[2]))))+(((((((-2.45170564589572e-7)*(IKcos(j[0]))))+(((-1.37341053562418e-6)*(IKsin(j[0]))))))*(IKsin(j[1]))))+(((((((-0.115872231636118)*(((((0.271732233620001)*(IKsin(j[0]))))+(((0.0485075244479057)*(IKcos(j[0]))))))*(IKcos(j[1]))))+(((-0.115872231636118)*(((((0.946191894238107)*(IKsin(j[0]))))+(((0.168906816209186)*(IKcos(j[0]))))))*(IKsin(j[1]))))))*(IKsin(j[2]))))+(((((((-0.938875058440104)*(((((-0.168906816209186)*(IKcos(j[0]))))+(((-0.946191894238107)*(IKsin(j[0]))))))*(IKsin(j[1]))))+(((-0.938875058440104)*(((((-0.271732233620001)*(IKsin(j[0]))))+(((-0.0485075244479057)*(IKcos(j[0]))))))*(IKcos(j[1]))))))*(IKcos(j[2]))))))*(IKsin(j[4]))))+(((0.196099898904425)*(((((((((-0.0069778272054965)*(IKsin(j[0]))))+(((0.039088792799564)*(IKcos(j[0]))))))*(IKcos(j[2]))))+(((((((-0.945998281949174)*(((((-0.0409555493238159)*(IKcos(j[0]))))+(((-0.22942714606775)*(IKsin(j[0]))))))*(IKsin(j[1]))))+(((-0.945998281949174)*(((((-0.0934581434992053)*(IKsin(j[0]))))+(((0.52353919050829)*(IKcos(j[0]))))))*(IKcos(j[2]))))+(((-0.945998281949174)*(((((0.0115334342172636)*(IKsin(j[0]))))+(((-0.0646086535405889)*(IKcos(j[0]))))))*(IKsin(j[2]))))+(((-0.945998281949174)*(((((0.531815483588428)*(((((0.946191894238107)*(IKsin(j[0]))))+(((0.168906816209186)*(IKcos(j[0]))))))*(IKsin(j[1]))))+(((0.531815483588428)*(((((0.271732233620001)*(IKsin(j[0]))))+(((0.0485075244479057)*(IKcos(j[0]))))))*(IKcos(j[1]))))))*(IKsin(j[2]))))+(((-0.945998281949174)*(((((-0.0656300100348293)*(((((-0.271732233620001)*(IKsin(j[0]))))+(((-0.0485075244479057)*(IKcos(j[0]))))))*(IKcos(j[1]))))+(((-0.0656300100348293)*(((((-0.168906816209186)*(IKcos(j[0]))))+(((-0.946191894238107)*(IKsin(j[0]))))))*(IKsin(j[1]))))))*(IKcos(j[2]))))+(((-0.945998281949174)*(((((0.798882425671523)*(IKsin(j[0]))))+(((0.142610275851393)*(IKcos(j[0]))))))*(IKcos(j[1]))))))*(IKcos(j[3]))))+(((((((0.0397067222902749)*(((((0.946191894238107)*(IKsin(j[0]))))+(((0.168906816209186)*(IKcos(j[0]))))))*(IKsin(j[1]))))+(((0.0397067222902749)*(((((0.271732233620001)*(IKsin(j[0]))))+(((0.0485075244479057)*(IKcos(j[0]))))))*(IKcos(j[1]))))))*(IKsin(j[2]))))+(((((((-0.945998281949174)*(((((0.145607662687148)*(IKsin(j[0]))))+(((0.0259927472111257)*(IKcos(j[0]))))))*(IKsin(j[1]))))+(((-0.945998281949174)*(((((0.837955424564001)*(((((0.271732233620001)*(IKsin(j[0]))))+(((0.0485075244479057)*(IKcos(j[0]))))))*(IKcos(j[1]))))+(((0.837955424564001)*(((((0.946191894238107)*(IKsin(j[0]))))+(((0.168906816209186)*(IKcos(j[0]))))))*(IKsin(j[1]))))))*(IKsin(j[2]))))+(((-0.945998281949174)*(((((-0.101810558420961)*(IKcos(j[0]))))+(((0.0181744288701722)*(IKsin(j[0]))))))*(IKsin(j[2]))))+(((-0.945998281949174)*(((((-0.0905086834657259)*(IKcos(j[0]))))+(((-0.507016736064526)*(IKsin(j[0]))))))*(IKcos(j[1]))))+(((-0.945998281949174)*(((((-0.103420015812922)*(((((-0.271732233620001)*(IKsin(j[0]))))+(((-0.0485075244479057)*(IKcos(j[0]))))))*(IKcos(j[1]))))+(((-0.103420015812922)*(((((-0.168906816209186)*(IKcos(j[0]))))+(((-0.946191894238107)*(IKsin(j[0]))))))*(IKsin(j[1]))))))*(IKcos(j[2]))))+(((-0.945998281949174)*(((((0.824914877803331)*(IKcos(j[0]))))+(((-0.147257386690619)*(IKsin(j[0]))))))*(IKcos(j[2]))))))*(IKsin(j[3]))))+(((((((-2.92543908095302e-7)*(IKcos(j[0]))))+(((-1.63878924936753e-6)*(IKsin(j[0]))))))*(IKcos(j[1]))))+(((((((0.321730674246603)*(((((-0.168906816209186)*(IKcos(j[0]))))+(((-0.946191894238107)*(IKsin(j[0]))))))*(IKsin(j[1]))))+(((0.321730674246603)*(((((-0.271732233620001)*(IKsin(j[0]))))+(((-0.0485075244479057)*(IKcos(j[0]))))))*(IKcos(j[1]))))))*(IKcos(j[2]))))+(((((((0.31672379228264)*(IKcos(j[0]))))+(((-0.0565390674956448)*(IKsin(j[0]))))))*(IKsin(j[2]))))+(((((((4.70635888845422e-7)*(IKsin(j[0]))))+(((8.40142576392187e-8)*(IKcos(j[0]))))))*(IKsin(j[1]))))))*(IKcos(j[4]))))))*(IKcos(j[5]))))+(((-0.00413000607730841)*(((((0.980583922797878)*(((((((((-0.0069778272054965)*(IKsin(j[0]))))+(((0.039088792799564)*(IKcos(j[0]))))))*(IKcos(j[2]))))+(((((((-0.945998281949174)*(((((-0.0409555493238159)*(IKcos(j[0]))))+(((-0.22942714606775)*(IKsin(j[0]))))))*(IKsin(j[1]))))+(((-0.945998281949174)*(((((-0.0934581434992053)*(IKsin(j[0]))))+(((0.52353919050829)*(IKcos(j[0]))))))*(IKcos(j[2]))))+(((-0.945998281949174)*(((((0.0115334342172636)*(IKsin(j[0]))))+(((-0.0646086535405889)*(IKcos(j[0]))))))*(IKsin(j[2]))))+(((-0.945998281949174)*(((((0.531815483588428)*(((((0.946191894238107)*(IKsin(j[0]))))+(((0.168906816209186)*(IKcos(j[0]))))))*(IKsin(j[1]))))+(((0.531815483588428)*(((((0.271732233620001)*(IKsin(j[0]))))+(((0.0485075244479057)*(IKcos(j[0]))))))*(IKcos(j[1]))))))*(IKsin(j[2]))))+(((-0.945998281949174)*(((((-0.0656300100348293)*(((((-0.271732233620001)*(IKsin(j[0]))))+(((-0.0485075244479057)*(IKcos(j[0]))))))*(IKcos(j[1]))))+(((-0.0656300100348293)*(((((-0.168906816209186)*(IKcos(j[0]))))+(((-0.946191894238107)*(IKsin(j[0]))))))*(IKsin(j[1]))))))*(IKcos(j[2]))))+(((-0.945998281949174)*(((((0.798882425671523)*(IKsin(j[0]))))+(((0.142610275851393)*(IKcos(j[0]))))))*(IKcos(j[1]))))))*(IKcos(j[3]))))+(((((((0.0397067222902749)*(((((0.946191894238107)*(IKsin(j[0]))))+(((0.168906816209186)*(IKcos(j[0]))))))*(IKsin(j[1]))))+(((0.0397067222902749)*(((((0.271732233620001)*(IKsin(j[0]))))+(((0.0485075244479057)*(IKcos(j[0]))))))*(IKcos(j[1]))))))*(IKsin(j[2]))))+(((((((-0.945998281949174)*(((((0.145607662687148)*(IKsin(j[0]))))+(((0.0259927472111257)*(IKcos(j[0]))))))*(IKsin(j[1]))))+(((-0.945998281949174)*(((((0.837955424564001)*(((((0.271732233620001)*(IKsin(j[0]))))+(((0.0485075244479057)*(IKcos(j[0]))))))*(IKcos(j[1]))))+(((0.837955424564001)*(((((0.946191894238107)*(IKsin(j[0]))))+(((0.168906816209186)*(IKcos(j[0]))))))*(IKsin(j[1]))))))*(IKsin(j[2]))))+(((-0.945998281949174)*(((((-0.101810558420961)*(IKcos(j[0]))))+(((0.0181744288701722)*(IKsin(j[0]))))))*(IKsin(j[2]))))+(((-0.945998281949174)*(((((-0.0905086834657259)*(IKcos(j[0]))))+(((-0.507016736064526)*(IKsin(j[0]))))))*(IKcos(j[1]))))+(((-0.945998281949174)*(((((-0.103420015812922)*(((((-0.271732233620001)*(IKsin(j[0]))))+(((-0.0485075244479057)*(IKcos(j[0]))))))*(IKcos(j[1]))))+(((-0.103420015812922)*(((((-0.168906816209186)*(IKcos(j[0]))))+(((-0.946191894238107)*(IKsin(j[0]))))))*(IKsin(j[1]))))))*(IKcos(j[2]))))+(((-0.945998281949174)*(((((0.824914877803331)*(IKcos(j[0]))))+(((-0.147257386690619)*(IKsin(j[0]))))))*(IKcos(j[2]))))))*(IKsin(j[3]))))+(((((((-2.92543908095302e-7)*(IKcos(j[0]))))+(((-1.63878924936753e-6)*(IKsin(j[0]))))))*(IKcos(j[1]))))+(((((((0.321730674246603)*(((((-0.168906816209186)*(IKcos(j[0]))))+(((-0.946191894238107)*(IKsin(j[0]))))))*(IKsin(j[1]))))+(((0.321730674246603)*(((((-0.271732233620001)*(IKsin(j[0]))))+(((-0.0485075244479057)*(IKcos(j[0]))))))*(IKcos(j[1]))))))*(IKcos(j[2]))))+(((((((0.31672379228264)*(IKcos(j[0]))))+(((-0.0565390674956448)*(IKsin(j[0]))))))*(IKsin(j[2]))))+(((((((4.70635888845422e-7)*(IKsin(j[0]))))+(((8.40142576392187e-8)*(IKcos(j[0]))))))*(IKsin(j[1]))))))*(IKcos(j[4]))))+(((0.980583922797878)*(((((((((8.53702182586258e-7)*(IKcos(j[0]))))+(((4.78231786842813e-6)*(IKsin(j[0]))))))*(IKcos(j[1]))))+(((((((-0.324171637484235)*(((((0.531815483588428)*(((((0.946191894238107)*(IKsin(j[0]))))+(((0.168906816209186)*(IKcos(j[0]))))))*(IKsin(j[1]))))+(((0.531815483588428)*(((((0.271732233620001)*(IKsin(j[0]))))+(((0.0485075244479057)*(IKcos(j[0]))))))*(IKcos(j[1]))))))*(IKsin(j[2]))))+(((-0.324171637484235)*(((((-0.0656300100348293)*(((((-0.271732233620001)*(IKsin(j[0]))))+(((-0.0485075244479057)*(IKcos(j[0]))))))*(IKcos(j[1]))))+(((-0.0656300100348293)*(((((-0.168906816209186)*(IKcos(j[0]))))+(((-0.946191894238107)*(IKsin(j[0]))))))*(IKsin(j[1]))))))*(IKcos(j[2]))))+(((-0.324171637484235)*(((((0.798882425671523)*(IKsin(j[0]))))+(((0.142610275851393)*(IKcos(j[0]))))))*(IKcos(j[1]))))+(((-0.324171637484235)*(((((-0.0934581434992053)*(IKsin(j[0]))))+(((0.52353919050829)*(IKcos(j[0]))))))*(IKcos(j[2]))))+(((-0.324171637484235)*(((((0.0115334342172636)*(IKsin(j[0]))))+(((-0.0646086535405889)*(IKcos(j[0]))))))*(IKsin(j[2]))))+(((-0.324171637484235)*(((((-0.0409555493238159)*(IKcos(j[0]))))+(((-0.22942714606775)*(IKsin(j[0]))))))*(IKsin(j[1]))))))*(IKcos(j[3]))))+(((((((-0.324171637484235)*(((((0.837955424564001)*(((((0.271732233620001)*(IKsin(j[0]))))+(((0.0485075244479057)*(IKcos(j[0]))))))*(IKcos(j[1]))))+(((0.837955424564001)*(((((0.946191894238107)*(IKsin(j[0]))))+(((0.168906816209186)*(IKcos(j[0]))))))*(IKsin(j[1]))))))*(IKsin(j[2]))))+(((-0.324171637484235)*(((((-0.103420015812922)*(((((-0.271732233620001)*(IKsin(j[0]))))+(((-0.0485075244479057)*(IKcos(j[0]))))))*(IKcos(j[1]))))+(((-0.103420015812922)*(((((-0.168906816209186)*(IKcos(j[0]))))+(((-0.946191894238107)*(IKsin(j[0]))))))*(IKsin(j[1]))))))*(IKcos(j[2]))))+(((-0.324171637484235)*(((((-0.0905086834657259)*(IKcos(j[0]))))+(((-0.507016736064526)*(IKsin(j[0]))))))*(IKcos(j[1]))))+(((-0.324171637484235)*(((((0.145607662687148)*(IKsin(j[0]))))+(((0.0259927472111257)*(IKcos(j[0]))))))*(IKsin(j[1]))))+(((-0.324171637484235)*(((((0.824914877803331)*(IKcos(j[0]))))+(((-0.147257386690619)*(IKsin(j[0]))))))*(IKcos(j[2]))))+(((-0.324171637484235)*(((((-0.101810558420961)*(IKcos(j[0]))))+(((0.0181744288701722)*(IKsin(j[0]))))))*(IKsin(j[2]))))))*(IKsin(j[3]))))+(((((((-0.114068988634618)*(IKcos(j[0]))))+(((0.020362708469395)*(IKsin(j[0]))))))*(IKcos(j[2]))))+(((((((0.164992413059238)*(IKsin(j[0]))))+(((-0.924263966079929)*(IKcos(j[0]))))))*(IKsin(j[2]))))+(((((((-2.45170564589572e-7)*(IKcos(j[0]))))+(((-1.37341053562418e-6)*(IKsin(j[0]))))))*(IKsin(j[1]))))+(((((((-0.115872231636118)*(((((0.271732233620001)*(IKsin(j[0]))))+(((0.0485075244479057)*(IKcos(j[0]))))))*(IKcos(j[1]))))+(((-0.115872231636118)*(((((0.946191894238107)*(IKsin(j[0]))))+(((0.168906816209186)*(IKcos(j[0]))))))*(IKsin(j[1]))))))*(IKsin(j[2]))))+(((((((-0.938875058440104)*(((((-0.168906816209186)*(IKcos(j[0]))))+(((-0.946191894238107)*(IKsin(j[0]))))))*(IKsin(j[1]))))+(((-0.938875058440104)*(((((-0.271732233620001)*(IKsin(j[0]))))+(((-0.0485075244479057)*(IKcos(j[0]))))))*(IKcos(j[1]))))))*(IKcos(j[2]))))))*(IKsin(j[4]))))))*(IKsin(j[5]))))+(((-0.00413000607730841)*(((((0.980583922797878)*(((((((((-0.531815483588428)*(((((0.946191894238107)*(IKsin(j[0]))))+(((0.168906816209186)*(IKcos(j[0]))))))*(IKsin(j[1]))))+(((-0.531815483588428)*(((((0.271732233620001)*(IKsin(j[0]))))+(((0.0485075244479057)*(IKcos(j[0]))))))*(IKcos(j[1]))))))*(IKsin(j[2]))))+(((((((0.0656300100348293)*(((((-0.168906816209186)*(IKcos(j[0]))))+(((-0.946191894238107)*(IKsin(j[0]))))))*(IKsin(j[1]))))+(((0.0656300100348293)*(((((-0.271732233620001)*(IKsin(j[0]))))+(((-0.0485075244479057)*(IKcos(j[0]))))))*(IKcos(j[1]))))))*(IKcos(j[2]))))+(((((((-0.142610275851393)*(IKcos(j[0]))))+(((-0.798882425671523)*(IKsin(j[0]))))))*(IKcos(j[1]))))+(((((((-0.52353919050829)*(IKcos(j[0]))))+(((0.0934581434992053)*(IKsin(j[0]))))))*(IKcos(j[2]))))+(((((((0.0409555493238159)*(IKcos(j[0]))))+(((0.22942714606775)*(IKsin(j[0]))))))*(IKsin(j[1]))))+(((((((-0.0115334342172636)*(IKsin(j[0]))))+(((0.0646086535405889)*(IKcos(j[0]))))))*(IKsin(j[2]))))))*(IKsin(j[3]))))+(((0.980583922797878)*(((((((((-0.101810558420961)*(IKcos(j[0]))))+(((0.0181744288701722)*(IKsin(j[0]))))))*(IKsin(j[2]))))+(((((((0.837955424564001)*(((((0.271732233620001)*(IKsin(j[0]))))+(((0.0485075244479057)*(IKcos(j[0]))))))*(IKcos(j[1]))))+(((0.837955424564001)*(((((0.946191894238107)*(IKsin(j[0]))))+(((0.168906816209186)*(IKcos(j[0]))))))*(IKsin(j[1]))))))*(IKsin(j[2]))))+(((((((0.145607662687148)*(IKsin(j[0]))))+(((0.0259927472111257)*(IKcos(j[0]))))))*(IKsin(j[1]))))+(((((((-0.0905086834657259)*(IKcos(j[0]))))+(((-0.507016736064526)*(IKsin(j[0]))))))*(IKcos(j[1]))))+(((((((-0.103420015812922)*(((((-0.271732233620001)*(IKsin(j[0]))))+(((-0.0485075244479057)*(IKcos(j[0]))))))*(IKcos(j[1]))))+(((-0.103420015812922)*(((((-0.168906816209186)*(IKcos(j[0]))))+(((-0.946191894238107)*(IKsin(j[0]))))))*(IKsin(j[1]))))))*(IKcos(j[2]))))+(((((((0.824914877803331)*(IKcos(j[0]))))+(((-0.147257386690619)*(IKsin(j[0]))))))*(IKcos(j[2]))))))*(IKcos(j[3]))))))*(IKcos(j[5]))))))*(IKcos(j[6]))))+(((((((0.999991471488533)*(((((((((0.924263966079929)*(IKcos(j[0]))))+(((-0.164992413059238)*(IKsin(j[0]))))))*(IKsin(j[2]))))+(((((((0.115872231636118)*(((((0.271732233620001)*(IKsin(j[0]))))+(((0.0485075244479057)*(IKcos(j[0]))))))*(IKcos(j[1]))))+(((0.115872231636118)*(((((0.946191894238107)*(IKsin(j[0]))))+(((0.168906816209186)*(IKcos(j[0]))))))*(IKsin(j[1]))))))*(IKsin(j[2]))))+(((((((0.938875058440104)*(((((-0.168906816209186)*(IKcos(j[0]))))+(((-0.946191894238107)*(IKsin(j[0]))))))*(IKsin(j[1]))))+(((0.938875058440104)*(((((-0.271732233620001)*(IKsin(j[0]))))+(((-0.0485075244479057)*(IKcos(j[0]))))))*(IKcos(j[1]))))))*(IKcos(j[2]))))+(((((((0.114068988634618)*(IKcos(j[0]))))+(((-0.020362708469395)*(IKsin(j[0]))))))*(IKcos(j[2]))))+(((((((0.324171637484235)*(((((-0.0409555493238159)*(IKcos(j[0]))))+(((-0.22942714606775)*(IKsin(j[0]))))))*(IKsin(j[1]))))+(((0.324171637484235)*(((((0.798882425671523)*(IKsin(j[0]))))+(((0.142610275851393)*(IKcos(j[0]))))))*(IKcos(j[1]))))+(((0.324171637484235)*(((((-0.0656300100348293)*(((((-0.271732233620001)*(IKsin(j[0]))))+(((-0.0485075244479057)*(IKcos(j[0]))))))*(IKcos(j[1]))))+(((-0.0656300100348293)*(((((-0.168906816209186)*(IKcos(j[0]))))+(((-0.946191894238107)*(IKsin(j[0]))))))*(IKsin(j[1]))))))*(IKcos(j[2]))))+(((0.324171637484235)*(((((0.531815483588428)*(((((0.946191894238107)*(IKsin(j[0]))))+(((0.168906816209186)*(IKcos(j[0]))))))*(IKsin(j[1]))))+(((0.531815483588428)*(((((0.271732233620001)*(IKsin(j[0]))))+(((0.0485075244479057)*(IKcos(j[0]))))))*(IKcos(j[1]))))))*(IKsin(j[2]))))+(((0.324171637484235)*(((((0.0115334342172636)*(IKsin(j[0]))))+(((-0.0646086535405889)*(IKcos(j[0]))))))*(IKsin(j[2]))))+(((0.324171637484235)*(((((-0.0934581434992053)*(IKsin(j[0]))))+(((0.52353919050829)*(IKcos(j[0]))))))*(IKcos(j[2]))))))*(IKcos(j[3]))))+(((((((0.324171637484235)*(((((0.824914877803331)*(IKcos(j[0]))))+(((-0.147257386690619)*(IKsin(j[0]))))))*(IKcos(j[2]))))+(((0.324171637484235)*(((((-0.0905086834657259)*(IKcos(j[0]))))+(((-0.507016736064526)*(IKsin(j[0]))))))*(IKcos(j[1]))))+(((0.324171637484235)*(((((0.837955424564001)*(((((0.271732233620001)*(IKsin(j[0]))))+(((0.0485075244479057)*(IKcos(j[0]))))))*(IKcos(j[1]))))+(((0.837955424564001)*(((((0.946191894238107)*(IKsin(j[0]))))+(((0.168906816209186)*(IKcos(j[0]))))))*(IKsin(j[1]))))))*(IKsin(j[2]))))+(((0.324171637484235)*(((((-0.101810558420961)*(IKcos(j[0]))))+(((0.0181744288701722)*(IKsin(j[0]))))))*(IKsin(j[2]))))+(((0.324171637484235)*(((((0.145607662687148)*(IKsin(j[0]))))+(((0.0259927472111257)*(IKcos(j[0]))))))*(IKsin(j[1]))))+(((0.324171637484235)*(((((-0.103420015812922)*(((((-0.271732233620001)*(IKsin(j[0]))))+(((-0.0485075244479057)*(IKcos(j[0]))))))*(IKcos(j[1]))))+(((-0.103420015812922)*(((((-0.168906816209186)*(IKcos(j[0]))))+(((-0.946191894238107)*(IKsin(j[0]))))))*(IKsin(j[1]))))))*(IKcos(j[2]))))))*(IKsin(j[3]))))+(((((((1.37341053562418e-6)*(IKsin(j[0]))))+(((2.45170564589572e-7)*(IKcos(j[0]))))))*(IKsin(j[1]))))+(((((((-8.53702182586258e-7)*(IKcos(j[0]))))+(((-4.78231786842813e-6)*(IKsin(j[0]))))))*(IKcos(j[1]))))))*(IKcos(j[4]))))+(((0.999991471488533)*(((((((((-0.0069778272054965)*(IKsin(j[0]))))+(((0.039088792799564)*(IKcos(j[0]))))))*(IKcos(j[2]))))+(((((((-0.945998281949174)*(((((-0.0409555493238159)*(IKcos(j[0]))))+(((-0.22942714606775)*(IKsin(j[0]))))))*(IKsin(j[1]))))+(((-0.945998281949174)*(((((-0.0934581434992053)*(IKsin(j[0]))))+(((0.52353919050829)*(IKcos(j[0]))))))*(IKcos(j[2]))))+(((-0.945998281949174)*(((((0.0115334342172636)*(IKsin(j[0]))))+(((-0.0646086535405889)*(IKcos(j[0]))))))*(IKsin(j[2]))))+(((-0.945998281949174)*(((((0.531815483588428)*(((((0.946191894238107)*(IKsin(j[0]))))+(((0.168906816209186)*(IKcos(j[0]))))))*(IKsin(j[1]))))+(((0.531815483588428)*(((((0.271732233620001)*(IKsin(j[0]))))+(((0.0485075244479057)*(IKcos(j[0]))))))*(IKcos(j[1]))))))*(IKsin(j[2]))))+(((-0.945998281949174)*(((((-0.0656300100348293)*(((((-0.271732233620001)*(IKsin(j[0]))))+(((-0.0485075244479057)*(IKcos(j[0]))))))*(IKcos(j[1]))))+(((-0.0656300100348293)*(((((-0.168906816209186)*(IKcos(j[0]))))+(((-0.946191894238107)*(IKsin(j[0]))))))*(IKsin(j[1]))))))*(IKcos(j[2]))))+(((-0.945998281949174)*(((((0.798882425671523)*(IKsin(j[0]))))+(((0.142610275851393)*(IKcos(j[0]))))))*(IKcos(j[1]))))))*(IKcos(j[3]))))+(((((((0.0397067222902749)*(((((0.946191894238107)*(IKsin(j[0]))))+(((0.168906816209186)*(IKcos(j[0]))))))*(IKsin(j[1]))))+(((0.0397067222902749)*(((((0.271732233620001)*(IKsin(j[0]))))+(((0.0485075244479057)*(IKcos(j[0]))))))*(IKcos(j[1]))))))*(IKsin(j[2]))))+(((((((-0.945998281949174)*(((((0.145607662687148)*(IKsin(j[0]))))+(((0.0259927472111257)*(IKcos(j[0]))))))*(IKsin(j[1]))))+(((-0.945998281949174)*(((((0.837955424564001)*(((((0.271732233620001)*(IKsin(j[0]))))+(((0.0485075244479057)*(IKcos(j[0]))))))*(IKcos(j[1]))))+(((0.837955424564001)*(((((0.946191894238107)*(IKsin(j[0]))))+(((0.168906816209186)*(IKcos(j[0]))))))*(IKsin(j[1]))))))*(IKsin(j[2]))))+(((-0.945998281949174)*(((((-0.101810558420961)*(IKcos(j[0]))))+(((0.0181744288701722)*(IKsin(j[0]))))))*(IKsin(j[2]))))+(((-0.945998281949174)*(((((-0.0905086834657259)*(IKcos(j[0]))))+(((-0.507016736064526)*(IKsin(j[0]))))))*(IKcos(j[1]))))+(((-0.945998281949174)*(((((-0.103420015812922)*(((((-0.271732233620001)*(IKsin(j[0]))))+(((-0.0485075244479057)*(IKcos(j[0]))))))*(IKcos(j[1]))))+(((-0.103420015812922)*(((((-0.168906816209186)*(IKcos(j[0]))))+(((-0.946191894238107)*(IKsin(j[0]))))))*(IKsin(j[1]))))))*(IKcos(j[2]))))+(((-0.945998281949174)*(((((0.824914877803331)*(IKcos(j[0]))))+(((-0.147257386690619)*(IKsin(j[0]))))))*(IKcos(j[2]))))))*(IKsin(j[3]))))+(((((((-2.92543908095302e-7)*(IKcos(j[0]))))+(((-1.63878924936753e-6)*(IKsin(j[0]))))))*(IKcos(j[1]))))+(((((((0.321730674246603)*(((((-0.168906816209186)*(IKcos(j[0]))))+(((-0.946191894238107)*(IKsin(j[0]))))))*(IKsin(j[1]))))+(((0.321730674246603)*(((((-0.271732233620001)*(IKsin(j[0]))))+(((-0.0485075244479057)*(IKcos(j[0]))))))*(IKcos(j[1]))))))*(IKcos(j[2]))))+(((((((0.31672379228264)*(IKcos(j[0]))))+(((-0.0565390674956448)*(IKsin(j[0]))))))*(IKsin(j[2]))))+(((((((4.70635888845422e-7)*(IKsin(j[0]))))+(((8.40142576392187e-8)*(IKcos(j[0]))))))*(IKsin(j[1]))))))*(IKsin(j[4]))))))*(IKcos(j[6]))))+(((((((0.999991471488533)*(((((0.980583922797878)*(((((((((-0.0069778272054965)*(IKsin(j[0]))))+(((0.039088792799564)*(IKcos(j[0]))))))*(IKcos(j[2]))))+(((((((-0.945998281949174)*(((((-0.0409555493238159)*(IKcos(j[0]))))+(((-0.22942714606775)*(IKsin(j[0]))))))*(IKsin(j[1]))))+(((-0.945998281949174)*(((((-0.0934581434992053)*(IKsin(j[0]))))+(((0.52353919050829)*(IKcos(j[0]))))))*(IKcos(j[2]))))+(((-0.945998281949174)*(((((0.0115334342172636)*(IKsin(j[0]))))+(((-0.0646086535405889)*(IKcos(j[0]))))))*(IKsin(j[2]))))+(((-0.945998281949174)*(((((0.531815483588428)*(((((0.946191894238107)*(IKsin(j[0]))))+(((0.168906816209186)*(IKcos(j[0]))))))*(IKsin(j[1]))))+(((0.531815483588428)*(((((0.271732233620001)*(IKsin(j[0]))))+(((0.0485075244479057)*(IKcos(j[0]))))))*(IKcos(j[1]))))))*(IKsin(j[2]))))+(((-0.945998281949174)*(((((-0.0656300100348293)*(((((-0.271732233620001)*(IKsin(j[0]))))+(((-0.0485075244479057)*(IKcos(j[0]))))))*(IKcos(j[1]))))+(((-0.0656300100348293)*(((((-0.168906816209186)*(IKcos(j[0]))))+(((-0.946191894238107)*(IKsin(j[0]))))))*(IKsin(j[1]))))))*(IKcos(j[2]))))+(((-0.945998281949174)*(((((0.798882425671523)*(IKsin(j[0]))))+(((0.142610275851393)*(IKcos(j[0]))))))*(IKcos(j[1]))))))*(IKcos(j[3]))))+(((((((0.0397067222902749)*(((((0.946191894238107)*(IKsin(j[0]))))+(((0.168906816209186)*(IKcos(j[0]))))))*(IKsin(j[1]))))+(((0.0397067222902749)*(((((0.271732233620001)*(IKsin(j[0]))))+(((0.0485075244479057)*(IKcos(j[0]))))))*(IKcos(j[1]))))))*(IKsin(j[2]))))+(((((((-0.945998281949174)*(((((0.145607662687148)*(IKsin(j[0]))))+(((0.0259927472111257)*(IKcos(j[0]))))))*(IKsin(j[1]))))+(((-0.945998281949174)*(((((0.837955424564001)*(((((0.271732233620001)*(IKsin(j[0]))))+(((0.0485075244479057)*(IKcos(j[0]))))))*(IKcos(j[1]))))+(((0.837955424564001)*(((((0.946191894238107)*(IKsin(j[0]))))+(((0.168906816209186)*(IKcos(j[0]))))))*(IKsin(j[1]))))))*(IKsin(j[2]))))+(((-0.945998281949174)*(((((-0.101810558420961)*(IKcos(j[0]))))+(((0.0181744288701722)*(IKsin(j[0]))))))*(IKsin(j[2]))))+(((-0.945998281949174)*(((((-0.0905086834657259)*(IKcos(j[0]))))+(((-0.507016736064526)*(IKsin(j[0]))))))*(IKcos(j[1]))))+(((-0.945998281949174)*(((((-0.103420015812922)*(((((-0.271732233620001)*(IKsin(j[0]))))+(((-0.0485075244479057)*(IKcos(j[0]))))))*(IKcos(j[1]))))+(((-0.103420015812922)*(((((-0.168906816209186)*(IKcos(j[0]))))+(((-0.946191894238107)*(IKsin(j[0]))))))*(IKsin(j[1]))))))*(IKcos(j[2]))))+(((-0.945998281949174)*(((((0.824914877803331)*(IKcos(j[0]))))+(((-0.147257386690619)*(IKsin(j[0]))))))*(IKcos(j[2]))))))*(IKsin(j[3]))))+(((((((-2.92543908095302e-7)*(IKcos(j[0]))))+(((-1.63878924936753e-6)*(IKsin(j[0]))))))*(IKcos(j[1]))))+(((((((0.321730674246603)*(((((-0.168906816209186)*(IKcos(j[0]))))+(((-0.946191894238107)*(IKsin(j[0]))))))*(IKsin(j[1]))))+(((0.321730674246603)*(((((-0.271732233620001)*(IKsin(j[0]))))+(((-0.0485075244479057)*(IKcos(j[0]))))))*(IKcos(j[1]))))))*(IKcos(j[2]))))+(((((((0.31672379228264)*(IKcos(j[0]))))+(((-0.0565390674956448)*(IKsin(j[0]))))))*(IKsin(j[2]))))+(((((((4.70635888845422e-7)*(IKsin(j[0]))))+(((8.40142576392187e-8)*(IKcos(j[0]))))))*(IKsin(j[1]))))))*(IKcos(j[4]))))+(((0.980583922797878)*(((((((((8.53702182586258e-7)*(IKcos(j[0]))))+(((4.78231786842813e-6)*(IKsin(j[0]))))))*(IKcos(j[1]))))+(((((((-0.324171637484235)*(((((0.531815483588428)*(((((0.946191894238107)*(IKsin(j[0]))))+(((0.168906816209186)*(IKcos(j[0]))))))*(IKsin(j[1]))))+(((0.531815483588428)*(((((0.271732233620001)*(IKsin(j[0]))))+(((0.0485075244479057)*(IKcos(j[0]))))))*(IKcos(j[1]))))))*(IKsin(j[2]))))+(((-0.324171637484235)*(((((-0.0656300100348293)*(((((-0.271732233620001)*(IKsin(j[0]))))+(((-0.0485075244479057)*(IKcos(j[0]))))))*(IKcos(j[1]))))+(((-0.0656300100348293)*(((((-0.168906816209186)*(IKcos(j[0]))))+(((-0.946191894238107)*(IKsin(j[0]))))))*(IKsin(j[1]))))))*(IKcos(j[2]))))+(((-0.324171637484235)*(((((0.798882425671523)*(IKsin(j[0]))))+(((0.142610275851393)*(IKcos(j[0]))))))*(IKcos(j[1]))))+(((-0.324171637484235)*(((((-0.0934581434992053)*(IKsin(j[0]))))+(((0.52353919050829)*(IKcos(j[0]))))))*(IKcos(j[2]))))+(((-0.324171637484235)*(((((0.0115334342172636)*(IKsin(j[0]))))+(((-0.0646086535405889)*(IKcos(j[0]))))))*(IKsin(j[2]))))+(((-0.324171637484235)*(((((-0.0409555493238159)*(IKcos(j[0]))))+(((-0.22942714606775)*(IKsin(j[0]))))))*(IKsin(j[1]))))))*(IKcos(j[3]))))+(((((((-0.324171637484235)*(((((0.837955424564001)*(((((0.271732233620001)*(IKsin(j[0]))))+(((0.0485075244479057)*(IKcos(j[0]))))))*(IKcos(j[1]))))+(((0.837955424564001)*(((((0.946191894238107)*(IKsin(j[0]))))+(((0.168906816209186)*(IKcos(j[0]))))))*(IKsin(j[1]))))))*(IKsin(j[2]))))+(((-0.324171637484235)*(((((-0.103420015812922)*(((((-0.271732233620001)*(IKsin(j[0]))))+(((-0.0485075244479057)*(IKcos(j[0]))))))*(IKcos(j[1]))))+(((-0.103420015812922)*(((((-0.168906816209186)*(IKcos(j[0]))))+(((-0.946191894238107)*(IKsin(j[0]))))))*(IKsin(j[1]))))))*(IKcos(j[2]))))+(((-0.324171637484235)*(((((-0.0905086834657259)*(IKcos(j[0]))))+(((-0.507016736064526)*(IKsin(j[0]))))))*(IKcos(j[1]))))+(((-0.324171637484235)*(((((0.145607662687148)*(IKsin(j[0]))))+(((0.0259927472111257)*(IKcos(j[0]))))))*(IKsin(j[1]))))+(((-0.324171637484235)*(((((0.824914877803331)*(IKcos(j[0]))))+(((-0.147257386690619)*(IKsin(j[0]))))))*(IKcos(j[2]))))+(((-0.324171637484235)*(((((-0.101810558420961)*(IKcos(j[0]))))+(((0.0181744288701722)*(IKsin(j[0]))))))*(IKsin(j[2]))))))*(IKsin(j[3]))))+(((((((-0.114068988634618)*(IKcos(j[0]))))+(((0.020362708469395)*(IKsin(j[0]))))))*(IKcos(j[2]))))+(((((((0.164992413059238)*(IKsin(j[0]))))+(((-0.924263966079929)*(IKcos(j[0]))))))*(IKsin(j[2]))))+(((((((-2.45170564589572e-7)*(IKcos(j[0]))))+(((-1.37341053562418e-6)*(IKsin(j[0]))))))*(IKsin(j[1]))))+(((((((-0.115872231636118)*(((((0.271732233620001)*(IKsin(j[0]))))+(((0.0485075244479057)*(IKcos(j[0]))))))*(IKcos(j[1]))))+(((-0.115872231636118)*(((((0.946191894238107)*(IKsin(j[0]))))+(((0.168906816209186)*(IKcos(j[0]))))))*(IKsin(j[1]))))))*(IKsin(j[2]))))+(((((((-0.938875058440104)*(((((-0.168906816209186)*(IKcos(j[0]))))+(((-0.946191894238107)*(IKsin(j[0]))))))*(IKsin(j[1]))))+(((-0.938875058440104)*(((((-0.271732233620001)*(IKsin(j[0]))))+(((-0.0485075244479057)*(IKcos(j[0]))))))*(IKcos(j[1]))))))*(IKcos(j[2]))))))*(IKsin(j[4]))))))*(IKsin(j[5]))))+(((0.999991471488533)*(((((0.196099898904425)*(((((((((8.53702182586258e-7)*(IKcos(j[0]))))+(((4.78231786842813e-6)*(IKsin(j[0]))))))*(IKcos(j[1]))))+(((((((-0.324171637484235)*(((((0.531815483588428)*(((((0.946191894238107)*(IKsin(j[0]))))+(((0.168906816209186)*(IKcos(j[0]))))))*(IKsin(j[1]))))+(((0.531815483588428)*(((((0.271732233620001)*(IKsin(j[0]))))+(((0.0485075244479057)*(IKcos(j[0]))))))*(IKcos(j[1]))))))*(IKsin(j[2]))))+(((-0.324171637484235)*(((((-0.0656300100348293)*(((((-0.271732233620001)*(IKsin(j[0]))))+(((-0.0485075244479057)*(IKcos(j[0]))))))*(IKcos(j[1]))))+(((-0.0656300100348293)*(((((-0.168906816209186)*(IKcos(j[0]))))+(((-0.946191894238107)*(IKsin(j[0]))))))*(IKsin(j[1]))))))*(IKcos(j[2]))))+(((-0.324171637484235)*(((((0.798882425671523)*(IKsin(j[0]))))+(((0.142610275851393)*(IKcos(j[0]))))))*(IKcos(j[1]))))+(((-0.324171637484235)*(((((-0.0934581434992053)*(IKsin(j[0]))))+(((0.52353919050829)*(IKcos(j[0]))))))*(IKcos(j[2]))))+(((-0.324171637484235)*(((((0.0115334342172636)*(IKsin(j[0]))))+(((-0.0646086535405889)*(IKcos(j[0]))))))*(IKsin(j[2]))))+(((-0.324171637484235)*(((((-0.0409555493238159)*(IKcos(j[0]))))+(((-0.22942714606775)*(IKsin(j[0]))))))*(IKsin(j[1]))))))*(IKcos(j[3]))))+(((((((-0.324171637484235)*(((((0.837955424564001)*(((((0.271732233620001)*(IKsin(j[0]))))+(((0.0485075244479057)*(IKcos(j[0]))))))*(IKcos(j[1]))))+(((0.837955424564001)*(((((0.946191894238107)*(IKsin(j[0]))))+(((0.168906816209186)*(IKcos(j[0]))))))*(IKsin(j[1]))))))*(IKsin(j[2]))))+(((-0.324171637484235)*(((((-0.103420015812922)*(((((-0.271732233620001)*(IKsin(j[0]))))+(((-0.0485075244479057)*(IKcos(j[0]))))))*(IKcos(j[1]))))+(((-0.103420015812922)*(((((-0.168906816209186)*(IKcos(j[0]))))+(((-0.946191894238107)*(IKsin(j[0]))))))*(IKsin(j[1]))))))*(IKcos(j[2]))))+(((-0.324171637484235)*(((((-0.0905086834657259)*(IKcos(j[0]))))+(((-0.507016736064526)*(IKsin(j[0]))))))*(IKcos(j[1]))))+(((-0.324171637484235)*(((((0.145607662687148)*(IKsin(j[0]))))+(((0.0259927472111257)*(IKcos(j[0]))))))*(IKsin(j[1]))))+(((-0.324171637484235)*(((((0.824914877803331)*(IKcos(j[0]))))+(((-0.147257386690619)*(IKsin(j[0]))))))*(IKcos(j[2]))))+(((-0.324171637484235)*(((((-0.101810558420961)*(IKcos(j[0]))))+(((0.0181744288701722)*(IKsin(j[0]))))))*(IKsin(j[2]))))))*(IKsin(j[3]))))+(((((((-0.114068988634618)*(IKcos(j[0]))))+(((0.020362708469395)*(IKsin(j[0]))))))*(IKcos(j[2]))))+(((((((0.164992413059238)*(IKsin(j[0]))))+(((-0.924263966079929)*(IKcos(j[0]))))))*(IKsin(j[2]))))+(((((((-2.45170564589572e-7)*(IKcos(j[0]))))+(((-1.37341053562418e-6)*(IKsin(j[0]))))))*(IKsin(j[1]))))+(((((((-0.115872231636118)*(((((0.271732233620001)*(IKsin(j[0]))))+(((0.0485075244479057)*(IKcos(j[0]))))))*(IKcos(j[1]))))+(((-0.115872231636118)*(((((0.946191894238107)*(IKsin(j[0]))))+(((0.168906816209186)*(IKcos(j[0]))))))*(IKsin(j[1]))))))*(IKsin(j[2]))))+(((((((-0.938875058440104)*(((((-0.168906816209186)*(IKcos(j[0]))))+(((-0.946191894238107)*(IKsin(j[0]))))))*(IKsin(j[1]))))+(((-0.938875058440104)*(((((-0.271732233620001)*(IKsin(j[0]))))+(((-0.0485075244479057)*(IKcos(j[0]))))))*(IKcos(j[1]))))))*(IKcos(j[2]))))))*(IKsin(j[4]))))+(((0.196099898904425)*(((((((((-0.0069778272054965)*(IKsin(j[0]))))+(((0.039088792799564)*(IKcos(j[0]))))))*(IKcos(j[2]))))+(((((((-0.945998281949174)*(((((-0.0409555493238159)*(IKcos(j[0]))))+(((-0.22942714606775)*(IKsin(j[0]))))))*(IKsin(j[1]))))+(((-0.945998281949174)*(((((-0.0934581434992053)*(IKsin(j[0]))))+(((0.52353919050829)*(IKcos(j[0]))))))*(IKcos(j[2]))))+(((-0.945998281949174)*(((((0.0115334342172636)*(IKsin(j[0]))))+(((-0.0646086535405889)*(IKcos(j[0]))))))*(IKsin(j[2]))))+(((-0.945998281949174)*(((((0.531815483588428)*(((((0.946191894238107)*(IKsin(j[0]))))+(((0.168906816209186)*(IKcos(j[0]))))))*(IKsin(j[1]))))+(((0.531815483588428)*(((((0.271732233620001)*(IKsin(j[0]))))+(((0.0485075244479057)*(IKcos(j[0]))))))*(IKcos(j[1]))))))*(IKsin(j[2]))))+(((-0.945998281949174)*(((((-0.0656300100348293)*(((((-0.271732233620001)*(IKsin(j[0]))))+(((-0.0485075244479057)*(IKcos(j[0]))))))*(IKcos(j[1]))))+(((-0.0656300100348293)*(((((-0.168906816209186)*(IKcos(j[0]))))+(((-0.946191894238107)*(IKsin(j[0]))))))*(IKsin(j[1]))))))*(IKcos(j[2]))))+(((-0.945998281949174)*(((((0.798882425671523)*(IKsin(j[0]))))+(((0.142610275851393)*(IKcos(j[0]))))))*(IKcos(j[1]))))))*(IKcos(j[3]))))+(((((((0.0397067222902749)*(((((0.946191894238107)*(IKsin(j[0]))))+(((0.168906816209186)*(IKcos(j[0]))))))*(IKsin(j[1]))))+(((0.0397067222902749)*(((((0.271732233620001)*(IKsin(j[0]))))+(((0.0485075244479057)*(IKcos(j[0]))))))*(IKcos(j[1]))))))*(IKsin(j[2]))))+(((((((-0.945998281949174)*(((((0.145607662687148)*(IKsin(j[0]))))+(((0.0259927472111257)*(IKcos(j[0]))))))*(IKsin(j[1]))))+(((-0.945998281949174)*(((((0.837955424564001)*(((((0.271732233620001)*(IKsin(j[0]))))+(((0.0485075244479057)*(IKcos(j[0]))))))*(IKcos(j[1]))))+(((0.837955424564001)*(((((0.946191894238107)*(IKsin(j[0]))))+(((0.168906816209186)*(IKcos(j[0]))))))*(IKsin(j[1]))))))*(IKsin(j[2]))))+(((-0.945998281949174)*(((((-0.101810558420961)*(IKcos(j[0]))))+(((0.0181744288701722)*(IKsin(j[0]))))))*(IKsin(j[2]))))+(((-0.945998281949174)*(((((-0.0905086834657259)*(IKcos(j[0]))))+(((-0.507016736064526)*(IKsin(j[0]))))))*(IKcos(j[1]))))+(((-0.945998281949174)*(((((-0.103420015812922)*(((((-0.271732233620001)*(IKsin(j[0]))))+(((-0.0485075244479057)*(IKcos(j[0]))))))*(IKcos(j[1]))))+(((-0.103420015812922)*(((((-0.168906816209186)*(IKcos(j[0]))))+(((-0.946191894238107)*(IKsin(j[0]))))))*(IKsin(j[1]))))))*(IKcos(j[2]))))+(((-0.945998281949174)*(((((0.824914877803331)*(IKcos(j[0]))))+(((-0.147257386690619)*(IKsin(j[0]))))))*(IKcos(j[2]))))))*(IKsin(j[3]))))+(((((((-2.92543908095302e-7)*(IKcos(j[0]))))+(((-1.63878924936753e-6)*(IKsin(j[0]))))))*(IKcos(j[1]))))+(((((((0.321730674246603)*(((((-0.168906816209186)*(IKcos(j[0]))))+(((-0.946191894238107)*(IKsin(j[0]))))))*(IKsin(j[1]))))+(((0.321730674246603)*(((((-0.271732233620001)*(IKsin(j[0]))))+(((-0.0485075244479057)*(IKcos(j[0]))))))*(IKcos(j[1]))))))*(IKcos(j[2]))))+(((((((0.31672379228264)*(IKcos(j[0]))))+(((-0.0565390674956448)*(IKsin(j[0]))))))*(IKsin(j[2]))))+(((((((4.70635888845422e-7)*(IKsin(j[0]))))+(((8.40142576392187e-8)*(IKcos(j[0]))))))*(IKsin(j[1]))))))*(IKcos(j[4]))))))*(IKcos(j[5]))))+(((0.999991471488533)*(((((0.196099898904425)*(((((-1.0)*(((((0.0409555493238159)*(IKcos(j[0]))))+(((0.22942714606775)*(IKsin(j[0]))))))*(IKsin(j[1]))))+(((-1.0)*(((((-0.531815483588428)*(((((0.946191894238107)*(IKsin(j[0]))))+(((0.168906816209186)*(IKcos(j[0]))))))*(IKsin(j[1]))))+(((-0.531815483588428)*(((((0.271732233620001)*(IKsin(j[0]))))+(((0.0485075244479057)*(IKcos(j[0]))))))*(IKcos(j[1]))))))*(IKsin(j[2]))))+(((-1.0)*(((((-0.52353919050829)*(IKcos(j[0]))))+(((0.0934581434992053)*(IKsin(j[0]))))))*(IKcos(j[2]))))+(((-1.0)*(((((-0.142610275851393)*(IKcos(j[0]))))+(((-0.798882425671523)*(IKsin(j[0]))))))*(IKcos(j[1]))))+(((-1.0)*(((((0.0656300100348293)*(((((-0.168906816209186)*(IKcos(j[0]))))+(((-0.946191894238107)*(IKsin(j[0]))))))*(IKsin(j[1]))))+(((0.0656300100348293)*(((((-0.271732233620001)*(IKsin(j[0]))))+(((-0.0485075244479057)*(IKcos(j[0]))))))*(IKcos(j[1]))))))*(IKcos(j[2]))))+(((-1.0)*(((((-0.0115334342172636)*(IKsin(j[0]))))+(((0.0646086535405889)*(IKcos(j[0]))))))*(IKsin(j[2]))))))*(IKsin(j[3]))))+(((0.196099898904425)*(((((-1.0)*(((((-0.0905086834657259)*(IKcos(j[0]))))+(((-0.507016736064526)*(IKsin(j[0]))))))*(IKcos(j[1]))))+(((-1.0)*(((((0.145607662687148)*(IKsin(j[0]))))+(((0.0259927472111257)*(IKcos(j[0]))))))*(IKsin(j[1]))))+(((-1.0)*(((((-0.101810558420961)*(IKcos(j[0]))))+(((0.0181744288701722)*(IKsin(j[0]))))))*(IKsin(j[2]))))+(((-1.0)*(((((-0.103420015812922)*(((((-0.271732233620001)*(IKsin(j[0]))))+(((-0.0485075244479057)*(IKcos(j[0]))))))*(IKcos(j[1]))))+(((-0.103420015812922)*(((((-0.168906816209186)*(IKcos(j[0]))))+(((-0.946191894238107)*(IKsin(j[0]))))))*(IKsin(j[1]))))))*(IKcos(j[2]))))+(((-1.0)*(((((0.837955424564001)*(((((0.271732233620001)*(IKsin(j[0]))))+(((0.0485075244479057)*(IKcos(j[0]))))))*(IKcos(j[1]))))+(((0.837955424564001)*(((((0.946191894238107)*(IKsin(j[0]))))+(((0.168906816209186)*(IKcos(j[0]))))))*(IKsin(j[1]))))))*(IKsin(j[2]))))+(((-1.0)*(((((0.824914877803331)*(IKcos(j[0]))))+(((-0.147257386690619)*(IKsin(j[0]))))))*(IKcos(j[2]))))))*(IKcos(j[3]))))))*(IKsin(j[5]))))+(((0.999991471488533)*(((((0.980583922797878)*(((((((((-0.531815483588428)*(((((0.946191894238107)*(IKsin(j[0]))))+(((0.168906816209186)*(IKcos(j[0]))))))*(IKsin(j[1]))))+(((-0.531815483588428)*(((((0.271732233620001)*(IKsin(j[0]))))+(((0.0485075244479057)*(IKcos(j[0]))))))*(IKcos(j[1]))))))*(IKsin(j[2]))))+(((((((0.0656300100348293)*(((((-0.168906816209186)*(IKcos(j[0]))))+(((-0.946191894238107)*(IKsin(j[0]))))))*(IKsin(j[1]))))+(((0.0656300100348293)*(((((-0.271732233620001)*(IKsin(j[0]))))+(((-0.0485075244479057)*(IKcos(j[0]))))))*(IKcos(j[1]))))))*(IKcos(j[2]))))+(((((((-0.142610275851393)*(IKcos(j[0]))))+(((-0.798882425671523)*(IKsin(j[0]))))))*(IKcos(j[1]))))+(((((((-0.52353919050829)*(IKcos(j[0]))))+(((0.0934581434992053)*(IKsin(j[0]))))))*(IKcos(j[2]))))+(((((((0.0409555493238159)*(IKcos(j[0]))))+(((0.22942714606775)*(IKsin(j[0]))))))*(IKsin(j[1]))))+(((((((-0.0115334342172636)*(IKsin(j[0]))))+(((0.0646086535405889)*(IKcos(j[0]))))))*(IKsin(j[2]))))))*(IKsin(j[3]))))+(((0.980583922797878)*(((((((((-0.101810558420961)*(IKcos(j[0]))))+(((0.0181744288701722)*(IKsin(j[0]))))))*(IKsin(j[2]))))+(((((((0.837955424564001)*(((((0.271732233620001)*(IKsin(j[0]))))+(((0.0485075244479057)*(IKcos(j[0]))))))*(IKcos(j[1]))))+(((0.837955424564001)*(((((0.946191894238107)*(IKsin(j[0]))))+(((0.168906816209186)*(IKcos(j[0]))))))*(IKsin(j[1]))))))*(IKsin(j[2]))))+(((((((0.145607662687148)*(IKsin(j[0]))))+(((0.0259927472111257)*(IKcos(j[0]))))))*(IKsin(j[1]))))+(((((((-0.0905086834657259)*(IKcos(j[0]))))+(((-0.507016736064526)*(IKsin(j[0]))))))*(IKcos(j[1]))))+(((((((-0.103420015812922)*(((((-0.271732233620001)*(IKsin(j[0]))))+(((-0.0485075244479057)*(IKcos(j[0]))))))*(IKcos(j[1]))))+(((-0.103420015812922)*(((((-0.168906816209186)*(IKcos(j[0]))))+(((-0.946191894238107)*(IKsin(j[0]))))))*(IKsin(j[1]))))))*(IKcos(j[2]))))+(((((((0.824914877803331)*(IKcos(j[0]))))+(((-0.147257386690619)*(IKsin(j[0]))))))*(IKcos(j[2]))))))*(IKcos(j[3]))))))*(IKcos(j[5]))))))*(IKsin(j[6]))))+(((((((-0.00413000607730841)*(((((-1.0)*(((((0.31672379228264)*(IKcos(j[0]))))+(((-0.0565390674956448)*(IKsin(j[0]))))))*(IKsin(j[2]))))+(((-1.0)*(((((-0.945998281949174)*(((((0.145607662687148)*(IKsin(j[0]))))+(((0.0259927472111257)*(IKcos(j[0]))))))*(IKsin(j[1]))))+(((-0.945998281949174)*(((((0.837955424564001)*(((((0.271732233620001)*(IKsin(j[0]))))+(((0.0485075244479057)*(IKcos(j[0]))))))*(IKcos(j[1]))))+(((0.837955424564001)*(((((0.946191894238107)*(IKsin(j[0]))))+(((0.168906816209186)*(IKcos(j[0]))))))*(IKsin(j[1]))))))*(IKsin(j[2]))))+(((-0.945998281949174)*(((((-0.101810558420961)*(IKcos(j[0]))))+(((0.0181744288701722)*(IKsin(j[0]))))))*(IKsin(j[2]))))+(((-0.945998281949174)*(((((-0.0905086834657259)*(IKcos(j[0]))))+(((-0.507016736064526)*(IKsin(j[0]))))))*(IKcos(j[1]))))+(((-0.945998281949174)*(((((-0.103420015812922)*(((((-0.271732233620001)*(IKsin(j[0]))))+(((-0.0485075244479057)*(IKcos(j[0]))))))*(IKcos(j[1]))))+(((-0.103420015812922)*(((((-0.168906816209186)*(IKcos(j[0]))))+(((-0.946191894238107)*(IKsin(j[0]))))))*(IKsin(j[1]))))))*(IKcos(j[2]))))+(((-0.945998281949174)*(((((0.824914877803331)*(IKcos(j[0]))))+(((-0.147257386690619)*(IKsin(j[0]))))))*(IKcos(j[2]))))))*(IKsin(j[3]))))+(((-1.0)*(((((-0.0069778272054965)*(IKsin(j[0]))))+(((0.039088792799564)*(IKcos(j[0]))))))*(IKcos(j[2]))))+(((-1.0)*(((((-2.92543908095302e-7)*(IKcos(j[0]))))+(((-1.63878924936753e-6)*(IKsin(j[0]))))))*(IKcos(j[1]))))+(((-1.0)*(((((0.0397067222902749)*(((((0.946191894238107)*(IKsin(j[0]))))+(((0.168906816209186)*(IKcos(j[0]))))))*(IKsin(j[1]))))+(((0.0397067222902749)*(((((0.271732233620001)*(IKsin(j[0]))))+(((0.0485075244479057)*(IKcos(j[0]))))))*(IKcos(j[1]))))))*(IKsin(j[2]))))+(((-1.0)*(((((0.321730674246603)*(((((-0.168906816209186)*(IKcos(j[0]))))+(((-0.946191894238107)*(IKsin(j[0]))))))*(IKsin(j[1]))))+(((0.321730674246603)*(((((-0.271732233620001)*(IKsin(j[0]))))+(((-0.0485075244479057)*(IKcos(j[0]))))))*(IKcos(j[1]))))))*(IKcos(j[2]))))+(((-1.0)*(((((4.70635888845422e-7)*(IKsin(j[0]))))+(((8.40142576392187e-8)*(IKcos(j[0]))))))*(IKsin(j[1]))))+(((-1.0)*(((((-0.945998281949174)*(((((-0.0409555493238159)*(IKcos(j[0]))))+(((-0.22942714606775)*(IKsin(j[0]))))))*(IKsin(j[1]))))+(((-0.945998281949174)*(((((-0.0934581434992053)*(IKsin(j[0]))))+(((0.52353919050829)*(IKcos(j[0]))))))*(IKcos(j[2]))))+(((-0.945998281949174)*(((((0.0115334342172636)*(IKsin(j[0]))))+(((-0.0646086535405889)*(IKcos(j[0]))))))*(IKsin(j[2]))))+(((-0.945998281949174)*(((((0.531815483588428)*(((((0.946191894238107)*(IKsin(j[0]))))+(((0.168906816209186)*(IKcos(j[0]))))))*(IKsin(j[1]))))+(((0.531815483588428)*(((((0.271732233620001)*(IKsin(j[0]))))+(((0.0485075244479057)*(IKcos(j[0]))))))*(IKcos(j[1]))))))*(IKsin(j[2]))))+(((-0.945998281949174)*(((((-0.0656300100348293)*(((((-0.271732233620001)*(IKsin(j[0]))))+(((-0.0485075244479057)*(IKcos(j[0]))))))*(IKcos(j[1]))))+(((-0.0656300100348293)*(((((-0.168906816209186)*(IKcos(j[0]))))+(((-0.946191894238107)*(IKsin(j[0]))))))*(IKsin(j[1]))))))*(IKcos(j[2]))))+(((-0.945998281949174)*(((((0.798882425671523)*(IKsin(j[0]))))+(((0.142610275851393)*(IKcos(j[0]))))))*(IKcos(j[1]))))))*(IKcos(j[3]))))))*(IKsin(j[4]))))+(((-0.00413000607730841)*(((((-1.0)*(((((0.324171637484235)*(((((-0.0409555493238159)*(IKcos(j[0]))))+(((-0.22942714606775)*(IKsin(j[0]))))))*(IKsin(j[1]))))+(((0.324171637484235)*(((((0.798882425671523)*(IKsin(j[0]))))+(((0.142610275851393)*(IKcos(j[0]))))))*(IKcos(j[1]))))+(((0.324171637484235)*(((((-0.0656300100348293)*(((((-0.271732233620001)*(IKsin(j[0]))))+(((-0.0485075244479057)*(IKcos(j[0]))))))*(IKcos(j[1]))))+(((-0.0656300100348293)*(((((-0.168906816209186)*(IKcos(j[0]))))+(((-0.946191894238107)*(IKsin(j[0]))))))*(IKsin(j[1]))))))*(IKcos(j[2]))))+(((0.324171637484235)*(((((0.531815483588428)*(((((0.946191894238107)*(IKsin(j[0]))))+(((0.168906816209186)*(IKcos(j[0]))))))*(IKsin(j[1]))))+(((0.531815483588428)*(((((0.271732233620001)*(IKsin(j[0]))))+(((0.0485075244479057)*(IKcos(j[0]))))))*(IKcos(j[1]))))))*(IKsin(j[2]))))+(((0.324171637484235)*(((((0.0115334342172636)*(IKsin(j[0]))))+(((-0.0646086535405889)*(IKcos(j[0]))))))*(IKsin(j[2]))))+(((0.324171637484235)*(((((-0.0934581434992053)*(IKsin(j[0]))))+(((0.52353919050829)*(IKcos(j[0]))))))*(IKcos(j[2]))))))*(IKcos(j[3]))))+(((-1.0)*(((((0.938875058440104)*(((((-0.168906816209186)*(IKcos(j[0]))))+(((-0.946191894238107)*(IKsin(j[0]))))))*(IKsin(j[1]))))+(((0.938875058440104)*(((((-0.271732233620001)*(IKsin(j[0]))))+(((-0.0485075244479057)*(IKcos(j[0]))))))*(IKcos(j[1]))))))*(IKcos(j[2]))))+(((-1.0)*(((((0.324171637484235)*(((((0.824914877803331)*(IKcos(j[0]))))+(((-0.147257386690619)*(IKsin(j[0]))))))*(IKcos(j[2]))))+(((0.324171637484235)*(((((-0.0905086834657259)*(IKcos(j[0]))))+(((-0.507016736064526)*(IKsin(j[0]))))))*(IKcos(j[1]))))+(((0.324171637484235)*(((((0.837955424564001)*(((((0.271732233620001)*(IKsin(j[0]))))+(((0.0485075244479057)*(IKcos(j[0]))))))*(IKcos(j[1]))))+(((0.837955424564001)*(((((0.946191894238107)*(IKsin(j[0]))))+(((0.168906816209186)*(IKcos(j[0]))))))*(IKsin(j[1]))))))*(IKsin(j[2]))))+(((0.324171637484235)*(((((-0.101810558420961)*(IKcos(j[0]))))+(((0.0181744288701722)*(IKsin(j[0]))))))*(IKsin(j[2]))))+(((0.324171637484235)*(((((0.145607662687148)*(IKsin(j[0]))))+(((0.0259927472111257)*(IKcos(j[0]))))))*(IKsin(j[1]))))+(((0.324171637484235)*(((((-0.103420015812922)*(((((-0.271732233620001)*(IKsin(j[0]))))+(((-0.0485075244479057)*(IKcos(j[0]))))))*(IKcos(j[1]))))+(((-0.103420015812922)*(((((-0.168906816209186)*(IKcos(j[0]))))+(((-0.946191894238107)*(IKsin(j[0]))))))*(IKsin(j[1]))))))*(IKcos(j[2]))))))*(IKsin(j[3]))))+(((-1.0)*(((((1.37341053562418e-6)*(IKsin(j[0]))))+(((2.45170564589572e-7)*(IKcos(j[0]))))))*(IKsin(j[1]))))+(((-1.0)*(((((-8.53702182586258e-7)*(IKcos(j[0]))))+(((-4.78231786842813e-6)*(IKsin(j[0]))))))*(IKcos(j[1]))))+(((-1.0)*(((((0.114068988634618)*(IKcos(j[0]))))+(((-0.020362708469395)*(IKsin(j[0]))))))*(IKcos(j[2]))))+(((-1.0)*(((((0.115872231636118)*(((((0.271732233620001)*(IKsin(j[0]))))+(((0.0485075244479057)*(IKcos(j[0]))))))*(IKcos(j[1]))))+(((0.115872231636118)*(((((0.946191894238107)*(IKsin(j[0]))))+(((0.168906816209186)*(IKcos(j[0]))))))*(IKsin(j[1]))))))*(IKsin(j[2]))))+(((-1.0)*(((((0.924263966079929)*(IKcos(j[0]))))+(((-0.164992413059238)*(IKsin(j[0]))))))*(IKsin(j[2]))))))*(IKcos(j[4]))))))*(IKsin(j[6])))));
eerot[7]=((((((((-0.980583922797878)*(((((-1.0)*(((((0.0409555493238159)*(IKcos(j[0]))))+(((0.22942714606775)*(IKsin(j[0]))))))*(IKsin(j[1]))))+(((-1.0)*(((((-0.531815483588428)*(((((0.946191894238107)*(IKsin(j[0]))))+(((0.168906816209186)*(IKcos(j[0]))))))*(IKsin(j[1]))))+(((-0.531815483588428)*(((((0.271732233620001)*(IKsin(j[0]))))+(((0.0485075244479057)*(IKcos(j[0]))))))*(IKcos(j[1]))))))*(IKsin(j[2]))))+(((-1.0)*(((((-0.52353919050829)*(IKcos(j[0]))))+(((0.0934581434992053)*(IKsin(j[0]))))))*(IKcos(j[2]))))+(((-1.0)*(((((-0.142610275851393)*(IKcos(j[0]))))+(((-0.798882425671523)*(IKsin(j[0]))))))*(IKcos(j[1]))))+(((-1.0)*(((((0.0656300100348293)*(((((-0.168906816209186)*(IKcos(j[0]))))+(((-0.946191894238107)*(IKsin(j[0]))))))*(IKsin(j[1]))))+(((0.0656300100348293)*(((((-0.271732233620001)*(IKsin(j[0]))))+(((-0.0485075244479057)*(IKcos(j[0]))))))*(IKcos(j[1]))))))*(IKcos(j[2]))))+(((-1.0)*(((((-0.0115334342172636)*(IKsin(j[0]))))+(((0.0646086535405889)*(IKcos(j[0]))))))*(IKsin(j[2]))))))*(IKsin(j[3]))))+(((-0.980583922797878)*(((((-1.0)*(((((-0.0905086834657259)*(IKcos(j[0]))))+(((-0.507016736064526)*(IKsin(j[0]))))))*(IKcos(j[1]))))+(((-1.0)*(((((0.145607662687148)*(IKsin(j[0]))))+(((0.0259927472111257)*(IKcos(j[0]))))))*(IKsin(j[1]))))+(((-1.0)*(((((-0.101810558420961)*(IKcos(j[0]))))+(((0.0181744288701722)*(IKsin(j[0]))))))*(IKsin(j[2]))))+(((-1.0)*(((((-0.103420015812922)*(((((-0.271732233620001)*(IKsin(j[0]))))+(((-0.0485075244479057)*(IKcos(j[0]))))))*(IKcos(j[1]))))+(((-0.103420015812922)*(((((-0.168906816209186)*(IKcos(j[0]))))+(((-0.946191894238107)*(IKsin(j[0]))))))*(IKsin(j[1]))))))*(IKcos(j[2]))))+(((-1.0)*(((((0.837955424564001)*(((((0.271732233620001)*(IKsin(j[0]))))+(((0.0485075244479057)*(IKcos(j[0]))))))*(IKcos(j[1]))))+(((0.837955424564001)*(((((0.946191894238107)*(IKsin(j[0]))))+(((0.168906816209186)*(IKcos(j[0]))))))*(IKsin(j[1]))))))*(IKsin(j[2]))))+(((-1.0)*(((((0.824914877803331)*(IKcos(j[0]))))+(((-0.147257386690619)*(IKsin(j[0]))))))*(IKcos(j[2]))))))*(IKcos(j[3]))))))*(IKsin(j[5]))))+(((((((0.196099898904425)*(((((((((-0.101810558420961)*(IKcos(j[0]))))+(((0.0181744288701722)*(IKsin(j[0]))))))*(IKsin(j[2]))))+(((((((0.837955424564001)*(((((0.271732233620001)*(IKsin(j[0]))))+(((0.0485075244479057)*(IKcos(j[0]))))))*(IKcos(j[1]))))+(((0.837955424564001)*(((((0.946191894238107)*(IKsin(j[0]))))+(((0.168906816209186)*(IKcos(j[0]))))))*(IKsin(j[1]))))))*(IKsin(j[2]))))+(((((((0.145607662687148)*(IKsin(j[0]))))+(((0.0259927472111257)*(IKcos(j[0]))))))*(IKsin(j[1]))))+(((((((-0.0905086834657259)*(IKcos(j[0]))))+(((-0.507016736064526)*(IKsin(j[0]))))))*(IKcos(j[1]))))+(((((((-0.103420015812922)*(((((-0.271732233620001)*(IKsin(j[0]))))+(((-0.0485075244479057)*(IKcos(j[0]))))))*(IKcos(j[1]))))+(((-0.103420015812922)*(((((-0.168906816209186)*(IKcos(j[0]))))+(((-0.946191894238107)*(IKsin(j[0]))))))*(IKsin(j[1]))))))*(IKcos(j[2]))))+(((((((0.824914877803331)*(IKcos(j[0]))))+(((-0.147257386690619)*(IKsin(j[0]))))))*(IKcos(j[2]))))))*(IKcos(j[3]))))+(((0.196099898904425)*(((((((((-0.531815483588428)*(((((0.946191894238107)*(IKsin(j[0]))))+(((0.168906816209186)*(IKcos(j[0]))))))*(IKsin(j[1]))))+(((-0.531815483588428)*(((((0.271732233620001)*(IKsin(j[0]))))+(((0.0485075244479057)*(IKcos(j[0]))))))*(IKcos(j[1]))))))*(IKsin(j[2]))))+(((((((0.0656300100348293)*(((((-0.168906816209186)*(IKcos(j[0]))))+(((-0.946191894238107)*(IKsin(j[0]))))))*(IKsin(j[1]))))+(((0.0656300100348293)*(((((-0.271732233620001)*(IKsin(j[0]))))+(((-0.0485075244479057)*(IKcos(j[0]))))))*(IKcos(j[1]))))))*(IKcos(j[2]))))+(((((((-0.142610275851393)*(IKcos(j[0]))))+(((-0.798882425671523)*(IKsin(j[0]))))))*(IKcos(j[1]))))+(((((((-0.52353919050829)*(IKcos(j[0]))))+(((0.0934581434992053)*(IKsin(j[0]))))))*(IKcos(j[2]))))+(((((((0.0409555493238159)*(IKcos(j[0]))))+(((0.22942714606775)*(IKsin(j[0]))))))*(IKsin(j[1]))))+(((((((-0.0115334342172636)*(IKsin(j[0]))))+(((0.0646086535405889)*(IKcos(j[0]))))))*(IKsin(j[2]))))))*(IKsin(j[3]))))))*(IKcos(j[5]))))+(((((((0.196099898904425)*(((((((((8.53702182586258e-7)*(IKcos(j[0]))))+(((4.78231786842813e-6)*(IKsin(j[0]))))))*(IKcos(j[1]))))+(((((((-0.324171637484235)*(((((0.531815483588428)*(((((0.946191894238107)*(IKsin(j[0]))))+(((0.168906816209186)*(IKcos(j[0]))))))*(IKsin(j[1]))))+(((0.531815483588428)*(((((0.271732233620001)*(IKsin(j[0]))))+(((0.0485075244479057)*(IKcos(j[0]))))))*(IKcos(j[1]))))))*(IKsin(j[2]))))+(((-0.324171637484235)*(((((-0.0656300100348293)*(((((-0.271732233620001)*(IKsin(j[0]))))+(((-0.0485075244479057)*(IKcos(j[0]))))))*(IKcos(j[1]))))+(((-0.0656300100348293)*(((((-0.168906816209186)*(IKcos(j[0]))))+(((-0.946191894238107)*(IKsin(j[0]))))))*(IKsin(j[1]))))))*(IKcos(j[2]))))+(((-0.324171637484235)*(((((0.798882425671523)*(IKsin(j[0]))))+(((0.142610275851393)*(IKcos(j[0]))))))*(IKcos(j[1]))))+(((-0.324171637484235)*(((((-0.0934581434992053)*(IKsin(j[0]))))+(((0.52353919050829)*(IKcos(j[0]))))))*(IKcos(j[2]))))+(((-0.324171637484235)*(((((0.0115334342172636)*(IKsin(j[0]))))+(((-0.0646086535405889)*(IKcos(j[0]))))))*(IKsin(j[2]))))+(((-0.324171637484235)*(((((-0.0409555493238159)*(IKcos(j[0]))))+(((-0.22942714606775)*(IKsin(j[0]))))))*(IKsin(j[1]))))))*(IKcos(j[3]))))+(((((((-0.324171637484235)*(((((0.837955424564001)*(((((0.271732233620001)*(IKsin(j[0]))))+(((0.0485075244479057)*(IKcos(j[0]))))))*(IKcos(j[1]))))+(((0.837955424564001)*(((((0.946191894238107)*(IKsin(j[0]))))+(((0.168906816209186)*(IKcos(j[0]))))))*(IKsin(j[1]))))))*(IKsin(j[2]))))+(((-0.324171637484235)*(((((-0.103420015812922)*(((((-0.271732233620001)*(IKsin(j[0]))))+(((-0.0485075244479057)*(IKcos(j[0]))))))*(IKcos(j[1]))))+(((-0.103420015812922)*(((((-0.168906816209186)*(IKcos(j[0]))))+(((-0.946191894238107)*(IKsin(j[0]))))))*(IKsin(j[1]))))))*(IKcos(j[2]))))+(((-0.324171637484235)*(((((-0.0905086834657259)*(IKcos(j[0]))))+(((-0.507016736064526)*(IKsin(j[0]))))))*(IKcos(j[1]))))+(((-0.324171637484235)*(((((0.145607662687148)*(IKsin(j[0]))))+(((0.0259927472111257)*(IKcos(j[0]))))))*(IKsin(j[1]))))+(((-0.324171637484235)*(((((0.824914877803331)*(IKcos(j[0]))))+(((-0.147257386690619)*(IKsin(j[0]))))))*(IKcos(j[2]))))+(((-0.324171637484235)*(((((-0.101810558420961)*(IKcos(j[0]))))+(((0.0181744288701722)*(IKsin(j[0]))))))*(IKsin(j[2]))))))*(IKsin(j[3]))))+(((((((-0.114068988634618)*(IKcos(j[0]))))+(((0.020362708469395)*(IKsin(j[0]))))))*(IKcos(j[2]))))+(((((((0.164992413059238)*(IKsin(j[0]))))+(((-0.924263966079929)*(IKcos(j[0]))))))*(IKsin(j[2]))))+(((((((-2.45170564589572e-7)*(IKcos(j[0]))))+(((-1.37341053562418e-6)*(IKsin(j[0]))))))*(IKsin(j[1]))))+(((((((-0.115872231636118)*(((((0.271732233620001)*(IKsin(j[0]))))+(((0.0485075244479057)*(IKcos(j[0]))))))*(IKcos(j[1]))))+(((-0.115872231636118)*(((((0.946191894238107)*(IKsin(j[0]))))+(((0.168906816209186)*(IKcos(j[0]))))))*(IKsin(j[1]))))))*(IKsin(j[2]))))+(((((((-0.938875058440104)*(((((-0.168906816209186)*(IKcos(j[0]))))+(((-0.946191894238107)*(IKsin(j[0]))))))*(IKsin(j[1]))))+(((-0.938875058440104)*(((((-0.271732233620001)*(IKsin(j[0]))))+(((-0.0485075244479057)*(IKcos(j[0]))))))*(IKcos(j[1]))))))*(IKcos(j[2]))))))*(IKsin(j[4]))))+(((0.196099898904425)*(((((((((-0.0069778272054965)*(IKsin(j[0]))))+(((0.039088792799564)*(IKcos(j[0]))))))*(IKcos(j[2]))))+(((((((-0.945998281949174)*(((((-0.0409555493238159)*(IKcos(j[0]))))+(((-0.22942714606775)*(IKsin(j[0]))))))*(IKsin(j[1]))))+(((-0.945998281949174)*(((((-0.0934581434992053)*(IKsin(j[0]))))+(((0.52353919050829)*(IKcos(j[0]))))))*(IKcos(j[2]))))+(((-0.945998281949174)*(((((0.0115334342172636)*(IKsin(j[0]))))+(((-0.0646086535405889)*(IKcos(j[0]))))))*(IKsin(j[2]))))+(((-0.945998281949174)*(((((0.531815483588428)*(((((0.946191894238107)*(IKsin(j[0]))))+(((0.168906816209186)*(IKcos(j[0]))))))*(IKsin(j[1]))))+(((0.531815483588428)*(((((0.271732233620001)*(IKsin(j[0]))))+(((0.0485075244479057)*(IKcos(j[0]))))))*(IKcos(j[1]))))))*(IKsin(j[2]))))+(((-0.945998281949174)*(((((-0.0656300100348293)*(((((-0.271732233620001)*(IKsin(j[0]))))+(((-0.0485075244479057)*(IKcos(j[0]))))))*(IKcos(j[1]))))+(((-0.0656300100348293)*(((((-0.168906816209186)*(IKcos(j[0]))))+(((-0.946191894238107)*(IKsin(j[0]))))))*(IKsin(j[1]))))))*(IKcos(j[2]))))+(((-0.945998281949174)*(((((0.798882425671523)*(IKsin(j[0]))))+(((0.142610275851393)*(IKcos(j[0]))))))*(IKcos(j[1]))))))*(IKcos(j[3]))))+(((((((0.0397067222902749)*(((((0.946191894238107)*(IKsin(j[0]))))+(((0.168906816209186)*(IKcos(j[0]))))))*(IKsin(j[1]))))+(((0.0397067222902749)*(((((0.271732233620001)*(IKsin(j[0]))))+(((0.0485075244479057)*(IKcos(j[0]))))))*(IKcos(j[1]))))))*(IKsin(j[2]))))+(((((((-0.945998281949174)*(((((0.145607662687148)*(IKsin(j[0]))))+(((0.0259927472111257)*(IKcos(j[0]))))))*(IKsin(j[1]))))+(((-0.945998281949174)*(((((0.837955424564001)*(((((0.271732233620001)*(IKsin(j[0]))))+(((0.0485075244479057)*(IKcos(j[0]))))))*(IKcos(j[1]))))+(((0.837955424564001)*(((((0.946191894238107)*(IKsin(j[0]))))+(((0.168906816209186)*(IKcos(j[0]))))))*(IKsin(j[1]))))))*(IKsin(j[2]))))+(((-0.945998281949174)*(((((-0.101810558420961)*(IKcos(j[0]))))+(((0.0181744288701722)*(IKsin(j[0]))))))*(IKsin(j[2]))))+(((-0.945998281949174)*(((((-0.0905086834657259)*(IKcos(j[0]))))+(((-0.507016736064526)*(IKsin(j[0]))))))*(IKcos(j[1]))))+(((-0.945998281949174)*(((((-0.103420015812922)*(((((-0.271732233620001)*(IKsin(j[0]))))+(((-0.0485075244479057)*(IKcos(j[0]))))))*(IKcos(j[1]))))+(((-0.103420015812922)*(((((-0.168906816209186)*(IKcos(j[0]))))+(((-0.946191894238107)*(IKsin(j[0]))))))*(IKsin(j[1]))))))*(IKcos(j[2]))))+(((-0.945998281949174)*(((((0.824914877803331)*(IKcos(j[0]))))+(((-0.147257386690619)*(IKsin(j[0]))))))*(IKcos(j[2]))))))*(IKsin(j[3]))))+(((((((-2.92543908095302e-7)*(IKcos(j[0]))))+(((-1.63878924936753e-6)*(IKsin(j[0]))))))*(IKcos(j[1]))))+(((((((0.321730674246603)*(((((-0.168906816209186)*(IKcos(j[0]))))+(((-0.946191894238107)*(IKsin(j[0]))))))*(IKsin(j[1]))))+(((0.321730674246603)*(((((-0.271732233620001)*(IKsin(j[0]))))+(((-0.0485075244479057)*(IKcos(j[0]))))))*(IKcos(j[1]))))))*(IKcos(j[2]))))+(((((((0.31672379228264)*(IKcos(j[0]))))+(((-0.0565390674956448)*(IKsin(j[0]))))))*(IKsin(j[2]))))+(((((((4.70635888845422e-7)*(IKsin(j[0]))))+(((8.40142576392187e-8)*(IKcos(j[0]))))))*(IKsin(j[1]))))))*(IKcos(j[4]))))))*(IKsin(j[5]))))+(((((((-0.980583922797878)*(((((((((-0.0069778272054965)*(IKsin(j[0]))))+(((0.039088792799564)*(IKcos(j[0]))))))*(IKcos(j[2]))))+(((((((-0.945998281949174)*(((((-0.0409555493238159)*(IKcos(j[0]))))+(((-0.22942714606775)*(IKsin(j[0]))))))*(IKsin(j[1]))))+(((-0.945998281949174)*(((((-0.0934581434992053)*(IKsin(j[0]))))+(((0.52353919050829)*(IKcos(j[0]))))))*(IKcos(j[2]))))+(((-0.945998281949174)*(((((0.0115334342172636)*(IKsin(j[0]))))+(((-0.0646086535405889)*(IKcos(j[0]))))))*(IKsin(j[2]))))+(((-0.945998281949174)*(((((0.531815483588428)*(((((0.946191894238107)*(IKsin(j[0]))))+(((0.168906816209186)*(IKcos(j[0]))))))*(IKsin(j[1]))))+(((0.531815483588428)*(((((0.271732233620001)*(IKsin(j[0]))))+(((0.0485075244479057)*(IKcos(j[0]))))))*(IKcos(j[1]))))))*(IKsin(j[2]))))+(((-0.945998281949174)*(((((-0.0656300100348293)*(((((-0.271732233620001)*(IKsin(j[0]))))+(((-0.0485075244479057)*(IKcos(j[0]))))))*(IKcos(j[1]))))+(((-0.0656300100348293)*(((((-0.168906816209186)*(IKcos(j[0]))))+(((-0.946191894238107)*(IKsin(j[0]))))))*(IKsin(j[1]))))))*(IKcos(j[2]))))+(((-0.945998281949174)*(((((0.798882425671523)*(IKsin(j[0]))))+(((0.142610275851393)*(IKcos(j[0]))))))*(IKcos(j[1]))))))*(IKcos(j[3]))))+(((((((0.0397067222902749)*(((((0.946191894238107)*(IKsin(j[0]))))+(((0.168906816209186)*(IKcos(j[0]))))))*(IKsin(j[1]))))+(((0.0397067222902749)*(((((0.271732233620001)*(IKsin(j[0]))))+(((0.0485075244479057)*(IKcos(j[0]))))))*(IKcos(j[1]))))))*(IKsin(j[2]))))+(((((((-0.945998281949174)*(((((0.145607662687148)*(IKsin(j[0]))))+(((0.0259927472111257)*(IKcos(j[0]))))))*(IKsin(j[1]))))+(((-0.945998281949174)*(((((0.837955424564001)*(((((0.271732233620001)*(IKsin(j[0]))))+(((0.0485075244479057)*(IKcos(j[0]))))))*(IKcos(j[1]))))+(((0.837955424564001)*(((((0.946191894238107)*(IKsin(j[0]))))+(((0.168906816209186)*(IKcos(j[0]))))))*(IKsin(j[1]))))))*(IKsin(j[2]))))+(((-0.945998281949174)*(((((-0.101810558420961)*(IKcos(j[0]))))+(((0.0181744288701722)*(IKsin(j[0]))))))*(IKsin(j[2]))))+(((-0.945998281949174)*(((((-0.0905086834657259)*(IKcos(j[0]))))+(((-0.507016736064526)*(IKsin(j[0]))))))*(IKcos(j[1]))))+(((-0.945998281949174)*(((((-0.103420015812922)*(((((-0.271732233620001)*(IKsin(j[0]))))+(((-0.0485075244479057)*(IKcos(j[0]))))))*(IKcos(j[1]))))+(((-0.103420015812922)*(((((-0.168906816209186)*(IKcos(j[0]))))+(((-0.946191894238107)*(IKsin(j[0]))))))*(IKsin(j[1]))))))*(IKcos(j[2]))))+(((-0.945998281949174)*(((((0.824914877803331)*(IKcos(j[0]))))+(((-0.147257386690619)*(IKsin(j[0]))))))*(IKcos(j[2]))))))*(IKsin(j[3]))))+(((((((-2.92543908095302e-7)*(IKcos(j[0]))))+(((-1.63878924936753e-6)*(IKsin(j[0]))))))*(IKcos(j[1]))))+(((((((0.321730674246603)*(((((-0.168906816209186)*(IKcos(j[0]))))+(((-0.946191894238107)*(IKsin(j[0]))))))*(IKsin(j[1]))))+(((0.321730674246603)*(((((-0.271732233620001)*(IKsin(j[0]))))+(((-0.0485075244479057)*(IKcos(j[0]))))))*(IKcos(j[1]))))))*(IKcos(j[2]))))+(((((((0.31672379228264)*(IKcos(j[0]))))+(((-0.0565390674956448)*(IKsin(j[0]))))))*(IKsin(j[2]))))+(((((((4.70635888845422e-7)*(IKsin(j[0]))))+(((8.40142576392187e-8)*(IKcos(j[0]))))))*(IKsin(j[1]))))))*(IKcos(j[4]))))+(((-0.980583922797878)*(((((((((8.53702182586258e-7)*(IKcos(j[0]))))+(((4.78231786842813e-6)*(IKsin(j[0]))))))*(IKcos(j[1]))))+(((((((-0.324171637484235)*(((((0.531815483588428)*(((((0.946191894238107)*(IKsin(j[0]))))+(((0.168906816209186)*(IKcos(j[0]))))))*(IKsin(j[1]))))+(((0.531815483588428)*(((((0.271732233620001)*(IKsin(j[0]))))+(((0.0485075244479057)*(IKcos(j[0]))))))*(IKcos(j[1]))))))*(IKsin(j[2]))))+(((-0.324171637484235)*(((((-0.0656300100348293)*(((((-0.271732233620001)*(IKsin(j[0]))))+(((-0.0485075244479057)*(IKcos(j[0]))))))*(IKcos(j[1]))))+(((-0.0656300100348293)*(((((-0.168906816209186)*(IKcos(j[0]))))+(((-0.946191894238107)*(IKsin(j[0]))))))*(IKsin(j[1]))))))*(IKcos(j[2]))))+(((-0.324171637484235)*(((((0.798882425671523)*(IKsin(j[0]))))+(((0.142610275851393)*(IKcos(j[0]))))))*(IKcos(j[1]))))+(((-0.324171637484235)*(((((-0.0934581434992053)*(IKsin(j[0]))))+(((0.52353919050829)*(IKcos(j[0]))))))*(IKcos(j[2]))))+(((-0.324171637484235)*(((((0.0115334342172636)*(IKsin(j[0]))))+(((-0.0646086535405889)*(IKcos(j[0]))))))*(IKsin(j[2]))))+(((-0.324171637484235)*(((((-0.0409555493238159)*(IKcos(j[0]))))+(((-0.22942714606775)*(IKsin(j[0]))))))*(IKsin(j[1]))))))*(IKcos(j[3]))))+(((((((-0.324171637484235)*(((((0.837955424564001)*(((((0.271732233620001)*(IKsin(j[0]))))+(((0.0485075244479057)*(IKcos(j[0]))))))*(IKcos(j[1]))))+(((0.837955424564001)*(((((0.946191894238107)*(IKsin(j[0]))))+(((0.168906816209186)*(IKcos(j[0]))))))*(IKsin(j[1]))))))*(IKsin(j[2]))))+(((-0.324171637484235)*(((((-0.103420015812922)*(((((-0.271732233620001)*(IKsin(j[0]))))+(((-0.0485075244479057)*(IKcos(j[0]))))))*(IKcos(j[1]))))+(((-0.103420015812922)*(((((-0.168906816209186)*(IKcos(j[0]))))+(((-0.946191894238107)*(IKsin(j[0]))))))*(IKsin(j[1]))))))*(IKcos(j[2]))))+(((-0.324171637484235)*(((((-0.0905086834657259)*(IKcos(j[0]))))+(((-0.507016736064526)*(IKsin(j[0]))))))*(IKcos(j[1]))))+(((-0.324171637484235)*(((((0.145607662687148)*(IKsin(j[0]))))+(((0.0259927472111257)*(IKcos(j[0]))))))*(IKsin(j[1]))))+(((-0.324171637484235)*(((((0.824914877803331)*(IKcos(j[0]))))+(((-0.147257386690619)*(IKsin(j[0]))))))*(IKcos(j[2]))))+(((-0.324171637484235)*(((((-0.101810558420961)*(IKcos(j[0]))))+(((0.0181744288701722)*(IKsin(j[0]))))))*(IKsin(j[2]))))))*(IKsin(j[3]))))+(((((((-0.114068988634618)*(IKcos(j[0]))))+(((0.020362708469395)*(IKsin(j[0]))))))*(IKcos(j[2]))))+(((((((0.164992413059238)*(IKsin(j[0]))))+(((-0.924263966079929)*(IKcos(j[0]))))))*(IKsin(j[2]))))+(((((((-2.45170564589572e-7)*(IKcos(j[0]))))+(((-1.37341053562418e-6)*(IKsin(j[0]))))))*(IKsin(j[1]))))+(((((((-0.115872231636118)*(((((0.271732233620001)*(IKsin(j[0]))))+(((0.0485075244479057)*(IKcos(j[0]))))))*(IKcos(j[1]))))+(((-0.115872231636118)*(((((0.946191894238107)*(IKsin(j[0]))))+(((0.168906816209186)*(IKcos(j[0]))))))*(IKsin(j[1]))))))*(IKsin(j[2]))))+(((((((-0.938875058440104)*(((((-0.168906816209186)*(IKcos(j[0]))))+(((-0.946191894238107)*(IKsin(j[0]))))))*(IKsin(j[1]))))+(((-0.938875058440104)*(((((-0.271732233620001)*(IKsin(j[0]))))+(((-0.0485075244479057)*(IKcos(j[0]))))))*(IKcos(j[1]))))))*(IKcos(j[2]))))))*(IKsin(j[4]))))))*(IKcos(j[5])))));
eerot[8]=((((((((-0.999991471488533)*(((((0.196099898904425)*(((((-1.0)*(((((0.0409555493238159)*(IKcos(j[0]))))+(((0.22942714606775)*(IKsin(j[0]))))))*(IKsin(j[1]))))+(((-1.0)*(((((-0.531815483588428)*(((((0.946191894238107)*(IKsin(j[0]))))+(((0.168906816209186)*(IKcos(j[0]))))))*(IKsin(j[1]))))+(((-0.531815483588428)*(((((0.271732233620001)*(IKsin(j[0]))))+(((0.0485075244479057)*(IKcos(j[0]))))))*(IKcos(j[1]))))))*(IKsin(j[2]))))+(((-1.0)*(((((-0.52353919050829)*(IKcos(j[0]))))+(((0.0934581434992053)*(IKsin(j[0]))))))*(IKcos(j[2]))))+(((-1.0)*(((((-0.142610275851393)*(IKcos(j[0]))))+(((-0.798882425671523)*(IKsin(j[0]))))))*(IKcos(j[1]))))+(((-1.0)*(((((0.0656300100348293)*(((((-0.168906816209186)*(IKcos(j[0]))))+(((-0.946191894238107)*(IKsin(j[0]))))))*(IKsin(j[1]))))+(((0.0656300100348293)*(((((-0.271732233620001)*(IKsin(j[0]))))+(((-0.0485075244479057)*(IKcos(j[0]))))))*(IKcos(j[1]))))))*(IKcos(j[2]))))+(((-1.0)*(((((-0.0115334342172636)*(IKsin(j[0]))))+(((0.0646086535405889)*(IKcos(j[0]))))))*(IKsin(j[2]))))))*(IKsin(j[3]))))+(((0.196099898904425)*(((((-1.0)*(((((-0.0905086834657259)*(IKcos(j[0]))))+(((-0.507016736064526)*(IKsin(j[0]))))))*(IKcos(j[1]))))+(((-1.0)*(((((0.145607662687148)*(IKsin(j[0]))))+(((0.0259927472111257)*(IKcos(j[0]))))))*(IKsin(j[1]))))+(((-1.0)*(((((-0.101810558420961)*(IKcos(j[0]))))+(((0.0181744288701722)*(IKsin(j[0]))))))*(IKsin(j[2]))))+(((-1.0)*(((((-0.103420015812922)*(((((-0.271732233620001)*(IKsin(j[0]))))+(((-0.0485075244479057)*(IKcos(j[0]))))))*(IKcos(j[1]))))+(((-0.103420015812922)*(((((-0.168906816209186)*(IKcos(j[0]))))+(((-0.946191894238107)*(IKsin(j[0]))))))*(IKsin(j[1]))))))*(IKcos(j[2]))))+(((-1.0)*(((((0.837955424564001)*(((((0.271732233620001)*(IKsin(j[0]))))+(((0.0485075244479057)*(IKcos(j[0]))))))*(IKcos(j[1]))))+(((0.837955424564001)*(((((0.946191894238107)*(IKsin(j[0]))))+(((0.168906816209186)*(IKcos(j[0]))))))*(IKsin(j[1]))))))*(IKsin(j[2]))))+(((-1.0)*(((((0.824914877803331)*(IKcos(j[0]))))+(((-0.147257386690619)*(IKsin(j[0]))))))*(IKcos(j[2]))))))*(IKcos(j[3]))))))*(IKsin(j[5]))))+(((-0.999991471488533)*(((((0.196099898904425)*(((((((((8.53702182586258e-7)*(IKcos(j[0]))))+(((4.78231786842813e-6)*(IKsin(j[0]))))))*(IKcos(j[1]))))+(((((((-0.324171637484235)*(((((0.531815483588428)*(((((0.946191894238107)*(IKsin(j[0]))))+(((0.168906816209186)*(IKcos(j[0]))))))*(IKsin(j[1]))))+(((0.531815483588428)*(((((0.271732233620001)*(IKsin(j[0]))))+(((0.0485075244479057)*(IKcos(j[0]))))))*(IKcos(j[1]))))))*(IKsin(j[2]))))+(((-0.324171637484235)*(((((-0.0656300100348293)*(((((-0.271732233620001)*(IKsin(j[0]))))+(((-0.0485075244479057)*(IKcos(j[0]))))))*(IKcos(j[1]))))+(((-0.0656300100348293)*(((((-0.168906816209186)*(IKcos(j[0]))))+(((-0.946191894238107)*(IKsin(j[0]))))))*(IKsin(j[1]))))))*(IKcos(j[2]))))+(((-0.324171637484235)*(((((0.798882425671523)*(IKsin(j[0]))))+(((0.142610275851393)*(IKcos(j[0]))))))*(IKcos(j[1]))))+(((-0.324171637484235)*(((((-0.0934581434992053)*(IKsin(j[0]))))+(((0.52353919050829)*(IKcos(j[0]))))))*(IKcos(j[2]))))+(((-0.324171637484235)*(((((0.0115334342172636)*(IKsin(j[0]))))+(((-0.0646086535405889)*(IKcos(j[0]))))))*(IKsin(j[2]))))+(((-0.324171637484235)*(((((-0.0409555493238159)*(IKcos(j[0]))))+(((-0.22942714606775)*(IKsin(j[0]))))))*(IKsin(j[1]))))))*(IKcos(j[3]))))+(((((((-0.324171637484235)*(((((0.837955424564001)*(((((0.271732233620001)*(IKsin(j[0]))))+(((0.0485075244479057)*(IKcos(j[0]))))))*(IKcos(j[1]))))+(((0.837955424564001)*(((((0.946191894238107)*(IKsin(j[0]))))+(((0.168906816209186)*(IKcos(j[0]))))))*(IKsin(j[1]))))))*(IKsin(j[2]))))+(((-0.324171637484235)*(((((-0.103420015812922)*(((((-0.271732233620001)*(IKsin(j[0]))))+(((-0.0485075244479057)*(IKcos(j[0]))))))*(IKcos(j[1]))))+(((-0.103420015812922)*(((((-0.168906816209186)*(IKcos(j[0]))))+(((-0.946191894238107)*(IKsin(j[0]))))))*(IKsin(j[1]))))))*(IKcos(j[2]))))+(((-0.324171637484235)*(((((-0.0905086834657259)*(IKcos(j[0]))))+(((-0.507016736064526)*(IKsin(j[0]))))))*(IKcos(j[1]))))+(((-0.324171637484235)*(((((0.145607662687148)*(IKsin(j[0]))))+(((0.0259927472111257)*(IKcos(j[0]))))))*(IKsin(j[1]))))+(((-0.324171637484235)*(((((0.824914877803331)*(IKcos(j[0]))))+(((-0.147257386690619)*(IKsin(j[0]))))))*(IKcos(j[2]))))+(((-0.324171637484235)*(((((-0.101810558420961)*(IKcos(j[0]))))+(((0.0181744288701722)*(IKsin(j[0]))))))*(IKsin(j[2]))))))*(IKsin(j[3]))))+(((((((-0.114068988634618)*(IKcos(j[0]))))+(((0.020362708469395)*(IKsin(j[0]))))))*(IKcos(j[2]))))+(((((((0.164992413059238)*(IKsin(j[0]))))+(((-0.924263966079929)*(IKcos(j[0]))))))*(IKsin(j[2]))))+(((((((-2.45170564589572e-7)*(IKcos(j[0]))))+(((-1.37341053562418e-6)*(IKsin(j[0]))))))*(IKsin(j[1]))))+(((((((-0.115872231636118)*(((((0.271732233620001)*(IKsin(j[0]))))+(((0.0485075244479057)*(IKcos(j[0]))))))*(IKcos(j[1]))))+(((-0.115872231636118)*(((((0.946191894238107)*(IKsin(j[0]))))+(((0.168906816209186)*(IKcos(j[0]))))))*(IKsin(j[1]))))))*(IKsin(j[2]))))+(((((((-0.938875058440104)*(((((-0.168906816209186)*(IKcos(j[0]))))+(((-0.946191894238107)*(IKsin(j[0]))))))*(IKsin(j[1]))))+(((-0.938875058440104)*(((((-0.271732233620001)*(IKsin(j[0]))))+(((-0.0485075244479057)*(IKcos(j[0]))))))*(IKcos(j[1]))))))*(IKcos(j[2]))))))*(IKsin(j[4]))))+(((0.196099898904425)*(((((((((-0.0069778272054965)*(IKsin(j[0]))))+(((0.039088792799564)*(IKcos(j[0]))))))*(IKcos(j[2]))))+(((((((-0.945998281949174)*(((((-0.0409555493238159)*(IKcos(j[0]))))+(((-0.22942714606775)*(IKsin(j[0]))))))*(IKsin(j[1]))))+(((-0.945998281949174)*(((((-0.0934581434992053)*(IKsin(j[0]))))+(((0.52353919050829)*(IKcos(j[0]))))))*(IKcos(j[2]))))+(((-0.945998281949174)*(((((0.0115334342172636)*(IKsin(j[0]))))+(((-0.0646086535405889)*(IKcos(j[0]))))))*(IKsin(j[2]))))+(((-0.945998281949174)*(((((0.531815483588428)*(((((0.946191894238107)*(IKsin(j[0]))))+(((0.168906816209186)*(IKcos(j[0]))))))*(IKsin(j[1]))))+(((0.531815483588428)*(((((0.271732233620001)*(IKsin(j[0]))))+(((0.0485075244479057)*(IKcos(j[0]))))))*(IKcos(j[1]))))))*(IKsin(j[2]))))+(((-0.945998281949174)*(((((-0.0656300100348293)*(((((-0.271732233620001)*(IKsin(j[0]))))+(((-0.0485075244479057)*(IKcos(j[0]))))))*(IKcos(j[1]))))+(((-0.0656300100348293)*(((((-0.168906816209186)*(IKcos(j[0]))))+(((-0.946191894238107)*(IKsin(j[0]))))))*(IKsin(j[1]))))))*(IKcos(j[2]))))+(((-0.945998281949174)*(((((0.798882425671523)*(IKsin(j[0]))))+(((0.142610275851393)*(IKcos(j[0]))))))*(IKcos(j[1]))))))*(IKcos(j[3]))))+(((((((0.0397067222902749)*(((((0.946191894238107)*(IKsin(j[0]))))+(((0.168906816209186)*(IKcos(j[0]))))))*(IKsin(j[1]))))+(((0.0397067222902749)*(((((0.271732233620001)*(IKsin(j[0]))))+(((0.0485075244479057)*(IKcos(j[0]))))))*(IKcos(j[1]))))))*(IKsin(j[2]))))+(((((((-0.945998281949174)*(((((0.145607662687148)*(IKsin(j[0]))))+(((0.0259927472111257)*(IKcos(j[0]))))))*(IKsin(j[1]))))+(((-0.945998281949174)*(((((0.837955424564001)*(((((0.271732233620001)*(IKsin(j[0]))))+(((0.0485075244479057)*(IKcos(j[0]))))))*(IKcos(j[1]))))+(((0.837955424564001)*(((((0.946191894238107)*(IKsin(j[0]))))+(((0.168906816209186)*(IKcos(j[0]))))))*(IKsin(j[1]))))))*(IKsin(j[2]))))+(((-0.945998281949174)*(((((-0.101810558420961)*(IKcos(j[0]))))+(((0.0181744288701722)*(IKsin(j[0]))))))*(IKsin(j[2]))))+(((-0.945998281949174)*(((((-0.0905086834657259)*(IKcos(j[0]))))+(((-0.507016736064526)*(IKsin(j[0]))))))*(IKcos(j[1]))))+(((-0.945998281949174)*(((((-0.103420015812922)*(((((-0.271732233620001)*(IKsin(j[0]))))+(((-0.0485075244479057)*(IKcos(j[0]))))))*(IKcos(j[1]))))+(((-0.103420015812922)*(((((-0.168906816209186)*(IKcos(j[0]))))+(((-0.946191894238107)*(IKsin(j[0]))))))*(IKsin(j[1]))))))*(IKcos(j[2]))))+(((-0.945998281949174)*(((((0.824914877803331)*(IKcos(j[0]))))+(((-0.147257386690619)*(IKsin(j[0]))))))*(IKcos(j[2]))))))*(IKsin(j[3]))))+(((((((-2.92543908095302e-7)*(IKcos(j[0]))))+(((-1.63878924936753e-6)*(IKsin(j[0]))))))*(IKcos(j[1]))))+(((((((0.321730674246603)*(((((-0.168906816209186)*(IKcos(j[0]))))+(((-0.946191894238107)*(IKsin(j[0]))))))*(IKsin(j[1]))))+(((0.321730674246603)*(((((-0.271732233620001)*(IKsin(j[0]))))+(((-0.0485075244479057)*(IKcos(j[0]))))))*(IKcos(j[1]))))))*(IKcos(j[2]))))+(((((((0.31672379228264)*(IKcos(j[0]))))+(((-0.0565390674956448)*(IKsin(j[0]))))))*(IKsin(j[2]))))+(((((((4.70635888845422e-7)*(IKsin(j[0]))))+(((8.40142576392187e-8)*(IKcos(j[0]))))))*(IKsin(j[1]))))))*(IKcos(j[4]))))))*(IKcos(j[5]))))+(((-0.999991471488533)*(((((0.980583922797878)*(((((((((-0.531815483588428)*(((((0.946191894238107)*(IKsin(j[0]))))+(((0.168906816209186)*(IKcos(j[0]))))))*(IKsin(j[1]))))+(((-0.531815483588428)*(((((0.271732233620001)*(IKsin(j[0]))))+(((0.0485075244479057)*(IKcos(j[0]))))))*(IKcos(j[1]))))))*(IKsin(j[2]))))+(((((((0.0656300100348293)*(((((-0.168906816209186)*(IKcos(j[0]))))+(((-0.946191894238107)*(IKsin(j[0]))))))*(IKsin(j[1]))))+(((0.0656300100348293)*(((((-0.271732233620001)*(IKsin(j[0]))))+(((-0.0485075244479057)*(IKcos(j[0]))))))*(IKcos(j[1]))))))*(IKcos(j[2]))))+(((((((-0.142610275851393)*(IKcos(j[0]))))+(((-0.798882425671523)*(IKsin(j[0]))))))*(IKcos(j[1]))))+(((((((-0.52353919050829)*(IKcos(j[0]))))+(((0.0934581434992053)*(IKsin(j[0]))))))*(IKcos(j[2]))))+(((((((0.0409555493238159)*(IKcos(j[0]))))+(((0.22942714606775)*(IKsin(j[0]))))))*(IKsin(j[1]))))+(((((((-0.0115334342172636)*(IKsin(j[0]))))+(((0.0646086535405889)*(IKcos(j[0]))))))*(IKsin(j[2]))))))*(IKsin(j[3]))))+(((0.980583922797878)*(((((((((-0.101810558420961)*(IKcos(j[0]))))+(((0.0181744288701722)*(IKsin(j[0]))))))*(IKsin(j[2]))))+(((((((0.837955424564001)*(((((0.271732233620001)*(IKsin(j[0]))))+(((0.0485075244479057)*(IKcos(j[0]))))))*(IKcos(j[1]))))+(((0.837955424564001)*(((((0.946191894238107)*(IKsin(j[0]))))+(((0.168906816209186)*(IKcos(j[0]))))))*(IKsin(j[1]))))))*(IKsin(j[2]))))+(((((((0.145607662687148)*(IKsin(j[0]))))+(((0.0259927472111257)*(IKcos(j[0]))))))*(IKsin(j[1]))))+(((((((-0.0905086834657259)*(IKcos(j[0]))))+(((-0.507016736064526)*(IKsin(j[0]))))))*(IKcos(j[1]))))+(((((((-0.103420015812922)*(((((-0.271732233620001)*(IKsin(j[0]))))+(((-0.0485075244479057)*(IKcos(j[0]))))))*(IKcos(j[1]))))+(((-0.103420015812922)*(((((-0.168906816209186)*(IKcos(j[0]))))+(((-0.946191894238107)*(IKsin(j[0]))))))*(IKsin(j[1]))))))*(IKcos(j[2]))))+(((((((0.824914877803331)*(IKcos(j[0]))))+(((-0.147257386690619)*(IKsin(j[0]))))))*(IKcos(j[2]))))))*(IKcos(j[3]))))))*(IKcos(j[5]))))+(((-0.999991471488533)*(((((0.980583922797878)*(((((((((-0.0069778272054965)*(IKsin(j[0]))))+(((0.039088792799564)*(IKcos(j[0]))))))*(IKcos(j[2]))))+(((((((-0.945998281949174)*(((((-0.0409555493238159)*(IKcos(j[0]))))+(((-0.22942714606775)*(IKsin(j[0]))))))*(IKsin(j[1]))))+(((-0.945998281949174)*(((((-0.0934581434992053)*(IKsin(j[0]))))+(((0.52353919050829)*(IKcos(j[0]))))))*(IKcos(j[2]))))+(((-0.945998281949174)*(((((0.0115334342172636)*(IKsin(j[0]))))+(((-0.0646086535405889)*(IKcos(j[0]))))))*(IKsin(j[2]))))+(((-0.945998281949174)*(((((0.531815483588428)*(((((0.946191894238107)*(IKsin(j[0]))))+(((0.168906816209186)*(IKcos(j[0]))))))*(IKsin(j[1]))))+(((0.531815483588428)*(((((0.271732233620001)*(IKsin(j[0]))))+(((0.0485075244479057)*(IKcos(j[0]))))))*(IKcos(j[1]))))))*(IKsin(j[2]))))+(((-0.945998281949174)*(((((-0.0656300100348293)*(((((-0.271732233620001)*(IKsin(j[0]))))+(((-0.0485075244479057)*(IKcos(j[0]))))))*(IKcos(j[1]))))+(((-0.0656300100348293)*(((((-0.168906816209186)*(IKcos(j[0]))))+(((-0.946191894238107)*(IKsin(j[0]))))))*(IKsin(j[1]))))))*(IKcos(j[2]))))+(((-0.945998281949174)*(((((0.798882425671523)*(IKsin(j[0]))))+(((0.142610275851393)*(IKcos(j[0]))))))*(IKcos(j[1]))))))*(IKcos(j[3]))))+(((((((0.0397067222902749)*(((((0.946191894238107)*(IKsin(j[0]))))+(((0.168906816209186)*(IKcos(j[0]))))))*(IKsin(j[1]))))+(((0.0397067222902749)*(((((0.271732233620001)*(IKsin(j[0]))))+(((0.0485075244479057)*(IKcos(j[0]))))))*(IKcos(j[1]))))))*(IKsin(j[2]))))+(((((((-0.945998281949174)*(((((0.145607662687148)*(IKsin(j[0]))))+(((0.0259927472111257)*(IKcos(j[0]))))))*(IKsin(j[1]))))+(((-0.945998281949174)*(((((0.837955424564001)*(((((0.271732233620001)*(IKsin(j[0]))))+(((0.0485075244479057)*(IKcos(j[0]))))))*(IKcos(j[1]))))+(((0.837955424564001)*(((((0.946191894238107)*(IKsin(j[0]))))+(((0.168906816209186)*(IKcos(j[0]))))))*(IKsin(j[1]))))))*(IKsin(j[2]))))+(((-0.945998281949174)*(((((-0.101810558420961)*(IKcos(j[0]))))+(((0.0181744288701722)*(IKsin(j[0]))))))*(IKsin(j[2]))))+(((-0.945998281949174)*(((((-0.0905086834657259)*(IKcos(j[0]))))+(((-0.507016736064526)*(IKsin(j[0]))))))*(IKcos(j[1]))))+(((-0.945998281949174)*(((((-0.103420015812922)*(((((-0.271732233620001)*(IKsin(j[0]))))+(((-0.0485075244479057)*(IKcos(j[0]))))))*(IKcos(j[1]))))+(((-0.103420015812922)*(((((-0.168906816209186)*(IKcos(j[0]))))+(((-0.946191894238107)*(IKsin(j[0]))))))*(IKsin(j[1]))))))*(IKcos(j[2]))))+(((-0.945998281949174)*(((((0.824914877803331)*(IKcos(j[0]))))+(((-0.147257386690619)*(IKsin(j[0]))))))*(IKcos(j[2]))))))*(IKsin(j[3]))))+(((((((-2.92543908095302e-7)*(IKcos(j[0]))))+(((-1.63878924936753e-6)*(IKsin(j[0]))))))*(IKcos(j[1]))))+(((((((0.321730674246603)*(((((-0.168906816209186)*(IKcos(j[0]))))+(((-0.946191894238107)*(IKsin(j[0]))))))*(IKsin(j[1]))))+(((0.321730674246603)*(((((-0.271732233620001)*(IKsin(j[0]))))+(((-0.0485075244479057)*(IKcos(j[0]))))))*(IKcos(j[1]))))))*(IKcos(j[2]))))+(((((((0.31672379228264)*(IKcos(j[0]))))+(((-0.0565390674956448)*(IKsin(j[0]))))))*(IKsin(j[2]))))+(((((((4.70635888845422e-7)*(IKsin(j[0]))))+(((8.40142576392187e-8)*(IKcos(j[0]))))))*(IKsin(j[1]))))))*(IKcos(j[4]))))+(((0.980583922797878)*(((((((((8.53702182586258e-7)*(IKcos(j[0]))))+(((4.78231786842813e-6)*(IKsin(j[0]))))))*(IKcos(j[1]))))+(((((((-0.324171637484235)*(((((0.531815483588428)*(((((0.946191894238107)*(IKsin(j[0]))))+(((0.168906816209186)*(IKcos(j[0]))))))*(IKsin(j[1]))))+(((0.531815483588428)*(((((0.271732233620001)*(IKsin(j[0]))))+(((0.0485075244479057)*(IKcos(j[0]))))))*(IKcos(j[1]))))))*(IKsin(j[2]))))+(((-0.324171637484235)*(((((-0.0656300100348293)*(((((-0.271732233620001)*(IKsin(j[0]))))+(((-0.0485075244479057)*(IKcos(j[0]))))))*(IKcos(j[1]))))+(((-0.0656300100348293)*(((((-0.168906816209186)*(IKcos(j[0]))))+(((-0.946191894238107)*(IKsin(j[0]))))))*(IKsin(j[1]))))))*(IKcos(j[2]))))+(((-0.324171637484235)*(((((0.798882425671523)*(IKsin(j[0]))))+(((0.142610275851393)*(IKcos(j[0]))))))*(IKcos(j[1]))))+(((-0.324171637484235)*(((((-0.0934581434992053)*(IKsin(j[0]))))+(((0.52353919050829)*(IKcos(j[0]))))))*(IKcos(j[2]))))+(((-0.324171637484235)*(((((0.0115334342172636)*(IKsin(j[0]))))+(((-0.0646086535405889)*(IKcos(j[0]))))))*(IKsin(j[2]))))+(((-0.324171637484235)*(((((-0.0409555493238159)*(IKcos(j[0]))))+(((-0.22942714606775)*(IKsin(j[0]))))))*(IKsin(j[1]))))))*(IKcos(j[3]))))+(((((((-0.324171637484235)*(((((0.837955424564001)*(((((0.271732233620001)*(IKsin(j[0]))))+(((0.0485075244479057)*(IKcos(j[0]))))))*(IKcos(j[1]))))+(((0.837955424564001)*(((((0.946191894238107)*(IKsin(j[0]))))+(((0.168906816209186)*(IKcos(j[0]))))))*(IKsin(j[1]))))))*(IKsin(j[2]))))+(((-0.324171637484235)*(((((-0.103420015812922)*(((((-0.271732233620001)*(IKsin(j[0]))))+(((-0.0485075244479057)*(IKcos(j[0]))))))*(IKcos(j[1]))))+(((-0.103420015812922)*(((((-0.168906816209186)*(IKcos(j[0]))))+(((-0.946191894238107)*(IKsin(j[0]))))))*(IKsin(j[1]))))))*(IKcos(j[2]))))+(((-0.324171637484235)*(((((-0.0905086834657259)*(IKcos(j[0]))))+(((-0.507016736064526)*(IKsin(j[0]))))))*(IKcos(j[1]))))+(((-0.324171637484235)*(((((0.145607662687148)*(IKsin(j[0]))))+(((0.0259927472111257)*(IKcos(j[0]))))))*(IKsin(j[1]))))+(((-0.324171637484235)*(((((0.824914877803331)*(IKcos(j[0]))))+(((-0.147257386690619)*(IKsin(j[0]))))))*(IKcos(j[2]))))+(((-0.324171637484235)*(((((-0.101810558420961)*(IKcos(j[0]))))+(((0.0181744288701722)*(IKsin(j[0]))))))*(IKsin(j[2]))))))*(IKsin(j[3]))))+(((((((-0.114068988634618)*(IKcos(j[0]))))+(((0.020362708469395)*(IKsin(j[0]))))))*(IKcos(j[2]))))+(((((((0.164992413059238)*(IKsin(j[0]))))+(((-0.924263966079929)*(IKcos(j[0]))))))*(IKsin(j[2]))))+(((((((-2.45170564589572e-7)*(IKcos(j[0]))))+(((-1.37341053562418e-6)*(IKsin(j[0]))))))*(IKsin(j[1]))))+(((((((-0.115872231636118)*(((((0.271732233620001)*(IKsin(j[0]))))+(((0.0485075244479057)*(IKcos(j[0]))))))*(IKcos(j[1]))))+(((-0.115872231636118)*(((((0.946191894238107)*(IKsin(j[0]))))+(((0.168906816209186)*(IKcos(j[0]))))))*(IKsin(j[1]))))))*(IKsin(j[2]))))+(((((((-0.938875058440104)*(((((-0.168906816209186)*(IKcos(j[0]))))+(((-0.946191894238107)*(IKsin(j[0]))))))*(IKsin(j[1]))))+(((-0.938875058440104)*(((((-0.271732233620001)*(IKsin(j[0]))))+(((-0.0485075244479057)*(IKcos(j[0]))))))*(IKcos(j[1]))))))*(IKcos(j[2]))))))*(IKsin(j[4]))))))*(IKsin(j[5]))))))*(IKcos(j[6]))))+(((((((-0.00413000607730841)*(((((0.196099898904425)*(((((-1.0)*(((((0.0409555493238159)*(IKcos(j[0]))))+(((0.22942714606775)*(IKsin(j[0]))))))*(IKsin(j[1]))))+(((-1.0)*(((((-0.531815483588428)*(((((0.946191894238107)*(IKsin(j[0]))))+(((0.168906816209186)*(IKcos(j[0]))))))*(IKsin(j[1]))))+(((-0.531815483588428)*(((((0.271732233620001)*(IKsin(j[0]))))+(((0.0485075244479057)*(IKcos(j[0]))))))*(IKcos(j[1]))))))*(IKsin(j[2]))))+(((-1.0)*(((((-0.52353919050829)*(IKcos(j[0]))))+(((0.0934581434992053)*(IKsin(j[0]))))))*(IKcos(j[2]))))+(((-1.0)*(((((-0.142610275851393)*(IKcos(j[0]))))+(((-0.798882425671523)*(IKsin(j[0]))))))*(IKcos(j[1]))))+(((-1.0)*(((((0.0656300100348293)*(((((-0.168906816209186)*(IKcos(j[0]))))+(((-0.946191894238107)*(IKsin(j[0]))))))*(IKsin(j[1]))))+(((0.0656300100348293)*(((((-0.271732233620001)*(IKsin(j[0]))))+(((-0.0485075244479057)*(IKcos(j[0]))))))*(IKcos(j[1]))))))*(IKcos(j[2]))))+(((-1.0)*(((((-0.0115334342172636)*(IKsin(j[0]))))+(((0.0646086535405889)*(IKcos(j[0]))))))*(IKsin(j[2]))))))*(IKsin(j[3]))))+(((0.196099898904425)*(((((-1.0)*(((((-0.0905086834657259)*(IKcos(j[0]))))+(((-0.507016736064526)*(IKsin(j[0]))))))*(IKcos(j[1]))))+(((-1.0)*(((((0.145607662687148)*(IKsin(j[0]))))+(((0.0259927472111257)*(IKcos(j[0]))))))*(IKsin(j[1]))))+(((-1.0)*(((((-0.101810558420961)*(IKcos(j[0]))))+(((0.0181744288701722)*(IKsin(j[0]))))))*(IKsin(j[2]))))+(((-1.0)*(((((-0.103420015812922)*(((((-0.271732233620001)*(IKsin(j[0]))))+(((-0.0485075244479057)*(IKcos(j[0]))))))*(IKcos(j[1]))))+(((-0.103420015812922)*(((((-0.168906816209186)*(IKcos(j[0]))))+(((-0.946191894238107)*(IKsin(j[0]))))))*(IKsin(j[1]))))))*(IKcos(j[2]))))+(((-1.0)*(((((0.837955424564001)*(((((0.271732233620001)*(IKsin(j[0]))))+(((0.0485075244479057)*(IKcos(j[0]))))))*(IKcos(j[1]))))+(((0.837955424564001)*(((((0.946191894238107)*(IKsin(j[0]))))+(((0.168906816209186)*(IKcos(j[0]))))))*(IKsin(j[1]))))))*(IKsin(j[2]))))+(((-1.0)*(((((0.824914877803331)*(IKcos(j[0]))))+(((-0.147257386690619)*(IKsin(j[0]))))))*(IKcos(j[2]))))))*(IKcos(j[3]))))))*(IKsin(j[5]))))+(((-0.00413000607730841)*(((((0.196099898904425)*(((((((((8.53702182586258e-7)*(IKcos(j[0]))))+(((4.78231786842813e-6)*(IKsin(j[0]))))))*(IKcos(j[1]))))+(((((((-0.324171637484235)*(((((0.531815483588428)*(((((0.946191894238107)*(IKsin(j[0]))))+(((0.168906816209186)*(IKcos(j[0]))))))*(IKsin(j[1]))))+(((0.531815483588428)*(((((0.271732233620001)*(IKsin(j[0]))))+(((0.0485075244479057)*(IKcos(j[0]))))))*(IKcos(j[1]))))))*(IKsin(j[2]))))+(((-0.324171637484235)*(((((-0.0656300100348293)*(((((-0.271732233620001)*(IKsin(j[0]))))+(((-0.0485075244479057)*(IKcos(j[0]))))))*(IKcos(j[1]))))+(((-0.0656300100348293)*(((((-0.168906816209186)*(IKcos(j[0]))))+(((-0.946191894238107)*(IKsin(j[0]))))))*(IKsin(j[1]))))))*(IKcos(j[2]))))+(((-0.324171637484235)*(((((0.798882425671523)*(IKsin(j[0]))))+(((0.142610275851393)*(IKcos(j[0]))))))*(IKcos(j[1]))))+(((-0.324171637484235)*(((((-0.0934581434992053)*(IKsin(j[0]))))+(((0.52353919050829)*(IKcos(j[0]))))))*(IKcos(j[2]))))+(((-0.324171637484235)*(((((0.0115334342172636)*(IKsin(j[0]))))+(((-0.0646086535405889)*(IKcos(j[0]))))))*(IKsin(j[2]))))+(((-0.324171637484235)*(((((-0.0409555493238159)*(IKcos(j[0]))))+(((-0.22942714606775)*(IKsin(j[0]))))))*(IKsin(j[1]))))))*(IKcos(j[3]))))+(((((((-0.324171637484235)*(((((0.837955424564001)*(((((0.271732233620001)*(IKsin(j[0]))))+(((0.0485075244479057)*(IKcos(j[0]))))))*(IKcos(j[1]))))+(((0.837955424564001)*(((((0.946191894238107)*(IKsin(j[0]))))+(((0.168906816209186)*(IKcos(j[0]))))))*(IKsin(j[1]))))))*(IKsin(j[2]))))+(((-0.324171637484235)*(((((-0.103420015812922)*(((((-0.271732233620001)*(IKsin(j[0]))))+(((-0.0485075244479057)*(IKcos(j[0]))))))*(IKcos(j[1]))))+(((-0.103420015812922)*(((((-0.168906816209186)*(IKcos(j[0]))))+(((-0.946191894238107)*(IKsin(j[0]))))))*(IKsin(j[1]))))))*(IKcos(j[2]))))+(((-0.324171637484235)*(((((-0.0905086834657259)*(IKcos(j[0]))))+(((-0.507016736064526)*(IKsin(j[0]))))))*(IKcos(j[1]))))+(((-0.324171637484235)*(((((0.145607662687148)*(IKsin(j[0]))))+(((0.0259927472111257)*(IKcos(j[0]))))))*(IKsin(j[1]))))+(((-0.324171637484235)*(((((0.824914877803331)*(IKcos(j[0]))))+(((-0.147257386690619)*(IKsin(j[0]))))))*(IKcos(j[2]))))+(((-0.324171637484235)*(((((-0.101810558420961)*(IKcos(j[0]))))+(((0.0181744288701722)*(IKsin(j[0]))))))*(IKsin(j[2]))))))*(IKsin(j[3]))))+(((((((-0.114068988634618)*(IKcos(j[0]))))+(((0.020362708469395)*(IKsin(j[0]))))))*(IKcos(j[2]))))+(((((((0.164992413059238)*(IKsin(j[0]))))+(((-0.924263966079929)*(IKcos(j[0]))))))*(IKsin(j[2]))))+(((((((-2.45170564589572e-7)*(IKcos(j[0]))))+(((-1.37341053562418e-6)*(IKsin(j[0]))))))*(IKsin(j[1]))))+(((((((-0.115872231636118)*(((((0.271732233620001)*(IKsin(j[0]))))+(((0.0485075244479057)*(IKcos(j[0]))))))*(IKcos(j[1]))))+(((-0.115872231636118)*(((((0.946191894238107)*(IKsin(j[0]))))+(((0.168906816209186)*(IKcos(j[0]))))))*(IKsin(j[1]))))))*(IKsin(j[2]))))+(((((((-0.938875058440104)*(((((-0.168906816209186)*(IKcos(j[0]))))+(((-0.946191894238107)*(IKsin(j[0]))))))*(IKsin(j[1]))))+(((-0.938875058440104)*(((((-0.271732233620001)*(IKsin(j[0]))))+(((-0.0485075244479057)*(IKcos(j[0]))))))*(IKcos(j[1]))))))*(IKcos(j[2]))))))*(IKsin(j[4]))))+(((0.196099898904425)*(((((((((-0.0069778272054965)*(IKsin(j[0]))))+(((0.039088792799564)*(IKcos(j[0]))))))*(IKcos(j[2]))))+(((((((-0.945998281949174)*(((((-0.0409555493238159)*(IKcos(j[0]))))+(((-0.22942714606775)*(IKsin(j[0]))))))*(IKsin(j[1]))))+(((-0.945998281949174)*(((((-0.0934581434992053)*(IKsin(j[0]))))+(((0.52353919050829)*(IKcos(j[0]))))))*(IKcos(j[2]))))+(((-0.945998281949174)*(((((0.0115334342172636)*(IKsin(j[0]))))+(((-0.0646086535405889)*(IKcos(j[0]))))))*(IKsin(j[2]))))+(((-0.945998281949174)*(((((0.531815483588428)*(((((0.946191894238107)*(IKsin(j[0]))))+(((0.168906816209186)*(IKcos(j[0]))))))*(IKsin(j[1]))))+(((0.531815483588428)*(((((0.271732233620001)*(IKsin(j[0]))))+(((0.0485075244479057)*(IKcos(j[0]))))))*(IKcos(j[1]))))))*(IKsin(j[2]))))+(((-0.945998281949174)*(((((-0.0656300100348293)*(((((-0.271732233620001)*(IKsin(j[0]))))+(((-0.0485075244479057)*(IKcos(j[0]))))))*(IKcos(j[1]))))+(((-0.0656300100348293)*(((((-0.168906816209186)*(IKcos(j[0]))))+(((-0.946191894238107)*(IKsin(j[0]))))))*(IKsin(j[1]))))))*(IKcos(j[2]))))+(((-0.945998281949174)*(((((0.798882425671523)*(IKsin(j[0]))))+(((0.142610275851393)*(IKcos(j[0]))))))*(IKcos(j[1]))))))*(IKcos(j[3]))))+(((((((0.0397067222902749)*(((((0.946191894238107)*(IKsin(j[0]))))+(((0.168906816209186)*(IKcos(j[0]))))))*(IKsin(j[1]))))+(((0.0397067222902749)*(((((0.271732233620001)*(IKsin(j[0]))))+(((0.0485075244479057)*(IKcos(j[0]))))))*(IKcos(j[1]))))))*(IKsin(j[2]))))+(((((((-0.945998281949174)*(((((0.145607662687148)*(IKsin(j[0]))))+(((0.0259927472111257)*(IKcos(j[0]))))))*(IKsin(j[1]))))+(((-0.945998281949174)*(((((0.837955424564001)*(((((0.271732233620001)*(IKsin(j[0]))))+(((0.0485075244479057)*(IKcos(j[0]))))))*(IKcos(j[1]))))+(((0.837955424564001)*(((((0.946191894238107)*(IKsin(j[0]))))+(((0.168906816209186)*(IKcos(j[0]))))))*(IKsin(j[1]))))))*(IKsin(j[2]))))+(((-0.945998281949174)*(((((-0.101810558420961)*(IKcos(j[0]))))+(((0.0181744288701722)*(IKsin(j[0]))))))*(IKsin(j[2]))))+(((-0.945998281949174)*(((((-0.0905086834657259)*(IKcos(j[0]))))+(((-0.507016736064526)*(IKsin(j[0]))))))*(IKcos(j[1]))))+(((-0.945998281949174)*(((((-0.103420015812922)*(((((-0.271732233620001)*(IKsin(j[0]))))+(((-0.0485075244479057)*(IKcos(j[0]))))))*(IKcos(j[1]))))+(((-0.103420015812922)*(((((-0.168906816209186)*(IKcos(j[0]))))+(((-0.946191894238107)*(IKsin(j[0]))))))*(IKsin(j[1]))))))*(IKcos(j[2]))))+(((-0.945998281949174)*(((((0.824914877803331)*(IKcos(j[0]))))+(((-0.147257386690619)*(IKsin(j[0]))))))*(IKcos(j[2]))))))*(IKsin(j[3]))))+(((((((-2.92543908095302e-7)*(IKcos(j[0]))))+(((-1.63878924936753e-6)*(IKsin(j[0]))))))*(IKcos(j[1]))))+(((((((0.321730674246603)*(((((-0.168906816209186)*(IKcos(j[0]))))+(((-0.946191894238107)*(IKsin(j[0]))))))*(IKsin(j[1]))))+(((0.321730674246603)*(((((-0.271732233620001)*(IKsin(j[0]))))+(((-0.0485075244479057)*(IKcos(j[0]))))))*(IKcos(j[1]))))))*(IKcos(j[2]))))+(((((((0.31672379228264)*(IKcos(j[0]))))+(((-0.0565390674956448)*(IKsin(j[0]))))))*(IKsin(j[2]))))+(((((((4.70635888845422e-7)*(IKsin(j[0]))))+(((8.40142576392187e-8)*(IKcos(j[0]))))))*(IKsin(j[1]))))))*(IKcos(j[4]))))))*(IKcos(j[5]))))+(((-0.00413000607730841)*(((((0.980583922797878)*(((((((((-0.0069778272054965)*(IKsin(j[0]))))+(((0.039088792799564)*(IKcos(j[0]))))))*(IKcos(j[2]))))+(((((((-0.945998281949174)*(((((-0.0409555493238159)*(IKcos(j[0]))))+(((-0.22942714606775)*(IKsin(j[0]))))))*(IKsin(j[1]))))+(((-0.945998281949174)*(((((-0.0934581434992053)*(IKsin(j[0]))))+(((0.52353919050829)*(IKcos(j[0]))))))*(IKcos(j[2]))))+(((-0.945998281949174)*(((((0.0115334342172636)*(IKsin(j[0]))))+(((-0.0646086535405889)*(IKcos(j[0]))))))*(IKsin(j[2]))))+(((-0.945998281949174)*(((((0.531815483588428)*(((((0.946191894238107)*(IKsin(j[0]))))+(((0.168906816209186)*(IKcos(j[0]))))))*(IKsin(j[1]))))+(((0.531815483588428)*(((((0.271732233620001)*(IKsin(j[0]))))+(((0.0485075244479057)*(IKcos(j[0]))))))*(IKcos(j[1]))))))*(IKsin(j[2]))))+(((-0.945998281949174)*(((((-0.0656300100348293)*(((((-0.271732233620001)*(IKsin(j[0]))))+(((-0.0485075244479057)*(IKcos(j[0]))))))*(IKcos(j[1]))))+(((-0.0656300100348293)*(((((-0.168906816209186)*(IKcos(j[0]))))+(((-0.946191894238107)*(IKsin(j[0]))))))*(IKsin(j[1]))))))*(IKcos(j[2]))))+(((-0.945998281949174)*(((((0.798882425671523)*(IKsin(j[0]))))+(((0.142610275851393)*(IKcos(j[0]))))))*(IKcos(j[1]))))))*(IKcos(j[3]))))+(((((((0.0397067222902749)*(((((0.946191894238107)*(IKsin(j[0]))))+(((0.168906816209186)*(IKcos(j[0]))))))*(IKsin(j[1]))))+(((0.0397067222902749)*(((((0.271732233620001)*(IKsin(j[0]))))+(((0.0485075244479057)*(IKcos(j[0]))))))*(IKcos(j[1]))))))*(IKsin(j[2]))))+(((((((-0.945998281949174)*(((((0.145607662687148)*(IKsin(j[0]))))+(((0.0259927472111257)*(IKcos(j[0]))))))*(IKsin(j[1]))))+(((-0.945998281949174)*(((((0.837955424564001)*(((((0.271732233620001)*(IKsin(j[0]))))+(((0.0485075244479057)*(IKcos(j[0]))))))*(IKcos(j[1]))))+(((0.837955424564001)*(((((0.946191894238107)*(IKsin(j[0]))))+(((0.168906816209186)*(IKcos(j[0]))))))*(IKsin(j[1]))))))*(IKsin(j[2]))))+(((-0.945998281949174)*(((((-0.101810558420961)*(IKcos(j[0]))))+(((0.0181744288701722)*(IKsin(j[0]))))))*(IKsin(j[2]))))+(((-0.945998281949174)*(((((-0.0905086834657259)*(IKcos(j[0]))))+(((-0.507016736064526)*(IKsin(j[0]))))))*(IKcos(j[1]))))+(((-0.945998281949174)*(((((-0.103420015812922)*(((((-0.271732233620001)*(IKsin(j[0]))))+(((-0.0485075244479057)*(IKcos(j[0]))))))*(IKcos(j[1]))))+(((-0.103420015812922)*(((((-0.168906816209186)*(IKcos(j[0]))))+(((-0.946191894238107)*(IKsin(j[0]))))))*(IKsin(j[1]))))))*(IKcos(j[2]))))+(((-0.945998281949174)*(((((0.824914877803331)*(IKcos(j[0]))))+(((-0.147257386690619)*(IKsin(j[0]))))))*(IKcos(j[2]))))))*(IKsin(j[3]))))+(((((((-2.92543908095302e-7)*(IKcos(j[0]))))+(((-1.63878924936753e-6)*(IKsin(j[0]))))))*(IKcos(j[1]))))+(((((((0.321730674246603)*(((((-0.168906816209186)*(IKcos(j[0]))))+(((-0.946191894238107)*(IKsin(j[0]))))))*(IKsin(j[1]))))+(((0.321730674246603)*(((((-0.271732233620001)*(IKsin(j[0]))))+(((-0.0485075244479057)*(IKcos(j[0]))))))*(IKcos(j[1]))))))*(IKcos(j[2]))))+(((((((0.31672379228264)*(IKcos(j[0]))))+(((-0.0565390674956448)*(IKsin(j[0]))))))*(IKsin(j[2]))))+(((((((4.70635888845422e-7)*(IKsin(j[0]))))+(((8.40142576392187e-8)*(IKcos(j[0]))))))*(IKsin(j[1]))))))*(IKcos(j[4]))))+(((0.980583922797878)*(((((((((8.53702182586258e-7)*(IKcos(j[0]))))+(((4.78231786842813e-6)*(IKsin(j[0]))))))*(IKcos(j[1]))))+(((((((-0.324171637484235)*(((((0.531815483588428)*(((((0.946191894238107)*(IKsin(j[0]))))+(((0.168906816209186)*(IKcos(j[0]))))))*(IKsin(j[1]))))+(((0.531815483588428)*(((((0.271732233620001)*(IKsin(j[0]))))+(((0.0485075244479057)*(IKcos(j[0]))))))*(IKcos(j[1]))))))*(IKsin(j[2]))))+(((-0.324171637484235)*(((((-0.0656300100348293)*(((((-0.271732233620001)*(IKsin(j[0]))))+(((-0.0485075244479057)*(IKcos(j[0]))))))*(IKcos(j[1]))))+(((-0.0656300100348293)*(((((-0.168906816209186)*(IKcos(j[0]))))+(((-0.946191894238107)*(IKsin(j[0]))))))*(IKsin(j[1]))))))*(IKcos(j[2]))))+(((-0.324171637484235)*(((((0.798882425671523)*(IKsin(j[0]))))+(((0.142610275851393)*(IKcos(j[0]))))))*(IKcos(j[1]))))+(((-0.324171637484235)*(((((-0.0934581434992053)*(IKsin(j[0]))))+(((0.52353919050829)*(IKcos(j[0]))))))*(IKcos(j[2]))))+(((-0.324171637484235)*(((((0.0115334342172636)*(IKsin(j[0]))))+(((-0.0646086535405889)*(IKcos(j[0]))))))*(IKsin(j[2]))))+(((-0.324171637484235)*(((((-0.0409555493238159)*(IKcos(j[0]))))+(((-0.22942714606775)*(IKsin(j[0]))))))*(IKsin(j[1]))))))*(IKcos(j[3]))))+(((((((-0.324171637484235)*(((((0.837955424564001)*(((((0.271732233620001)*(IKsin(j[0]))))+(((0.0485075244479057)*(IKcos(j[0]))))))*(IKcos(j[1]))))+(((0.837955424564001)*(((((0.946191894238107)*(IKsin(j[0]))))+(((0.168906816209186)*(IKcos(j[0]))))))*(IKsin(j[1]))))))*(IKsin(j[2]))))+(((-0.324171637484235)*(((((-0.103420015812922)*(((((-0.271732233620001)*(IKsin(j[0]))))+(((-0.0485075244479057)*(IKcos(j[0]))))))*(IKcos(j[1]))))+(((-0.103420015812922)*(((((-0.168906816209186)*(IKcos(j[0]))))+(((-0.946191894238107)*(IKsin(j[0]))))))*(IKsin(j[1]))))))*(IKcos(j[2]))))+(((-0.324171637484235)*(((((-0.0905086834657259)*(IKcos(j[0]))))+(((-0.507016736064526)*(IKsin(j[0]))))))*(IKcos(j[1]))))+(((-0.324171637484235)*(((((0.145607662687148)*(IKsin(j[0]))))+(((0.0259927472111257)*(IKcos(j[0]))))))*(IKsin(j[1]))))+(((-0.324171637484235)*(((((0.824914877803331)*(IKcos(j[0]))))+(((-0.147257386690619)*(IKsin(j[0]))))))*(IKcos(j[2]))))+(((-0.324171637484235)*(((((-0.101810558420961)*(IKcos(j[0]))))+(((0.0181744288701722)*(IKsin(j[0]))))))*(IKsin(j[2]))))))*(IKsin(j[3]))))+(((((((-0.114068988634618)*(IKcos(j[0]))))+(((0.020362708469395)*(IKsin(j[0]))))))*(IKcos(j[2]))))+(((((((0.164992413059238)*(IKsin(j[0]))))+(((-0.924263966079929)*(IKcos(j[0]))))))*(IKsin(j[2]))))+(((((((-2.45170564589572e-7)*(IKcos(j[0]))))+(((-1.37341053562418e-6)*(IKsin(j[0]))))))*(IKsin(j[1]))))+(((((((-0.115872231636118)*(((((0.271732233620001)*(IKsin(j[0]))))+(((0.0485075244479057)*(IKcos(j[0]))))))*(IKcos(j[1]))))+(((-0.115872231636118)*(((((0.946191894238107)*(IKsin(j[0]))))+(((0.168906816209186)*(IKcos(j[0]))))))*(IKsin(j[1]))))))*(IKsin(j[2]))))+(((((((-0.938875058440104)*(((((-0.168906816209186)*(IKcos(j[0]))))+(((-0.946191894238107)*(IKsin(j[0]))))))*(IKsin(j[1]))))+(((-0.938875058440104)*(((((-0.271732233620001)*(IKsin(j[0]))))+(((-0.0485075244479057)*(IKcos(j[0]))))))*(IKcos(j[1]))))))*(IKcos(j[2]))))))*(IKsin(j[4]))))))*(IKsin(j[5]))))+(((-0.00413000607730841)*(((((0.980583922797878)*(((((((((-0.531815483588428)*(((((0.946191894238107)*(IKsin(j[0]))))+(((0.168906816209186)*(IKcos(j[0]))))))*(IKsin(j[1]))))+(((-0.531815483588428)*(((((0.271732233620001)*(IKsin(j[0]))))+(((0.0485075244479057)*(IKcos(j[0]))))))*(IKcos(j[1]))))))*(IKsin(j[2]))))+(((((((0.0656300100348293)*(((((-0.168906816209186)*(IKcos(j[0]))))+(((-0.946191894238107)*(IKsin(j[0]))))))*(IKsin(j[1]))))+(((0.0656300100348293)*(((((-0.271732233620001)*(IKsin(j[0]))))+(((-0.0485075244479057)*(IKcos(j[0]))))))*(IKcos(j[1]))))))*(IKcos(j[2]))))+(((((((-0.142610275851393)*(IKcos(j[0]))))+(((-0.798882425671523)*(IKsin(j[0]))))))*(IKcos(j[1]))))+(((((((-0.52353919050829)*(IKcos(j[0]))))+(((0.0934581434992053)*(IKsin(j[0]))))))*(IKcos(j[2]))))+(((((((0.0409555493238159)*(IKcos(j[0]))))+(((0.22942714606775)*(IKsin(j[0]))))))*(IKsin(j[1]))))+(((((((-0.0115334342172636)*(IKsin(j[0]))))+(((0.0646086535405889)*(IKcos(j[0]))))))*(IKsin(j[2]))))))*(IKsin(j[3]))))+(((0.980583922797878)*(((((((((-0.101810558420961)*(IKcos(j[0]))))+(((0.0181744288701722)*(IKsin(j[0]))))))*(IKsin(j[2]))))+(((((((0.837955424564001)*(((((0.271732233620001)*(IKsin(j[0]))))+(((0.0485075244479057)*(IKcos(j[0]))))))*(IKcos(j[1]))))+(((0.837955424564001)*(((((0.946191894238107)*(IKsin(j[0]))))+(((0.168906816209186)*(IKcos(j[0]))))))*(IKsin(j[1]))))))*(IKsin(j[2]))))+(((((((0.145607662687148)*(IKsin(j[0]))))+(((0.0259927472111257)*(IKcos(j[0]))))))*(IKsin(j[1]))))+(((((((-0.0905086834657259)*(IKcos(j[0]))))+(((-0.507016736064526)*(IKsin(j[0]))))))*(IKcos(j[1]))))+(((((((-0.103420015812922)*(((((-0.271732233620001)*(IKsin(j[0]))))+(((-0.0485075244479057)*(IKcos(j[0]))))))*(IKcos(j[1]))))+(((-0.103420015812922)*(((((-0.168906816209186)*(IKcos(j[0]))))+(((-0.946191894238107)*(IKsin(j[0]))))))*(IKsin(j[1]))))))*(IKcos(j[2]))))+(((((((0.824914877803331)*(IKcos(j[0]))))+(((-0.147257386690619)*(IKsin(j[0]))))))*(IKcos(j[2]))))))*(IKcos(j[3]))))))*(IKcos(j[5]))))))*(IKsin(j[6]))))+(((((((-0.00413000607730841)*(((((((((-0.0069778272054965)*(IKsin(j[0]))))+(((0.039088792799564)*(IKcos(j[0]))))))*(IKcos(j[2]))))+(((((((-0.945998281949174)*(((((-0.0409555493238159)*(IKcos(j[0]))))+(((-0.22942714606775)*(IKsin(j[0]))))))*(IKsin(j[1]))))+(((-0.945998281949174)*(((((-0.0934581434992053)*(IKsin(j[0]))))+(((0.52353919050829)*(IKcos(j[0]))))))*(IKcos(j[2]))))+(((-0.945998281949174)*(((((0.0115334342172636)*(IKsin(j[0]))))+(((-0.0646086535405889)*(IKcos(j[0]))))))*(IKsin(j[2]))))+(((-0.945998281949174)*(((((0.531815483588428)*(((((0.946191894238107)*(IKsin(j[0]))))+(((0.168906816209186)*(IKcos(j[0]))))))*(IKsin(j[1]))))+(((0.531815483588428)*(((((0.271732233620001)*(IKsin(j[0]))))+(((0.0485075244479057)*(IKcos(j[0]))))))*(IKcos(j[1]))))))*(IKsin(j[2]))))+(((-0.945998281949174)*(((((-0.0656300100348293)*(((((-0.271732233620001)*(IKsin(j[0]))))+(((-0.0485075244479057)*(IKcos(j[0]))))))*(IKcos(j[1]))))+(((-0.0656300100348293)*(((((-0.168906816209186)*(IKcos(j[0]))))+(((-0.946191894238107)*(IKsin(j[0]))))))*(IKsin(j[1]))))))*(IKcos(j[2]))))+(((-0.945998281949174)*(((((0.798882425671523)*(IKsin(j[0]))))+(((0.142610275851393)*(IKcos(j[0]))))))*(IKcos(j[1]))))))*(IKcos(j[3]))))+(((((((0.0397067222902749)*(((((0.946191894238107)*(IKsin(j[0]))))+(((0.168906816209186)*(IKcos(j[0]))))))*(IKsin(j[1]))))+(((0.0397067222902749)*(((((0.271732233620001)*(IKsin(j[0]))))+(((0.0485075244479057)*(IKcos(j[0]))))))*(IKcos(j[1]))))))*(IKsin(j[2]))))+(((((((-0.945998281949174)*(((((0.145607662687148)*(IKsin(j[0]))))+(((0.0259927472111257)*(IKcos(j[0]))))))*(IKsin(j[1]))))+(((-0.945998281949174)*(((((0.837955424564001)*(((((0.271732233620001)*(IKsin(j[0]))))+(((0.0485075244479057)*(IKcos(j[0]))))))*(IKcos(j[1]))))+(((0.837955424564001)*(((((0.946191894238107)*(IKsin(j[0]))))+(((0.168906816209186)*(IKcos(j[0]))))))*(IKsin(j[1]))))))*(IKsin(j[2]))))+(((-0.945998281949174)*(((((-0.101810558420961)*(IKcos(j[0]))))+(((0.0181744288701722)*(IKsin(j[0]))))))*(IKsin(j[2]))))+(((-0.945998281949174)*(((((-0.0905086834657259)*(IKcos(j[0]))))+(((-0.507016736064526)*(IKsin(j[0]))))))*(IKcos(j[1]))))+(((-0.945998281949174)*(((((-0.103420015812922)*(((((-0.271732233620001)*(IKsin(j[0]))))+(((-0.0485075244479057)*(IKcos(j[0]))))))*(IKcos(j[1]))))+(((-0.103420015812922)*(((((-0.168906816209186)*(IKcos(j[0]))))+(((-0.946191894238107)*(IKsin(j[0]))))))*(IKsin(j[1]))))))*(IKcos(j[2]))))+(((-0.945998281949174)*(((((0.824914877803331)*(IKcos(j[0]))))+(((-0.147257386690619)*(IKsin(j[0]))))))*(IKcos(j[2]))))))*(IKsin(j[3]))))+(((((((-2.92543908095302e-7)*(IKcos(j[0]))))+(((-1.63878924936753e-6)*(IKsin(j[0]))))))*(IKcos(j[1]))))+(((((((0.321730674246603)*(((((-0.168906816209186)*(IKcos(j[0]))))+(((-0.946191894238107)*(IKsin(j[0]))))))*(IKsin(j[1]))))+(((0.321730674246603)*(((((-0.271732233620001)*(IKsin(j[0]))))+(((-0.0485075244479057)*(IKcos(j[0]))))))*(IKcos(j[1]))))))*(IKcos(j[2]))))+(((((((0.31672379228264)*(IKcos(j[0]))))+(((-0.0565390674956448)*(IKsin(j[0]))))))*(IKsin(j[2]))))+(((((((4.70635888845422e-7)*(IKsin(j[0]))))+(((8.40142576392187e-8)*(IKcos(j[0]))))))*(IKsin(j[1]))))))*(IKsin(j[4]))))+(((-0.00413000607730841)*(((((((((0.924263966079929)*(IKcos(j[0]))))+(((-0.164992413059238)*(IKsin(j[0]))))))*(IKsin(j[2]))))+(((((((0.115872231636118)*(((((0.271732233620001)*(IKsin(j[0]))))+(((0.0485075244479057)*(IKcos(j[0]))))))*(IKcos(j[1]))))+(((0.115872231636118)*(((((0.946191894238107)*(IKsin(j[0]))))+(((0.168906816209186)*(IKcos(j[0]))))))*(IKsin(j[1]))))))*(IKsin(j[2]))))+(((((((0.938875058440104)*(((((-0.168906816209186)*(IKcos(j[0]))))+(((-0.946191894238107)*(IKsin(j[0]))))))*(IKsin(j[1]))))+(((0.938875058440104)*(((((-0.271732233620001)*(IKsin(j[0]))))+(((-0.0485075244479057)*(IKcos(j[0]))))))*(IKcos(j[1]))))))*(IKcos(j[2]))))+(((((((0.114068988634618)*(IKcos(j[0]))))+(((-0.020362708469395)*(IKsin(j[0]))))))*(IKcos(j[2]))))+(((((((0.324171637484235)*(((((-0.0409555493238159)*(IKcos(j[0]))))+(((-0.22942714606775)*(IKsin(j[0]))))))*(IKsin(j[1]))))+(((0.324171637484235)*(((((0.798882425671523)*(IKsin(j[0]))))+(((0.142610275851393)*(IKcos(j[0]))))))*(IKcos(j[1]))))+(((0.324171637484235)*(((((-0.0656300100348293)*(((((-0.271732233620001)*(IKsin(j[0]))))+(((-0.0485075244479057)*(IKcos(j[0]))))))*(IKcos(j[1]))))+(((-0.0656300100348293)*(((((-0.168906816209186)*(IKcos(j[0]))))+(((-0.946191894238107)*(IKsin(j[0]))))))*(IKsin(j[1]))))))*(IKcos(j[2]))))+(((0.324171637484235)*(((((0.531815483588428)*(((((0.946191894238107)*(IKsin(j[0]))))+(((0.168906816209186)*(IKcos(j[0]))))))*(IKsin(j[1]))))+(((0.531815483588428)*(((((0.271732233620001)*(IKsin(j[0]))))+(((0.0485075244479057)*(IKcos(j[0]))))))*(IKcos(j[1]))))))*(IKsin(j[2]))))+(((0.324171637484235)*(((((0.0115334342172636)*(IKsin(j[0]))))+(((-0.0646086535405889)*(IKcos(j[0]))))))*(IKsin(j[2]))))+(((0.324171637484235)*(((((-0.0934581434992053)*(IKsin(j[0]))))+(((0.52353919050829)*(IKcos(j[0]))))))*(IKcos(j[2]))))))*(IKcos(j[3]))))+(((((((0.324171637484235)*(((((0.824914877803331)*(IKcos(j[0]))))+(((-0.147257386690619)*(IKsin(j[0]))))))*(IKcos(j[2]))))+(((0.324171637484235)*(((((-0.0905086834657259)*(IKcos(j[0]))))+(((-0.507016736064526)*(IKsin(j[0]))))))*(IKcos(j[1]))))+(((0.324171637484235)*(((((0.837955424564001)*(((((0.271732233620001)*(IKsin(j[0]))))+(((0.0485075244479057)*(IKcos(j[0]))))))*(IKcos(j[1]))))+(((0.837955424564001)*(((((0.946191894238107)*(IKsin(j[0]))))+(((0.168906816209186)*(IKcos(j[0]))))))*(IKsin(j[1]))))))*(IKsin(j[2]))))+(((0.324171637484235)*(((((-0.101810558420961)*(IKcos(j[0]))))+(((0.0181744288701722)*(IKsin(j[0]))))))*(IKsin(j[2]))))+(((0.324171637484235)*(((((0.145607662687148)*(IKsin(j[0]))))+(((0.0259927472111257)*(IKcos(j[0]))))))*(IKsin(j[1]))))+(((0.324171637484235)*(((((-0.103420015812922)*(((((-0.271732233620001)*(IKsin(j[0]))))+(((-0.0485075244479057)*(IKcos(j[0]))))))*(IKcos(j[1]))))+(((-0.103420015812922)*(((((-0.168906816209186)*(IKcos(j[0]))))+(((-0.946191894238107)*(IKsin(j[0]))))))*(IKsin(j[1]))))))*(IKcos(j[2]))))))*(IKsin(j[3]))))+(((((((1.37341053562418e-6)*(IKsin(j[0]))))+(((2.45170564589572e-7)*(IKcos(j[0]))))))*(IKsin(j[1]))))+(((((((-8.53702182586258e-7)*(IKcos(j[0]))))+(((-4.78231786842813e-6)*(IKsin(j[0]))))))*(IKcos(j[1]))))))*(IKcos(j[4]))))))*(IKcos(j[6]))))+(((((((-0.999991471488533)*(((((-1.0)*(((((0.31672379228264)*(IKcos(j[0]))))+(((-0.0565390674956448)*(IKsin(j[0]))))))*(IKsin(j[2]))))+(((-1.0)*(((((-0.945998281949174)*(((((0.145607662687148)*(IKsin(j[0]))))+(((0.0259927472111257)*(IKcos(j[0]))))))*(IKsin(j[1]))))+(((-0.945998281949174)*(((((0.837955424564001)*(((((0.271732233620001)*(IKsin(j[0]))))+(((0.0485075244479057)*(IKcos(j[0]))))))*(IKcos(j[1]))))+(((0.837955424564001)*(((((0.946191894238107)*(IKsin(j[0]))))+(((0.168906816209186)*(IKcos(j[0]))))))*(IKsin(j[1]))))))*(IKsin(j[2]))))+(((-0.945998281949174)*(((((-0.101810558420961)*(IKcos(j[0]))))+(((0.0181744288701722)*(IKsin(j[0]))))))*(IKsin(j[2]))))+(((-0.945998281949174)*(((((-0.0905086834657259)*(IKcos(j[0]))))+(((-0.507016736064526)*(IKsin(j[0]))))))*(IKcos(j[1]))))+(((-0.945998281949174)*(((((-0.103420015812922)*(((((-0.271732233620001)*(IKsin(j[0]))))+(((-0.0485075244479057)*(IKcos(j[0]))))))*(IKcos(j[1]))))+(((-0.103420015812922)*(((((-0.168906816209186)*(IKcos(j[0]))))+(((-0.946191894238107)*(IKsin(j[0]))))))*(IKsin(j[1]))))))*(IKcos(j[2]))))+(((-0.945998281949174)*(((((0.824914877803331)*(IKcos(j[0]))))+(((-0.147257386690619)*(IKsin(j[0]))))))*(IKcos(j[2]))))))*(IKsin(j[3]))))+(((-1.0)*(((((-0.0069778272054965)*(IKsin(j[0]))))+(((0.039088792799564)*(IKcos(j[0]))))))*(IKcos(j[2]))))+(((-1.0)*(((((-2.92543908095302e-7)*(IKcos(j[0]))))+(((-1.63878924936753e-6)*(IKsin(j[0]))))))*(IKcos(j[1]))))+(((-1.0)*(((((0.0397067222902749)*(((((0.946191894238107)*(IKsin(j[0]))))+(((0.168906816209186)*(IKcos(j[0]))))))*(IKsin(j[1]))))+(((0.0397067222902749)*(((((0.271732233620001)*(IKsin(j[0]))))+(((0.0485075244479057)*(IKcos(j[0]))))))*(IKcos(j[1]))))))*(IKsin(j[2]))))+(((-1.0)*(((((0.321730674246603)*(((((-0.168906816209186)*(IKcos(j[0]))))+(((-0.946191894238107)*(IKsin(j[0]))))))*(IKsin(j[1]))))+(((0.321730674246603)*(((((-0.271732233620001)*(IKsin(j[0]))))+(((-0.0485075244479057)*(IKcos(j[0]))))))*(IKcos(j[1]))))))*(IKcos(j[2]))))+(((-1.0)*(((((4.70635888845422e-7)*(IKsin(j[0]))))+(((8.40142576392187e-8)*(IKcos(j[0]))))))*(IKsin(j[1]))))+(((-1.0)*(((((-0.945998281949174)*(((((-0.0409555493238159)*(IKcos(j[0]))))+(((-0.22942714606775)*(IKsin(j[0]))))))*(IKsin(j[1]))))+(((-0.945998281949174)*(((((-0.0934581434992053)*(IKsin(j[0]))))+(((0.52353919050829)*(IKcos(j[0]))))))*(IKcos(j[2]))))+(((-0.945998281949174)*(((((0.0115334342172636)*(IKsin(j[0]))))+(((-0.0646086535405889)*(IKcos(j[0]))))))*(IKsin(j[2]))))+(((-0.945998281949174)*(((((0.531815483588428)*(((((0.946191894238107)*(IKsin(j[0]))))+(((0.168906816209186)*(IKcos(j[0]))))))*(IKsin(j[1]))))+(((0.531815483588428)*(((((0.271732233620001)*(IKsin(j[0]))))+(((0.0485075244479057)*(IKcos(j[0]))))))*(IKcos(j[1]))))))*(IKsin(j[2]))))+(((-0.945998281949174)*(((((-0.0656300100348293)*(((((-0.271732233620001)*(IKsin(j[0]))))+(((-0.0485075244479057)*(IKcos(j[0]))))))*(IKcos(j[1]))))+(((-0.0656300100348293)*(((((-0.168906816209186)*(IKcos(j[0]))))+(((-0.946191894238107)*(IKsin(j[0]))))))*(IKsin(j[1]))))))*(IKcos(j[2]))))+(((-0.945998281949174)*(((((0.798882425671523)*(IKsin(j[0]))))+(((0.142610275851393)*(IKcos(j[0]))))))*(IKcos(j[1]))))))*(IKcos(j[3]))))))*(IKsin(j[4]))))+(((-0.999991471488533)*(((((-1.0)*(((((0.324171637484235)*(((((-0.0409555493238159)*(IKcos(j[0]))))+(((-0.22942714606775)*(IKsin(j[0]))))))*(IKsin(j[1]))))+(((0.324171637484235)*(((((0.798882425671523)*(IKsin(j[0]))))+(((0.142610275851393)*(IKcos(j[0]))))))*(IKcos(j[1]))))+(((0.324171637484235)*(((((-0.0656300100348293)*(((((-0.271732233620001)*(IKsin(j[0]))))+(((-0.0485075244479057)*(IKcos(j[0]))))))*(IKcos(j[1]))))+(((-0.0656300100348293)*(((((-0.168906816209186)*(IKcos(j[0]))))+(((-0.946191894238107)*(IKsin(j[0]))))))*(IKsin(j[1]))))))*(IKcos(j[2]))))+(((0.324171637484235)*(((((0.531815483588428)*(((((0.946191894238107)*(IKsin(j[0]))))+(((0.168906816209186)*(IKcos(j[0]))))))*(IKsin(j[1]))))+(((0.531815483588428)*(((((0.271732233620001)*(IKsin(j[0]))))+(((0.0485075244479057)*(IKcos(j[0]))))))*(IKcos(j[1]))))))*(IKsin(j[2]))))+(((0.324171637484235)*(((((0.0115334342172636)*(IKsin(j[0]))))+(((-0.0646086535405889)*(IKcos(j[0]))))))*(IKsin(j[2]))))+(((0.324171637484235)*(((((-0.0934581434992053)*(IKsin(j[0]))))+(((0.52353919050829)*(IKcos(j[0]))))))*(IKcos(j[2]))))))*(IKcos(j[3]))))+(((-1.0)*(((((0.938875058440104)*(((((-0.168906816209186)*(IKcos(j[0]))))+(((-0.946191894238107)*(IKsin(j[0]))))))*(IKsin(j[1]))))+(((0.938875058440104)*(((((-0.271732233620001)*(IKsin(j[0]))))+(((-0.0485075244479057)*(IKcos(j[0]))))))*(IKcos(j[1]))))))*(IKcos(j[2]))))+(((-1.0)*(((((0.324171637484235)*(((((0.824914877803331)*(IKcos(j[0]))))+(((-0.147257386690619)*(IKsin(j[0]))))))*(IKcos(j[2]))))+(((0.324171637484235)*(((((-0.0905086834657259)*(IKcos(j[0]))))+(((-0.507016736064526)*(IKsin(j[0]))))))*(IKcos(j[1]))))+(((0.324171637484235)*(((((0.837955424564001)*(((((0.271732233620001)*(IKsin(j[0]))))+(((0.0485075244479057)*(IKcos(j[0]))))))*(IKcos(j[1]))))+(((0.837955424564001)*(((((0.946191894238107)*(IKsin(j[0]))))+(((0.168906816209186)*(IKcos(j[0]))))))*(IKsin(j[1]))))))*(IKsin(j[2]))))+(((0.324171637484235)*(((((-0.101810558420961)*(IKcos(j[0]))))+(((0.0181744288701722)*(IKsin(j[0]))))))*(IKsin(j[2]))))+(((0.324171637484235)*(((((0.145607662687148)*(IKsin(j[0]))))+(((0.0259927472111257)*(IKcos(j[0]))))))*(IKsin(j[1]))))+(((0.324171637484235)*(((((-0.103420015812922)*(((((-0.271732233620001)*(IKsin(j[0]))))+(((-0.0485075244479057)*(IKcos(j[0]))))))*(IKcos(j[1]))))+(((-0.103420015812922)*(((((-0.168906816209186)*(IKcos(j[0]))))+(((-0.946191894238107)*(IKsin(j[0]))))))*(IKsin(j[1]))))))*(IKcos(j[2]))))))*(IKsin(j[3]))))+(((-1.0)*(((((1.37341053562418e-6)*(IKsin(j[0]))))+(((2.45170564589572e-7)*(IKcos(j[0]))))))*(IKsin(j[1]))))+(((-1.0)*(((((-8.53702182586258e-7)*(IKcos(j[0]))))+(((-4.78231786842813e-6)*(IKsin(j[0]))))))*(IKcos(j[1]))))+(((-1.0)*(((((0.114068988634618)*(IKcos(j[0]))))+(((-0.020362708469395)*(IKsin(j[0]))))))*(IKcos(j[2]))))+(((-1.0)*(((((0.115872231636118)*(((((0.271732233620001)*(IKsin(j[0]))))+(((0.0485075244479057)*(IKcos(j[0]))))))*(IKcos(j[1]))))+(((0.115872231636118)*(((((0.946191894238107)*(IKsin(j[0]))))+(((0.168906816209186)*(IKcos(j[0]))))))*(IKsin(j[1]))))))*(IKsin(j[2]))))+(((-1.0)*(((((0.924263966079929)*(IKcos(j[0]))))+(((-0.164992413059238)*(IKsin(j[0]))))))*(IKsin(j[2]))))))*(IKcos(j[4]))))))*(IKsin(j[6])))));
eetrans[2]=((((((((0.0437624762245011)*(IKsin(j[0]))))+(((0.00781213681233521)*(IKcos(j[0]))))))*(IKsin(j[1]))))+(((((((((((-0.00334469592300644)*(IKsin(j[0]))))+(((0.0187365095267708)*(IKcos(j[0]))))))*(IKsin(j[2]))))+(((((((-0.154226490240644)*(((((0.271732233620001)*(IKsin(j[0]))))+(((0.0485075244479057)*(IKcos(j[0]))))))*(IKcos(j[1]))))+(((-0.154226490240644)*(((((0.946191894238107)*(IKsin(j[0]))))+(((0.168906816209186)*(IKcos(j[0]))))))*(IKsin(j[1]))))))*(IKsin(j[2]))))+(((((((0.0665338723596475)*(IKsin(j[0]))))+(((0.0118771093039066)*(IKcos(j[0]))))))*(IKsin(j[1]))))+(((((((0.0271028616147695)*(IKsin(j[0]))))+(((-0.151826365247404)*(IKcos(j[0]))))))*(IKcos(j[2]))))+(((((((-0.231675903444742)*(IKsin(j[0]))))+(((-0.0413569799969041)*(IKcos(j[0]))))))*(IKcos(j[1]))))+(((((((0.0190327029101005)*(((((-0.168906816209186)*(IKcos(j[0]))))+(((-0.946191894238107)*(IKsin(j[0]))))))*(IKsin(j[1]))))+(((0.0190327029101005)*(((((-0.271732233620001)*(IKsin(j[0]))))+(((-0.0485075244479057)*(IKcos(j[0]))))))*(IKcos(j[1]))))))*(IKcos(j[2]))))))*(IKsin(j[3]))))+(((((((((((0.000525040080278634)*(((((-0.168906816209186)*(IKcos(j[0]))))+(((-0.946191894238107)*(IKsin(j[0]))))))*(IKsin(j[1]))))+(((0.000525040080278634)*(((((-0.271732233620001)*(IKsin(j[0]))))+(((-0.0485075244479057)*(IKcos(j[0]))))))*(IKcos(j[1]))))))*(IKcos(j[2]))))+(((((((0.001835417168542)*(IKsin(j[0]))))+(((0.000327644394590527)*(IKcos(j[0]))))))*(IKsin(j[1]))))+(((((((-0.00425452386870742)*(((((0.271732233620001)*(IKsin(j[0]))))+(((0.0485075244479057)*(IKcos(j[0]))))))*(IKcos(j[1]))))+(((-0.00425452386870742)*(((((0.946191894238107)*(IKsin(j[0]))))+(((0.168906816209186)*(IKcos(j[0]))))))*(IKsin(j[1]))))))*(IKsin(j[2]))))+(((((((-0.00114088220681115)*(IKcos(j[0]))))+(((-0.00639105940537218)*(IKsin(j[0]))))))*(IKcos(j[1]))))+(((((((-9.22674737381088e-5)*(IKsin(j[0]))))+(((0.000516869228324711)*(IKcos(j[0]))))))*(IKsin(j[2]))))+(((((((0.000747665147993643)*(IKsin(j[0]))))+(((-0.00418831352406632)*(IKcos(j[0]))))))*(IKcos(j[2]))))))*(IKcos(j[3]))))+(((((((-0.000146984070284826)*(((((0.271732233620001)*(IKsin(j[0]))))+(((0.0485075244479057)*(IKcos(j[0]))))))*(IKcos(j[1]))))+(((-0.000146984070284826)*(((((0.946191894238107)*(IKsin(j[0]))))+(((0.168906816209186)*(IKcos(j[0]))))))*(IKsin(j[1]))))))*(IKsin(j[2]))))+(((((((-0.0272024427504895)*(IKcos(j[0]))))+(((-0.152384204567047)*(IKsin(j[0]))))))*(IKcos(j[1]))))+(((((((((((0.00405613388851621)*(IKsin(j[0]))))+(((0.000724069467725807)*(IKcos(j[0]))))))*(IKcos(j[1]))))+(((((((-0.000145395430961378)*(IKsin(j[0]))))+(((0.000814484467367692)*(IKcos(j[0]))))))*(IKsin(j[2]))))+(((((((-0.00670364339651201)*(((((0.946191894238107)*(IKsin(j[0]))))+(((0.168906816209186)*(IKcos(j[0]))))))*(IKsin(j[1]))))+(((-0.00670364339651201)*(((((0.271732233620001)*(IKsin(j[0]))))+(((0.0485075244479057)*(IKcos(j[0]))))))*(IKcos(j[1]))))))*(IKsin(j[2]))))+(((((((-0.000207941977689006)*(IKcos(j[0]))))+(((-0.00116486130149719)*(IKsin(j[0]))))))*(IKsin(j[1]))))+(((((((0.000827360126503373)*(((((-0.168906816209186)*(IKcos(j[0]))))+(((-0.946191894238107)*(IKsin(j[0]))))))*(IKsin(j[1]))))+(((0.000827360126503373)*(((((-0.271732233620001)*(IKsin(j[0]))))+(((-0.0485075244479057)*(IKcos(j[0]))))))*(IKcos(j[1]))))))*(IKcos(j[2]))))+(((((((0.00117805909352496)*(IKsin(j[0]))))+(((-0.00659931902242665)*(IKcos(j[0]))))))*(IKcos(j[2]))))))*(IKsin(j[3]))))+(((((((0.000209293081656699)*(IKsin(j[0]))))+(((-0.00117242999322435)*(IKcos(j[0]))))))*(IKsin(j[2]))))+(((((((((((0.24300707312356)*(((((0.271732233620001)*(IKsin(j[0]))))+(((0.0485075244479057)*(IKcos(j[0]))))))*(IKcos(j[1]))))+(((0.24300707312356)*(((((0.946191894238107)*(IKsin(j[0]))))+(((0.168906816209186)*(IKcos(j[0]))))))*(IKsin(j[1]))))))*(IKsin(j[2]))))+(((((((-0.0299918045857473)*(((((-0.168906816209186)*(IKcos(j[0]))))+(((-0.946191894238107)*(IKsin(j[0]))))))*(IKsin(j[1]))))+(((-0.0299918045857473)*(((((-0.271732233620001)*(IKsin(j[0]))))+(((-0.0485075244479057)*(IKcos(j[0]))))))*(IKcos(j[1]))))))*(IKcos(j[2]))))+(((((((-0.147034853458712)*(IKsin(j[0]))))+(((-0.0262475182050605)*(IKcos(j[0]))))))*(IKcos(j[1]))))+(((((((0.00753789669122646)*(IKcos(j[0]))))+(((0.042226222179273)*(IKsin(j[0]))))))*(IKsin(j[1]))))+(((((((0.239225314562966)*(IKcos(j[0]))))+(((-0.0427046421402796)*(IKsin(j[0]))))))*(IKcos(j[2]))))+(((((((-0.0295250619420788)*(IKcos(j[0]))))+(((0.00527058437234994)*(IKsin(j[0]))))))*(IKsin(j[2]))))))*(IKcos(j[3]))))+(((((((-3.10999166828607e-10)*(IKcos(j[0]))))+(((-1.74217297662869e-9)*(IKsin(j[0]))))))*(IKsin(j[1]))))+(((-0.0078755)*(IKsin(j[0]))))+(((((((-0.133365737158539)*(IKsin(j[0]))))+(((-0.0238074138998821)*(IKcos(j[0]))))))*(IKcos(j[1]))))+(((((((2.58301210790009e-5)*(IKsin(j[0]))))+(((-0.000144696654289374)*(IKcos(j[0]))))))*(IKcos(j[2]))))+(((((((0.0383007088044757)*(IKsin(j[0]))))+(((0.00683714458146813)*(IKcos(j[0]))))))*(IKsin(j[1]))))+(((((((1.08292228289538e-9)*(IKcos(j[0]))))+(((6.06637617807226e-9)*(IKsin(j[0]))))))*(IKcos(j[1]))))+(((-0.00140587)*(IKcos(j[0]))))+(((((((-0.00119096418209844)*(((((-0.168906816209186)*(IKcos(j[0]))))+(((-0.946191894238107)*(IKsin(j[0]))))))*(IKsin(j[1]))))+(((-0.00119096418209844)*(((((-0.271732233620001)*(IKsin(j[0]))))+(((-0.0485075244479057)*(IKcos(j[0]))))))*(IKcos(j[1]))))))*(IKcos(j[2])))));
}

IKFAST_API int GetNumFreeParameters() { return 1; }
IKFAST_API int* GetFreeParameters() { static int freeparams[] = {4}; return freeparams; }
IKFAST_API int GetNumJoints() { return 7; }

IKFAST_API int GetIkRealSize() { return sizeof(IkReal); }

IKFAST_API int GetIkType() { return 0x67000001; }

class IKSolver {
public:
IkReal j2,cj2,sj2,htj2,j2mul,j3,cj3,sj3,htj3,j3mul,j4,cj4,sj4,htj4,j4mul,j5,cj5,sj5,htj5,j5mul,j7,cj7,sj7,htj7,j7mul,j8,cj8,sj8,htj8,j8mul,j6,cj6,sj6,htj6,new_r00,r00,rxp0_0,new_r01,r01,rxp0_1,new_r02,r02,rxp0_2,new_r10,r10,rxp1_0,new_r11,r11,rxp1_1,new_r12,r12,rxp1_2,new_r20,r20,rxp2_0,new_r21,r21,rxp2_1,new_r22,r22,rxp2_2,new_px,px,npx,new_py,py,npy,new_pz,pz,npz,pp;
unsigned char _ij2[2], _nj2,_ij3[2], _nj3,_ij4[2], _nj4,_ij5[2], _nj5,_ij7[2], _nj7,_ij8[2], _nj8,_ij6[2], _nj6;

IkReal j100, cj100, sj100;
unsigned char _ij100[2], _nj100;
bool ComputeIk(const IkReal* eetrans, const IkReal* eerot, const IkReal* pfree, IkSolutionListBase<IkReal>& solutions) {
j2=numeric_limits<IkReal>::quiet_NaN(); _ij2[0] = -1; _ij2[1] = -1; _nj2 = -1; j3=numeric_limits<IkReal>::quiet_NaN(); _ij3[0] = -1; _ij3[1] = -1; _nj3 = -1; j4=numeric_limits<IkReal>::quiet_NaN(); _ij4[0] = -1; _ij4[1] = -1; _nj4 = -1; j5=numeric_limits<IkReal>::quiet_NaN(); _ij5[0] = -1; _ij5[1] = -1; _nj5 = -1; j7=numeric_limits<IkReal>::quiet_NaN(); _ij7[0] = -1; _ij7[1] = -1; _nj7 = -1; j8=numeric_limits<IkReal>::quiet_NaN(); _ij8[0] = -1; _ij8[1] = -1; _nj8 = -1;  _ij6[0] = -1; _ij6[1] = -1; _nj6 = 0; 
for(int dummyiter = 0; dummyiter < 1; ++dummyiter) {
    solutions.Clear();
j6=pfree[0]; cj6=cos(pfree[0]); sj6=sin(pfree[0]), htj6=tan(pfree[0]*0.5);
r00 = eerot[0*3+0];
r01 = eerot[0*3+1];
r02 = eerot[0*3+2];
r10 = eerot[1*3+0];
r11 = eerot[1*3+1];
r12 = eerot[1*3+2];
r20 = eerot[2*3+0];
r21 = eerot[2*3+1];
r22 = eerot[2*3+2];
px = eetrans[0]; py = eetrans[1]; pz = eetrans[2];

new_r00=((((-0.00413000607730841)*r22))+(((0.999991471488533)*r20)));
new_r01=((((-0.999991471488533)*r22))+(((-0.00413000607730841)*r20)));
new_r02=((-1.0)*r21);
new_px=((-1.0)*pz);
new_r10=((((-0.999991471488533)*r10))+(((0.00413000607730841)*r12)));
new_r11=((((0.999991471488533)*r12))+(((0.00413000607730841)*r10)));
new_r12=r11;
new_py=((-0.39)+py);
new_r20=((((0.00413000607730841)*r02))+(((-0.999991471488533)*r00)));
new_r21=((((0.00413000607730841)*r00))+(((0.999991471488533)*r02)));
new_r22=r01;
new_pz=((-0.246)+px);
r00 = new_r00; r01 = new_r01; r02 = new_r02; r10 = new_r10; r11 = new_r11; r12 = new_r12; r20 = new_r20; r21 = new_r21; r22 = new_r22; px = new_px; py = new_py; pz = new_pz;
IkReal x15=((1.0)*px);
IkReal x16=((1.0)*pz);
IkReal x17=((1.0)*py);
pp=((px*px)+(py*py)+(pz*pz));
npx=(((px*r00))+((py*r10))+((pz*r20)));
npy=(((px*r01))+((py*r11))+((pz*r21)));
npz=(((px*r02))+((py*r12))+((pz*r22)));
rxp0_0=((((-1.0)*r20*x17))+((pz*r10)));
rxp0_1=(((px*r20))+(((-1.0)*r00*x16)));
rxp0_2=(((py*r00))+(((-1.0)*r10*x15)));
rxp1_0=((((-1.0)*r21*x17))+((pz*r11)));
rxp1_1=(((px*r21))+(((-1.0)*r01*x16)));
rxp1_2=((((-1.0)*r11*x15))+((py*r01)));
rxp2_0=((((-1.0)*r22*x17))+((pz*r12)));
rxp2_1=(((px*r22))+(((-1.0)*r02*x16)));
rxp2_2=(((py*r02))+(((-1.0)*r12*x15)));
{
IkReal j2eval[3];
IkReal x18=npx*npx;
IkReal x19=npy*npy;
j2eval[0]=r22;
j2eval[1]=((((-1.0)*x19*(r20*r20)))+x19+x18+(((-1.0)*x18*(r21*r21)))+(((2.0)*npx*npy*r20*r21)));
j2eval[2]=IKsign(r22);
if( IKabs(j2eval[0]) < 0.0000010000000000  || IKabs(j2eval[1]) < 0.0000010000000000  || IKabs(j2eval[2]) < 0.0000010000000000  )
{
{
IkReal j2eval[3];
IkReal x20=npy*npy;
IkReal x21=npz*npz;
j2eval[0]=r20;
j2eval[1]=IKsign(r20);
j2eval[2]=((((2.0)*npy*npz*r21*r22))+x20+x21+(((-1.0)*x21*(r21*r21)))+(((-1.0)*x20*(r22*r22))));
if( IKabs(j2eval[0]) < 0.0000010000000000  || IKabs(j2eval[1]) < 0.0000010000000000  || IKabs(j2eval[2]) < 0.0000010000000000  )
{
{
IkReal j2eval[3];
IkReal x22=npx*npx;
IkReal x23=npz*npz;
j2eval[0]=r21;
j2eval[1]=((((-1.0)*x22*(r22*r22)))+(((2.0)*npx*npz*r20*r22))+x22+x23+(((-1.0)*x23*(r20*r20))));
j2eval[2]=IKsign(r21);
if( IKabs(j2eval[0]) < 0.0000010000000000  || IKabs(j2eval[1]) < 0.0000010000000000  || IKabs(j2eval[2]) < 0.0000010000000000  )
{
{
IkReal evalcond[1];
bool bgotonextstatement = true;
do
{
evalcond[0]=IKabs(r21);
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j2eval[3];
r21=0;
npy=(((px*r01))+((py*r11)));
rxp1_0=(pz*r11);
rxp1_1=((-1.0)*pz*r01);
IkReal x24=(npx*px);
IkReal x25=(npx*py);
IkReal x26=(pp*r10);
IkReal x27=(pp*r00);
j2eval[0]=rxp0_2;
j2eval[1]=IKsign(rxp0_2);
j2eval[2]=((IKabs(((((5.04031769302191e-7)*r10))+(((-8.99756388177095e-8)*r00))+(((0.0078755)*x26))+(((-0.00140587)*x27))+(((-0.015751)*x25))+(((0.00281174)*x24)))))+(IKabs(((((5.04031769302191e-7)*r00))+(((8.99756388177095e-8)*r10))+(((0.00140587)*x26))+(((-0.00281174)*x25))+(((0.0078755)*x27))+(((-0.015751)*x24))))));
if( IKabs(j2eval[0]) < 0.0000010000000000  || IKabs(j2eval[1]) < 0.0000010000000000  || IKabs(j2eval[2]) < 0.0000010000000000  )
{
{
IkReal j2eval[3];
r21=0;
npy=(((px*r01))+((py*r11)));
rxp1_0=(pz*r11);
rxp1_1=((-1.0)*pz*r01);
IkReal x28=(npz*py);
IkReal x29=(pp*r02);
IkReal x30=(npz*px);
IkReal x31=(pp*r12);
j2eval[0]=rxp2_2;
j2eval[1]=((IKabs(((((0.00281174)*x30))+(((5.04031769302191e-7)*r12))+(((0.0078755)*x31))+(((-8.99756388177095e-8)*r02))+(((-0.00140587)*x29))+(((-0.015751)*x28)))))+(IKabs(((((0.00140587)*x31))+(((5.04031769302191e-7)*r02))+(((8.99756388177095e-8)*r12))+(((-0.015751)*x30))+(((-0.00281174)*x28))+(((0.0078755)*x29))))));
j2eval[2]=IKsign(rxp2_2);
if( IKabs(j2eval[0]) < 0.0000010000000000  || IKabs(j2eval[1]) < 0.0000010000000000  || IKabs(j2eval[2]) < 0.0000010000000000  )
{
{
IkReal j2eval[3];
r21=0;
npy=(((px*r01))+((py*r11)));
rxp1_0=(pz*r11);
rxp1_1=((-1.0)*pz*r01);
IkReal x32=((0.0078755)*r01);
IkReal x33=(px*r00);
IkReal x34=((0.00140587)*r11);
IkReal x35=(py*r00);
IkReal x36=(py*r10);
IkReal x37=((0.0078755)*r11);
IkReal x38=((0.00140587)*r01);
IkReal x39=(px*r10);
j2eval[0]=r22;
j2eval[1]=((IKabs(((((-1.0)*x36*x37))+((x34*x35))+(((-1.0)*x32*x39))+((npx*x37))+((x33*x38))+(((-1.0)*npx*x38)))))+(IKabs(((((-1.0)*x38*x39))+(((-1.0)*x32*x33))+((npx*x32))+((npx*x34))+(((-1.0)*x35*x37))+(((-1.0)*x34*x36))))));
j2eval[2]=IKsign(r22);
if( IKabs(j2eval[0]) < 0.0000010000000000  || IKabs(j2eval[1]) < 0.0000010000000000  || IKabs(j2eval[2]) < 0.0000010000000000  )
{
{
IkReal evalcond[1];
bool bgotonextstatement = true;
do
{
evalcond[0]=IKabs(r22);
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j2eval[3];
IkReal x40=((-1.0)*pz);
r21=0;
npy=(((px*r01))+((py*r11)));
rxp1_0=(pz*r11);
rxp1_1=(r01*x40);
r22=0;
npz=(((px*r02))+((py*r12)));
rxp2_0=(pz*r12);
rxp2_1=(r02*x40);
IkReal x41=(npx*px);
IkReal x42=(npx*py);
IkReal x43=(pp*r10);
IkReal x44=(pp*r00);
j2eval[0]=rxp0_2;
j2eval[1]=IKsign(rxp0_2);
j2eval[2]=((IKabs(((((-0.00281174)*x42))+(((0.0078755)*x44))+(((5.04031769302191e-7)*r00))+(((8.99756388177095e-8)*r10))+(((-0.015751)*x41))+(((0.00140587)*x43)))))+(IKabs(((((5.04031769302191e-7)*r10))+(((0.0078755)*x43))+(((-0.00140587)*x44))+(((-0.015751)*x42))+(((-8.99756388177095e-8)*r00))+(((0.00281174)*x41))))));
if( IKabs(j2eval[0]) < 0.0000010000000000  || IKabs(j2eval[1]) < 0.0000010000000000  || IKabs(j2eval[2]) < 0.0000010000000000  )
{
{
IkReal j7eval[1];
IkReal x45=((-1.0)*pz);
r21=0;
npy=(((px*r01))+((py*r11)));
rxp1_0=(pz*r11);
rxp1_1=(r01*x45);
r22=0;
npz=(((px*r02))+((py*r12)));
rxp2_0=(pz*r12);
rxp2_1=(r02*x45);
j7eval[0]=1.0;
if( IKabs(j7eval[0]) < 0.0000000100000000  )
{
continue; // no branches [j2, j7, j8]

} else
{
IkReal op[2+1], zeror[2];
int numroots;
op[0]=-1.0;
op[1]=0;
op[2]=1.0;
polyroots2(op,zeror,numroots);
IkReal j7array[2], cj7array[2], sj7array[2], tempj7array[1];
int numsolutions = 0;
for(int ij7 = 0; ij7 < numroots; ++ij7)
{
IkReal htj7 = zeror[ij7];
tempj7array[0]=((2.0)*(atan(htj7)));
for(int kj7 = 0; kj7 < 1; ++kj7)
{
j7array[numsolutions] = tempj7array[kj7];
if( j7array[numsolutions] > IKPI )
{
    j7array[numsolutions]-=IK2PI;
}
else if( j7array[numsolutions] < -IKPI )
{
    j7array[numsolutions]+=IK2PI;
}
sj7array[numsolutions] = IKsin(j7array[numsolutions]);
cj7array[numsolutions] = IKcos(j7array[numsolutions]);
numsolutions++;
}
}
bool j7valid[2]={true,true};
_nj7 = 2;
for(int ij7 = 0; ij7 < numsolutions; ++ij7)
    {
if( !j7valid[ij7] )
{
    continue;
}
    j7 = j7array[ij7]; cj7 = cj7array[ij7]; sj7 = sj7array[ij7];
htj7 = IKtan(j7/2);

_ij7[0] = ij7; _ij7[1] = -1;
for(int iij7 = ij7+1; iij7 < numsolutions; ++iij7)
{
if( j7valid[iij7] && IKabs(cj7array[ij7]-cj7array[iij7]) < IKFAST_SOLUTION_THRESH && IKabs(sj7array[ij7]-sj7array[iij7]) < IKFAST_SOLUTION_THRESH )
{
    j7valid[iij7]=false; _ij7[1] = iij7; break; 
}
}
{
IkReal j2eval[3];
IkReal x46=((-1.0)*pz);
r21=0;
npy=(((px*r01))+((py*r11)));
rxp1_0=(pz*r11);
rxp1_1=(r01*x46);
r22=0;
npz=(((px*r02))+((py*r12)));
rxp2_0=(pz*r12);
rxp2_1=(r02*x46);
IkReal x47=(npx*px);
IkReal x48=(npx*py);
IkReal x49=(pp*r10);
IkReal x50=(pp*r00);
j2eval[0]=rxp0_2;
j2eval[1]=IKsign(rxp0_2);
j2eval[2]=((IKabs(((((5.04031769302191e-7)*r10))+(((0.0078755)*x49))+(((-0.00140587)*x50))+(((-0.015751)*x48))+(((-8.99756388177095e-8)*r00))+(((0.00281174)*x47)))))+(IKabs(((((-0.00281174)*x48))+(((5.04031769302191e-7)*r00))+(((8.99756388177095e-8)*r10))+(((0.0078755)*x50))+(((-0.015751)*x47))+(((0.00140587)*x49))))));
if( IKabs(j2eval[0]) < 0.0000010000000000  || IKabs(j2eval[1]) < 0.0000010000000000  || IKabs(j2eval[2]) < 0.0000010000000000  )
{
continue; // no branches [j2, j8]

} else
{
{
IkReal j2array[1], cj2array[1], sj2array[1];
bool j2valid[1]={false};
_nj2 = 1;
IkReal x51=(npx*px);
IkReal x52=(npx*py);
IkReal x53=(pp*r00);
IkReal x54=(pp*r10);
CheckValue<IkReal> x55 = IKatan2WithCheck(IkReal(((((5.04031769302191e-7)*r10))+(((-0.00140587)*x53))+(((0.0078755)*x54))+(((-0.015751)*x52))+(((-8.99756388177095e-8)*r00))+(((0.00281174)*x51)))),IkReal(((((5.04031769302191e-7)*r00))+(((8.99756388177095e-8)*r10))+(((0.00140587)*x54))+(((-0.00281174)*x52))+(((0.0078755)*x53))+(((-0.015751)*x51)))),IKFAST_ATAN2_MAGTHRESH);
if(!x55.valid){
continue;
}
CheckValue<IkReal> x56=IKPowWithIntegerCheck(IKsign(rxp0_2),-1);
if(!x56.valid){
continue;
}
j2array[0]=((-1.5707963267949)+(x55.value)+(((-1.5707963267949)*(x56.value))));
sj2array[0]=IKsin(j2array[0]);
cj2array[0]=IKcos(j2array[0]);
if( j2array[0] > IKPI )
{
    j2array[0]-=IK2PI;
}
else if( j2array[0] < -IKPI )
{    j2array[0]+=IK2PI;
}
j2valid[0] = true;
for(int ij2 = 0; ij2 < 1; ++ij2)
{
if( !j2valid[ij2] )
{
    continue;
}
_ij2[0] = ij2; _ij2[1] = -1;
for(int iij2 = ij2+1; iij2 < 1; ++iij2)
{
if( j2valid[iij2] && IKabs(cj2array[ij2]-cj2array[iij2]) < IKFAST_SOLUTION_THRESH && IKabs(sj2array[ij2]-sj2array[iij2]) < IKFAST_SOLUTION_THRESH )
{
    j2valid[iij2]=false; _ij2[1] = iij2; break; 
}
}
j2 = j2array[ij2]; cj2 = cj2array[ij2]; sj2 = sj2array[ij2];
{
IkReal evalcond[4];
IkReal x57=IKcos(j2);
IkReal x58=IKsin(j2);
IkReal x59=((0.00140587)*x58);
IkReal x60=((0.00140587)*x57);
IkReal x61=((0.0078755)*x57);
IkReal x62=((0.0078755)*x58);
evalcond[0]=(((r10*x61))+(((-1.0)*r10*x59))+npx+(((-1.0)*r00*x60))+(((-1.0)*r00*x62)));
evalcond[1]=((-6.39999707069e-5)+(((0.00281174)*px*x57))+(((0.015751)*px*x58))+(((0.00281174)*py*x58))+(((-1.0)*pp))+(((-0.015751)*py*x57)));
evalcond[2]=(((r11*x61))+((px*r01))+(((-1.0)*r11*x59))+(((-1.0)*r01*x60))+(((-1.0)*r01*x62))+((py*r11)));
evalcond[3]=((((-1.0)*r02*x62))+(((-1.0)*r02*x60))+((px*r02))+(((-1.0)*r12*x59))+((py*r12))+((r12*x61)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j8eval[1];
IkReal x63=((-1.0)*pz);
r21=0;
npy=(((px*r01))+((py*r11)));
rxp1_0=(pz*r11);
rxp1_1=(r01*x63);
r22=0;
npz=(((px*r02))+((py*r12)));
rxp2_0=(pz*r12);
rxp2_1=(r02*x63);
IkReal x64=((0.0078755)*cj2);
IkReal x65=((0.0078755)*sj2);
IkReal x66=((0.00140587)*sj2);
IkReal x67=((0.00140587)*cj2);
j8eval[0]=((IKabs((((r11*x66))+(((-1.0)*px*r01))+(((-1.0)*r11*x64))+((r01*x67))+((r01*x65))+(((-1.0)*py*r11)))))+(IKabs(((((-1.0)*r10*x66))+((r10*x64))+npx+(((-1.0)*r00*x65))+(((-1.0)*r00*x67))))));
if( IKabs(j8eval[0]) < 0.0000010000000000  )
{
continue; // no branches [j8]

} else
{
{
IkReal j8array[2], cj8array[2], sj8array[2];
bool j8valid[2]={false};
_nj8 = 2;
IkReal x68=((0.0078755)*cj2);
IkReal x69=((0.0078755)*sj2);
IkReal x70=((0.00140587)*sj2);
IkReal x71=((0.00140587)*cj2);
CheckValue<IkReal> x73 = IKatan2WithCheck(IkReal((((r10*x68))+npx+(((-1.0)*r00*x71))+(((-1.0)*r10*x70))+(((-1.0)*r00*x69)))),IkReal((((r11*x70))+(((-1.0)*px*r01))+(((-1.0)*r11*x68))+((r01*x69))+(((-1.0)*py*r11))+((r01*x71)))),IKFAST_ATAN2_MAGTHRESH);
if(!x73.valid){
continue;
}
IkReal x72=x73.value;
j8array[0]=((-1.0)*x72);
sj8array[0]=IKsin(j8array[0]);
cj8array[0]=IKcos(j8array[0]);
j8array[1]=((3.14159265358979)+(((-1.0)*x72)));
sj8array[1]=IKsin(j8array[1]);
cj8array[1]=IKcos(j8array[1]);
if( j8array[0] > IKPI )
{
    j8array[0]-=IK2PI;
}
else if( j8array[0] < -IKPI )
{    j8array[0]+=IK2PI;
}
j8valid[0] = true;
if( j8array[1] > IKPI )
{
    j8array[1]-=IK2PI;
}
else if( j8array[1] < -IKPI )
{    j8array[1]+=IK2PI;
}
j8valid[1] = true;
for(int ij8 = 0; ij8 < 2; ++ij8)
{
if( !j8valid[ij8] )
{
    continue;
}
_ij8[0] = ij8; _ij8[1] = -1;
for(int iij8 = ij8+1; iij8 < 2; ++iij8)
{
if( j8valid[iij8] && IKabs(cj8array[ij8]-cj8array[iij8]) < IKFAST_SOLUTION_THRESH && IKabs(sj8array[ij8]-sj8array[iij8]) < IKFAST_SOLUTION_THRESH )
{
    j8valid[iij8]=false; _ij8[1] = iij8; break; 
}
}
j8 = j8array[ij8]; cj8 = cj8array[ij8]; sj8 = sj8array[ij8];
{
IkReal evalcond[1];
IkReal x74=IKcos(j8);
IkReal x75=IKcos(j8);
IkReal x76=IKcos(j8);
IkReal x77=IKcos(j8);
IkReal x78=IKcos(j8);
IkReal x79=IKcos(j8);
IkReal x80=IKcos(j8);
IkReal x81=IKcos(j8);
IkReal x82=IKcos(j8);
IkReal x83=IKcos(j8);
IkReal x84=IKcos(j8);
IkReal x85=IKcos(j8);
IkReal x86=IKcos(j8);
IkReal x87=IKcos(j8);
IkReal x88=IKcos(j8);
IkReal x89=IKcos(j8);
IkReal x90=IKcos(j8);
IkReal x91=IKcos(j8);
IkReal x92=IKcos(j8);
IkReal x93=IKcos(j8);
IkReal x94=IKcos(j8);
IkReal x95=IKcos(j8);
IkReal x96=IKcos(j8);
IkReal x97=IKcos(j8);
IkReal x98=IKcos(j8);
IkReal x99=IKcos(j8);
IkReal x100=IKcos(j8);
IkReal x101=IKcos(j8);
IkReal x102=IKcos(j8);
IkReal x103=IKcos(j8);
IkReal x104=IKcos(j8);
IkReal x105=IKcos(j8);
IkReal x106=IKcos(j8);
IkReal x107=IKcos(j8);
IkReal x108=IKcos(j8);
IkReal x109=IKcos(j8);
IkReal x110=IKcos(j8);
IkReal x111=IKcos(j8);
evalcond[0]=((0.0841)+(((-0.0001200940595862)*cj2*r00*r11*sj2*(IKcos(j8))*(IKsin(j8))))+(((-0.00281174)*npx*r11*sj2*(IKcos(j8))*(IKsin(j8))))+(((-0.015751)*px*r00*r01*sj2*(IKcos(j8))*(IKsin(j8))))+(((-1.9764704569e-6)*(r10*r10)*(x74*x74)))+(((2.0)*px*py*r01*r11*(x75*x75)))+(((pz*pz)*(r20*r20)*(x76*x76)))+(((6.202350025e-5)*(r01*r01)*(x77*x77)))+(((-6.00470297931e-5)*(cj2*cj2)*(r10*r10)*(x78*x78)))+(((0.0001200940595862)*cj2*r01*r11*sj2))+(((-2.214385837e-5)*r00*r10*(x79*x79)))+(((-0.00281174)*cj2*py*r01*r11*(x80*x80)))+(((-2.0)*px*py*r00*r10*(x81*x81)))+(((-0.00281174)*cj2*px*r00*r01*(IKcos(j8))*(IKsin(j8))))+(((0.015751)*cj2*npx*r11*(IKcos(j8))*(IKsin(j8))))+(((-6.202350025e-5)*(r01*r01)))+(((-1.0)*(px*px)*(r00*r00)*(x82*x82)))+(((-1.0)*(py*py)*(r10*r10)*(x83*x83)))+(((-0.0001200940595862)*cj2*r01*r11*sj2*(x84*x84)))+(((-0.015751)*px*sj2*(r01*r01)*(x85*x85)))+(((-6.00470297931e-5)*(cj2*cj2)*(r01*r01)*(x86*x86)))+(((6.00470297931e-5)*(cj2*cj2)*(r01*r01)))+(((-2.0)*px*py*r01*r11))+(((4.428771674e-5)*r01*r11*(cj2*cj2)))+(((0.00281174)*cj2*py*r01*r11))+(((0.00281174)*cj2*px*(r01*r01)))+(((0.015751)*npx*r00*sj2*(x87*x87)))+(((4.428771674e-5)*cj2*r00*r01*sj2*(IKcos(j8))*(IKsin(j8))))+(((-1.9764704569e-6)*(r11*r11)))+(((2.214385837e-5)*r00*r11*(IKcos(j8))*(IKsin(j8))))+(((4.428771674e-5)*r00*r10*(cj2*cj2)*(x88*x88)))+(((2.0)*npx*py*r11*(IKcos(j8))*(IKsin(j8))))+(((0.0001240470005)*r00*r01*(IKcos(j8))*(IKsin(j8))))+(((-0.00281174)*px*r01*r11*sj2*(x89*x89)))+(((6.00470297931e-5)*(cj2*cj2)*(r00*r00)*(x90*x90)))+(((-4.428771674e-5)*r00*r11*(cj2*cj2)*(IKcos(j8))*(IKsin(j8))))+(((2.214385837e-5)*cj2*sj2*(r10*r10)*(x91*x91)))+(((0.015751)*py*r01*r11*sj2))+(((0.015751)*cj2*py*r10*r11*(IKcos(j8))*(IKsin(j8))))+(((2.214385837e-5)*r01*r10*(IKcos(j8))*(IKsin(j8))))+(((6.00470297931e-5)*(cj2*cj2)*(r11*r11)*(x92*x92)))+(((-0.00281174)*cj2*px*(r01*r01)*(x93*x93)))+(((-6.202350025e-5)*(r00*r00)*(x94*x94)))+(((0.00281174)*npx*r10*sj2*(x95*x95)))+(((-2.0)*npx*pz*r20*(x96*x96)))+(((-0.00281174)*py*r10*r11*sj2*(IKcos(j8))*(IKsin(j8))))+(((-2.214385837e-5)*r01*r11))+(((-0.015751)*cj2*npx*r10*(x97*x97)))+(((px*px)*(r01*r01)*(x98*x98)))+(((2.214385837e-5)*r01*r11*(x99*x99)))+(((-4.428771674e-5)*cj2*r10*r11*sj2*(IKcos(j8))*(IKsin(j8))))+(((-0.015751)*py*r00*r11*sj2*(IKcos(j8))*(IKsin(j8))))+(((0.00281174)*cj2*npx*r00*(x100*x100)))+(((0.015751)*px*sj2*(r01*r01)))+(((-0.00281174)*cj2*py*r00*r11*(IKcos(j8))*(IKsin(j8))))+(((-1.0)*(py*py)*(r11*r11)))+(((-0.015751)*cj2*px*r01*r11))+(((0.015751)*cj2*px*r01*r10*(IKcos(j8))*(IKsin(j8))))+(((-4.428771674e-5)*r01*r10*(cj2*cj2)*(IKcos(j8))*(IKsin(j8))))+(((-0.015751)*npx*r01*sj2*(IKcos(j8))*(IKsin(j8))))+(((-0.0001200940595862)*cj2*r01*r10*sj2*(IKcos(j8))*(IKsin(j8))))+(((0.00281174)*px*r01*r11*sj2))+(((0.015751)*cj2*px*r01*r11*(x101*x101)))+(((0.0001200940595862)*r10*r11*(cj2*cj2)*(IKcos(j8))*(IKsin(j8))))+(((-0.00281174)*cj2*npx*r01*(IKcos(j8))*(IKsin(j8))))+(((0.00281174)*py*sj2*(r11*r11)))+(((-0.0001200940595862)*r00*r01*(cj2*cj2)*(IKcos(j8))*(IKsin(j8))))+(((-2.214385837e-5)*cj2*sj2*(r01*r01)))+(((-4.428771674e-5)*r01*r11*(cj2*cj2)*(x102*x102)))+(((0.0001200940595862)*cj2*r00*r10*sj2*(x103*x103)))+(((-0.015751)*py*r01*r11*sj2*(x104*x104)))+(((2.0)*npx*px*r01*(IKcos(j8))*(IKsin(j8))))+(((-2.214385837e-5)*cj2*sj2*(r00*r00)*(x105*x105)))+(((-2.214385837e-5)*cj2*sj2*(r11*r11)*(x106*x106)))+(((2.214385837e-5)*cj2*sj2*(r11*r11)))+(((2.214385837e-5)*cj2*sj2*(r01*r01)*(x107*x107)))+(((-0.00281174)*px*r01*r10*sj2*(IKcos(j8))*(IKsin(j8))))+(((0.015751)*cj2*py*(r11*r11)*(x108*x108)))+(((-0.00281174)*py*sj2*(r11*r11)*(x109*x109)))+(((3.9529409138e-6)*r10*r11*(IKcos(j8))*(IKsin(j8))))+(((-0.015751)*cj2*py*(r11*r11)))+(((1.9764704569e-6)*(r11*r11)*(x110*x110)))+(((py*py)*(r11*r11)*(x111*x111)))+(((-1.0)*(px*px)*(r01*r01)))+(((-6.00470297931e-5)*(cj2*cj2)*(r11*r11))));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

rotationfunction0(solutions);
}
}

}

}
}
}

}

}
    }

}

}

} else
{
{
IkReal j2array[1], cj2array[1], sj2array[1];
bool j2valid[1]={false};
_nj2 = 1;
IkReal x3116=(npx*px);
IkReal x3117=(npx*py);
IkReal x3118=(pp*r00);
IkReal x3119=(pp*r10);
CheckValue<IkReal> x3120 = IKatan2WithCheck(IkReal(((((-0.015751)*x3117))+(((5.04031769302191e-7)*r10))+(((0.00281174)*x3116))+(((-8.99756388177095e-8)*r00))+(((0.0078755)*x3119))+(((-0.00140587)*x3118)))),IkReal(((((-0.015751)*x3116))+(((5.04031769302191e-7)*r00))+(((8.99756388177095e-8)*r10))+(((0.00140587)*x3119))+(((0.0078755)*x3118))+(((-0.00281174)*x3117)))),IKFAST_ATAN2_MAGTHRESH);
if(!x3120.valid){
continue;
}
CheckValue<IkReal> x3121=IKPowWithIntegerCheck(IKsign(rxp0_2),-1);
if(!x3121.valid){
continue;
}
j2array[0]=((-1.5707963267949)+(x3120.value)+(((-1.5707963267949)*(x3121.value))));
sj2array[0]=IKsin(j2array[0]);
cj2array[0]=IKcos(j2array[0]);
if( j2array[0] > IKPI )
{
    j2array[0]-=IK2PI;
}
else if( j2array[0] < -IKPI )
{    j2array[0]+=IK2PI;
}
j2valid[0] = true;
for(int ij2 = 0; ij2 < 1; ++ij2)
{
if( !j2valid[ij2] )
{
    continue;
}
_ij2[0] = ij2; _ij2[1] = -1;
for(int iij2 = ij2+1; iij2 < 1; ++iij2)
{
if( j2valid[iij2] && IKabs(cj2array[ij2]-cj2array[iij2]) < IKFAST_SOLUTION_THRESH && IKabs(sj2array[ij2]-sj2array[iij2]) < IKFAST_SOLUTION_THRESH )
{
    j2valid[iij2]=false; _ij2[1] = iij2; break; 
}
}
j2 = j2array[ij2]; cj2 = cj2array[ij2]; sj2 = sj2array[ij2];
{
IkReal evalcond[4];
IkReal x3122=IKcos(j2);
IkReal x3123=IKsin(j2);
IkReal x3124=((0.00140587)*x3123);
IkReal x3125=((0.00140587)*x3122);
IkReal x3126=((0.0078755)*x3122);
IkReal x3127=((0.0078755)*x3123);
evalcond[0]=(npx+(((-1.0)*r10*x3124))+((r10*x3126))+(((-1.0)*r00*x3127))+(((-1.0)*r00*x3125)));
evalcond[1]=((-6.39999707069e-5)+(((-0.015751)*py*x3122))+(((0.00281174)*py*x3123))+(((-1.0)*pp))+(((0.00281174)*px*x3122))+(((0.015751)*px*x3123)));
evalcond[2]=(((px*r01))+(((-1.0)*r11*x3124))+((py*r11))+((r11*x3126))+(((-1.0)*r01*x3127))+(((-1.0)*r01*x3125)));
evalcond[3]=((((-1.0)*r02*x3125))+(((-1.0)*r02*x3127))+((px*r02))+(((-1.0)*r12*x3124))+((r12*x3126))+((py*r12)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j7eval[1];
IkReal x3128=((-1.0)*pz);
r21=0;
npy=(((px*r01))+((py*r11)));
rxp1_0=(pz*r11);
rxp1_1=(r01*x3128);
r22=0;
npz=(((px*r02))+((py*r12)));
rxp2_0=(pz*r12);
rxp2_1=(r02*x3128);
j7eval[0]=1.0;
if( IKabs(j7eval[0]) < 0.0000000100000000  )
{
{
IkReal j8eval[1];
IkReal x3129=((-1.0)*pz);
r21=0;
npy=(((px*r01))+((py*r11)));
rxp1_0=(pz*r11);
rxp1_1=(r01*x3129);
r22=0;
npz=(((px*r02))+((py*r12)));
rxp2_0=(pz*r12);
rxp2_1=(r02*x3129);
IkReal x3130=((0.0078755)*cj2);
IkReal x3131=((0.0078755)*sj2);
IkReal x3132=((0.00140587)*sj2);
IkReal x3133=((0.00140587)*cj2);
j8eval[0]=((IKabs((((r01*x3131))+((r01*x3133))+(((-1.0)*px*r01))+(((-1.0)*py*r11))+(((-1.0)*r11*x3130))+((r11*x3132)))))+(IKabs((npx+(((-1.0)*r10*x3132))+((r10*x3130))+(((-1.0)*r00*x3131))+(((-1.0)*r00*x3133))))));
if( IKabs(j8eval[0]) < 0.0000010000000000  )
{
continue; // no branches [j7, j8]

} else
{
{
IkReal j8array[2], cj8array[2], sj8array[2];
bool j8valid[2]={false};
_nj8 = 2;
IkReal x3134=((0.0078755)*cj2);
IkReal x3135=((0.0078755)*sj2);
IkReal x3136=((0.00140587)*sj2);
IkReal x3137=((0.00140587)*cj2);
CheckValue<IkReal> x3139 = IKatan2WithCheck(IkReal((npx+(((-1.0)*r10*x3136))+((r10*x3134))+(((-1.0)*r00*x3135))+(((-1.0)*r00*x3137)))),IkReal((((r01*x3137))+((r01*x3135))+(((-1.0)*px*r01))+(((-1.0)*py*r11))+(((-1.0)*r11*x3134))+((r11*x3136)))),IKFAST_ATAN2_MAGTHRESH);
if(!x3139.valid){
continue;
}
IkReal x3138=x3139.value;
j8array[0]=((-1.0)*x3138);
sj8array[0]=IKsin(j8array[0]);
cj8array[0]=IKcos(j8array[0]);
j8array[1]=((3.14159265358979)+(((-1.0)*x3138)));
sj8array[1]=IKsin(j8array[1]);
cj8array[1]=IKcos(j8array[1]);
if( j8array[0] > IKPI )
{
    j8array[0]-=IK2PI;
}
else if( j8array[0] < -IKPI )
{    j8array[0]+=IK2PI;
}
j8valid[0] = true;
if( j8array[1] > IKPI )
{
    j8array[1]-=IK2PI;
}
else if( j8array[1] < -IKPI )
{    j8array[1]+=IK2PI;
}
j8valid[1] = true;
for(int ij8 = 0; ij8 < 2; ++ij8)
{
if( !j8valid[ij8] )
{
    continue;
}
_ij8[0] = ij8; _ij8[1] = -1;
for(int iij8 = ij8+1; iij8 < 2; ++iij8)
{
if( j8valid[iij8] && IKabs(cj8array[ij8]-cj8array[iij8]) < IKFAST_SOLUTION_THRESH && IKabs(sj8array[ij8]-sj8array[iij8]) < IKFAST_SOLUTION_THRESH )
{
    j8valid[iij8]=false; _ij8[1] = iij8; break; 
}
}
j8 = j8array[ij8]; cj8 = cj8array[ij8]; sj8 = sj8array[ij8];
{
IkReal evalcond[1];
IkReal x3140=IKcos(j8);
IkReal x3141=IKcos(j8);
IkReal x3142=IKcos(j8);
IkReal x3143=IKcos(j8);
IkReal x3144=IKcos(j8);
IkReal x3145=IKcos(j8);
IkReal x3146=IKcos(j8);
IkReal x3147=IKcos(j8);
IkReal x3148=IKcos(j8);
IkReal x3149=IKcos(j8);
IkReal x3150=IKcos(j8);
IkReal x3151=IKcos(j8);
IkReal x3152=IKcos(j8);
IkReal x3153=IKcos(j8);
IkReal x3154=IKcos(j8);
IkReal x3155=IKcos(j8);
IkReal x3156=IKcos(j8);
IkReal x3157=IKcos(j8);
IkReal x3158=IKcos(j8);
IkReal x3159=IKcos(j8);
IkReal x3160=IKcos(j8);
IkReal x3161=IKcos(j8);
IkReal x3162=IKcos(j8);
IkReal x3163=IKcos(j8);
IkReal x3164=IKcos(j8);
IkReal x3165=IKcos(j8);
IkReal x3166=IKcos(j8);
IkReal x3167=IKcos(j8);
IkReal x3168=IKcos(j8);
IkReal x3169=IKcos(j8);
IkReal x3170=IKcos(j8);
IkReal x3171=IKcos(j8);
IkReal x3172=IKcos(j8);
IkReal x3173=IKcos(j8);
IkReal x3174=IKcos(j8);
IkReal x3175=IKcos(j8);
IkReal x3176=IKcos(j8);
IkReal x3177=IKcos(j8);
evalcond[0]=((0.0841)+(((-0.0001200940595862)*cj2*r00*r11*sj2*(IKcos(j8))*(IKsin(j8))))+(((-0.00281174)*npx*r11*sj2*(IKcos(j8))*(IKsin(j8))))+(((-0.015751)*px*r00*r01*sj2*(IKcos(j8))*(IKsin(j8))))+(((-1.9764704569e-6)*(r10*r10)*(x3140*x3140)))+(((2.0)*px*py*r01*r11*(x3141*x3141)))+(((pz*pz)*(r20*r20)*(x3142*x3142)))+(((6.202350025e-5)*(r01*r01)*(x3143*x3143)))+(((-6.00470297931e-5)*(cj2*cj2)*(r10*r10)*(x3144*x3144)))+(((0.0001200940595862)*cj2*r01*r11*sj2))+(((-2.214385837e-5)*r00*r10*(x3145*x3145)))+(((-0.00281174)*cj2*py*r01*r11*(x3146*x3146)))+(((-2.0)*px*py*r00*r10*(x3147*x3147)))+(((-0.00281174)*cj2*px*r00*r01*(IKcos(j8))*(IKsin(j8))))+(((0.015751)*cj2*npx*r11*(IKcos(j8))*(IKsin(j8))))+(((-6.202350025e-5)*(r01*r01)))+(((-1.0)*(px*px)*(r00*r00)*(x3148*x3148)))+(((-1.0)*(py*py)*(r10*r10)*(x3149*x3149)))+(((-0.0001200940595862)*cj2*r01*r11*sj2*(x3150*x3150)))+(((-0.015751)*px*sj2*(r01*r01)*(x3151*x3151)))+(((-6.00470297931e-5)*(cj2*cj2)*(r01*r01)*(x3152*x3152)))+(((6.00470297931e-5)*(cj2*cj2)*(r01*r01)))+(((-2.0)*px*py*r01*r11))+(((4.428771674e-5)*r01*r11*(cj2*cj2)))+(((0.00281174)*cj2*py*r01*r11))+(((0.00281174)*cj2*px*(r01*r01)))+(((0.015751)*npx*r00*sj2*(x3153*x3153)))+(((4.428771674e-5)*cj2*r00*r01*sj2*(IKcos(j8))*(IKsin(j8))))+(((-1.9764704569e-6)*(r11*r11)))+(((2.214385837e-5)*r00*r11*(IKcos(j8))*(IKsin(j8))))+(((4.428771674e-5)*r00*r10*(cj2*cj2)*(x3154*x3154)))+(((2.0)*npx*py*r11*(IKcos(j8))*(IKsin(j8))))+(((0.0001240470005)*r00*r01*(IKcos(j8))*(IKsin(j8))))+(((-0.00281174)*px*r01*r11*sj2*(x3155*x3155)))+(((6.00470297931e-5)*(cj2*cj2)*(r00*r00)*(x3156*x3156)))+(((-4.428771674e-5)*r00*r11*(cj2*cj2)*(IKcos(j8))*(IKsin(j8))))+(((2.214385837e-5)*cj2*sj2*(r10*r10)*(x3157*x3157)))+(((0.015751)*py*r01*r11*sj2))+(((0.015751)*cj2*py*r10*r11*(IKcos(j8))*(IKsin(j8))))+(((2.214385837e-5)*r01*r10*(IKcos(j8))*(IKsin(j8))))+(((6.00470297931e-5)*(cj2*cj2)*(r11*r11)*(x3158*x3158)))+(((-0.00281174)*cj2*px*(r01*r01)*(x3159*x3159)))+(((-6.202350025e-5)*(r00*r00)*(x3160*x3160)))+(((0.00281174)*npx*r10*sj2*(x3161*x3161)))+(((-2.0)*npx*pz*r20*(x3162*x3162)))+(((-0.00281174)*py*r10*r11*sj2*(IKcos(j8))*(IKsin(j8))))+(((-2.214385837e-5)*r01*r11))+(((-0.015751)*cj2*npx*r10*(x3163*x3163)))+(((px*px)*(r01*r01)*(x3164*x3164)))+(((2.214385837e-5)*r01*r11*(x3165*x3165)))+(((-4.428771674e-5)*cj2*r10*r11*sj2*(IKcos(j8))*(IKsin(j8))))+(((-0.015751)*py*r00*r11*sj2*(IKcos(j8))*(IKsin(j8))))+(((0.00281174)*cj2*npx*r00*(x3166*x3166)))+(((0.015751)*px*sj2*(r01*r01)))+(((-0.00281174)*cj2*py*r00*r11*(IKcos(j8))*(IKsin(j8))))+(((-1.0)*(py*py)*(r11*r11)))+(((-0.015751)*cj2*px*r01*r11))+(((0.015751)*cj2*px*r01*r10*(IKcos(j8))*(IKsin(j8))))+(((-4.428771674e-5)*r01*r10*(cj2*cj2)*(IKcos(j8))*(IKsin(j8))))+(((-0.015751)*npx*r01*sj2*(IKcos(j8))*(IKsin(j8))))+(((-0.0001200940595862)*cj2*r01*r10*sj2*(IKcos(j8))*(IKsin(j8))))+(((0.00281174)*px*r01*r11*sj2))+(((0.015751)*cj2*px*r01*r11*(x3167*x3167)))+(((0.0001200940595862)*r10*r11*(cj2*cj2)*(IKcos(j8))*(IKsin(j8))))+(((-0.00281174)*cj2*npx*r01*(IKcos(j8))*(IKsin(j8))))+(((0.00281174)*py*sj2*(r11*r11)))+(((-0.0001200940595862)*r00*r01*(cj2*cj2)*(IKcos(j8))*(IKsin(j8))))+(((-2.214385837e-5)*cj2*sj2*(r01*r01)))+(((-4.428771674e-5)*r01*r11*(cj2*cj2)*(x3168*x3168)))+(((0.0001200940595862)*cj2*r00*r10*sj2*(x3169*x3169)))+(((-0.015751)*py*r01*r11*sj2*(x3170*x3170)))+(((2.0)*npx*px*r01*(IKcos(j8))*(IKsin(j8))))+(((-2.214385837e-5)*cj2*sj2*(r00*r00)*(x3171*x3171)))+(((-2.214385837e-5)*cj2*sj2*(r11*r11)*(x3172*x3172)))+(((2.214385837e-5)*cj2*sj2*(r11*r11)))+(((2.214385837e-5)*cj2*sj2*(r01*r01)*(x3173*x3173)))+(((-0.00281174)*px*r01*r10*sj2*(IKcos(j8))*(IKsin(j8))))+(((0.015751)*cj2*py*(r11*r11)*(x3174*x3174)))+(((-0.00281174)*py*sj2*(r11*r11)*(x3175*x3175)))+(((3.9529409138e-6)*r10*r11*(IKcos(j8))*(IKsin(j8))))+(((-0.015751)*cj2*py*(r11*r11)))+(((1.9764704569e-6)*(r11*r11)*(x3176*x3176)))+(((py*py)*(r11*r11)*(x3177*x3177)))+(((-1.0)*(px*px)*(r01*r01)))+(((-6.00470297931e-5)*(cj2*cj2)*(r11*r11))));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j7eval[1];
IkReal x3178=((-1.0)*pz);
r21=0;
npy=(((px*r01))+((py*r11)));
rxp1_0=(pz*r11);
rxp1_1=(r01*x3178);
r22=0;
npz=(((px*r02))+((py*r12)));
rxp2_0=(pz*r12);
rxp2_1=(r02*x3178);
j7eval[0]=1.0;
if( IKabs(j7eval[0]) < 0.0000000100000000  )
{
continue; // no branches [j7]

} else
{
IkReal op[2+1], zeror[2];
int numroots;
op[0]=-1.0;
op[1]=0;
op[2]=1.0;
polyroots2(op,zeror,numroots);
IkReal j7array[2], cj7array[2], sj7array[2], tempj7array[1];
int numsolutions = 0;
for(int ij7 = 0; ij7 < numroots; ++ij7)
{
IkReal htj7 = zeror[ij7];
tempj7array[0]=((2.0)*(atan(htj7)));
for(int kj7 = 0; kj7 < 1; ++kj7)
{
j7array[numsolutions] = tempj7array[kj7];
if( j7array[numsolutions] > IKPI )
{
    j7array[numsolutions]-=IK2PI;
}
else if( j7array[numsolutions] < -IKPI )
{
    j7array[numsolutions]+=IK2PI;
}
sj7array[numsolutions] = IKsin(j7array[numsolutions]);
cj7array[numsolutions] = IKcos(j7array[numsolutions]);
numsolutions++;
}
}
bool j7valid[2]={true,true};
_nj7 = 2;
for(int ij7 = 0; ij7 < numsolutions; ++ij7)
    {
if( !j7valid[ij7] )
{
    continue;
}
    j7 = j7array[ij7]; cj7 = cj7array[ij7]; sj7 = sj7array[ij7];
htj7 = IKtan(j7/2);

_ij7[0] = ij7; _ij7[1] = -1;
for(int iij7 = ij7+1; iij7 < numsolutions; ++iij7)
{
if( j7valid[iij7] && IKabs(cj7array[ij7]-cj7array[iij7]) < IKFAST_SOLUTION_THRESH && IKabs(sj7array[ij7]-sj7array[iij7]) < IKFAST_SOLUTION_THRESH )
{
    j7valid[iij7]=false; _ij7[1] = iij7; break; 
}
}
rotationfunction0(solutions);
    }

}

}
}
}

}

}

} else
{
IkReal op[2+1], zeror[2];
int numroots;
op[0]=-1.0;
op[1]=0;
op[2]=1.0;
polyroots2(op,zeror,numroots);
IkReal j7array[2], cj7array[2], sj7array[2], tempj7array[1];
int numsolutions = 0;
for(int ij7 = 0; ij7 < numroots; ++ij7)
{
IkReal htj7 = zeror[ij7];
tempj7array[0]=((2.0)*(atan(htj7)));
for(int kj7 = 0; kj7 < 1; ++kj7)
{
j7array[numsolutions] = tempj7array[kj7];
if( j7array[numsolutions] > IKPI )
{
    j7array[numsolutions]-=IK2PI;
}
else if( j7array[numsolutions] < -IKPI )
{
    j7array[numsolutions]+=IK2PI;
}
sj7array[numsolutions] = IKsin(j7array[numsolutions]);
cj7array[numsolutions] = IKcos(j7array[numsolutions]);
numsolutions++;
}
}
bool j7valid[2]={true,true};
_nj7 = 2;
for(int ij7 = 0; ij7 < numsolutions; ++ij7)
    {
if( !j7valid[ij7] )
{
    continue;
}
    j7 = j7array[ij7]; cj7 = cj7array[ij7]; sj7 = sj7array[ij7];
htj7 = IKtan(j7/2);

_ij7[0] = ij7; _ij7[1] = -1;
for(int iij7 = ij7+1; iij7 < numsolutions; ++iij7)
{
if( j7valid[iij7] && IKabs(cj7array[ij7]-cj7array[iij7]) < IKFAST_SOLUTION_THRESH && IKabs(sj7array[ij7]-sj7array[iij7]) < IKFAST_SOLUTION_THRESH )
{
    j7valid[iij7]=false; _ij7[1] = iij7; break; 
}
}
{
IkReal j8eval[1];
IkReal x3179=((-1.0)*pz);
r21=0;
npy=(((px*r01))+((py*r11)));
rxp1_0=(pz*r11);
rxp1_1=(r01*x3179);
r22=0;
npz=(((px*r02))+((py*r12)));
rxp2_0=(pz*r12);
rxp2_1=(r02*x3179);
IkReal x3180=((0.0078755)*cj2);
IkReal x3181=((0.0078755)*sj2);
IkReal x3182=((0.00140587)*sj2);
IkReal x3183=((0.00140587)*cj2);
j8eval[0]=((IKabs(((((-1.0)*px*r01))+((r01*x3183))+((r01*x3181))+((r11*x3182))+(((-1.0)*py*r11))+(((-1.0)*r11*x3180)))))+(IKabs((npx+(((-1.0)*r00*x3183))+(((-1.0)*r00*x3181))+((r10*x3180))+(((-1.0)*r10*x3182))))));
if( IKabs(j8eval[0]) < 0.0000010000000000  )
{
continue; // no branches [j8]

} else
{
{
IkReal j8array[2], cj8array[2], sj8array[2];
bool j8valid[2]={false};
_nj8 = 2;
IkReal x3184=((0.0078755)*cj2);
IkReal x3185=((0.0078755)*sj2);
IkReal x3186=((0.00140587)*sj2);
IkReal x3187=((0.00140587)*cj2);
CheckValue<IkReal> x3189 = IKatan2WithCheck(IkReal((npx+(((-1.0)*r00*x3185))+(((-1.0)*r00*x3187))+((r10*x3184))+(((-1.0)*r10*x3186)))),IkReal(((((-1.0)*px*r01))+((r01*x3187))+((r01*x3185))+((r11*x3186))+(((-1.0)*py*r11))+(((-1.0)*r11*x3184)))),IKFAST_ATAN2_MAGTHRESH);
if(!x3189.valid){
continue;
}
IkReal x3188=x3189.value;
j8array[0]=((-1.0)*x3188);
sj8array[0]=IKsin(j8array[0]);
cj8array[0]=IKcos(j8array[0]);
j8array[1]=((3.14159265358979)+(((-1.0)*x3188)));
sj8array[1]=IKsin(j8array[1]);
cj8array[1]=IKcos(j8array[1]);
if( j8array[0] > IKPI )
{
    j8array[0]-=IK2PI;
}
else if( j8array[0] < -IKPI )
{    j8array[0]+=IK2PI;
}
j8valid[0] = true;
if( j8array[1] > IKPI )
{
    j8array[1]-=IK2PI;
}
else if( j8array[1] < -IKPI )
{    j8array[1]+=IK2PI;
}
j8valid[1] = true;
for(int ij8 = 0; ij8 < 2; ++ij8)
{
if( !j8valid[ij8] )
{
    continue;
}
_ij8[0] = ij8; _ij8[1] = -1;
for(int iij8 = ij8+1; iij8 < 2; ++iij8)
{
if( j8valid[iij8] && IKabs(cj8array[ij8]-cj8array[iij8]) < IKFAST_SOLUTION_THRESH && IKabs(sj8array[ij8]-sj8array[iij8]) < IKFAST_SOLUTION_THRESH )
{
    j8valid[iij8]=false; _ij8[1] = iij8; break; 
}
}
j8 = j8array[ij8]; cj8 = cj8array[ij8]; sj8 = sj8array[ij8];
{
IkReal evalcond[1];
IkReal x3190=IKcos(j8);
IkReal x3191=IKcos(j8);
IkReal x3192=IKcos(j8);
IkReal x3193=IKcos(j8);
IkReal x3194=IKcos(j8);
IkReal x3195=IKcos(j8);
IkReal x3196=IKcos(j8);
IkReal x3197=IKcos(j8);
IkReal x3198=IKcos(j8);
IkReal x3199=IKcos(j8);
IkReal x3200=IKcos(j8);
IkReal x3201=IKcos(j8);
IkReal x3202=IKcos(j8);
IkReal x3203=IKcos(j8);
IkReal x3204=IKcos(j8);
IkReal x3205=IKcos(j8);
IkReal x3206=IKcos(j8);
IkReal x3207=IKcos(j8);
IkReal x3208=IKcos(j8);
IkReal x3209=IKcos(j8);
IkReal x3210=IKcos(j8);
IkReal x3211=IKcos(j8);
IkReal x3212=IKcos(j8);
IkReal x3213=IKcos(j8);
IkReal x3214=IKcos(j8);
IkReal x3215=IKcos(j8);
IkReal x3216=IKcos(j8);
IkReal x3217=IKcos(j8);
IkReal x3218=IKcos(j8);
IkReal x3219=IKcos(j8);
IkReal x3220=IKcos(j8);
IkReal x3221=IKcos(j8);
IkReal x3222=IKcos(j8);
IkReal x3223=IKcos(j8);
IkReal x3224=IKcos(j8);
IkReal x3225=IKcos(j8);
IkReal x3226=IKcos(j8);
IkReal x3227=IKcos(j8);
evalcond[0]=((0.0841)+(((-0.0001200940595862)*cj2*r00*r11*sj2*(IKcos(j8))*(IKsin(j8))))+(((-0.00281174)*npx*r11*sj2*(IKcos(j8))*(IKsin(j8))))+(((-0.015751)*px*r00*r01*sj2*(IKcos(j8))*(IKsin(j8))))+(((-1.9764704569e-6)*(r10*r10)*(x3190*x3190)))+(((2.0)*px*py*r01*r11*(x3191*x3191)))+(((pz*pz)*(r20*r20)*(x3192*x3192)))+(((6.202350025e-5)*(r01*r01)*(x3193*x3193)))+(((-6.00470297931e-5)*(cj2*cj2)*(r10*r10)*(x3194*x3194)))+(((0.0001200940595862)*cj2*r01*r11*sj2))+(((-2.214385837e-5)*r00*r10*(x3195*x3195)))+(((-0.00281174)*cj2*py*r01*r11*(x3196*x3196)))+(((-2.0)*px*py*r00*r10*(x3197*x3197)))+(((-0.00281174)*cj2*px*r00*r01*(IKcos(j8))*(IKsin(j8))))+(((0.015751)*cj2*npx*r11*(IKcos(j8))*(IKsin(j8))))+(((-6.202350025e-5)*(r01*r01)))+(((-1.0)*(px*px)*(r00*r00)*(x3198*x3198)))+(((-1.0)*(py*py)*(r10*r10)*(x3199*x3199)))+(((-0.0001200940595862)*cj2*r01*r11*sj2*(x3200*x3200)))+(((-0.015751)*px*sj2*(r01*r01)*(x3201*x3201)))+(((-6.00470297931e-5)*(cj2*cj2)*(r01*r01)*(x3202*x3202)))+(((6.00470297931e-5)*(cj2*cj2)*(r01*r01)))+(((-2.0)*px*py*r01*r11))+(((4.428771674e-5)*r01*r11*(cj2*cj2)))+(((0.00281174)*cj2*py*r01*r11))+(((0.00281174)*cj2*px*(r01*r01)))+(((0.015751)*npx*r00*sj2*(x3203*x3203)))+(((4.428771674e-5)*cj2*r00*r01*sj2*(IKcos(j8))*(IKsin(j8))))+(((-1.9764704569e-6)*(r11*r11)))+(((2.214385837e-5)*r00*r11*(IKcos(j8))*(IKsin(j8))))+(((4.428771674e-5)*r00*r10*(cj2*cj2)*(x3204*x3204)))+(((2.0)*npx*py*r11*(IKcos(j8))*(IKsin(j8))))+(((0.0001240470005)*r00*r01*(IKcos(j8))*(IKsin(j8))))+(((-0.00281174)*px*r01*r11*sj2*(x3205*x3205)))+(((6.00470297931e-5)*(cj2*cj2)*(r00*r00)*(x3206*x3206)))+(((-4.428771674e-5)*r00*r11*(cj2*cj2)*(IKcos(j8))*(IKsin(j8))))+(((2.214385837e-5)*cj2*sj2*(r10*r10)*(x3207*x3207)))+(((0.015751)*py*r01*r11*sj2))+(((0.015751)*cj2*py*r10*r11*(IKcos(j8))*(IKsin(j8))))+(((2.214385837e-5)*r01*r10*(IKcos(j8))*(IKsin(j8))))+(((6.00470297931e-5)*(cj2*cj2)*(r11*r11)*(x3208*x3208)))+(((-0.00281174)*cj2*px*(r01*r01)*(x3209*x3209)))+(((-6.202350025e-5)*(r00*r00)*(x3210*x3210)))+(((0.00281174)*npx*r10*sj2*(x3211*x3211)))+(((-2.0)*npx*pz*r20*(x3212*x3212)))+(((-0.00281174)*py*r10*r11*sj2*(IKcos(j8))*(IKsin(j8))))+(((-2.214385837e-5)*r01*r11))+(((-0.015751)*cj2*npx*r10*(x3213*x3213)))+(((px*px)*(r01*r01)*(x3214*x3214)))+(((2.214385837e-5)*r01*r11*(x3215*x3215)))+(((-4.428771674e-5)*cj2*r10*r11*sj2*(IKcos(j8))*(IKsin(j8))))+(((-0.015751)*py*r00*r11*sj2*(IKcos(j8))*(IKsin(j8))))+(((0.00281174)*cj2*npx*r00*(x3216*x3216)))+(((0.015751)*px*sj2*(r01*r01)))+(((-0.00281174)*cj2*py*r00*r11*(IKcos(j8))*(IKsin(j8))))+(((-1.0)*(py*py)*(r11*r11)))+(((-0.015751)*cj2*px*r01*r11))+(((0.015751)*cj2*px*r01*r10*(IKcos(j8))*(IKsin(j8))))+(((-4.428771674e-5)*r01*r10*(cj2*cj2)*(IKcos(j8))*(IKsin(j8))))+(((-0.015751)*npx*r01*sj2*(IKcos(j8))*(IKsin(j8))))+(((-0.0001200940595862)*cj2*r01*r10*sj2*(IKcos(j8))*(IKsin(j8))))+(((0.00281174)*px*r01*r11*sj2))+(((0.015751)*cj2*px*r01*r11*(x3217*x3217)))+(((0.0001200940595862)*r10*r11*(cj2*cj2)*(IKcos(j8))*(IKsin(j8))))+(((-0.00281174)*cj2*npx*r01*(IKcos(j8))*(IKsin(j8))))+(((0.00281174)*py*sj2*(r11*r11)))+(((-0.0001200940595862)*r00*r01*(cj2*cj2)*(IKcos(j8))*(IKsin(j8))))+(((-2.214385837e-5)*cj2*sj2*(r01*r01)))+(((-4.428771674e-5)*r01*r11*(cj2*cj2)*(x3218*x3218)))+(((0.0001200940595862)*cj2*r00*r10*sj2*(x3219*x3219)))+(((-0.015751)*py*r01*r11*sj2*(x3220*x3220)))+(((2.0)*npx*px*r01*(IKcos(j8))*(IKsin(j8))))+(((-2.214385837e-5)*cj2*sj2*(r00*r00)*(x3221*x3221)))+(((-2.214385837e-5)*cj2*sj2*(r11*r11)*(x3222*x3222)))+(((2.214385837e-5)*cj2*sj2*(r11*r11)))+(((2.214385837e-5)*cj2*sj2*(r01*r01)*(x3223*x3223)))+(((-0.00281174)*px*r01*r10*sj2*(IKcos(j8))*(IKsin(j8))))+(((0.015751)*cj2*py*(r11*r11)*(x3224*x3224)))+(((-0.00281174)*py*sj2*(r11*r11)*(x3225*x3225)))+(((3.9529409138e-6)*r10*r11*(IKcos(j8))*(IKsin(j8))))+(((-0.015751)*cj2*py*(r11*r11)))+(((1.9764704569e-6)*(r11*r11)*(x3226*x3226)))+(((py*py)*(r11*r11)*(x3227*x3227)))+(((-1.0)*(px*px)*(r01*r01)))+(((-6.00470297931e-5)*(cj2*cj2)*(r11*r11))));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

rotationfunction0(solutions);
}
}

}

}
    }

}

}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((IKabs(r01))+(IKabs(r11)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j2eval[2];
IkReal x3228=((-1.0)*pz);
r21=0;
npy=0;
rxp1_0=0;
rxp1_1=0;
r11=0;
r01=0;
r22=0;
r20=0;
npx=(((px*r00))+((py*r10)));
npz=(((px*r02))+((py*r12)));
rxp0_0=(pz*r10);
rxp0_1=(r00*x3228);
rxp1_2=0;
rxp2_0=(pz*r12);
rxp2_1=(r02*x3228);
j2eval[0]=rxp0_2;
j2eval[1]=IKsign(rxp0_2);
if( IKabs(j2eval[0]) < 0.0000010000000000  || IKabs(j2eval[1]) < 0.0000010000000000  )
{
{
IkReal j2eval[2];
IkReal x3229=((-1.0)*pz);
r21=0;
npy=0;
rxp1_0=0;
rxp1_1=0;
r11=0;
r01=0;
r22=0;
r20=0;
npx=(((px*r00))+((py*r10)));
npz=(((px*r02))+((py*r12)));
rxp0_0=(pz*r10);
rxp0_1=(r00*x3229);
rxp1_2=0;
rxp2_0=(pz*r12);
rxp2_1=(r02*x3229);
j2eval[0]=rxp2_2;
j2eval[1]=IKsign(rxp2_2);
if( IKabs(j2eval[0]) < 0.0000010000000000  || IKabs(j2eval[1]) < 0.0000010000000000  )
{
{
IkReal j7eval[1];
IkReal x3230=((-1.0)*pz);
r21=0;
npy=0;
rxp1_0=0;
rxp1_1=0;
r11=0;
r01=0;
r22=0;
r20=0;
npx=(((px*r00))+((py*r10)));
npz=(((px*r02))+((py*r12)));
rxp0_0=(pz*r10);
rxp0_1=(r00*x3230);
rxp1_2=0;
rxp2_0=(pz*r12);
rxp2_1=(r02*x3230);
j7eval[0]=1.0;
if( IKabs(j7eval[0]) < 0.0000000100000000  )
{
continue; // no branches [j2, j7, j8]

} else
{
IkReal op[2+1], zeror[2];
int numroots;
op[0]=-1.0;
op[1]=0;
op[2]=1.0;
polyroots2(op,zeror,numroots);
IkReal j7array[2], cj7array[2], sj7array[2], tempj7array[1];
int numsolutions = 0;
for(int ij7 = 0; ij7 < numroots; ++ij7)
{
IkReal htj7 = zeror[ij7];
tempj7array[0]=((2.0)*(atan(htj7)));
for(int kj7 = 0; kj7 < 1; ++kj7)
{
j7array[numsolutions] = tempj7array[kj7];
if( j7array[numsolutions] > IKPI )
{
    j7array[numsolutions]-=IK2PI;
}
else if( j7array[numsolutions] < -IKPI )
{
    j7array[numsolutions]+=IK2PI;
}
sj7array[numsolutions] = IKsin(j7array[numsolutions]);
cj7array[numsolutions] = IKcos(j7array[numsolutions]);
numsolutions++;
}
}
bool j7valid[2]={true,true};
_nj7 = 2;
for(int ij7 = 0; ij7 < numsolutions; ++ij7)
    {
if( !j7valid[ij7] )
{
    continue;
}
    j7 = j7array[ij7]; cj7 = cj7array[ij7]; sj7 = sj7array[ij7];
htj7 = IKtan(j7/2);

_ij7[0] = ij7; _ij7[1] = -1;
for(int iij7 = ij7+1; iij7 < numsolutions; ++iij7)
{
if( j7valid[iij7] && IKabs(cj7array[ij7]-cj7array[iij7]) < IKFAST_SOLUTION_THRESH && IKabs(sj7array[ij7]-sj7array[iij7]) < IKFAST_SOLUTION_THRESH )
{
    j7valid[iij7]=false; _ij7[1] = iij7; break; 
}
}
{
IkReal j2eval[2];
IkReal x3231=((-1.0)*pz);
r21=0;
npy=0;
rxp1_0=0;
rxp1_1=0;
r11=0;
r01=0;
r22=0;
r20=0;
npx=(((px*r00))+((py*r10)));
npz=(((px*r02))+((py*r12)));
rxp0_0=(pz*r10);
rxp0_1=(r00*x3231);
rxp1_2=0;
rxp2_0=(pz*r12);
rxp2_1=(r02*x3231);
j2eval[0]=rxp0_2;
j2eval[1]=IKsign(rxp0_2);
if( IKabs(j2eval[0]) < 0.0000010000000000  || IKabs(j2eval[1]) < 0.0000010000000000  )
{
{
IkReal j2eval[2];
IkReal x3232=((-1.0)*pz);
r21=0;
npy=0;
rxp1_0=0;
rxp1_1=0;
r11=0;
r01=0;
r22=0;
r20=0;
npx=(((px*r00))+((py*r10)));
npz=(((px*r02))+((py*r12)));
rxp0_0=(pz*r10);
rxp0_1=(r00*x3232);
rxp1_2=0;
rxp2_0=(pz*r12);
rxp2_1=(r02*x3232);
j2eval[0]=rxp2_2;
j2eval[1]=IKsign(rxp2_2);
if( IKabs(j2eval[0]) < 0.0000010000000000  || IKabs(j2eval[1]) < 0.0000010000000000  )
{
continue; // no branches [j2, j8]

} else
{
{
IkReal j2array[1], cj2array[1], sj2array[1];
bool j2valid[1]={false};
_nj2 = 1;
IkReal x3233=px*px;
IkReal x3234=py*py;
IkReal x3235=(pp*r02);
IkReal x3236=((0.015751)*r02);
IkReal x3237=(px*py);
IkReal x3238=((0.00281174)*r02);
IkReal x3239=(pp*r12);
IkReal x3240=(r12*x3234);
CheckValue<IkReal> x3241 = IKatan2WithCheck(IkReal(((((8.99756388177095e-8)*r02))+(((-5.04031769302191e-7)*r12))+(((-0.00281174)*r12*x3237))+(((-1.0)*x3233*x3238))+((x3236*x3237))+(((0.00140587)*x3235))+(((-0.0078755)*x3239))+(((0.015751)*x3240)))),IkReal(((((-0.00140587)*x3239))+((x3237*x3238))+(((-5.04031769302191e-7)*r02))+(((0.00281174)*x3240))+(((-8.99756388177095e-8)*r12))+(((-0.0078755)*x3235))+(((0.015751)*r12*x3237))+((x3233*x3236)))),IKFAST_ATAN2_MAGTHRESH);
if(!x3241.valid){
continue;
}
CheckValue<IkReal> x3242=IKPowWithIntegerCheck(IKsign(rxp2_2),-1);
if(!x3242.valid){
continue;
}
j2array[0]=((-1.5707963267949)+(x3241.value)+(((1.5707963267949)*(x3242.value))));
sj2array[0]=IKsin(j2array[0]);
cj2array[0]=IKcos(j2array[0]);
if( j2array[0] > IKPI )
{
    j2array[0]-=IK2PI;
}
else if( j2array[0] < -IKPI )
{    j2array[0]+=IK2PI;
}
j2valid[0] = true;
for(int ij2 = 0; ij2 < 1; ++ij2)
{
if( !j2valid[ij2] )
{
    continue;
}
_ij2[0] = ij2; _ij2[1] = -1;
for(int iij2 = ij2+1; iij2 < 1; ++iij2)
{
if( j2valid[iij2] && IKabs(cj2array[ij2]-cj2array[iij2]) < IKFAST_SOLUTION_THRESH && IKabs(sj2array[ij2]-sj2array[iij2]) < IKFAST_SOLUTION_THRESH )
{
    j2valid[iij2]=false; _ij2[1] = iij2; break; 
}
}
j2 = j2array[ij2]; cj2 = cj2array[ij2]; sj2 = sj2array[ij2];
{
IkReal evalcond[3];
IkReal x3243=IKsin(j2);
IkReal x3244=IKcos(j2);
IkReal x3245=((0.00140587)*x3243);
IkReal x3246=((0.00140587)*x3244);
IkReal x3247=((0.0078755)*x3243);
IkReal x3248=((0.0078755)*x3244);
evalcond[0]=((-6.39999707069e-5)+(((0.015751)*px*x3243))+(((0.00281174)*py*x3243))+(((-1.0)*pp))+(((0.00281174)*px*x3244))+(((-0.015751)*py*x3244)));
evalcond[1]=(((px*r00))+(((-1.0)*r10*x3245))+(((-1.0)*r00*x3247))+(((-1.0)*r00*x3246))+((r10*x3248))+((py*r10)));
evalcond[2]=(((px*r02))+(((-1.0)*r12*x3245))+((r12*x3248))+(((-1.0)*r02*x3246))+(((-1.0)*r02*x3247))+((py*r12)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j8eval[1];
IkReal x3249=((-1.0)*pz);
r21=0;
npy=0;
rxp1_0=0;
rxp1_1=0;
r11=0;
r01=0;
r22=0;
r20=0;
npx=(((px*r00))+((py*r10)));
npz=(((px*r02))+((py*r12)));
rxp0_0=(pz*r10);
rxp0_1=(r00*x3249);
rxp1_2=0;
rxp2_0=(pz*r12);
rxp2_1=(r02*x3249);
IkReal x3250=r10*r10;
IkReal x3251=r00*r00;
IkReal x3252=cj2*cj2;
IkReal x3253=px*px;
IkReal x3254=((126.976065011745)*cj2);
IkReal x3255=((126.976065011745)*sj2);
IkReal x3256=(r00*r10);
IkReal x3257=(cj2*sj2);
IkReal x3258=((711.303321075206)*sj2);
IkReal x3259=((711.303321075206)*cj2);
IkReal x3260=(px*x3251);
IkReal x3261=(py*x3250);
IkReal x3262=((45159.2483699579)*x3250);
j8eval[0]=((-2.80093465256389)+(((5.42335746460972)*x3256*x3257))+(((-5.42335746460972)*x3250*x3252))+((x3255*x3261))+((x3254*x3260))+((px*x3255*x3256))+((x3253*x3262))+(((-90318.4967399157)*px*py*x3256))+((py*x3256*x3258))+(((2.0)*x3252*x3256))+(((-1.0)*x3256))+(((-1.0)*x3257))+(((-1.0)*px*x3256*x3259))+((x3258*x3260))+(((2.0)*x3250*x3257))+(((-45159.2483699579)*py*x3261))+(((-45159.2483699579)*x3253))+(((-1.0)*x3259*x3261))+((py*x3254*x3256))+(((2.71167873230486)*x3250))+(((2.71167873230486)*x3252)));
if( IKabs(j8eval[0]) < 0.0000010000000000  )
{
continue; // no branches [j8]

} else
{
{
IkReal j8array[4], cj8array[4], sj8array[4];
bool j8valid[4]={false};
_nj8 = 4;
IkReal x3263=r10*r10;
IkReal x3264=cj2*cj2;
IkReal x3265=r00*r00;
IkReal x3266=px*px;
IkReal x3267=(cj2*sj2);
IkReal x3268=(r00*r10);
IkReal x3269=((0.015751)*px);
IkReal x3270=((0.00281174)*px);
IkReal x3271=((0.015751)*py);
IkReal x3272=((0.00281174)*py);
CheckValue<IkReal> x3274=IKPowWithIntegerCheck(((-6.202350025e-5)+(((4.428771674e-5)*x3264*x3268))+(((-1.0)*cj2*x3263*x3271))+(((0.0001200940595862)*x3267*x3268))+((cj2*x3265*x3270))+(((-2.0)*px*py*x3268))+(((-0.0001200940595862)*x3263*x3264))+(((-1.0)*x3263*(py*py)))+(((-1.0)*x3266))+((x3263*x3266))+((cj2*x3268*x3272))+(((-2.214385837e-5)*x3268))+(((-2.214385837e-5)*x3267))+((sj2*x3268*x3271))+((sj2*x3268*x3270))+(((-1.0)*cj2*x3268*x3269))+((sj2*x3263*x3272))+(((6.00470297931e-5)*x3263))+(((6.00470297931e-5)*x3264))+((sj2*x3265*x3269))+(((4.428771674e-5)*x3263*x3267))),-1);
if(!x3274.valid){
continue;
}
if((((-1.0)*(x3274.value))) < -0.00001)
continue;
IkReal x3273=IKsqrt(((-1.0)*(x3274.value)));
cj8array[0]=((0.29)*x3273);
cj8array[2]=((-0.29)*x3273);
if( cj8array[0] >= -1-IKFAST_SINCOS_THRESH && cj8array[0] <= 1+IKFAST_SINCOS_THRESH )
{
    j8valid[0] = j8valid[1] = true;
    j8array[0] = IKacos(cj8array[0]);
    sj8array[0] = IKsin(j8array[0]);
    cj8array[1] = cj8array[0];
    j8array[1] = -j8array[0];
    sj8array[1] = -sj8array[0];
}
else if( isnan(cj8array[0]) )
{
    // probably any value will work
    j8valid[0] = true;
    cj8array[0] = 1; sj8array[0] = 0; j8array[0] = 0;
}
if( cj8array[2] >= -1-IKFAST_SINCOS_THRESH && cj8array[2] <= 1+IKFAST_SINCOS_THRESH )
{
    j8valid[2] = j8valid[3] = true;
    j8array[2] = IKacos(cj8array[2]);
    sj8array[2] = IKsin(j8array[2]);
    cj8array[3] = cj8array[2];
    j8array[3] = -j8array[2];
    sj8array[3] = -sj8array[2];
}
else if( isnan(cj8array[2]) )
{
    // probably any value will work
    j8valid[2] = true;
    cj8array[2] = 1; sj8array[2] = 0; j8array[2] = 0;
}
for(int ij8 = 0; ij8 < 4; ++ij8)
{
if( !j8valid[ij8] )
{
    continue;
}
_ij8[0] = ij8; _ij8[1] = -1;
for(int iij8 = ij8+1; iij8 < 4; ++iij8)
{
if( j8valid[iij8] && IKabs(cj8array[ij8]-cj8array[iij8]) < IKFAST_SOLUTION_THRESH && IKabs(sj8array[ij8]-sj8array[iij8]) < IKFAST_SOLUTION_THRESH )
{
    j8valid[iij8]=false; _ij8[1] = iij8; break; 
}
}
j8 = j8array[ij8]; cj8 = cj8array[ij8]; sj8 = sj8array[ij8];
{
IkReal evalcond[1];
IkReal x3275=IKcos(j8);
IkReal x3276=(r10*x3275);
IkReal x3277=(r00*x3275);
evalcond[0]=(((px*x3277))+(((-0.00140587)*cj2*x3277))+(((-0.0078755)*sj2*x3277))+(((0.0078755)*cj2*x3276))+(((-0.00140587)*sj2*x3276))+((py*x3276)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

rotationfunction0(solutions);
}
}

}

}
}
}

}

}

} else
{
{
IkReal j2array[1], cj2array[1], sj2array[1];
bool j2valid[1]={false};
_nj2 = 1;
IkReal x3278=py*py;
IkReal x3279=px*px;
IkReal x3280=(pp*r00);
IkReal x3281=(px*py);
IkReal x3282=(pp*r10);
IkReal x3283=(r00*x3279);
IkReal x3284=(r10*x3278);
CheckValue<IkReal> x3285 = IKatan2WithCheck(IkReal(((((-0.00281174)*r10*x3281))+(((0.00140587)*x3280))+(((-0.0078755)*x3282))+(((0.015751)*x3284))+(((-0.00281174)*x3283))+(((8.99756388177095e-8)*r00))+(((-5.04031769302191e-7)*r10))+(((0.015751)*r00*x3281)))),IkReal(((((0.015751)*r10*x3281))+(((-0.0078755)*x3280))+(((0.00281174)*r00*x3281))+(((0.015751)*x3283))+(((-5.04031769302191e-7)*r00))+(((-0.00140587)*x3282))+(((-8.99756388177095e-8)*r10))+(((0.00281174)*x3284)))),IKFAST_ATAN2_MAGTHRESH);
if(!x3285.valid){
continue;
}
CheckValue<IkReal> x3286=IKPowWithIntegerCheck(IKsign(rxp0_2),-1);
if(!x3286.valid){
continue;
}
j2array[0]=((-1.5707963267949)+(x3285.value)+(((1.5707963267949)*(x3286.value))));
sj2array[0]=IKsin(j2array[0]);
cj2array[0]=IKcos(j2array[0]);
if( j2array[0] > IKPI )
{
    j2array[0]-=IK2PI;
}
else if( j2array[0] < -IKPI )
{    j2array[0]+=IK2PI;
}
j2valid[0] = true;
for(int ij2 = 0; ij2 < 1; ++ij2)
{
if( !j2valid[ij2] )
{
    continue;
}
_ij2[0] = ij2; _ij2[1] = -1;
for(int iij2 = ij2+1; iij2 < 1; ++iij2)
{
if( j2valid[iij2] && IKabs(cj2array[ij2]-cj2array[iij2]) < IKFAST_SOLUTION_THRESH && IKabs(sj2array[ij2]-sj2array[iij2]) < IKFAST_SOLUTION_THRESH )
{
    j2valid[iij2]=false; _ij2[1] = iij2; break; 
}
}
j2 = j2array[ij2]; cj2 = cj2array[ij2]; sj2 = sj2array[ij2];
{
IkReal evalcond[3];
IkReal x3287=IKsin(j2);
IkReal x3288=IKcos(j2);
IkReal x3289=((0.00140587)*x3287);
IkReal x3290=((0.00140587)*x3288);
IkReal x3291=((0.0078755)*x3287);
IkReal x3292=((0.0078755)*x3288);
evalcond[0]=((-6.39999707069e-5)+(((-0.015751)*py*x3288))+(((0.00281174)*py*x3287))+(((-1.0)*pp))+(((0.015751)*px*x3287))+(((0.00281174)*px*x3288)));
evalcond[1]=((((-1.0)*r10*x3289))+((px*r00))+((r10*x3292))+(((-1.0)*r00*x3290))+(((-1.0)*r00*x3291))+((py*r10)));
evalcond[2]=((((-1.0)*r12*x3289))+((px*r02))+(((-1.0)*r02*x3291))+(((-1.0)*r02*x3290))+((py*r12))+((r12*x3292)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j8eval[1];
IkReal x3293=((-1.0)*pz);
r21=0;
npy=0;
rxp1_0=0;
rxp1_1=0;
r11=0;
r01=0;
r22=0;
r20=0;
npx=(((px*r00))+((py*r10)));
npz=(((px*r02))+((py*r12)));
rxp0_0=(pz*r10);
rxp0_1=(r00*x3293);
rxp1_2=0;
rxp2_0=(pz*r12);
rxp2_1=(r02*x3293);
IkReal x3294=r10*r10;
IkReal x3295=r00*r00;
IkReal x3296=cj2*cj2;
IkReal x3297=px*px;
IkReal x3298=((126.976065011745)*cj2);
IkReal x3299=((126.976065011745)*sj2);
IkReal x3300=(r00*r10);
IkReal x3301=(cj2*sj2);
IkReal x3302=((711.303321075206)*sj2);
IkReal x3303=((711.303321075206)*cj2);
IkReal x3304=(px*x3295);
IkReal x3305=(py*x3294);
IkReal x3306=((45159.2483699579)*x3294);
j8eval[0]=((-2.80093465256389)+(((-45159.2483699579)*x3297))+(((-90318.4967399157)*px*py*x3300))+(((5.42335746460972)*x3300*x3301))+(((2.0)*x3296*x3300))+((py*x3298*x3300))+(((2.71167873230486)*x3294))+(((2.71167873230486)*x3296))+((x3298*x3304))+(((-1.0)*x3300))+(((-1.0)*x3301))+(((2.0)*x3294*x3301))+((py*x3300*x3302))+((x3299*x3305))+(((-45159.2483699579)*py*x3305))+(((-5.42335746460972)*x3294*x3296))+(((-1.0)*px*x3300*x3303))+((x3297*x3306))+(((-1.0)*x3303*x3305))+((px*x3299*x3300))+((x3302*x3304)));
if( IKabs(j8eval[0]) < 0.0000010000000000  )
{
continue; // no branches [j8]

} else
{
{
IkReal j8array[4], cj8array[4], sj8array[4];
bool j8valid[4]={false};
_nj8 = 4;
IkReal x3307=r10*r10;
IkReal x3308=cj2*cj2;
IkReal x3309=r00*r00;
IkReal x3310=px*px;
IkReal x3311=(cj2*sj2);
IkReal x3312=(r00*r10);
IkReal x3313=((0.015751)*px);
IkReal x3314=((0.00281174)*px);
IkReal x3315=((0.015751)*py);
IkReal x3316=((0.00281174)*py);
CheckValue<IkReal> x3318=IKPowWithIntegerCheck(((-6.202350025e-5)+((cj2*x3309*x3314))+(((-0.0001200940595862)*x3307*x3308))+(((-2.214385837e-5)*x3312))+(((-2.214385837e-5)*x3311))+(((-1.0)*cj2*x3312*x3313))+((sj2*x3309*x3313))+((cj2*x3312*x3316))+(((6.00470297931e-5)*x3308))+(((6.00470297931e-5)*x3307))+(((-1.0)*x3307*(py*py)))+((sj2*x3307*x3316))+(((-2.0)*px*py*x3312))+(((4.428771674e-5)*x3308*x3312))+(((-1.0)*x3310))+((x3307*x3310))+(((0.0001200940595862)*x3311*x3312))+((sj2*x3312*x3314))+((sj2*x3312*x3315))+(((4.428771674e-5)*x3307*x3311))+(((-1.0)*cj2*x3307*x3315))),-1);
if(!x3318.valid){
continue;
}
if((((-1.0)*(x3318.value))) < -0.00001)
continue;
IkReal x3317=IKsqrt(((-1.0)*(x3318.value)));
cj8array[0]=((0.29)*x3317);
cj8array[2]=((-0.29)*x3317);
if( cj8array[0] >= -1-IKFAST_SINCOS_THRESH && cj8array[0] <= 1+IKFAST_SINCOS_THRESH )
{
    j8valid[0] = j8valid[1] = true;
    j8array[0] = IKacos(cj8array[0]);
    sj8array[0] = IKsin(j8array[0]);
    cj8array[1] = cj8array[0];
    j8array[1] = -j8array[0];
    sj8array[1] = -sj8array[0];
}
else if( isnan(cj8array[0]) )
{
    // probably any value will work
    j8valid[0] = true;
    cj8array[0] = 1; sj8array[0] = 0; j8array[0] = 0;
}
if( cj8array[2] >= -1-IKFAST_SINCOS_THRESH && cj8array[2] <= 1+IKFAST_SINCOS_THRESH )
{
    j8valid[2] = j8valid[3] = true;
    j8array[2] = IKacos(cj8array[2]);
    sj8array[2] = IKsin(j8array[2]);
    cj8array[3] = cj8array[2];
    j8array[3] = -j8array[2];
    sj8array[3] = -sj8array[2];
}
else if( isnan(cj8array[2]) )
{
    // probably any value will work
    j8valid[2] = true;
    cj8array[2] = 1; sj8array[2] = 0; j8array[2] = 0;
}
for(int ij8 = 0; ij8 < 4; ++ij8)
{
if( !j8valid[ij8] )
{
    continue;
}
_ij8[0] = ij8; _ij8[1] = -1;
for(int iij8 = ij8+1; iij8 < 4; ++iij8)
{
if( j8valid[iij8] && IKabs(cj8array[ij8]-cj8array[iij8]) < IKFAST_SOLUTION_THRESH && IKabs(sj8array[ij8]-sj8array[iij8]) < IKFAST_SOLUTION_THRESH )
{
    j8valid[iij8]=false; _ij8[1] = iij8; break; 
}
}
j8 = j8array[ij8]; cj8 = cj8array[ij8]; sj8 = sj8array[ij8];
{
IkReal evalcond[1];
IkReal x3319=IKcos(j8);
IkReal x3320=(r10*x3319);
IkReal x3321=(r00*x3319);
evalcond[0]=((((-0.0078755)*sj2*x3321))+((px*x3321))+(((-0.00140587)*sj2*x3320))+(((-0.00140587)*cj2*x3321))+((py*x3320))+(((0.0078755)*cj2*x3320)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

rotationfunction0(solutions);
}
}

}

}
}
}

}

}
    }

}

}

} else
{
{
IkReal j2array[1], cj2array[1], sj2array[1];
bool j2valid[1]={false};
_nj2 = 1;
IkReal x3322=px*px;
IkReal x3323=py*py;
IkReal x3324=(pp*r02);
IkReal x3325=((0.015751)*r02);
IkReal x3326=(px*py);
IkReal x3327=((0.00281174)*r02);
IkReal x3328=(pp*r12);
IkReal x3329=(r12*x3323);
CheckValue<IkReal> x3330=IKPowWithIntegerCheck(IKsign(rxp2_2),-1);
if(!x3330.valid){
continue;
}
CheckValue<IkReal> x3331 = IKatan2WithCheck(IkReal(((((8.99756388177095e-8)*r02))+(((-5.04031769302191e-7)*r12))+(((-0.0078755)*x3328))+(((-1.0)*x3322*x3327))+((x3325*x3326))+(((0.015751)*x3329))+(((0.00140587)*x3324))+(((-0.00281174)*r12*x3326)))),IkReal(((((-0.00140587)*x3328))+(((-0.0078755)*x3324))+((x3326*x3327))+(((-5.04031769302191e-7)*r02))+(((0.00281174)*x3329))+(((-8.99756388177095e-8)*r12))+((x3322*x3325))+(((0.015751)*r12*x3326)))),IKFAST_ATAN2_MAGTHRESH);
if(!x3331.valid){
continue;
}
j2array[0]=((-1.5707963267949)+(((1.5707963267949)*(x3330.value)))+(x3331.value));
sj2array[0]=IKsin(j2array[0]);
cj2array[0]=IKcos(j2array[0]);
if( j2array[0] > IKPI )
{
    j2array[0]-=IK2PI;
}
else if( j2array[0] < -IKPI )
{    j2array[0]+=IK2PI;
}
j2valid[0] = true;
for(int ij2 = 0; ij2 < 1; ++ij2)
{
if( !j2valid[ij2] )
{
    continue;
}
_ij2[0] = ij2; _ij2[1] = -1;
for(int iij2 = ij2+1; iij2 < 1; ++iij2)
{
if( j2valid[iij2] && IKabs(cj2array[ij2]-cj2array[iij2]) < IKFAST_SOLUTION_THRESH && IKabs(sj2array[ij2]-sj2array[iij2]) < IKFAST_SOLUTION_THRESH )
{
    j2valid[iij2]=false; _ij2[1] = iij2; break; 
}
}
j2 = j2array[ij2]; cj2 = cj2array[ij2]; sj2 = sj2array[ij2];
{
IkReal evalcond[3];
IkReal x3332=IKsin(j2);
IkReal x3333=IKcos(j2);
IkReal x3334=((0.00140587)*x3332);
IkReal x3335=((0.00140587)*x3333);
IkReal x3336=((0.0078755)*x3332);
IkReal x3337=((0.0078755)*x3333);
evalcond[0]=((-6.39999707069e-5)+(((-0.015751)*py*x3333))+(((0.00281174)*px*x3333))+(((0.015751)*px*x3332))+(((-1.0)*pp))+(((0.00281174)*py*x3332)));
evalcond[1]=(((px*r00))+((r10*x3337))+(((-1.0)*r00*x3336))+(((-1.0)*r00*x3335))+(((-1.0)*r10*x3334))+((py*r10)));
evalcond[2]=(((px*r02))+(((-1.0)*r02*x3335))+(((-1.0)*r02*x3336))+((r12*x3337))+((py*r12))+(((-1.0)*r12*x3334)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j7eval[1];
IkReal x3338=((-1.0)*pz);
r21=0;
npy=0;
rxp1_0=0;
rxp1_1=0;
r11=0;
r01=0;
r22=0;
r20=0;
npx=(((px*r00))+((py*r10)));
npz=(((px*r02))+((py*r12)));
rxp0_0=(pz*r10);
rxp0_1=(r00*x3338);
rxp1_2=0;
rxp2_0=(pz*r12);
rxp2_1=(r02*x3338);
j7eval[0]=1.0;
if( IKabs(j7eval[0]) < 0.0000000100000000  )
{
{
IkReal j8eval[1];
IkReal x3339=((-1.0)*pz);
r21=0;
npy=0;
rxp1_0=0;
rxp1_1=0;
r11=0;
r01=0;
r22=0;
r20=0;
npx=(((px*r00))+((py*r10)));
npz=(((px*r02))+((py*r12)));
rxp0_0=(pz*r10);
rxp0_1=(r00*x3339);
rxp1_2=0;
rxp2_0=(pz*r12);
rxp2_1=(r02*x3339);
IkReal x3340=r10*r10;
IkReal x3341=r00*r00;
IkReal x3342=cj2*cj2;
IkReal x3343=px*px;
IkReal x3344=((126.976065011745)*cj2);
IkReal x3345=((126.976065011745)*sj2);
IkReal x3346=(r00*r10);
IkReal x3347=(cj2*sj2);
IkReal x3348=((711.303321075206)*sj2);
IkReal x3349=((711.303321075206)*cj2);
IkReal x3350=(px*x3341);
IkReal x3351=(py*x3340);
IkReal x3352=((45159.2483699579)*x3340);
j8eval[0]=((-2.80093465256389)+((px*x3345*x3346))+(((-1.0)*x3346))+(((-1.0)*x3347))+((py*x3346*x3348))+((x3343*x3352))+((x3344*x3350))+(((-90318.4967399157)*px*py*x3346))+(((-1.0)*x3349*x3351))+(((2.0)*x3340*x3347))+(((-1.0)*px*x3346*x3349))+(((2.0)*x3342*x3346))+(((-45159.2483699579)*x3343))+(((-5.42335746460972)*x3340*x3342))+((x3345*x3351))+(((2.71167873230486)*x3342))+(((2.71167873230486)*x3340))+(((-45159.2483699579)*py*x3351))+(((5.42335746460972)*x3346*x3347))+((py*x3344*x3346))+((x3348*x3350)));
if( IKabs(j8eval[0]) < 0.0000010000000000  )
{
continue; // no branches [j7, j8]

} else
{
{
IkReal j8array[4], cj8array[4], sj8array[4];
bool j8valid[4]={false};
_nj8 = 4;
IkReal x3353=r10*r10;
IkReal x3354=cj2*cj2;
IkReal x3355=r00*r00;
IkReal x3356=px*px;
IkReal x3357=(cj2*sj2);
IkReal x3358=(r00*r10);
IkReal x3359=((0.015751)*px);
IkReal x3360=((0.00281174)*px);
IkReal x3361=((0.015751)*py);
IkReal x3362=((0.00281174)*py);
CheckValue<IkReal> x3364=IKPowWithIntegerCheck(((-6.202350025e-5)+(((-1.0)*x3353*(py*py)))+(((-1.0)*cj2*x3353*x3361))+(((-1.0)*cj2*x3358*x3359))+(((4.428771674e-5)*x3353*x3357))+(((0.0001200940595862)*x3357*x3358))+((sj2*x3353*x3362))+((cj2*x3355*x3360))+(((-0.0001200940595862)*x3353*x3354))+((cj2*x3358*x3362))+((sj2*x3355*x3359))+(((-2.0)*px*py*x3358))+((sj2*x3358*x3361))+((sj2*x3358*x3360))+(((4.428771674e-5)*x3354*x3358))+(((6.00470297931e-5)*x3353))+(((6.00470297931e-5)*x3354))+(((-2.214385837e-5)*x3357))+(((-2.214385837e-5)*x3358))+((x3353*x3356))+(((-1.0)*x3356))),-1);
if(!x3364.valid){
continue;
}
if((((-1.0)*(x3364.value))) < -0.00001)
continue;
IkReal x3363=IKsqrt(((-1.0)*(x3364.value)));
cj8array[0]=((0.29)*x3363);
cj8array[2]=((-0.29)*x3363);
if( cj8array[0] >= -1-IKFAST_SINCOS_THRESH && cj8array[0] <= 1+IKFAST_SINCOS_THRESH )
{
    j8valid[0] = j8valid[1] = true;
    j8array[0] = IKacos(cj8array[0]);
    sj8array[0] = IKsin(j8array[0]);
    cj8array[1] = cj8array[0];
    j8array[1] = -j8array[0];
    sj8array[1] = -sj8array[0];
}
else if( isnan(cj8array[0]) )
{
    // probably any value will work
    j8valid[0] = true;
    cj8array[0] = 1; sj8array[0] = 0; j8array[0] = 0;
}
if( cj8array[2] >= -1-IKFAST_SINCOS_THRESH && cj8array[2] <= 1+IKFAST_SINCOS_THRESH )
{
    j8valid[2] = j8valid[3] = true;
    j8array[2] = IKacos(cj8array[2]);
    sj8array[2] = IKsin(j8array[2]);
    cj8array[3] = cj8array[2];
    j8array[3] = -j8array[2];
    sj8array[3] = -sj8array[2];
}
else if( isnan(cj8array[2]) )
{
    // probably any value will work
    j8valid[2] = true;
    cj8array[2] = 1; sj8array[2] = 0; j8array[2] = 0;
}
for(int ij8 = 0; ij8 < 4; ++ij8)
{
if( !j8valid[ij8] )
{
    continue;
}
_ij8[0] = ij8; _ij8[1] = -1;
for(int iij8 = ij8+1; iij8 < 4; ++iij8)
{
if( j8valid[iij8] && IKabs(cj8array[ij8]-cj8array[iij8]) < IKFAST_SOLUTION_THRESH && IKabs(sj8array[ij8]-sj8array[iij8]) < IKFAST_SOLUTION_THRESH )
{
    j8valid[iij8]=false; _ij8[1] = iij8; break; 
}
}
j8 = j8array[ij8]; cj8 = cj8array[ij8]; sj8 = sj8array[ij8];
{
IkReal evalcond[1];
IkReal x3365=IKcos(j8);
IkReal x3366=(r10*x3365);
IkReal x3367=(r00*x3365);
evalcond[0]=(((py*x3366))+(((0.0078755)*cj2*x3366))+((px*x3367))+(((-0.00140587)*sj2*x3366))+(((-0.0078755)*sj2*x3367))+(((-0.00140587)*cj2*x3367)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j7eval[1];
IkReal x3368=((-1.0)*pz);
r21=0;
npy=0;
rxp1_0=0;
rxp1_1=0;
r11=0;
r01=0;
r22=0;
r20=0;
npx=(((px*r00))+((py*r10)));
npz=(((px*r02))+((py*r12)));
rxp0_0=(pz*r10);
rxp0_1=(r00*x3368);
rxp1_2=0;
rxp2_0=(pz*r12);
rxp2_1=(r02*x3368);
j7eval[0]=1.0;
if( IKabs(j7eval[0]) < 0.0000000100000000  )
{
continue; // no branches [j7]

} else
{
IkReal op[2+1], zeror[2];
int numroots;
op[0]=-1.0;
op[1]=0;
op[2]=1.0;
polyroots2(op,zeror,numroots);
IkReal j7array[2], cj7array[2], sj7array[2], tempj7array[1];
int numsolutions = 0;
for(int ij7 = 0; ij7 < numroots; ++ij7)
{
IkReal htj7 = zeror[ij7];
tempj7array[0]=((2.0)*(atan(htj7)));
for(int kj7 = 0; kj7 < 1; ++kj7)
{
j7array[numsolutions] = tempj7array[kj7];
if( j7array[numsolutions] > IKPI )
{
    j7array[numsolutions]-=IK2PI;
}
else if( j7array[numsolutions] < -IKPI )
{
    j7array[numsolutions]+=IK2PI;
}
sj7array[numsolutions] = IKsin(j7array[numsolutions]);
cj7array[numsolutions] = IKcos(j7array[numsolutions]);
numsolutions++;
}
}
bool j7valid[2]={true,true};
_nj7 = 2;
for(int ij7 = 0; ij7 < numsolutions; ++ij7)
    {
if( !j7valid[ij7] )
{
    continue;
}
    j7 = j7array[ij7]; cj7 = cj7array[ij7]; sj7 = sj7array[ij7];
htj7 = IKtan(j7/2);

_ij7[0] = ij7; _ij7[1] = -1;
for(int iij7 = ij7+1; iij7 < numsolutions; ++iij7)
{
if( j7valid[iij7] && IKabs(cj7array[ij7]-cj7array[iij7]) < IKFAST_SOLUTION_THRESH && IKabs(sj7array[ij7]-sj7array[iij7]) < IKFAST_SOLUTION_THRESH )
{
    j7valid[iij7]=false; _ij7[1] = iij7; break; 
}
}
rotationfunction0(solutions);
    }

}

}
}
}

}

}

} else
{
IkReal op[2+1], zeror[2];
int numroots;
op[0]=-1.0;
op[1]=0;
op[2]=1.0;
polyroots2(op,zeror,numroots);
IkReal j7array[2], cj7array[2], sj7array[2], tempj7array[1];
int numsolutions = 0;
for(int ij7 = 0; ij7 < numroots; ++ij7)
{
IkReal htj7 = zeror[ij7];
tempj7array[0]=((2.0)*(atan(htj7)));
for(int kj7 = 0; kj7 < 1; ++kj7)
{
j7array[numsolutions] = tempj7array[kj7];
if( j7array[numsolutions] > IKPI )
{
    j7array[numsolutions]-=IK2PI;
}
else if( j7array[numsolutions] < -IKPI )
{
    j7array[numsolutions]+=IK2PI;
}
sj7array[numsolutions] = IKsin(j7array[numsolutions]);
cj7array[numsolutions] = IKcos(j7array[numsolutions]);
numsolutions++;
}
}
bool j7valid[2]={true,true};
_nj7 = 2;
for(int ij7 = 0; ij7 < numsolutions; ++ij7)
    {
if( !j7valid[ij7] )
{
    continue;
}
    j7 = j7array[ij7]; cj7 = cj7array[ij7]; sj7 = sj7array[ij7];
htj7 = IKtan(j7/2);

_ij7[0] = ij7; _ij7[1] = -1;
for(int iij7 = ij7+1; iij7 < numsolutions; ++iij7)
{
if( j7valid[iij7] && IKabs(cj7array[ij7]-cj7array[iij7]) < IKFAST_SOLUTION_THRESH && IKabs(sj7array[ij7]-sj7array[iij7]) < IKFAST_SOLUTION_THRESH )
{
    j7valid[iij7]=false; _ij7[1] = iij7; break; 
}
}
{
IkReal j8eval[1];
IkReal x3369=((-1.0)*pz);
r21=0;
npy=0;
rxp1_0=0;
rxp1_1=0;
r11=0;
r01=0;
r22=0;
r20=0;
npx=(((px*r00))+((py*r10)));
npz=(((px*r02))+((py*r12)));
rxp0_0=(pz*r10);
rxp0_1=(r00*x3369);
rxp1_2=0;
rxp2_0=(pz*r12);
rxp2_1=(r02*x3369);
IkReal x3370=r10*r10;
IkReal x3371=r00*r00;
IkReal x3372=cj2*cj2;
IkReal x3373=px*px;
IkReal x3374=((126.976065011745)*cj2);
IkReal x3375=((126.976065011745)*sj2);
IkReal x3376=(r00*r10);
IkReal x3377=(cj2*sj2);
IkReal x3378=((711.303321075206)*sj2);
IkReal x3379=((711.303321075206)*cj2);
IkReal x3380=(px*x3371);
IkReal x3381=(py*x3370);
IkReal x3382=((45159.2483699579)*x3370);
j8eval[0]=((-2.80093465256389)+(((-1.0)*x3377))+(((-1.0)*x3376))+((x3375*x3381))+((x3374*x3380))+((x3373*x3382))+(((-90318.4967399157)*px*py*x3376))+(((2.0)*x3372*x3376))+(((-5.42335746460972)*x3370*x3372))+(((5.42335746460972)*x3376*x3377))+(((-45159.2483699579)*py*x3381))+(((-45159.2483699579)*x3373))+(((-1.0)*x3379*x3381))+((py*x3374*x3376))+(((2.71167873230486)*x3372))+(((2.71167873230486)*x3370))+((x3378*x3380))+(((-1.0)*px*x3376*x3379))+((px*x3375*x3376))+(((2.0)*x3370*x3377))+((py*x3376*x3378)));
if( IKabs(j8eval[0]) < 0.0000010000000000  )
{
continue; // no branches [j8]

} else
{
{
IkReal j8array[4], cj8array[4], sj8array[4];
bool j8valid[4]={false};
_nj8 = 4;
IkReal x3383=r10*r10;
IkReal x3384=cj2*cj2;
IkReal x3385=r00*r00;
IkReal x3386=px*px;
IkReal x3387=(cj2*sj2);
IkReal x3388=(r00*r10);
IkReal x3389=((0.015751)*px);
IkReal x3390=((0.00281174)*px);
IkReal x3391=((0.015751)*py);
IkReal x3392=((0.00281174)*py);
CheckValue<IkReal> x3394=IKPowWithIntegerCheck(((-6.202350025e-5)+(((-1.0)*x3383*(py*py)))+(((-1.0)*x3386))+(((-2.0)*px*py*x3388))+(((-0.0001200940595862)*x3383*x3384))+((sj2*x3388*x3391))+((sj2*x3388*x3390))+((sj2*x3385*x3389))+(((-1.0)*cj2*x3388*x3389))+(((6.00470297931e-5)*x3384))+(((6.00470297931e-5)*x3383))+(((0.0001200940595862)*x3387*x3388))+((sj2*x3383*x3392))+((cj2*x3388*x3392))+((cj2*x3385*x3390))+(((4.428771674e-5)*x3383*x3387))+(((-1.0)*cj2*x3383*x3391))+(((-2.214385837e-5)*x3387))+(((-2.214385837e-5)*x3388))+((x3383*x3386))+(((4.428771674e-5)*x3384*x3388))),-1);
if(!x3394.valid){
continue;
}
if((((-1.0)*(x3394.value))) < -0.00001)
continue;
IkReal x3393=IKsqrt(((-1.0)*(x3394.value)));
cj8array[0]=((0.29)*x3393);
cj8array[2]=((-0.29)*x3393);
if( cj8array[0] >= -1-IKFAST_SINCOS_THRESH && cj8array[0] <= 1+IKFAST_SINCOS_THRESH )
{
    j8valid[0] = j8valid[1] = true;
    j8array[0] = IKacos(cj8array[0]);
    sj8array[0] = IKsin(j8array[0]);
    cj8array[1] = cj8array[0];
    j8array[1] = -j8array[0];
    sj8array[1] = -sj8array[0];
}
else if( isnan(cj8array[0]) )
{
    // probably any value will work
    j8valid[0] = true;
    cj8array[0] = 1; sj8array[0] = 0; j8array[0] = 0;
}
if( cj8array[2] >= -1-IKFAST_SINCOS_THRESH && cj8array[2] <= 1+IKFAST_SINCOS_THRESH )
{
    j8valid[2] = j8valid[3] = true;
    j8array[2] = IKacos(cj8array[2]);
    sj8array[2] = IKsin(j8array[2]);
    cj8array[3] = cj8array[2];
    j8array[3] = -j8array[2];
    sj8array[3] = -sj8array[2];
}
else if( isnan(cj8array[2]) )
{
    // probably any value will work
    j8valid[2] = true;
    cj8array[2] = 1; sj8array[2] = 0; j8array[2] = 0;
}
for(int ij8 = 0; ij8 < 4; ++ij8)
{
if( !j8valid[ij8] )
{
    continue;
}
_ij8[0] = ij8; _ij8[1] = -1;
for(int iij8 = ij8+1; iij8 < 4; ++iij8)
{
if( j8valid[iij8] && IKabs(cj8array[ij8]-cj8array[iij8]) < IKFAST_SOLUTION_THRESH && IKabs(sj8array[ij8]-sj8array[iij8]) < IKFAST_SOLUTION_THRESH )
{
    j8valid[iij8]=false; _ij8[1] = iij8; break; 
}
}
j8 = j8array[ij8]; cj8 = cj8array[ij8]; sj8 = sj8array[ij8];
{
IkReal evalcond[1];
IkReal x3395=IKcos(j8);
IkReal x3396=(r10*x3395);
IkReal x3397=(r00*x3395);
evalcond[0]=((((0.0078755)*cj2*x3396))+(((-0.0078755)*sj2*x3397))+(((-0.00140587)*cj2*x3397))+((px*x3397))+((py*x3396))+(((-0.00140587)*sj2*x3396)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

rotationfunction0(solutions);
}
}

}

}
    }

}

}
}
}

}

}

} else
{
{
IkReal j2array[1], cj2array[1], sj2array[1];
bool j2valid[1]={false};
_nj2 = 1;
IkReal x3398=py*py;
IkReal x3399=px*px;
IkReal x3400=(pp*r00);
IkReal x3401=(px*py);
IkReal x3402=(pp*r10);
IkReal x3403=(r00*x3399);
IkReal x3404=(r10*x3398);
CheckValue<IkReal> x3405=IKPowWithIntegerCheck(IKsign(rxp0_2),-1);
if(!x3405.valid){
continue;
}
CheckValue<IkReal> x3406 = IKatan2WithCheck(IkReal(((((0.015751)*r00*x3401))+(((-0.00281174)*r10*x3401))+(((8.99756388177095e-8)*r00))+(((-5.04031769302191e-7)*r10))+(((0.015751)*x3404))+(((0.00140587)*x3400))+(((-0.00281174)*x3403))+(((-0.0078755)*x3402)))),IkReal(((((0.015751)*r10*x3401))+(((-5.04031769302191e-7)*r00))+(((0.015751)*x3403))+(((-0.00140587)*x3402))+(((0.00281174)*x3404))+(((-8.99756388177095e-8)*r10))+(((-0.0078755)*x3400))+(((0.00281174)*r00*x3401)))),IKFAST_ATAN2_MAGTHRESH);
if(!x3406.valid){
continue;
}
j2array[0]=((-1.5707963267949)+(((1.5707963267949)*(x3405.value)))+(x3406.value));
sj2array[0]=IKsin(j2array[0]);
cj2array[0]=IKcos(j2array[0]);
if( j2array[0] > IKPI )
{
    j2array[0]-=IK2PI;
}
else if( j2array[0] < -IKPI )
{    j2array[0]+=IK2PI;
}
j2valid[0] = true;
for(int ij2 = 0; ij2 < 1; ++ij2)
{
if( !j2valid[ij2] )
{
    continue;
}
_ij2[0] = ij2; _ij2[1] = -1;
for(int iij2 = ij2+1; iij2 < 1; ++iij2)
{
if( j2valid[iij2] && IKabs(cj2array[ij2]-cj2array[iij2]) < IKFAST_SOLUTION_THRESH && IKabs(sj2array[ij2]-sj2array[iij2]) < IKFAST_SOLUTION_THRESH )
{
    j2valid[iij2]=false; _ij2[1] = iij2; break; 
}
}
j2 = j2array[ij2]; cj2 = cj2array[ij2]; sj2 = sj2array[ij2];
{
IkReal evalcond[3];
IkReal x3407=IKsin(j2);
IkReal x3408=IKcos(j2);
IkReal x3409=((0.00140587)*x3407);
IkReal x3410=((0.00140587)*x3408);
IkReal x3411=((0.0078755)*x3407);
IkReal x3412=((0.0078755)*x3408);
evalcond[0]=((-6.39999707069e-5)+(((0.00281174)*px*x3408))+(((0.015751)*px*x3407))+(((-1.0)*pp))+(((-0.015751)*py*x3408))+(((0.00281174)*py*x3407)));
evalcond[1]=(((px*r00))+((r10*x3412))+((py*r10))+(((-1.0)*r10*x3409))+(((-1.0)*r00*x3410))+(((-1.0)*r00*x3411)));
evalcond[2]=(((px*r02))+((r12*x3412))+(((-1.0)*r02*x3411))+(((-1.0)*r02*x3410))+(((-1.0)*r12*x3409))+((py*r12)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j7eval[1];
IkReal x3413=((-1.0)*pz);
r21=0;
npy=0;
rxp1_0=0;
rxp1_1=0;
r11=0;
r01=0;
r22=0;
r20=0;
npx=(((px*r00))+((py*r10)));
npz=(((px*r02))+((py*r12)));
rxp0_0=(pz*r10);
rxp0_1=(r00*x3413);
rxp1_2=0;
rxp2_0=(pz*r12);
rxp2_1=(r02*x3413);
j7eval[0]=1.0;
if( IKabs(j7eval[0]) < 0.0000000100000000  )
{
{
IkReal j8eval[1];
IkReal x3414=((-1.0)*pz);
r21=0;
npy=0;
rxp1_0=0;
rxp1_1=0;
r11=0;
r01=0;
r22=0;
r20=0;
npx=(((px*r00))+((py*r10)));
npz=(((px*r02))+((py*r12)));
rxp0_0=(pz*r10);
rxp0_1=(r00*x3414);
rxp1_2=0;
rxp2_0=(pz*r12);
rxp2_1=(r02*x3414);
IkReal x3415=r10*r10;
IkReal x3416=r00*r00;
IkReal x3417=cj2*cj2;
IkReal x3418=px*px;
IkReal x3419=((126.976065011745)*cj2);
IkReal x3420=((126.976065011745)*sj2);
IkReal x3421=(r00*r10);
IkReal x3422=(cj2*sj2);
IkReal x3423=((711.303321075206)*sj2);
IkReal x3424=((711.303321075206)*cj2);
IkReal x3425=(px*x3416);
IkReal x3426=(py*x3415);
IkReal x3427=((45159.2483699579)*x3415);
j8eval[0]=((-2.80093465256389)+(((-45159.2483699579)*x3418))+(((2.0)*x3415*x3422))+(((-5.42335746460972)*x3415*x3417))+((py*x3419*x3421))+((x3418*x3427))+((py*x3421*x3423))+(((-45159.2483699579)*py*x3426))+((x3420*x3426))+(((-1.0)*x3424*x3426))+(((2.0)*x3417*x3421))+(((2.71167873230486)*x3417))+(((2.71167873230486)*x3415))+(((-1.0)*px*x3421*x3424))+((px*x3420*x3421))+(((-1.0)*x3422))+(((-1.0)*x3421))+(((-90318.4967399157)*px*py*x3421))+(((5.42335746460972)*x3421*x3422))+((x3419*x3425))+((x3423*x3425)));
if( IKabs(j8eval[0]) < 0.0000010000000000  )
{
continue; // no branches [j7, j8]

} else
{
{
IkReal j8array[4], cj8array[4], sj8array[4];
bool j8valid[4]={false};
_nj8 = 4;
IkReal x3428=r10*r10;
IkReal x3429=cj2*cj2;
IkReal x3430=r00*r00;
IkReal x3431=px*px;
IkReal x3432=(cj2*sj2);
IkReal x3433=(r00*r10);
IkReal x3434=((0.015751)*px);
IkReal x3435=((0.00281174)*px);
IkReal x3436=((0.015751)*py);
IkReal x3437=((0.00281174)*py);
CheckValue<IkReal> x3439=IKPowWithIntegerCheck(((-6.202350025e-5)+(((-2.214385837e-5)*x3433))+(((-2.214385837e-5)*x3432))+(((4.428771674e-5)*x3429*x3433))+((x3428*x3431))+(((4.428771674e-5)*x3428*x3432))+((sj2*x3433*x3435))+((sj2*x3433*x3436))+(((-1.0)*cj2*x3433*x3434))+(((-1.0)*x3428*(py*py)))+(((-1.0)*cj2*x3428*x3436))+(((-1.0)*x3431))+((cj2*x3433*x3437))+(((-0.0001200940595862)*x3428*x3429))+(((6.00470297931e-5)*x3429))+(((6.00470297931e-5)*x3428))+((sj2*x3428*x3437))+((cj2*x3430*x3435))+((sj2*x3430*x3434))+(((-2.0)*px*py*x3433))+(((0.0001200940595862)*x3432*x3433))),-1);
if(!x3439.valid){
continue;
}
if((((-1.0)*(x3439.value))) < -0.00001)
continue;
IkReal x3438=IKsqrt(((-1.0)*(x3439.value)));
cj8array[0]=((0.29)*x3438);
cj8array[2]=((-0.29)*x3438);
if( cj8array[0] >= -1-IKFAST_SINCOS_THRESH && cj8array[0] <= 1+IKFAST_SINCOS_THRESH )
{
    j8valid[0] = j8valid[1] = true;
    j8array[0] = IKacos(cj8array[0]);
    sj8array[0] = IKsin(j8array[0]);
    cj8array[1] = cj8array[0];
    j8array[1] = -j8array[0];
    sj8array[1] = -sj8array[0];
}
else if( isnan(cj8array[0]) )
{
    // probably any value will work
    j8valid[0] = true;
    cj8array[0] = 1; sj8array[0] = 0; j8array[0] = 0;
}
if( cj8array[2] >= -1-IKFAST_SINCOS_THRESH && cj8array[2] <= 1+IKFAST_SINCOS_THRESH )
{
    j8valid[2] = j8valid[3] = true;
    j8array[2] = IKacos(cj8array[2]);
    sj8array[2] = IKsin(j8array[2]);
    cj8array[3] = cj8array[2];
    j8array[3] = -j8array[2];
    sj8array[3] = -sj8array[2];
}
else if( isnan(cj8array[2]) )
{
    // probably any value will work
    j8valid[2] = true;
    cj8array[2] = 1; sj8array[2] = 0; j8array[2] = 0;
}
for(int ij8 = 0; ij8 < 4; ++ij8)
{
if( !j8valid[ij8] )
{
    continue;
}
_ij8[0] = ij8; _ij8[1] = -1;
for(int iij8 = ij8+1; iij8 < 4; ++iij8)
{
if( j8valid[iij8] && IKabs(cj8array[ij8]-cj8array[iij8]) < IKFAST_SOLUTION_THRESH && IKabs(sj8array[ij8]-sj8array[iij8]) < IKFAST_SOLUTION_THRESH )
{
    j8valid[iij8]=false; _ij8[1] = iij8; break; 
}
}
j8 = j8array[ij8]; cj8 = cj8array[ij8]; sj8 = sj8array[ij8];
{
IkReal evalcond[1];
IkReal x3440=IKcos(j8);
IkReal x3441=(r10*x3440);
IkReal x3442=(r00*x3440);
evalcond[0]=(((px*x3442))+((py*x3441))+(((0.0078755)*cj2*x3441))+(((-0.00140587)*sj2*x3441))+(((-0.0078755)*sj2*x3442))+(((-0.00140587)*cj2*x3442)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j7eval[1];
IkReal x3443=((-1.0)*pz);
r21=0;
npy=0;
rxp1_0=0;
rxp1_1=0;
r11=0;
r01=0;
r22=0;
r20=0;
npx=(((px*r00))+((py*r10)));
npz=(((px*r02))+((py*r12)));
rxp0_0=(pz*r10);
rxp0_1=(r00*x3443);
rxp1_2=0;
rxp2_0=(pz*r12);
rxp2_1=(r02*x3443);
j7eval[0]=1.0;
if( IKabs(j7eval[0]) < 0.0000000100000000  )
{
continue; // no branches [j7]

} else
{
IkReal op[2+1], zeror[2];
int numroots;
op[0]=-1.0;
op[1]=0;
op[2]=1.0;
polyroots2(op,zeror,numroots);
IkReal j7array[2], cj7array[2], sj7array[2], tempj7array[1];
int numsolutions = 0;
for(int ij7 = 0; ij7 < numroots; ++ij7)
{
IkReal htj7 = zeror[ij7];
tempj7array[0]=((2.0)*(atan(htj7)));
for(int kj7 = 0; kj7 < 1; ++kj7)
{
j7array[numsolutions] = tempj7array[kj7];
if( j7array[numsolutions] > IKPI )
{
    j7array[numsolutions]-=IK2PI;
}
else if( j7array[numsolutions] < -IKPI )
{
    j7array[numsolutions]+=IK2PI;
}
sj7array[numsolutions] = IKsin(j7array[numsolutions]);
cj7array[numsolutions] = IKcos(j7array[numsolutions]);
numsolutions++;
}
}
bool j7valid[2]={true,true};
_nj7 = 2;
for(int ij7 = 0; ij7 < numsolutions; ++ij7)
    {
if( !j7valid[ij7] )
{
    continue;
}
    j7 = j7array[ij7]; cj7 = cj7array[ij7]; sj7 = sj7array[ij7];
htj7 = IKtan(j7/2);

_ij7[0] = ij7; _ij7[1] = -1;
for(int iij7 = ij7+1; iij7 < numsolutions; ++iij7)
{
if( j7valid[iij7] && IKabs(cj7array[ij7]-cj7array[iij7]) < IKFAST_SOLUTION_THRESH && IKabs(sj7array[ij7]-sj7array[iij7]) < IKFAST_SOLUTION_THRESH )
{
    j7valid[iij7]=false; _ij7[1] = iij7; break; 
}
}
rotationfunction0(solutions);
    }

}

}
}
}

}

}

} else
{
IkReal op[2+1], zeror[2];
int numroots;
op[0]=-1.0;
op[1]=0;
op[2]=1.0;
polyroots2(op,zeror,numroots);
IkReal j7array[2], cj7array[2], sj7array[2], tempj7array[1];
int numsolutions = 0;
for(int ij7 = 0; ij7 < numroots; ++ij7)
{
IkReal htj7 = zeror[ij7];
tempj7array[0]=((2.0)*(atan(htj7)));
for(int kj7 = 0; kj7 < 1; ++kj7)
{
j7array[numsolutions] = tempj7array[kj7];
if( j7array[numsolutions] > IKPI )
{
    j7array[numsolutions]-=IK2PI;
}
else if( j7array[numsolutions] < -IKPI )
{
    j7array[numsolutions]+=IK2PI;
}
sj7array[numsolutions] = IKsin(j7array[numsolutions]);
cj7array[numsolutions] = IKcos(j7array[numsolutions]);
numsolutions++;
}
}
bool j7valid[2]={true,true};
_nj7 = 2;
for(int ij7 = 0; ij7 < numsolutions; ++ij7)
    {
if( !j7valid[ij7] )
{
    continue;
}
    j7 = j7array[ij7]; cj7 = cj7array[ij7]; sj7 = sj7array[ij7];
htj7 = IKtan(j7/2);

_ij7[0] = ij7; _ij7[1] = -1;
for(int iij7 = ij7+1; iij7 < numsolutions; ++iij7)
{
if( j7valid[iij7] && IKabs(cj7array[ij7]-cj7array[iij7]) < IKFAST_SOLUTION_THRESH && IKabs(sj7array[ij7]-sj7array[iij7]) < IKFAST_SOLUTION_THRESH )
{
    j7valid[iij7]=false; _ij7[1] = iij7; break; 
}
}
{
IkReal j8eval[1];
IkReal x3444=((-1.0)*pz);
r21=0;
npy=0;
rxp1_0=0;
rxp1_1=0;
r11=0;
r01=0;
r22=0;
r20=0;
npx=(((px*r00))+((py*r10)));
npz=(((px*r02))+((py*r12)));
rxp0_0=(pz*r10);
rxp0_1=(r00*x3444);
rxp1_2=0;
rxp2_0=(pz*r12);
rxp2_1=(r02*x3444);
IkReal x3445=r10*r10;
IkReal x3446=r00*r00;
IkReal x3447=cj2*cj2;
IkReal x3448=px*px;
IkReal x3449=((126.976065011745)*cj2);
IkReal x3450=((126.976065011745)*sj2);
IkReal x3451=(r00*r10);
IkReal x3452=(cj2*sj2);
IkReal x3453=((711.303321075206)*sj2);
IkReal x3454=((711.303321075206)*cj2);
IkReal x3455=(px*x3446);
IkReal x3456=(py*x3445);
IkReal x3457=((45159.2483699579)*x3445);
j8eval[0]=((-2.80093465256389)+((px*x3450*x3451))+(((-45159.2483699579)*x3448))+(((2.71167873230486)*x3445))+(((2.71167873230486)*x3447))+((py*x3449*x3451))+(((-90318.4967399157)*px*py*x3451))+((x3453*x3455))+(((2.0)*x3447*x3451))+(((-1.0)*px*x3451*x3454))+(((2.0)*x3445*x3452))+((x3448*x3457))+(((-1.0)*x3452))+(((-1.0)*x3451))+(((-1.0)*x3454*x3456))+((py*x3451*x3453))+(((5.42335746460972)*x3451*x3452))+(((-45159.2483699579)*py*x3456))+((x3449*x3455))+((x3450*x3456))+(((-5.42335746460972)*x3445*x3447)));
if( IKabs(j8eval[0]) < 0.0000010000000000  )
{
continue; // no branches [j8]

} else
{
{
IkReal j8array[4], cj8array[4], sj8array[4];
bool j8valid[4]={false};
_nj8 = 4;
IkReal x3458=r10*r10;
IkReal x3459=cj2*cj2;
IkReal x3460=r00*r00;
IkReal x3461=px*px;
IkReal x3462=(cj2*sj2);
IkReal x3463=(r00*r10);
IkReal x3464=((0.015751)*px);
IkReal x3465=((0.00281174)*px);
IkReal x3466=((0.015751)*py);
IkReal x3467=((0.00281174)*py);
CheckValue<IkReal> x3469=IKPowWithIntegerCheck(((-6.202350025e-5)+(((-1.0)*x3458*(py*py)))+((sj2*x3460*x3464))+((cj2*x3460*x3465))+(((0.0001200940595862)*x3462*x3463))+(((-1.0)*cj2*x3458*x3466))+((sj2*x3458*x3467))+(((6.00470297931e-5)*x3458))+(((6.00470297931e-5)*x3459))+(((-0.0001200940595862)*x3458*x3459))+(((4.428771674e-5)*x3459*x3463))+(((-2.0)*px*py*x3463))+(((4.428771674e-5)*x3458*x3462))+((sj2*x3463*x3466))+((sj2*x3463*x3465))+(((-1.0)*x3461))+((cj2*x3463*x3467))+((x3458*x3461))+(((-1.0)*cj2*x3463*x3464))+(((-2.214385837e-5)*x3462))+(((-2.214385837e-5)*x3463))),-1);
if(!x3469.valid){
continue;
}
if((((-1.0)*(x3469.value))) < -0.00001)
continue;
IkReal x3468=IKsqrt(((-1.0)*(x3469.value)));
cj8array[0]=((0.29)*x3468);
cj8array[2]=((-0.29)*x3468);
if( cj8array[0] >= -1-IKFAST_SINCOS_THRESH && cj8array[0] <= 1+IKFAST_SINCOS_THRESH )
{
    j8valid[0] = j8valid[1] = true;
    j8array[0] = IKacos(cj8array[0]);
    sj8array[0] = IKsin(j8array[0]);
    cj8array[1] = cj8array[0];
    j8array[1] = -j8array[0];
    sj8array[1] = -sj8array[0];
}
else if( isnan(cj8array[0]) )
{
    // probably any value will work
    j8valid[0] = true;
    cj8array[0] = 1; sj8array[0] = 0; j8array[0] = 0;
}
if( cj8array[2] >= -1-IKFAST_SINCOS_THRESH && cj8array[2] <= 1+IKFAST_SINCOS_THRESH )
{
    j8valid[2] = j8valid[3] = true;
    j8array[2] = IKacos(cj8array[2]);
    sj8array[2] = IKsin(j8array[2]);
    cj8array[3] = cj8array[2];
    j8array[3] = -j8array[2];
    sj8array[3] = -sj8array[2];
}
else if( isnan(cj8array[2]) )
{
    // probably any value will work
    j8valid[2] = true;
    cj8array[2] = 1; sj8array[2] = 0; j8array[2] = 0;
}
for(int ij8 = 0; ij8 < 4; ++ij8)
{
if( !j8valid[ij8] )
{
    continue;
}
_ij8[0] = ij8; _ij8[1] = -1;
for(int iij8 = ij8+1; iij8 < 4; ++iij8)
{
if( j8valid[iij8] && IKabs(cj8array[ij8]-cj8array[iij8]) < IKFAST_SOLUTION_THRESH && IKabs(sj8array[ij8]-sj8array[iij8]) < IKFAST_SOLUTION_THRESH )
{
    j8valid[iij8]=false; _ij8[1] = iij8; break; 
}
}
j8 = j8array[ij8]; cj8 = cj8array[ij8]; sj8 = sj8array[ij8];
{
IkReal evalcond[1];
IkReal x3470=IKcos(j8);
IkReal x3471=(r10*x3470);
IkReal x3472=(r00*x3470);
evalcond[0]=((((-0.00140587)*cj2*x3472))+(((0.0078755)*cj2*x3471))+((px*x3472))+((py*x3471))+(((-0.0078755)*sj2*x3472))+(((-0.00140587)*sj2*x3471)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

rotationfunction0(solutions);
}
}

}

}
    }

}

}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
if( 1 )
{
bgotonextstatement=false;
continue; // branch miss [j2, j7, j8]

}
} while(0);
if( bgotonextstatement )
{
}
}
}
}

} else
{
{
IkReal j2array[1], cj2array[1], sj2array[1];
bool j2valid[1]={false};
_nj2 = 1;
IkReal x3473=((0.0078755)*r01);
IkReal x3474=(px*r00);
IkReal x3475=((0.00140587)*r11);
IkReal x3476=(py*r00);
IkReal x3477=(py*r10);
IkReal x3478=((0.0078755)*r11);
IkReal x3479=((0.00140587)*r01);
IkReal x3480=(px*r10);
CheckValue<IkReal> x3481 = IKatan2WithCheck(IkReal((((x3475*x3476))+((x3474*x3479))+((npx*x3478))+(((-1.0)*npx*x3479))+(((-1.0)*x3473*x3480))+(((-1.0)*x3477*x3478)))),IkReal((((npx*x3475))+((npx*x3473))+(((-1.0)*x3479*x3480))+(((-1.0)*x3473*x3474))+(((-1.0)*x3475*x3477))+(((-1.0)*x3476*x3478)))),IKFAST_ATAN2_MAGTHRESH);
if(!x3481.valid){
continue;
}
CheckValue<IkReal> x3482=IKPowWithIntegerCheck(IKsign(r22),-1);
if(!x3482.valid){
continue;
}
j2array[0]=((-1.5707963267949)+(x3481.value)+(((1.5707963267949)*(x3482.value))));
sj2array[0]=IKsin(j2array[0]);
cj2array[0]=IKcos(j2array[0]);
if( j2array[0] > IKPI )
{
    j2array[0]-=IK2PI;
}
else if( j2array[0] < -IKPI )
{    j2array[0]+=IK2PI;
}
j2valid[0] = true;
for(int ij2 = 0; ij2 < 1; ++ij2)
{
if( !j2valid[ij2] )
{
    continue;
}
_ij2[0] = ij2; _ij2[1] = -1;
for(int iij2 = ij2+1; iij2 < 1; ++iij2)
{
if( j2valid[iij2] && IKabs(cj2array[ij2]-cj2array[iij2]) < IKFAST_SOLUTION_THRESH && IKabs(sj2array[ij2]-sj2array[iij2]) < IKFAST_SOLUTION_THRESH )
{
    j2valid[iij2]=false; _ij2[1] = iij2; break; 
}
}
j2 = j2array[ij2]; cj2 = cj2array[ij2]; sj2 = sj2array[ij2];
{
IkReal evalcond[4];
IkReal x3483=IKcos(j2);
IkReal x3484=IKsin(j2);
IkReal x3485=((0.00140587)*x3484);
IkReal x3486=((0.00140587)*x3483);
IkReal x3487=((0.0078755)*x3483);
IkReal x3488=((0.0078755)*x3484);
evalcond[0]=((((-1.0)*r00*x3486))+(((-1.0)*r00*x3488))+(((-1.0)*r10*x3485))+npx+((r10*x3487)));
evalcond[1]=((((-1.0)*r02*x3488))+(((-1.0)*r02*x3486))+npz+(((-1.0)*r12*x3485))+((r12*x3487)));
evalcond[2]=((-6.39999707069e-5)+(((0.00281174)*py*x3484))+(((-0.015751)*py*x3483))+(((-1.0)*pp))+(((0.015751)*px*x3484))+(((0.00281174)*px*x3483)));
evalcond[3]=((((-1.0)*r01*x3486))+(((-1.0)*r01*x3488))+((px*r01))+(((-1.0)*r11*x3485))+((r11*x3487))+((py*r11)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j7eval[1];
r21=0;
npy=(((px*r01))+((py*r11)));
rxp1_0=(pz*r11);
rxp1_1=((-1.0)*pz*r01);
j7eval[0]=1.0;
if( IKabs(j7eval[0]) < 0.0000000100000000  )
{
{
IkReal j8eval[1];
r21=0;
npy=(((px*r01))+((py*r11)));
rxp1_0=(pz*r11);
rxp1_1=((-1.0)*pz*r01);
IkReal x3489=((0.0078755)*cj2);
IkReal x3490=((0.0078755)*sj2);
IkReal x3491=((0.00140587)*sj2);
IkReal x3492=((0.00140587)*cj2);
j8eval[0]=((IKabs(((((-1.0)*r10*x3491))+npx+((r10*x3489))+(((-1.0)*r00*x3492))+(((-1.0)*r00*x3490)))))+(IKabs((((r01*x3492))+((r01*x3490))+(((-1.0)*px*r01))+(((-1.0)*r11*x3489))+(((-1.0)*py*r11))+((r11*x3491))))));
if( IKabs(j8eval[0]) < 0.0000010000000000  )
{
continue; // no branches [j7, j8]

} else
{
{
IkReal j8array[2], cj8array[2], sj8array[2];
bool j8valid[2]={false};
_nj8 = 2;
IkReal x3493=((0.0078755)*cj2);
IkReal x3494=((0.0078755)*sj2);
IkReal x3495=((0.00140587)*sj2);
IkReal x3496=((0.00140587)*cj2);
CheckValue<IkReal> x3498 = IKatan2WithCheck(IkReal(((((-1.0)*r10*x3495))+((r10*x3493))+npx+(((-1.0)*r00*x3496))+(((-1.0)*r00*x3494)))),IkReal((((r01*x3496))+((r01*x3494))+(((-1.0)*px*r01))+(((-1.0)*py*r11))+((r11*x3495))+(((-1.0)*r11*x3493)))),IKFAST_ATAN2_MAGTHRESH);
if(!x3498.valid){
continue;
}
IkReal x3497=x3498.value;
j8array[0]=((-1.0)*x3497);
sj8array[0]=IKsin(j8array[0]);
cj8array[0]=IKcos(j8array[0]);
j8array[1]=((3.14159265358979)+(((-1.0)*x3497)));
sj8array[1]=IKsin(j8array[1]);
cj8array[1]=IKcos(j8array[1]);
if( j8array[0] > IKPI )
{
    j8array[0]-=IK2PI;
}
else if( j8array[0] < -IKPI )
{    j8array[0]+=IK2PI;
}
j8valid[0] = true;
if( j8array[1] > IKPI )
{
    j8array[1]-=IK2PI;
}
else if( j8array[1] < -IKPI )
{    j8array[1]+=IK2PI;
}
j8valid[1] = true;
for(int ij8 = 0; ij8 < 2; ++ij8)
{
if( !j8valid[ij8] )
{
    continue;
}
_ij8[0] = ij8; _ij8[1] = -1;
for(int iij8 = ij8+1; iij8 < 2; ++iij8)
{
if( j8valid[iij8] && IKabs(cj8array[ij8]-cj8array[iij8]) < IKFAST_SOLUTION_THRESH && IKabs(sj8array[ij8]-sj8array[iij8]) < IKFAST_SOLUTION_THRESH )
{
    j8valid[iij8]=false; _ij8[1] = iij8; break; 
}
}
j8 = j8array[ij8]; cj8 = cj8array[ij8]; sj8 = sj8array[ij8];
{
IkReal evalcond[1];
IkReal x3499=IKcos(j8);
IkReal x3500=IKcos(j8);
IkReal x3501=IKcos(j8);
IkReal x3502=IKcos(j8);
IkReal x3503=IKcos(j8);
IkReal x3504=IKcos(j8);
IkReal x3505=IKcos(j8);
IkReal x3506=IKcos(j8);
IkReal x3507=IKcos(j8);
IkReal x3508=IKcos(j8);
IkReal x3509=IKcos(j8);
IkReal x3510=IKcos(j8);
IkReal x3511=IKcos(j8);
IkReal x3512=IKcos(j8);
IkReal x3513=IKcos(j8);
IkReal x3514=IKcos(j8);
IkReal x3515=IKcos(j8);
IkReal x3516=IKcos(j8);
IkReal x3517=IKcos(j8);
IkReal x3518=IKcos(j8);
IkReal x3519=IKcos(j8);
IkReal x3520=IKcos(j8);
IkReal x3521=IKcos(j8);
IkReal x3522=IKcos(j8);
IkReal x3523=IKcos(j8);
IkReal x3524=IKcos(j8);
IkReal x3525=IKcos(j8);
IkReal x3526=IKcos(j8);
IkReal x3527=IKcos(j8);
IkReal x3528=IKcos(j8);
IkReal x3529=IKcos(j8);
IkReal x3530=IKcos(j8);
IkReal x3531=IKcos(j8);
IkReal x3532=IKcos(j8);
IkReal x3533=IKcos(j8);
IkReal x3534=IKcos(j8);
IkReal x3535=IKcos(j8);
IkReal x3536=IKcos(j8);
evalcond[0]=((0.0841)+(((-0.0001200940595862)*cj2*r00*r11*sj2*(IKcos(j8))*(IKsin(j8))))+(((-0.00281174)*npx*r11*sj2*(IKcos(j8))*(IKsin(j8))))+(((-0.015751)*px*r00*r01*sj2*(IKcos(j8))*(IKsin(j8))))+(((-1.9764704569e-6)*(r10*r10)*(x3499*x3499)))+(((2.0)*px*py*r01*r11*(x3500*x3500)))+(((pz*pz)*(r20*r20)*(x3501*x3501)))+(((6.202350025e-5)*(r01*r01)*(x3502*x3502)))+(((-6.00470297931e-5)*(cj2*cj2)*(r10*r10)*(x3503*x3503)))+(((0.0001200940595862)*cj2*r01*r11*sj2))+(((-2.214385837e-5)*r00*r10*(x3504*x3504)))+(((-0.00281174)*cj2*py*r01*r11*(x3505*x3505)))+(((-2.0)*px*py*r00*r10*(x3506*x3506)))+(((-0.00281174)*cj2*px*r00*r01*(IKcos(j8))*(IKsin(j8))))+(((0.015751)*cj2*npx*r11*(IKcos(j8))*(IKsin(j8))))+(((-6.202350025e-5)*(r01*r01)))+(((-1.0)*(px*px)*(r00*r00)*(x3507*x3507)))+(((-1.0)*(py*py)*(r10*r10)*(x3508*x3508)))+(((-0.0001200940595862)*cj2*r01*r11*sj2*(x3509*x3509)))+(((-0.015751)*px*sj2*(r01*r01)*(x3510*x3510)))+(((-6.00470297931e-5)*(cj2*cj2)*(r01*r01)*(x3511*x3511)))+(((6.00470297931e-5)*(cj2*cj2)*(r01*r01)))+(((-2.0)*px*py*r01*r11))+(((4.428771674e-5)*r01*r11*(cj2*cj2)))+(((0.00281174)*cj2*py*r01*r11))+(((0.00281174)*cj2*px*(r01*r01)))+(((0.015751)*npx*r00*sj2*(x3512*x3512)))+(((4.428771674e-5)*cj2*r00*r01*sj2*(IKcos(j8))*(IKsin(j8))))+(((-1.9764704569e-6)*(r11*r11)))+(((2.214385837e-5)*r00*r11*(IKcos(j8))*(IKsin(j8))))+(((4.428771674e-5)*r00*r10*(cj2*cj2)*(x3513*x3513)))+(((2.0)*npx*py*r11*(IKcos(j8))*(IKsin(j8))))+(((0.0001240470005)*r00*r01*(IKcos(j8))*(IKsin(j8))))+(((-0.00281174)*px*r01*r11*sj2*(x3514*x3514)))+(((6.00470297931e-5)*(cj2*cj2)*(r00*r00)*(x3515*x3515)))+(((-4.428771674e-5)*r00*r11*(cj2*cj2)*(IKcos(j8))*(IKsin(j8))))+(((2.214385837e-5)*cj2*sj2*(r10*r10)*(x3516*x3516)))+(((0.015751)*py*r01*r11*sj2))+(((0.015751)*cj2*py*r10*r11*(IKcos(j8))*(IKsin(j8))))+(((2.214385837e-5)*r01*r10*(IKcos(j8))*(IKsin(j8))))+(((6.00470297931e-5)*(cj2*cj2)*(r11*r11)*(x3517*x3517)))+(((-0.00281174)*cj2*px*(r01*r01)*(x3518*x3518)))+(((-6.202350025e-5)*(r00*r00)*(x3519*x3519)))+(((0.00281174)*npx*r10*sj2*(x3520*x3520)))+(((-2.0)*npx*pz*r20*(x3521*x3521)))+(((-0.00281174)*py*r10*r11*sj2*(IKcos(j8))*(IKsin(j8))))+(((-2.214385837e-5)*r01*r11))+(((-0.015751)*cj2*npx*r10*(x3522*x3522)))+(((px*px)*(r01*r01)*(x3523*x3523)))+(((2.214385837e-5)*r01*r11*(x3524*x3524)))+(((-4.428771674e-5)*cj2*r10*r11*sj2*(IKcos(j8))*(IKsin(j8))))+(((-0.015751)*py*r00*r11*sj2*(IKcos(j8))*(IKsin(j8))))+(((0.00281174)*cj2*npx*r00*(x3525*x3525)))+(((0.015751)*px*sj2*(r01*r01)))+(((-0.00281174)*cj2*py*r00*r11*(IKcos(j8))*(IKsin(j8))))+(((-1.0)*(py*py)*(r11*r11)))+(((-0.015751)*cj2*px*r01*r11))+(((0.015751)*cj2*px*r01*r10*(IKcos(j8))*(IKsin(j8))))+(((-4.428771674e-5)*r01*r10*(cj2*cj2)*(IKcos(j8))*(IKsin(j8))))+(((-0.015751)*npx*r01*sj2*(IKcos(j8))*(IKsin(j8))))+(((-0.0001200940595862)*cj2*r01*r10*sj2*(IKcos(j8))*(IKsin(j8))))+(((0.00281174)*px*r01*r11*sj2))+(((0.015751)*cj2*px*r01*r11*(x3526*x3526)))+(((0.0001200940595862)*r10*r11*(cj2*cj2)*(IKcos(j8))*(IKsin(j8))))+(((-0.00281174)*cj2*npx*r01*(IKcos(j8))*(IKsin(j8))))+(((0.00281174)*py*sj2*(r11*r11)))+(((-0.0001200940595862)*r00*r01*(cj2*cj2)*(IKcos(j8))*(IKsin(j8))))+(((-2.214385837e-5)*cj2*sj2*(r01*r01)))+(((-4.428771674e-5)*r01*r11*(cj2*cj2)*(x3527*x3527)))+(((0.0001200940595862)*cj2*r00*r10*sj2*(x3528*x3528)))+(((-0.015751)*py*r01*r11*sj2*(x3529*x3529)))+(((2.0)*npx*px*r01*(IKcos(j8))*(IKsin(j8))))+(((-2.214385837e-5)*cj2*sj2*(r00*r00)*(x3530*x3530)))+(((-2.214385837e-5)*cj2*sj2*(r11*r11)*(x3531*x3531)))+(((2.214385837e-5)*cj2*sj2*(r11*r11)))+(((2.214385837e-5)*cj2*sj2*(r01*r01)*(x3532*x3532)))+(((-0.00281174)*px*r01*r10*sj2*(IKcos(j8))*(IKsin(j8))))+(((0.015751)*cj2*py*(r11*r11)*(x3533*x3533)))+(((-0.00281174)*py*sj2*(r11*r11)*(x3534*x3534)))+(((3.9529409138e-6)*r10*r11*(IKcos(j8))*(IKsin(j8))))+(((-0.015751)*cj2*py*(r11*r11)))+(((1.9764704569e-6)*(r11*r11)*(x3535*x3535)))+(((py*py)*(r11*r11)*(x3536*x3536)))+(((-1.0)*(px*px)*(r01*r01)))+(((-6.00470297931e-5)*(cj2*cj2)*(r11*r11))));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j7eval[1];
r21=0;
npy=(((px*r01))+((py*r11)));
rxp1_0=(pz*r11);
rxp1_1=((-1.0)*pz*r01);
j7eval[0]=1.0;
if( IKabs(j7eval[0]) < 0.0000000100000000  )
{
continue; // no branches [j7]

} else
{
IkReal op[2+1], zeror[2];
int numroots;
op[0]=-1.0;
op[1]=0;
op[2]=1.0;
polyroots2(op,zeror,numroots);
IkReal j7array[2], cj7array[2], sj7array[2], tempj7array[1];
int numsolutions = 0;
for(int ij7 = 0; ij7 < numroots; ++ij7)
{
IkReal htj7 = zeror[ij7];
tempj7array[0]=((2.0)*(atan(htj7)));
for(int kj7 = 0; kj7 < 1; ++kj7)
{
j7array[numsolutions] = tempj7array[kj7];
if( j7array[numsolutions] > IKPI )
{
    j7array[numsolutions]-=IK2PI;
}
else if( j7array[numsolutions] < -IKPI )
{
    j7array[numsolutions]+=IK2PI;
}
sj7array[numsolutions] = IKsin(j7array[numsolutions]);
cj7array[numsolutions] = IKcos(j7array[numsolutions]);
numsolutions++;
}
}
bool j7valid[2]={true,true};
_nj7 = 2;
for(int ij7 = 0; ij7 < numsolutions; ++ij7)
    {
if( !j7valid[ij7] )
{
    continue;
}
    j7 = j7array[ij7]; cj7 = cj7array[ij7]; sj7 = sj7array[ij7];
htj7 = IKtan(j7/2);

_ij7[0] = ij7; _ij7[1] = -1;
for(int iij7 = ij7+1; iij7 < numsolutions; ++iij7)
{
if( j7valid[iij7] && IKabs(cj7array[ij7]-cj7array[iij7]) < IKFAST_SOLUTION_THRESH && IKabs(sj7array[ij7]-sj7array[iij7]) < IKFAST_SOLUTION_THRESH )
{
    j7valid[iij7]=false; _ij7[1] = iij7; break; 
}
}
rotationfunction0(solutions);
    }

}

}
}
}

}

}

} else
{
IkReal op[2+1], zeror[2];
int numroots;
op[0]=-1.0;
op[1]=0;
op[2]=1.0;
polyroots2(op,zeror,numroots);
IkReal j7array[2], cj7array[2], sj7array[2], tempj7array[1];
int numsolutions = 0;
for(int ij7 = 0; ij7 < numroots; ++ij7)
{
IkReal htj7 = zeror[ij7];
tempj7array[0]=((2.0)*(atan(htj7)));
for(int kj7 = 0; kj7 < 1; ++kj7)
{
j7array[numsolutions] = tempj7array[kj7];
if( j7array[numsolutions] > IKPI )
{
    j7array[numsolutions]-=IK2PI;
}
else if( j7array[numsolutions] < -IKPI )
{
    j7array[numsolutions]+=IK2PI;
}
sj7array[numsolutions] = IKsin(j7array[numsolutions]);
cj7array[numsolutions] = IKcos(j7array[numsolutions]);
numsolutions++;
}
}
bool j7valid[2]={true,true};
_nj7 = 2;
for(int ij7 = 0; ij7 < numsolutions; ++ij7)
    {
if( !j7valid[ij7] )
{
    continue;
}
    j7 = j7array[ij7]; cj7 = cj7array[ij7]; sj7 = sj7array[ij7];
htj7 = IKtan(j7/2);

_ij7[0] = ij7; _ij7[1] = -1;
for(int iij7 = ij7+1; iij7 < numsolutions; ++iij7)
{
if( j7valid[iij7] && IKabs(cj7array[ij7]-cj7array[iij7]) < IKFAST_SOLUTION_THRESH && IKabs(sj7array[ij7]-sj7array[iij7]) < IKFAST_SOLUTION_THRESH )
{
    j7valid[iij7]=false; _ij7[1] = iij7; break; 
}
}
{
IkReal j8eval[1];
r21=0;
npy=(((px*r01))+((py*r11)));
rxp1_0=(pz*r11);
rxp1_1=((-1.0)*pz*r01);
IkReal x3537=((0.0078755)*cj2);
IkReal x3538=((0.0078755)*sj2);
IkReal x3539=((0.00140587)*sj2);
IkReal x3540=((0.00140587)*cj2);
j8eval[0]=((IKabs((((r11*x3539))+(((-1.0)*r11*x3537))+(((-1.0)*px*r01))+((r01*x3540))+((r01*x3538))+(((-1.0)*py*r11)))))+(IKabs(((((-1.0)*r00*x3540))+(((-1.0)*r10*x3539))+npx+(((-1.0)*r00*x3538))+((r10*x3537))))));
if( IKabs(j8eval[0]) < 0.0000010000000000  )
{
continue; // no branches [j8]

} else
{
{
IkReal j8array[2], cj8array[2], sj8array[2];
bool j8valid[2]={false};
_nj8 = 2;
IkReal x3541=((0.0078755)*cj2);
IkReal x3542=((0.0078755)*sj2);
IkReal x3543=((0.00140587)*sj2);
IkReal x3544=((0.00140587)*cj2);
CheckValue<IkReal> x3546 = IKatan2WithCheck(IkReal(((((-1.0)*r00*x3544))+(((-1.0)*r00*x3542))+(((-1.0)*r10*x3543))+npx+((r10*x3541)))),IkReal(((((-1.0)*px*r01))+((r01*x3542))+((r01*x3544))+(((-1.0)*r11*x3541))+((r11*x3543))+(((-1.0)*py*r11)))),IKFAST_ATAN2_MAGTHRESH);
if(!x3546.valid){
continue;
}
IkReal x3545=x3546.value;
j8array[0]=((-1.0)*x3545);
sj8array[0]=IKsin(j8array[0]);
cj8array[0]=IKcos(j8array[0]);
j8array[1]=((3.14159265358979)+(((-1.0)*x3545)));
sj8array[1]=IKsin(j8array[1]);
cj8array[1]=IKcos(j8array[1]);
if( j8array[0] > IKPI )
{
    j8array[0]-=IK2PI;
}
else if( j8array[0] < -IKPI )
{    j8array[0]+=IK2PI;
}
j8valid[0] = true;
if( j8array[1] > IKPI )
{
    j8array[1]-=IK2PI;
}
else if( j8array[1] < -IKPI )
{    j8array[1]+=IK2PI;
}
j8valid[1] = true;
for(int ij8 = 0; ij8 < 2; ++ij8)
{
if( !j8valid[ij8] )
{
    continue;
}
_ij8[0] = ij8; _ij8[1] = -1;
for(int iij8 = ij8+1; iij8 < 2; ++iij8)
{
if( j8valid[iij8] && IKabs(cj8array[ij8]-cj8array[iij8]) < IKFAST_SOLUTION_THRESH && IKabs(sj8array[ij8]-sj8array[iij8]) < IKFAST_SOLUTION_THRESH )
{
    j8valid[iij8]=false; _ij8[1] = iij8; break; 
}
}
j8 = j8array[ij8]; cj8 = cj8array[ij8]; sj8 = sj8array[ij8];
{
IkReal evalcond[1];
IkReal x3547=IKcos(j8);
IkReal x3548=IKcos(j8);
IkReal x3549=IKcos(j8);
IkReal x3550=IKcos(j8);
IkReal x3551=IKcos(j8);
IkReal x3552=IKcos(j8);
IkReal x3553=IKcos(j8);
IkReal x3554=IKcos(j8);
IkReal x3555=IKcos(j8);
IkReal x3556=IKcos(j8);
IkReal x3557=IKcos(j8);
IkReal x3558=IKcos(j8);
IkReal x3559=IKcos(j8);
IkReal x3560=IKcos(j8);
IkReal x3561=IKcos(j8);
IkReal x3562=IKcos(j8);
IkReal x3563=IKcos(j8);
IkReal x3564=IKcos(j8);
IkReal x3565=IKcos(j8);
IkReal x3566=IKcos(j8);
IkReal x3567=IKcos(j8);
IkReal x3568=IKcos(j8);
IkReal x3569=IKcos(j8);
IkReal x3570=IKcos(j8);
IkReal x3571=IKcos(j8);
IkReal x3572=IKcos(j8);
IkReal x3573=IKcos(j8);
IkReal x3574=IKcos(j8);
IkReal x3575=IKcos(j8);
IkReal x3576=IKcos(j8);
IkReal x3577=IKcos(j8);
IkReal x3578=IKcos(j8);
IkReal x3579=IKcos(j8);
IkReal x3580=IKcos(j8);
IkReal x3581=IKcos(j8);
IkReal x3582=IKcos(j8);
IkReal x3583=IKcos(j8);
IkReal x3584=IKcos(j8);
evalcond[0]=((0.0841)+(((-0.0001200940595862)*cj2*r00*r11*sj2*(IKcos(j8))*(IKsin(j8))))+(((-0.00281174)*npx*r11*sj2*(IKcos(j8))*(IKsin(j8))))+(((-0.015751)*px*r00*r01*sj2*(IKcos(j8))*(IKsin(j8))))+(((-1.9764704569e-6)*(r10*r10)*(x3547*x3547)))+(((2.0)*px*py*r01*r11*(x3548*x3548)))+(((pz*pz)*(r20*r20)*(x3549*x3549)))+(((6.202350025e-5)*(r01*r01)*(x3550*x3550)))+(((-6.00470297931e-5)*(cj2*cj2)*(r10*r10)*(x3551*x3551)))+(((0.0001200940595862)*cj2*r01*r11*sj2))+(((-2.214385837e-5)*r00*r10*(x3552*x3552)))+(((-0.00281174)*cj2*py*r01*r11*(x3553*x3553)))+(((-2.0)*px*py*r00*r10*(x3554*x3554)))+(((-0.00281174)*cj2*px*r00*r01*(IKcos(j8))*(IKsin(j8))))+(((0.015751)*cj2*npx*r11*(IKcos(j8))*(IKsin(j8))))+(((-6.202350025e-5)*(r01*r01)))+(((-1.0)*(px*px)*(r00*r00)*(x3555*x3555)))+(((-1.0)*(py*py)*(r10*r10)*(x3556*x3556)))+(((-0.0001200940595862)*cj2*r01*r11*sj2*(x3557*x3557)))+(((-0.015751)*px*sj2*(r01*r01)*(x3558*x3558)))+(((-6.00470297931e-5)*(cj2*cj2)*(r01*r01)*(x3559*x3559)))+(((6.00470297931e-5)*(cj2*cj2)*(r01*r01)))+(((-2.0)*px*py*r01*r11))+(((4.428771674e-5)*r01*r11*(cj2*cj2)))+(((0.00281174)*cj2*py*r01*r11))+(((0.00281174)*cj2*px*(r01*r01)))+(((0.015751)*npx*r00*sj2*(x3560*x3560)))+(((4.428771674e-5)*cj2*r00*r01*sj2*(IKcos(j8))*(IKsin(j8))))+(((-1.9764704569e-6)*(r11*r11)))+(((2.214385837e-5)*r00*r11*(IKcos(j8))*(IKsin(j8))))+(((4.428771674e-5)*r00*r10*(cj2*cj2)*(x3561*x3561)))+(((2.0)*npx*py*r11*(IKcos(j8))*(IKsin(j8))))+(((0.0001240470005)*r00*r01*(IKcos(j8))*(IKsin(j8))))+(((-0.00281174)*px*r01*r11*sj2*(x3562*x3562)))+(((6.00470297931e-5)*(cj2*cj2)*(r00*r00)*(x3563*x3563)))+(((-4.428771674e-5)*r00*r11*(cj2*cj2)*(IKcos(j8))*(IKsin(j8))))+(((2.214385837e-5)*cj2*sj2*(r10*r10)*(x3564*x3564)))+(((0.015751)*py*r01*r11*sj2))+(((0.015751)*cj2*py*r10*r11*(IKcos(j8))*(IKsin(j8))))+(((2.214385837e-5)*r01*r10*(IKcos(j8))*(IKsin(j8))))+(((6.00470297931e-5)*(cj2*cj2)*(r11*r11)*(x3565*x3565)))+(((-0.00281174)*cj2*px*(r01*r01)*(x3566*x3566)))+(((-6.202350025e-5)*(r00*r00)*(x3567*x3567)))+(((0.00281174)*npx*r10*sj2*(x3568*x3568)))+(((-2.0)*npx*pz*r20*(x3569*x3569)))+(((-0.00281174)*py*r10*r11*sj2*(IKcos(j8))*(IKsin(j8))))+(((-2.214385837e-5)*r01*r11))+(((-0.015751)*cj2*npx*r10*(x3570*x3570)))+(((px*px)*(r01*r01)*(x3571*x3571)))+(((2.214385837e-5)*r01*r11*(x3572*x3572)))+(((-4.428771674e-5)*cj2*r10*r11*sj2*(IKcos(j8))*(IKsin(j8))))+(((-0.015751)*py*r00*r11*sj2*(IKcos(j8))*(IKsin(j8))))+(((0.00281174)*cj2*npx*r00*(x3573*x3573)))+(((0.015751)*px*sj2*(r01*r01)))+(((-0.00281174)*cj2*py*r00*r11*(IKcos(j8))*(IKsin(j8))))+(((-1.0)*(py*py)*(r11*r11)))+(((-0.015751)*cj2*px*r01*r11))+(((0.015751)*cj2*px*r01*r10*(IKcos(j8))*(IKsin(j8))))+(((-4.428771674e-5)*r01*r10*(cj2*cj2)*(IKcos(j8))*(IKsin(j8))))+(((-0.015751)*npx*r01*sj2*(IKcos(j8))*(IKsin(j8))))+(((-0.0001200940595862)*cj2*r01*r10*sj2*(IKcos(j8))*(IKsin(j8))))+(((0.00281174)*px*r01*r11*sj2))+(((0.015751)*cj2*px*r01*r11*(x3574*x3574)))+(((0.0001200940595862)*r10*r11*(cj2*cj2)*(IKcos(j8))*(IKsin(j8))))+(((-0.00281174)*cj2*npx*r01*(IKcos(j8))*(IKsin(j8))))+(((0.00281174)*py*sj2*(r11*r11)))+(((-0.0001200940595862)*r00*r01*(cj2*cj2)*(IKcos(j8))*(IKsin(j8))))+(((-2.214385837e-5)*cj2*sj2*(r01*r01)))+(((-4.428771674e-5)*r01*r11*(cj2*cj2)*(x3575*x3575)))+(((0.0001200940595862)*cj2*r00*r10*sj2*(x3576*x3576)))+(((-0.015751)*py*r01*r11*sj2*(x3577*x3577)))+(((2.0)*npx*px*r01*(IKcos(j8))*(IKsin(j8))))+(((-2.214385837e-5)*cj2*sj2*(r00*r00)*(x3578*x3578)))+(((-2.214385837e-5)*cj2*sj2*(r11*r11)*(x3579*x3579)))+(((2.214385837e-5)*cj2*sj2*(r11*r11)))+(((2.214385837e-5)*cj2*sj2*(r01*r01)*(x3580*x3580)))+(((-0.00281174)*px*r01*r10*sj2*(IKcos(j8))*(IKsin(j8))))+(((0.015751)*cj2*py*(r11*r11)*(x3581*x3581)))+(((-0.00281174)*py*sj2*(r11*r11)*(x3582*x3582)))+(((3.9529409138e-6)*r10*r11*(IKcos(j8))*(IKsin(j8))))+(((-0.015751)*cj2*py*(r11*r11)))+(((1.9764704569e-6)*(r11*r11)*(x3583*x3583)))+(((py*py)*(r11*r11)*(x3584*x3584)))+(((-1.0)*(px*px)*(r01*r01)))+(((-6.00470297931e-5)*(cj2*cj2)*(r11*r11))));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

rotationfunction0(solutions);
}
}

}

}
    }

}

}
}
}

}

}

} else
{
{
IkReal j2array[1], cj2array[1], sj2array[1];
bool j2valid[1]={false};
_nj2 = 1;
IkReal x3585=(npz*py);
IkReal x3586=(pp*r02);
IkReal x3587=(npz*px);
IkReal x3588=(pp*r12);
CheckValue<IkReal> x3589=IKPowWithIntegerCheck(IKsign(rxp2_2),-1);
if(!x3589.valid){
continue;
}
CheckValue<IkReal> x3590 = IKatan2WithCheck(IkReal(((((5.04031769302191e-7)*r12))+(((0.0078755)*x3588))+(((-0.015751)*x3585))+(((-0.00140587)*x3586))+(((-8.99756388177095e-8)*r02))+(((0.00281174)*x3587)))),IkReal(((((-0.00281174)*x3585))+(((5.04031769302191e-7)*r02))+(((8.99756388177095e-8)*r12))+(((0.00140587)*x3588))+(((0.0078755)*x3586))+(((-0.015751)*x3587)))),IKFAST_ATAN2_MAGTHRESH);
if(!x3590.valid){
continue;
}
j2array[0]=((-1.5707963267949)+(((-1.5707963267949)*(x3589.value)))+(x3590.value));
sj2array[0]=IKsin(j2array[0]);
cj2array[0]=IKcos(j2array[0]);
if( j2array[0] > IKPI )
{
    j2array[0]-=IK2PI;
}
else if( j2array[0] < -IKPI )
{    j2array[0]+=IK2PI;
}
j2valid[0] = true;
for(int ij2 = 0; ij2 < 1; ++ij2)
{
if( !j2valid[ij2] )
{
    continue;
}
_ij2[0] = ij2; _ij2[1] = -1;
for(int iij2 = ij2+1; iij2 < 1; ++iij2)
{
if( j2valid[iij2] && IKabs(cj2array[ij2]-cj2array[iij2]) < IKFAST_SOLUTION_THRESH && IKabs(sj2array[ij2]-sj2array[iij2]) < IKFAST_SOLUTION_THRESH )
{
    j2valid[iij2]=false; _ij2[1] = iij2; break; 
}
}
j2 = j2array[ij2]; cj2 = cj2array[ij2]; sj2 = sj2array[ij2];
{
IkReal evalcond[4];
IkReal x3591=IKcos(j2);
IkReal x3592=IKsin(j2);
IkReal x3593=((0.00140587)*x3592);
IkReal x3594=((0.00140587)*x3591);
IkReal x3595=((0.0078755)*x3591);
IkReal x3596=((0.0078755)*x3592);
evalcond[0]=((((-1.0)*r00*x3596))+(((-1.0)*r00*x3594))+(((-1.0)*r10*x3593))+((r10*x3595))+npx);
evalcond[1]=(npz+((r12*x3595))+(((-1.0)*r02*x3594))+(((-1.0)*r02*x3596))+(((-1.0)*r12*x3593)));
evalcond[2]=((-6.39999707069e-5)+(((0.015751)*px*x3592))+(((0.00281174)*py*x3592))+(((-0.015751)*py*x3591))+(((0.00281174)*px*x3591))+(((-1.0)*pp)));
evalcond[3]=(((px*r01))+(((-1.0)*r01*x3596))+(((-1.0)*r01*x3594))+((r11*x3595))+((py*r11))+(((-1.0)*r11*x3593)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j7eval[1];
r21=0;
npy=(((px*r01))+((py*r11)));
rxp1_0=(pz*r11);
rxp1_1=((-1.0)*pz*r01);
j7eval[0]=1.0;
if( IKabs(j7eval[0]) < 0.0000000100000000  )
{
{
IkReal j8eval[1];
r21=0;
npy=(((px*r01))+((py*r11)));
rxp1_0=(pz*r11);
rxp1_1=((-1.0)*pz*r01);
IkReal x3597=((0.0078755)*cj2);
IkReal x3598=((0.0078755)*sj2);
IkReal x3599=((0.00140587)*sj2);
IkReal x3600=((0.00140587)*cj2);
j8eval[0]=((IKabs(((((-1.0)*px*r01))+((r11*x3599))+((r01*x3600))+(((-1.0)*py*r11))+((r01*x3598))+(((-1.0)*r11*x3597)))))+(IKabs(((((-1.0)*r00*x3600))+(((-1.0)*r00*x3598))+(((-1.0)*r10*x3599))+((r10*x3597))+npx))));
if( IKabs(j8eval[0]) < 0.0000010000000000  )
{
continue; // no branches [j7, j8]

} else
{
{
IkReal j8array[2], cj8array[2], sj8array[2];
bool j8valid[2]={false};
_nj8 = 2;
IkReal x3601=((0.0078755)*cj2);
IkReal x3602=((0.0078755)*sj2);
IkReal x3603=((0.00140587)*sj2);
IkReal x3604=((0.00140587)*cj2);
CheckValue<IkReal> x3606 = IKatan2WithCheck(IkReal(((((-1.0)*r00*x3602))+(((-1.0)*r00*x3604))+(((-1.0)*r10*x3603))+npx+((r10*x3601)))),IkReal((((r11*x3603))+(((-1.0)*px*r01))+(((-1.0)*r11*x3601))+((r01*x3604))+((r01*x3602))+(((-1.0)*py*r11)))),IKFAST_ATAN2_MAGTHRESH);
if(!x3606.valid){
continue;
}
IkReal x3605=x3606.value;
j8array[0]=((-1.0)*x3605);
sj8array[0]=IKsin(j8array[0]);
cj8array[0]=IKcos(j8array[0]);
j8array[1]=((3.14159265358979)+(((-1.0)*x3605)));
sj8array[1]=IKsin(j8array[1]);
cj8array[1]=IKcos(j8array[1]);
if( j8array[0] > IKPI )
{
    j8array[0]-=IK2PI;
}
else if( j8array[0] < -IKPI )
{    j8array[0]+=IK2PI;
}
j8valid[0] = true;
if( j8array[1] > IKPI )
{
    j8array[1]-=IK2PI;
}
else if( j8array[1] < -IKPI )
{    j8array[1]+=IK2PI;
}
j8valid[1] = true;
for(int ij8 = 0; ij8 < 2; ++ij8)
{
if( !j8valid[ij8] )
{
    continue;
}
_ij8[0] = ij8; _ij8[1] = -1;
for(int iij8 = ij8+1; iij8 < 2; ++iij8)
{
if( j8valid[iij8] && IKabs(cj8array[ij8]-cj8array[iij8]) < IKFAST_SOLUTION_THRESH && IKabs(sj8array[ij8]-sj8array[iij8]) < IKFAST_SOLUTION_THRESH )
{
    j8valid[iij8]=false; _ij8[1] = iij8; break; 
}
}
j8 = j8array[ij8]; cj8 = cj8array[ij8]; sj8 = sj8array[ij8];
{
IkReal evalcond[1];
IkReal x3607=IKcos(j8);
IkReal x3608=IKcos(j8);
IkReal x3609=IKcos(j8);
IkReal x3610=IKcos(j8);
IkReal x3611=IKcos(j8);
IkReal x3612=IKcos(j8);
IkReal x3613=IKcos(j8);
IkReal x3614=IKcos(j8);
IkReal x3615=IKcos(j8);
IkReal x3616=IKcos(j8);
IkReal x3617=IKcos(j8);
IkReal x3618=IKcos(j8);
IkReal x3619=IKcos(j8);
IkReal x3620=IKcos(j8);
IkReal x3621=IKcos(j8);
IkReal x3622=IKcos(j8);
IkReal x3623=IKcos(j8);
IkReal x3624=IKcos(j8);
IkReal x3625=IKcos(j8);
IkReal x3626=IKcos(j8);
IkReal x3627=IKcos(j8);
IkReal x3628=IKcos(j8);
IkReal x3629=IKcos(j8);
IkReal x3630=IKcos(j8);
IkReal x3631=IKcos(j8);
IkReal x3632=IKcos(j8);
IkReal x3633=IKcos(j8);
IkReal x3634=IKcos(j8);
IkReal x3635=IKcos(j8);
IkReal x3636=IKcos(j8);
IkReal x3637=IKcos(j8);
IkReal x3638=IKcos(j8);
IkReal x3639=IKcos(j8);
IkReal x3640=IKcos(j8);
IkReal x3641=IKcos(j8);
IkReal x3642=IKcos(j8);
IkReal x3643=IKcos(j8);
IkReal x3644=IKcos(j8);
evalcond[0]=((0.0841)+(((-0.0001200940595862)*cj2*r00*r11*sj2*(IKcos(j8))*(IKsin(j8))))+(((-0.00281174)*npx*r11*sj2*(IKcos(j8))*(IKsin(j8))))+(((-0.015751)*px*r00*r01*sj2*(IKcos(j8))*(IKsin(j8))))+(((-1.9764704569e-6)*(r10*r10)*(x3607*x3607)))+(((2.0)*px*py*r01*r11*(x3608*x3608)))+(((pz*pz)*(r20*r20)*(x3609*x3609)))+(((6.202350025e-5)*(r01*r01)*(x3610*x3610)))+(((-6.00470297931e-5)*(cj2*cj2)*(r10*r10)*(x3611*x3611)))+(((0.0001200940595862)*cj2*r01*r11*sj2))+(((-2.214385837e-5)*r00*r10*(x3612*x3612)))+(((-0.00281174)*cj2*py*r01*r11*(x3613*x3613)))+(((-2.0)*px*py*r00*r10*(x3614*x3614)))+(((-0.00281174)*cj2*px*r00*r01*(IKcos(j8))*(IKsin(j8))))+(((0.015751)*cj2*npx*r11*(IKcos(j8))*(IKsin(j8))))+(((-6.202350025e-5)*(r01*r01)))+(((-1.0)*(px*px)*(r00*r00)*(x3615*x3615)))+(((-1.0)*(py*py)*(r10*r10)*(x3616*x3616)))+(((-0.0001200940595862)*cj2*r01*r11*sj2*(x3617*x3617)))+(((-0.015751)*px*sj2*(r01*r01)*(x3618*x3618)))+(((-6.00470297931e-5)*(cj2*cj2)*(r01*r01)*(x3619*x3619)))+(((6.00470297931e-5)*(cj2*cj2)*(r01*r01)))+(((-2.0)*px*py*r01*r11))+(((4.428771674e-5)*r01*r11*(cj2*cj2)))+(((0.00281174)*cj2*py*r01*r11))+(((0.00281174)*cj2*px*(r01*r01)))+(((0.015751)*npx*r00*sj2*(x3620*x3620)))+(((4.428771674e-5)*cj2*r00*r01*sj2*(IKcos(j8))*(IKsin(j8))))+(((-1.9764704569e-6)*(r11*r11)))+(((2.214385837e-5)*r00*r11*(IKcos(j8))*(IKsin(j8))))+(((4.428771674e-5)*r00*r10*(cj2*cj2)*(x3621*x3621)))+(((2.0)*npx*py*r11*(IKcos(j8))*(IKsin(j8))))+(((0.0001240470005)*r00*r01*(IKcos(j8))*(IKsin(j8))))+(((-0.00281174)*px*r01*r11*sj2*(x3622*x3622)))+(((6.00470297931e-5)*(cj2*cj2)*(r00*r00)*(x3623*x3623)))+(((-4.428771674e-5)*r00*r11*(cj2*cj2)*(IKcos(j8))*(IKsin(j8))))+(((2.214385837e-5)*cj2*sj2*(r10*r10)*(x3624*x3624)))+(((0.015751)*py*r01*r11*sj2))+(((0.015751)*cj2*py*r10*r11*(IKcos(j8))*(IKsin(j8))))+(((2.214385837e-5)*r01*r10*(IKcos(j8))*(IKsin(j8))))+(((6.00470297931e-5)*(cj2*cj2)*(r11*r11)*(x3625*x3625)))+(((-0.00281174)*cj2*px*(r01*r01)*(x3626*x3626)))+(((-6.202350025e-5)*(r00*r00)*(x3627*x3627)))+(((0.00281174)*npx*r10*sj2*(x3628*x3628)))+(((-2.0)*npx*pz*r20*(x3629*x3629)))+(((-0.00281174)*py*r10*r11*sj2*(IKcos(j8))*(IKsin(j8))))+(((-2.214385837e-5)*r01*r11))+(((-0.015751)*cj2*npx*r10*(x3630*x3630)))+(((px*px)*(r01*r01)*(x3631*x3631)))+(((2.214385837e-5)*r01*r11*(x3632*x3632)))+(((-4.428771674e-5)*cj2*r10*r11*sj2*(IKcos(j8))*(IKsin(j8))))+(((-0.015751)*py*r00*r11*sj2*(IKcos(j8))*(IKsin(j8))))+(((0.00281174)*cj2*npx*r00*(x3633*x3633)))+(((0.015751)*px*sj2*(r01*r01)))+(((-0.00281174)*cj2*py*r00*r11*(IKcos(j8))*(IKsin(j8))))+(((-1.0)*(py*py)*(r11*r11)))+(((-0.015751)*cj2*px*r01*r11))+(((0.015751)*cj2*px*r01*r10*(IKcos(j8))*(IKsin(j8))))+(((-4.428771674e-5)*r01*r10*(cj2*cj2)*(IKcos(j8))*(IKsin(j8))))+(((-0.015751)*npx*r01*sj2*(IKcos(j8))*(IKsin(j8))))+(((-0.0001200940595862)*cj2*r01*r10*sj2*(IKcos(j8))*(IKsin(j8))))+(((0.00281174)*px*r01*r11*sj2))+(((0.015751)*cj2*px*r01*r11*(x3634*x3634)))+(((0.0001200940595862)*r10*r11*(cj2*cj2)*(IKcos(j8))*(IKsin(j8))))+(((-0.00281174)*cj2*npx*r01*(IKcos(j8))*(IKsin(j8))))+(((0.00281174)*py*sj2*(r11*r11)))+(((-0.0001200940595862)*r00*r01*(cj2*cj2)*(IKcos(j8))*(IKsin(j8))))+(((-2.214385837e-5)*cj2*sj2*(r01*r01)))+(((-4.428771674e-5)*r01*r11*(cj2*cj2)*(x3635*x3635)))+(((0.0001200940595862)*cj2*r00*r10*sj2*(x3636*x3636)))+(((-0.015751)*py*r01*r11*sj2*(x3637*x3637)))+(((2.0)*npx*px*r01*(IKcos(j8))*(IKsin(j8))))+(((-2.214385837e-5)*cj2*sj2*(r00*r00)*(x3638*x3638)))+(((-2.214385837e-5)*cj2*sj2*(r11*r11)*(x3639*x3639)))+(((2.214385837e-5)*cj2*sj2*(r11*r11)))+(((2.214385837e-5)*cj2*sj2*(r01*r01)*(x3640*x3640)))+(((-0.00281174)*px*r01*r10*sj2*(IKcos(j8))*(IKsin(j8))))+(((0.015751)*cj2*py*(r11*r11)*(x3641*x3641)))+(((-0.00281174)*py*sj2*(r11*r11)*(x3642*x3642)))+(((3.9529409138e-6)*r10*r11*(IKcos(j8))*(IKsin(j8))))+(((-0.015751)*cj2*py*(r11*r11)))+(((1.9764704569e-6)*(r11*r11)*(x3643*x3643)))+(((py*py)*(r11*r11)*(x3644*x3644)))+(((-1.0)*(px*px)*(r01*r01)))+(((-6.00470297931e-5)*(cj2*cj2)*(r11*r11))));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j7eval[1];
r21=0;
npy=(((px*r01))+((py*r11)));
rxp1_0=(pz*r11);
rxp1_1=((-1.0)*pz*r01);
j7eval[0]=1.0;
if( IKabs(j7eval[0]) < 0.0000000100000000  )
{
continue; // no branches [j7]

} else
{
IkReal op[2+1], zeror[2];
int numroots;
op[0]=-1.0;
op[1]=0;
op[2]=1.0;
polyroots2(op,zeror,numroots);
IkReal j7array[2], cj7array[2], sj7array[2], tempj7array[1];
int numsolutions = 0;
for(int ij7 = 0; ij7 < numroots; ++ij7)
{
IkReal htj7 = zeror[ij7];
tempj7array[0]=((2.0)*(atan(htj7)));
for(int kj7 = 0; kj7 < 1; ++kj7)
{
j7array[numsolutions] = tempj7array[kj7];
if( j7array[numsolutions] > IKPI )
{
    j7array[numsolutions]-=IK2PI;
}
else if( j7array[numsolutions] < -IKPI )
{
    j7array[numsolutions]+=IK2PI;
}
sj7array[numsolutions] = IKsin(j7array[numsolutions]);
cj7array[numsolutions] = IKcos(j7array[numsolutions]);
numsolutions++;
}
}
bool j7valid[2]={true,true};
_nj7 = 2;
for(int ij7 = 0; ij7 < numsolutions; ++ij7)
    {
if( !j7valid[ij7] )
{
    continue;
}
    j7 = j7array[ij7]; cj7 = cj7array[ij7]; sj7 = sj7array[ij7];
htj7 = IKtan(j7/2);

_ij7[0] = ij7; _ij7[1] = -1;
for(int iij7 = ij7+1; iij7 < numsolutions; ++iij7)
{
if( j7valid[iij7] && IKabs(cj7array[ij7]-cj7array[iij7]) < IKFAST_SOLUTION_THRESH && IKabs(sj7array[ij7]-sj7array[iij7]) < IKFAST_SOLUTION_THRESH )
{
    j7valid[iij7]=false; _ij7[1] = iij7; break; 
}
}
rotationfunction0(solutions);
    }

}

}
}
}

}

}

} else
{
IkReal op[2+1], zeror[2];
int numroots;
op[0]=-1.0;
op[1]=0;
op[2]=1.0;
polyroots2(op,zeror,numroots);
IkReal j7array[2], cj7array[2], sj7array[2], tempj7array[1];
int numsolutions = 0;
for(int ij7 = 0; ij7 < numroots; ++ij7)
{
IkReal htj7 = zeror[ij7];
tempj7array[0]=((2.0)*(atan(htj7)));
for(int kj7 = 0; kj7 < 1; ++kj7)
{
j7array[numsolutions] = tempj7array[kj7];
if( j7array[numsolutions] > IKPI )
{
    j7array[numsolutions]-=IK2PI;
}
else if( j7array[numsolutions] < -IKPI )
{
    j7array[numsolutions]+=IK2PI;
}
sj7array[numsolutions] = IKsin(j7array[numsolutions]);
cj7array[numsolutions] = IKcos(j7array[numsolutions]);
numsolutions++;
}
}
bool j7valid[2]={true,true};
_nj7 = 2;
for(int ij7 = 0; ij7 < numsolutions; ++ij7)
    {
if( !j7valid[ij7] )
{
    continue;
}
    j7 = j7array[ij7]; cj7 = cj7array[ij7]; sj7 = sj7array[ij7];
htj7 = IKtan(j7/2);

_ij7[0] = ij7; _ij7[1] = -1;
for(int iij7 = ij7+1; iij7 < numsolutions; ++iij7)
{
if( j7valid[iij7] && IKabs(cj7array[ij7]-cj7array[iij7]) < IKFAST_SOLUTION_THRESH && IKabs(sj7array[ij7]-sj7array[iij7]) < IKFAST_SOLUTION_THRESH )
{
    j7valid[iij7]=false; _ij7[1] = iij7; break; 
}
}
{
IkReal j8eval[1];
r21=0;
npy=(((px*r01))+((py*r11)));
rxp1_0=(pz*r11);
rxp1_1=((-1.0)*pz*r01);
IkReal x3645=((0.0078755)*cj2);
IkReal x3646=((0.0078755)*sj2);
IkReal x3647=((0.00140587)*sj2);
IkReal x3648=((0.00140587)*cj2);
j8eval[0]=((IKabs((npx+(((-1.0)*r10*x3647))+((r10*x3645))+(((-1.0)*r00*x3648))+(((-1.0)*r00*x3646)))))+(IKabs((((r11*x3647))+((r01*x3646))+((r01*x3648))+(((-1.0)*px*r01))+(((-1.0)*r11*x3645))+(((-1.0)*py*r11))))));
if( IKabs(j8eval[0]) < 0.0000010000000000  )
{
continue; // no branches [j8]

} else
{
{
IkReal j8array[2], cj8array[2], sj8array[2];
bool j8valid[2]={false};
_nj8 = 2;
IkReal x3649=((0.0078755)*cj2);
IkReal x3650=((0.0078755)*sj2);
IkReal x3651=((0.00140587)*sj2);
IkReal x3652=((0.00140587)*cj2);
CheckValue<IkReal> x3654 = IKatan2WithCheck(IkReal(((((-1.0)*r10*x3651))+npx+((r10*x3649))+(((-1.0)*r00*x3650))+(((-1.0)*r00*x3652)))),IkReal(((((-1.0)*px*r01))+((r11*x3651))+(((-1.0)*r11*x3649))+(((-1.0)*py*r11))+((r01*x3650))+((r01*x3652)))),IKFAST_ATAN2_MAGTHRESH);
if(!x3654.valid){
continue;
}
IkReal x3653=x3654.value;
j8array[0]=((-1.0)*x3653);
sj8array[0]=IKsin(j8array[0]);
cj8array[0]=IKcos(j8array[0]);
j8array[1]=((3.14159265358979)+(((-1.0)*x3653)));
sj8array[1]=IKsin(j8array[1]);
cj8array[1]=IKcos(j8array[1]);
if( j8array[0] > IKPI )
{
    j8array[0]-=IK2PI;
}
else if( j8array[0] < -IKPI )
{    j8array[0]+=IK2PI;
}
j8valid[0] = true;
if( j8array[1] > IKPI )
{
    j8array[1]-=IK2PI;
}
else if( j8array[1] < -IKPI )
{    j8array[1]+=IK2PI;
}
j8valid[1] = true;
for(int ij8 = 0; ij8 < 2; ++ij8)
{
if( !j8valid[ij8] )
{
    continue;
}
_ij8[0] = ij8; _ij8[1] = -1;
for(int iij8 = ij8+1; iij8 < 2; ++iij8)
{
if( j8valid[iij8] && IKabs(cj8array[ij8]-cj8array[iij8]) < IKFAST_SOLUTION_THRESH && IKabs(sj8array[ij8]-sj8array[iij8]) < IKFAST_SOLUTION_THRESH )
{
    j8valid[iij8]=false; _ij8[1] = iij8; break; 
}
}
j8 = j8array[ij8]; cj8 = cj8array[ij8]; sj8 = sj8array[ij8];
{
IkReal evalcond[1];
IkReal x3655=IKcos(j8);
IkReal x3656=IKcos(j8);
IkReal x3657=IKcos(j8);
IkReal x3658=IKcos(j8);
IkReal x3659=IKcos(j8);
IkReal x3660=IKcos(j8);
IkReal x3661=IKcos(j8);
IkReal x3662=IKcos(j8);
IkReal x3663=IKcos(j8);
IkReal x3664=IKcos(j8);
IkReal x3665=IKcos(j8);
IkReal x3666=IKcos(j8);
IkReal x3667=IKcos(j8);
IkReal x3668=IKcos(j8);
IkReal x3669=IKcos(j8);
IkReal x3670=IKcos(j8);
IkReal x3671=IKcos(j8);
IkReal x3672=IKcos(j8);
IkReal x3673=IKcos(j8);
IkReal x3674=IKcos(j8);
IkReal x3675=IKcos(j8);
IkReal x3676=IKcos(j8);
IkReal x3677=IKcos(j8);
IkReal x3678=IKcos(j8);
IkReal x3679=IKcos(j8);
IkReal x3680=IKcos(j8);
IkReal x3681=IKcos(j8);
IkReal x3682=IKcos(j8);
IkReal x3683=IKcos(j8);
IkReal x3684=IKcos(j8);
IkReal x3685=IKcos(j8);
IkReal x3686=IKcos(j8);
IkReal x3687=IKcos(j8);
IkReal x3688=IKcos(j8);
IkReal x3689=IKcos(j8);
IkReal x3690=IKcos(j8);
IkReal x3691=IKcos(j8);
IkReal x3692=IKcos(j8);
evalcond[0]=((0.0841)+(((-0.0001200940595862)*cj2*r00*r11*sj2*(IKcos(j8))*(IKsin(j8))))+(((-0.00281174)*npx*r11*sj2*(IKcos(j8))*(IKsin(j8))))+(((-0.015751)*px*r00*r01*sj2*(IKcos(j8))*(IKsin(j8))))+(((-1.9764704569e-6)*(r10*r10)*(x3655*x3655)))+(((2.0)*px*py*r01*r11*(x3656*x3656)))+(((pz*pz)*(r20*r20)*(x3657*x3657)))+(((6.202350025e-5)*(r01*r01)*(x3658*x3658)))+(((-6.00470297931e-5)*(cj2*cj2)*(r10*r10)*(x3659*x3659)))+(((0.0001200940595862)*cj2*r01*r11*sj2))+(((-2.214385837e-5)*r00*r10*(x3660*x3660)))+(((-0.00281174)*cj2*py*r01*r11*(x3661*x3661)))+(((-2.0)*px*py*r00*r10*(x3662*x3662)))+(((-0.00281174)*cj2*px*r00*r01*(IKcos(j8))*(IKsin(j8))))+(((0.015751)*cj2*npx*r11*(IKcos(j8))*(IKsin(j8))))+(((-6.202350025e-5)*(r01*r01)))+(((-1.0)*(px*px)*(r00*r00)*(x3663*x3663)))+(((-1.0)*(py*py)*(r10*r10)*(x3664*x3664)))+(((-0.0001200940595862)*cj2*r01*r11*sj2*(x3665*x3665)))+(((-0.015751)*px*sj2*(r01*r01)*(x3666*x3666)))+(((-6.00470297931e-5)*(cj2*cj2)*(r01*r01)*(x3667*x3667)))+(((6.00470297931e-5)*(cj2*cj2)*(r01*r01)))+(((-2.0)*px*py*r01*r11))+(((4.428771674e-5)*r01*r11*(cj2*cj2)))+(((0.00281174)*cj2*py*r01*r11))+(((0.00281174)*cj2*px*(r01*r01)))+(((0.015751)*npx*r00*sj2*(x3668*x3668)))+(((4.428771674e-5)*cj2*r00*r01*sj2*(IKcos(j8))*(IKsin(j8))))+(((-1.9764704569e-6)*(r11*r11)))+(((2.214385837e-5)*r00*r11*(IKcos(j8))*(IKsin(j8))))+(((4.428771674e-5)*r00*r10*(cj2*cj2)*(x3669*x3669)))+(((2.0)*npx*py*r11*(IKcos(j8))*(IKsin(j8))))+(((0.0001240470005)*r00*r01*(IKcos(j8))*(IKsin(j8))))+(((-0.00281174)*px*r01*r11*sj2*(x3670*x3670)))+(((6.00470297931e-5)*(cj2*cj2)*(r00*r00)*(x3671*x3671)))+(((-4.428771674e-5)*r00*r11*(cj2*cj2)*(IKcos(j8))*(IKsin(j8))))+(((2.214385837e-5)*cj2*sj2*(r10*r10)*(x3672*x3672)))+(((0.015751)*py*r01*r11*sj2))+(((0.015751)*cj2*py*r10*r11*(IKcos(j8))*(IKsin(j8))))+(((2.214385837e-5)*r01*r10*(IKcos(j8))*(IKsin(j8))))+(((6.00470297931e-5)*(cj2*cj2)*(r11*r11)*(x3673*x3673)))+(((-0.00281174)*cj2*px*(r01*r01)*(x3674*x3674)))+(((-6.202350025e-5)*(r00*r00)*(x3675*x3675)))+(((0.00281174)*npx*r10*sj2*(x3676*x3676)))+(((-2.0)*npx*pz*r20*(x3677*x3677)))+(((-0.00281174)*py*r10*r11*sj2*(IKcos(j8))*(IKsin(j8))))+(((-2.214385837e-5)*r01*r11))+(((-0.015751)*cj2*npx*r10*(x3678*x3678)))+(((px*px)*(r01*r01)*(x3679*x3679)))+(((2.214385837e-5)*r01*r11*(x3680*x3680)))+(((-4.428771674e-5)*cj2*r10*r11*sj2*(IKcos(j8))*(IKsin(j8))))+(((-0.015751)*py*r00*r11*sj2*(IKcos(j8))*(IKsin(j8))))+(((0.00281174)*cj2*npx*r00*(x3681*x3681)))+(((0.015751)*px*sj2*(r01*r01)))+(((-0.00281174)*cj2*py*r00*r11*(IKcos(j8))*(IKsin(j8))))+(((-1.0)*(py*py)*(r11*r11)))+(((-0.015751)*cj2*px*r01*r11))+(((0.015751)*cj2*px*r01*r10*(IKcos(j8))*(IKsin(j8))))+(((-4.428771674e-5)*r01*r10*(cj2*cj2)*(IKcos(j8))*(IKsin(j8))))+(((-0.015751)*npx*r01*sj2*(IKcos(j8))*(IKsin(j8))))+(((-0.0001200940595862)*cj2*r01*r10*sj2*(IKcos(j8))*(IKsin(j8))))+(((0.00281174)*px*r01*r11*sj2))+(((0.015751)*cj2*px*r01*r11*(x3682*x3682)))+(((0.0001200940595862)*r10*r11*(cj2*cj2)*(IKcos(j8))*(IKsin(j8))))+(((-0.00281174)*cj2*npx*r01*(IKcos(j8))*(IKsin(j8))))+(((0.00281174)*py*sj2*(r11*r11)))+(((-0.0001200940595862)*r00*r01*(cj2*cj2)*(IKcos(j8))*(IKsin(j8))))+(((-2.214385837e-5)*cj2*sj2*(r01*r01)))+(((-4.428771674e-5)*r01*r11*(cj2*cj2)*(x3683*x3683)))+(((0.0001200940595862)*cj2*r00*r10*sj2*(x3684*x3684)))+(((-0.015751)*py*r01*r11*sj2*(x3685*x3685)))+(((2.0)*npx*px*r01*(IKcos(j8))*(IKsin(j8))))+(((-2.214385837e-5)*cj2*sj2*(r00*r00)*(x3686*x3686)))+(((-2.214385837e-5)*cj2*sj2*(r11*r11)*(x3687*x3687)))+(((2.214385837e-5)*cj2*sj2*(r11*r11)))+(((2.214385837e-5)*cj2*sj2*(r01*r01)*(x3688*x3688)))+(((-0.00281174)*px*r01*r10*sj2*(IKcos(j8))*(IKsin(j8))))+(((0.015751)*cj2*py*(r11*r11)*(x3689*x3689)))+(((-0.00281174)*py*sj2*(r11*r11)*(x3690*x3690)))+(((3.9529409138e-6)*r10*r11*(IKcos(j8))*(IKsin(j8))))+(((-0.015751)*cj2*py*(r11*r11)))+(((1.9764704569e-6)*(r11*r11)*(x3691*x3691)))+(((py*py)*(r11*r11)*(x3692*x3692)))+(((-1.0)*(px*px)*(r01*r01)))+(((-6.00470297931e-5)*(cj2*cj2)*(r11*r11))));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

rotationfunction0(solutions);
}
}

}

}
    }

}

}
}
}

}

}

} else
{
{
IkReal j2array[1], cj2array[1], sj2array[1];
bool j2valid[1]={false};
_nj2 = 1;
IkReal x3693=(npx*px);
IkReal x3694=(npx*py);
IkReal x3695=(pp*r00);
IkReal x3696=(pp*r10);
CheckValue<IkReal> x3697 = IKatan2WithCheck(IkReal(((((5.04031769302191e-7)*r10))+(((-0.015751)*x3694))+(((0.0078755)*x3696))+(((0.00281174)*x3693))+(((-0.00140587)*x3695))+(((-8.99756388177095e-8)*r00)))),IkReal(((((5.04031769302191e-7)*r00))+(((8.99756388177095e-8)*r10))+(((-0.015751)*x3693))+(((0.0078755)*x3695))+(((0.00140587)*x3696))+(((-0.00281174)*x3694)))),IKFAST_ATAN2_MAGTHRESH);
if(!x3697.valid){
continue;
}
CheckValue<IkReal> x3698=IKPowWithIntegerCheck(IKsign(rxp0_2),-1);
if(!x3698.valid){
continue;
}
j2array[0]=((-1.5707963267949)+(x3697.value)+(((-1.5707963267949)*(x3698.value))));
sj2array[0]=IKsin(j2array[0]);
cj2array[0]=IKcos(j2array[0]);
if( j2array[0] > IKPI )
{
    j2array[0]-=IK2PI;
}
else if( j2array[0] < -IKPI )
{    j2array[0]+=IK2PI;
}
j2valid[0] = true;
for(int ij2 = 0; ij2 < 1; ++ij2)
{
if( !j2valid[ij2] )
{
    continue;
}
_ij2[0] = ij2; _ij2[1] = -1;
for(int iij2 = ij2+1; iij2 < 1; ++iij2)
{
if( j2valid[iij2] && IKabs(cj2array[ij2]-cj2array[iij2]) < IKFAST_SOLUTION_THRESH && IKabs(sj2array[ij2]-sj2array[iij2]) < IKFAST_SOLUTION_THRESH )
{
    j2valid[iij2]=false; _ij2[1] = iij2; break; 
}
}
j2 = j2array[ij2]; cj2 = cj2array[ij2]; sj2 = sj2array[ij2];
{
IkReal evalcond[4];
IkReal x3699=IKcos(j2);
IkReal x3700=IKsin(j2);
IkReal x3701=((0.00140587)*x3700);
IkReal x3702=((0.00140587)*x3699);
IkReal x3703=((0.0078755)*x3699);
IkReal x3704=((0.0078755)*x3700);
evalcond[0]=((((-1.0)*r00*x3702))+(((-1.0)*r00*x3704))+(((-1.0)*r10*x3701))+npx+((r10*x3703)));
evalcond[1]=(((r12*x3703))+(((-1.0)*r02*x3704))+(((-1.0)*r02*x3702))+npz+(((-1.0)*r12*x3701)));
evalcond[2]=((-6.39999707069e-5)+(((0.00281174)*py*x3700))+(((0.00281174)*px*x3699))+(((-1.0)*pp))+(((-0.015751)*py*x3699))+(((0.015751)*px*x3700)));
evalcond[3]=((((-1.0)*r01*x3702))+(((-1.0)*r01*x3704))+((px*r01))+((r11*x3703))+(((-1.0)*r11*x3701))+((py*r11)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j7eval[1];
r21=0;
npy=(((px*r01))+((py*r11)));
rxp1_0=(pz*r11);
rxp1_1=((-1.0)*pz*r01);
j7eval[0]=1.0;
if( IKabs(j7eval[0]) < 0.0000000100000000  )
{
{
IkReal j8eval[1];
r21=0;
npy=(((px*r01))+((py*r11)));
rxp1_0=(pz*r11);
rxp1_1=((-1.0)*pz*r01);
IkReal x3705=((0.0078755)*cj2);
IkReal x3706=((0.0078755)*sj2);
IkReal x3707=((0.00140587)*sj2);
IkReal x3708=((0.00140587)*cj2);
j8eval[0]=((IKabs((((r01*x3706))+((r01*x3708))+(((-1.0)*px*r01))+((r11*x3707))+(((-1.0)*r11*x3705))+(((-1.0)*py*r11)))))+(IKabs(((((-1.0)*r00*x3708))+(((-1.0)*r00*x3706))+(((-1.0)*r10*x3707))+npx+((r10*x3705))))));
if( IKabs(j8eval[0]) < 0.0000010000000000  )
{
continue; // no branches [j7, j8]

} else
{
{
IkReal j8array[2], cj8array[2], sj8array[2];
bool j8valid[2]={false};
_nj8 = 2;
IkReal x3709=((0.0078755)*cj2);
IkReal x3710=((0.0078755)*sj2);
IkReal x3711=((0.00140587)*sj2);
IkReal x3712=((0.00140587)*cj2);
CheckValue<IkReal> x3714 = IKatan2WithCheck(IkReal(((((-1.0)*r00*x3710))+(((-1.0)*r00*x3712))+npx+(((-1.0)*r10*x3711))+((r10*x3709)))),IkReal((((r11*x3711))+(((-1.0)*px*r01))+((r01*x3712))+((r01*x3710))+(((-1.0)*r11*x3709))+(((-1.0)*py*r11)))),IKFAST_ATAN2_MAGTHRESH);
if(!x3714.valid){
continue;
}
IkReal x3713=x3714.value;
j8array[0]=((-1.0)*x3713);
sj8array[0]=IKsin(j8array[0]);
cj8array[0]=IKcos(j8array[0]);
j8array[1]=((3.14159265358979)+(((-1.0)*x3713)));
sj8array[1]=IKsin(j8array[1]);
cj8array[1]=IKcos(j8array[1]);
if( j8array[0] > IKPI )
{
    j8array[0]-=IK2PI;
}
else if( j8array[0] < -IKPI )
{    j8array[0]+=IK2PI;
}
j8valid[0] = true;
if( j8array[1] > IKPI )
{
    j8array[1]-=IK2PI;
}
else if( j8array[1] < -IKPI )
{    j8array[1]+=IK2PI;
}
j8valid[1] = true;
for(int ij8 = 0; ij8 < 2; ++ij8)
{
if( !j8valid[ij8] )
{
    continue;
}
_ij8[0] = ij8; _ij8[1] = -1;
for(int iij8 = ij8+1; iij8 < 2; ++iij8)
{
if( j8valid[iij8] && IKabs(cj8array[ij8]-cj8array[iij8]) < IKFAST_SOLUTION_THRESH && IKabs(sj8array[ij8]-sj8array[iij8]) < IKFAST_SOLUTION_THRESH )
{
    j8valid[iij8]=false; _ij8[1] = iij8; break; 
}
}
j8 = j8array[ij8]; cj8 = cj8array[ij8]; sj8 = sj8array[ij8];
{
IkReal evalcond[1];
IkReal x3715=IKcos(j8);
IkReal x3716=IKcos(j8);
IkReal x3717=IKcos(j8);
IkReal x3718=IKcos(j8);
IkReal x3719=IKcos(j8);
IkReal x3720=IKcos(j8);
IkReal x3721=IKcos(j8);
IkReal x3722=IKcos(j8);
IkReal x3723=IKcos(j8);
IkReal x3724=IKcos(j8);
IkReal x3725=IKcos(j8);
IkReal x3726=IKcos(j8);
IkReal x3727=IKcos(j8);
IkReal x3728=IKcos(j8);
IkReal x3729=IKcos(j8);
IkReal x3730=IKcos(j8);
IkReal x3731=IKcos(j8);
IkReal x3732=IKcos(j8);
IkReal x3733=IKcos(j8);
IkReal x3734=IKcos(j8);
IkReal x3735=IKcos(j8);
IkReal x3736=IKcos(j8);
IkReal x3737=IKcos(j8);
IkReal x3738=IKcos(j8);
IkReal x3739=IKcos(j8);
IkReal x3740=IKcos(j8);
IkReal x3741=IKcos(j8);
IkReal x3742=IKcos(j8);
IkReal x3743=IKcos(j8);
IkReal x3744=IKcos(j8);
IkReal x3745=IKcos(j8);
IkReal x3746=IKcos(j8);
IkReal x3747=IKcos(j8);
IkReal x3748=IKcos(j8);
IkReal x3749=IKcos(j8);
IkReal x3750=IKcos(j8);
IkReal x3751=IKcos(j8);
IkReal x3752=IKcos(j8);
evalcond[0]=((0.0841)+(((-0.0001200940595862)*cj2*r00*r11*sj2*(IKcos(j8))*(IKsin(j8))))+(((-0.00281174)*npx*r11*sj2*(IKcos(j8))*(IKsin(j8))))+(((-0.015751)*px*r00*r01*sj2*(IKcos(j8))*(IKsin(j8))))+(((-1.9764704569e-6)*(r10*r10)*(x3715*x3715)))+(((2.0)*px*py*r01*r11*(x3716*x3716)))+(((pz*pz)*(r20*r20)*(x3717*x3717)))+(((6.202350025e-5)*(r01*r01)*(x3718*x3718)))+(((-6.00470297931e-5)*(cj2*cj2)*(r10*r10)*(x3719*x3719)))+(((0.0001200940595862)*cj2*r01*r11*sj2))+(((-2.214385837e-5)*r00*r10*(x3720*x3720)))+(((-0.00281174)*cj2*py*r01*r11*(x3721*x3721)))+(((-2.0)*px*py*r00*r10*(x3722*x3722)))+(((-0.00281174)*cj2*px*r00*r01*(IKcos(j8))*(IKsin(j8))))+(((0.015751)*cj2*npx*r11*(IKcos(j8))*(IKsin(j8))))+(((-6.202350025e-5)*(r01*r01)))+(((-1.0)*(px*px)*(r00*r00)*(x3723*x3723)))+(((-1.0)*(py*py)*(r10*r10)*(x3724*x3724)))+(((-0.0001200940595862)*cj2*r01*r11*sj2*(x3725*x3725)))+(((-0.015751)*px*sj2*(r01*r01)*(x3726*x3726)))+(((-6.00470297931e-5)*(cj2*cj2)*(r01*r01)*(x3727*x3727)))+(((6.00470297931e-5)*(cj2*cj2)*(r01*r01)))+(((-2.0)*px*py*r01*r11))+(((4.428771674e-5)*r01*r11*(cj2*cj2)))+(((0.00281174)*cj2*py*r01*r11))+(((0.00281174)*cj2*px*(r01*r01)))+(((0.015751)*npx*r00*sj2*(x3728*x3728)))+(((4.428771674e-5)*cj2*r00*r01*sj2*(IKcos(j8))*(IKsin(j8))))+(((-1.9764704569e-6)*(r11*r11)))+(((2.214385837e-5)*r00*r11*(IKcos(j8))*(IKsin(j8))))+(((4.428771674e-5)*r00*r10*(cj2*cj2)*(x3729*x3729)))+(((2.0)*npx*py*r11*(IKcos(j8))*(IKsin(j8))))+(((0.0001240470005)*r00*r01*(IKcos(j8))*(IKsin(j8))))+(((-0.00281174)*px*r01*r11*sj2*(x3730*x3730)))+(((6.00470297931e-5)*(cj2*cj2)*(r00*r00)*(x3731*x3731)))+(((-4.428771674e-5)*r00*r11*(cj2*cj2)*(IKcos(j8))*(IKsin(j8))))+(((2.214385837e-5)*cj2*sj2*(r10*r10)*(x3732*x3732)))+(((0.015751)*py*r01*r11*sj2))+(((0.015751)*cj2*py*r10*r11*(IKcos(j8))*(IKsin(j8))))+(((2.214385837e-5)*r01*r10*(IKcos(j8))*(IKsin(j8))))+(((6.00470297931e-5)*(cj2*cj2)*(r11*r11)*(x3733*x3733)))+(((-0.00281174)*cj2*px*(r01*r01)*(x3734*x3734)))+(((-6.202350025e-5)*(r00*r00)*(x3735*x3735)))+(((0.00281174)*npx*r10*sj2*(x3736*x3736)))+(((-2.0)*npx*pz*r20*(x3737*x3737)))+(((-0.00281174)*py*r10*r11*sj2*(IKcos(j8))*(IKsin(j8))))+(((-2.214385837e-5)*r01*r11))+(((-0.015751)*cj2*npx*r10*(x3738*x3738)))+(((px*px)*(r01*r01)*(x3739*x3739)))+(((2.214385837e-5)*r01*r11*(x3740*x3740)))+(((-4.428771674e-5)*cj2*r10*r11*sj2*(IKcos(j8))*(IKsin(j8))))+(((-0.015751)*py*r00*r11*sj2*(IKcos(j8))*(IKsin(j8))))+(((0.00281174)*cj2*npx*r00*(x3741*x3741)))+(((0.015751)*px*sj2*(r01*r01)))+(((-0.00281174)*cj2*py*r00*r11*(IKcos(j8))*(IKsin(j8))))+(((-1.0)*(py*py)*(r11*r11)))+(((-0.015751)*cj2*px*r01*r11))+(((0.015751)*cj2*px*r01*r10*(IKcos(j8))*(IKsin(j8))))+(((-4.428771674e-5)*r01*r10*(cj2*cj2)*(IKcos(j8))*(IKsin(j8))))+(((-0.015751)*npx*r01*sj2*(IKcos(j8))*(IKsin(j8))))+(((-0.0001200940595862)*cj2*r01*r10*sj2*(IKcos(j8))*(IKsin(j8))))+(((0.00281174)*px*r01*r11*sj2))+(((0.015751)*cj2*px*r01*r11*(x3742*x3742)))+(((0.0001200940595862)*r10*r11*(cj2*cj2)*(IKcos(j8))*(IKsin(j8))))+(((-0.00281174)*cj2*npx*r01*(IKcos(j8))*(IKsin(j8))))+(((0.00281174)*py*sj2*(r11*r11)))+(((-0.0001200940595862)*r00*r01*(cj2*cj2)*(IKcos(j8))*(IKsin(j8))))+(((-2.214385837e-5)*cj2*sj2*(r01*r01)))+(((-4.428771674e-5)*r01*r11*(cj2*cj2)*(x3743*x3743)))+(((0.0001200940595862)*cj2*r00*r10*sj2*(x3744*x3744)))+(((-0.015751)*py*r01*r11*sj2*(x3745*x3745)))+(((2.0)*npx*px*r01*(IKcos(j8))*(IKsin(j8))))+(((-2.214385837e-5)*cj2*sj2*(r00*r00)*(x3746*x3746)))+(((-2.214385837e-5)*cj2*sj2*(r11*r11)*(x3747*x3747)))+(((2.214385837e-5)*cj2*sj2*(r11*r11)))+(((2.214385837e-5)*cj2*sj2*(r01*r01)*(x3748*x3748)))+(((-0.00281174)*px*r01*r10*sj2*(IKcos(j8))*(IKsin(j8))))+(((0.015751)*cj2*py*(r11*r11)*(x3749*x3749)))+(((-0.00281174)*py*sj2*(r11*r11)*(x3750*x3750)))+(((3.9529409138e-6)*r10*r11*(IKcos(j8))*(IKsin(j8))))+(((-0.015751)*cj2*py*(r11*r11)))+(((1.9764704569e-6)*(r11*r11)*(x3751*x3751)))+(((py*py)*(r11*r11)*(x3752*x3752)))+(((-1.0)*(px*px)*(r01*r01)))+(((-6.00470297931e-5)*(cj2*cj2)*(r11*r11))));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j7eval[1];
r21=0;
npy=(((px*r01))+((py*r11)));
rxp1_0=(pz*r11);
rxp1_1=((-1.0)*pz*r01);
j7eval[0]=1.0;
if( IKabs(j7eval[0]) < 0.0000000100000000  )
{
continue; // no branches [j7]

} else
{
IkReal op[2+1], zeror[2];
int numroots;
op[0]=-1.0;
op[1]=0;
op[2]=1.0;
polyroots2(op,zeror,numroots);
IkReal j7array[2], cj7array[2], sj7array[2], tempj7array[1];
int numsolutions = 0;
for(int ij7 = 0; ij7 < numroots; ++ij7)
{
IkReal htj7 = zeror[ij7];
tempj7array[0]=((2.0)*(atan(htj7)));
for(int kj7 = 0; kj7 < 1; ++kj7)
{
j7array[numsolutions] = tempj7array[kj7];
if( j7array[numsolutions] > IKPI )
{
    j7array[numsolutions]-=IK2PI;
}
else if( j7array[numsolutions] < -IKPI )
{
    j7array[numsolutions]+=IK2PI;
}
sj7array[numsolutions] = IKsin(j7array[numsolutions]);
cj7array[numsolutions] = IKcos(j7array[numsolutions]);
numsolutions++;
}
}
bool j7valid[2]={true,true};
_nj7 = 2;
for(int ij7 = 0; ij7 < numsolutions; ++ij7)
    {
if( !j7valid[ij7] )
{
    continue;
}
    j7 = j7array[ij7]; cj7 = cj7array[ij7]; sj7 = sj7array[ij7];
htj7 = IKtan(j7/2);

_ij7[0] = ij7; _ij7[1] = -1;
for(int iij7 = ij7+1; iij7 < numsolutions; ++iij7)
{
if( j7valid[iij7] && IKabs(cj7array[ij7]-cj7array[iij7]) < IKFAST_SOLUTION_THRESH && IKabs(sj7array[ij7]-sj7array[iij7]) < IKFAST_SOLUTION_THRESH )
{
    j7valid[iij7]=false; _ij7[1] = iij7; break; 
}
}
rotationfunction0(solutions);
    }

}

}
}
}

}

}

} else
{
IkReal op[2+1], zeror[2];
int numroots;
op[0]=-1.0;
op[1]=0;
op[2]=1.0;
polyroots2(op,zeror,numroots);
IkReal j7array[2], cj7array[2], sj7array[2], tempj7array[1];
int numsolutions = 0;
for(int ij7 = 0; ij7 < numroots; ++ij7)
{
IkReal htj7 = zeror[ij7];
tempj7array[0]=((2.0)*(atan(htj7)));
for(int kj7 = 0; kj7 < 1; ++kj7)
{
j7array[numsolutions] = tempj7array[kj7];
if( j7array[numsolutions] > IKPI )
{
    j7array[numsolutions]-=IK2PI;
}
else if( j7array[numsolutions] < -IKPI )
{
    j7array[numsolutions]+=IK2PI;
}
sj7array[numsolutions] = IKsin(j7array[numsolutions]);
cj7array[numsolutions] = IKcos(j7array[numsolutions]);
numsolutions++;
}
}
bool j7valid[2]={true,true};
_nj7 = 2;
for(int ij7 = 0; ij7 < numsolutions; ++ij7)
    {
if( !j7valid[ij7] )
{
    continue;
}
    j7 = j7array[ij7]; cj7 = cj7array[ij7]; sj7 = sj7array[ij7];
htj7 = IKtan(j7/2);

_ij7[0] = ij7; _ij7[1] = -1;
for(int iij7 = ij7+1; iij7 < numsolutions; ++iij7)
{
if( j7valid[iij7] && IKabs(cj7array[ij7]-cj7array[iij7]) < IKFAST_SOLUTION_THRESH && IKabs(sj7array[ij7]-sj7array[iij7]) < IKFAST_SOLUTION_THRESH )
{
    j7valid[iij7]=false; _ij7[1] = iij7; break; 
}
}
{
IkReal j8eval[1];
r21=0;
npy=(((px*r01))+((py*r11)));
rxp1_0=(pz*r11);
rxp1_1=((-1.0)*pz*r01);
IkReal x3753=((0.0078755)*cj2);
IkReal x3754=((0.0078755)*sj2);
IkReal x3755=((0.00140587)*sj2);
IkReal x3756=((0.00140587)*cj2);
j8eval[0]=((IKabs((((r01*x3756))+((r01*x3754))+(((-1.0)*px*r01))+(((-1.0)*r11*x3753))+((r11*x3755))+(((-1.0)*py*r11)))))+(IKabs(((((-1.0)*r00*x3754))+(((-1.0)*r00*x3756))+npx+((r10*x3753))+(((-1.0)*r10*x3755))))));
if( IKabs(j8eval[0]) < 0.0000010000000000  )
{
continue; // no branches [j8]

} else
{
{
IkReal j8array[2], cj8array[2], sj8array[2];
bool j8valid[2]={false};
_nj8 = 2;
IkReal x3757=((0.0078755)*cj2);
IkReal x3758=((0.0078755)*sj2);
IkReal x3759=((0.00140587)*sj2);
IkReal x3760=((0.00140587)*cj2);
CheckValue<IkReal> x3762 = IKatan2WithCheck(IkReal(((((-1.0)*r00*x3758))+npx+((r10*x3757))+(((-1.0)*r10*x3759))+(((-1.0)*r00*x3760)))),IkReal((((r01*x3758))+(((-1.0)*px*r01))+(((-1.0)*r11*x3757))+((r11*x3759))+(((-1.0)*py*r11))+((r01*x3760)))),IKFAST_ATAN2_MAGTHRESH);
if(!x3762.valid){
continue;
}
IkReal x3761=x3762.value;
j8array[0]=((-1.0)*x3761);
sj8array[0]=IKsin(j8array[0]);
cj8array[0]=IKcos(j8array[0]);
j8array[1]=((3.14159265358979)+(((-1.0)*x3761)));
sj8array[1]=IKsin(j8array[1]);
cj8array[1]=IKcos(j8array[1]);
if( j8array[0] > IKPI )
{
    j8array[0]-=IK2PI;
}
else if( j8array[0] < -IKPI )
{    j8array[0]+=IK2PI;
}
j8valid[0] = true;
if( j8array[1] > IKPI )
{
    j8array[1]-=IK2PI;
}
else if( j8array[1] < -IKPI )
{    j8array[1]+=IK2PI;
}
j8valid[1] = true;
for(int ij8 = 0; ij8 < 2; ++ij8)
{
if( !j8valid[ij8] )
{
    continue;
}
_ij8[0] = ij8; _ij8[1] = -1;
for(int iij8 = ij8+1; iij8 < 2; ++iij8)
{
if( j8valid[iij8] && IKabs(cj8array[ij8]-cj8array[iij8]) < IKFAST_SOLUTION_THRESH && IKabs(sj8array[ij8]-sj8array[iij8]) < IKFAST_SOLUTION_THRESH )
{
    j8valid[iij8]=false; _ij8[1] = iij8; break; 
}
}
j8 = j8array[ij8]; cj8 = cj8array[ij8]; sj8 = sj8array[ij8];
{
IkReal evalcond[1];
IkReal x3763=IKcos(j8);
IkReal x3764=IKcos(j8);
IkReal x3765=IKcos(j8);
IkReal x3766=IKcos(j8);
IkReal x3767=IKcos(j8);
IkReal x3768=IKcos(j8);
IkReal x3769=IKcos(j8);
IkReal x3770=IKcos(j8);
IkReal x3771=IKcos(j8);
IkReal x3772=IKcos(j8);
IkReal x3773=IKcos(j8);
IkReal x3774=IKcos(j8);
IkReal x3775=IKcos(j8);
IkReal x3776=IKcos(j8);
IkReal x3777=IKcos(j8);
IkReal x3778=IKcos(j8);
IkReal x3779=IKcos(j8);
IkReal x3780=IKcos(j8);
IkReal x3781=IKcos(j8);
IkReal x3782=IKcos(j8);
IkReal x3783=IKcos(j8);
IkReal x3784=IKcos(j8);
IkReal x3785=IKcos(j8);
IkReal x3786=IKcos(j8);
IkReal x3787=IKcos(j8);
IkReal x3788=IKcos(j8);
IkReal x3789=IKcos(j8);
IkReal x3790=IKcos(j8);
IkReal x3791=IKcos(j8);
IkReal x3792=IKcos(j8);
IkReal x3793=IKcos(j8);
IkReal x3794=IKcos(j8);
IkReal x3795=IKcos(j8);
IkReal x3796=IKcos(j8);
IkReal x3797=IKcos(j8);
IkReal x3798=IKcos(j8);
IkReal x3799=IKcos(j8);
IkReal x3800=IKcos(j8);
evalcond[0]=((0.0841)+(((-0.0001200940595862)*cj2*r00*r11*sj2*(IKcos(j8))*(IKsin(j8))))+(((-0.00281174)*npx*r11*sj2*(IKcos(j8))*(IKsin(j8))))+(((-0.015751)*px*r00*r01*sj2*(IKcos(j8))*(IKsin(j8))))+(((-1.9764704569e-6)*(r10*r10)*(x3763*x3763)))+(((2.0)*px*py*r01*r11*(x3764*x3764)))+(((pz*pz)*(r20*r20)*(x3765*x3765)))+(((6.202350025e-5)*(r01*r01)*(x3766*x3766)))+(((-6.00470297931e-5)*(cj2*cj2)*(r10*r10)*(x3767*x3767)))+(((0.0001200940595862)*cj2*r01*r11*sj2))+(((-2.214385837e-5)*r00*r10*(x3768*x3768)))+(((-0.00281174)*cj2*py*r01*r11*(x3769*x3769)))+(((-2.0)*px*py*r00*r10*(x3770*x3770)))+(((-0.00281174)*cj2*px*r00*r01*(IKcos(j8))*(IKsin(j8))))+(((0.015751)*cj2*npx*r11*(IKcos(j8))*(IKsin(j8))))+(((-6.202350025e-5)*(r01*r01)))+(((-1.0)*(px*px)*(r00*r00)*(x3771*x3771)))+(((-1.0)*(py*py)*(r10*r10)*(x3772*x3772)))+(((-0.0001200940595862)*cj2*r01*r11*sj2*(x3773*x3773)))+(((-0.015751)*px*sj2*(r01*r01)*(x3774*x3774)))+(((-6.00470297931e-5)*(cj2*cj2)*(r01*r01)*(x3775*x3775)))+(((6.00470297931e-5)*(cj2*cj2)*(r01*r01)))+(((-2.0)*px*py*r01*r11))+(((4.428771674e-5)*r01*r11*(cj2*cj2)))+(((0.00281174)*cj2*py*r01*r11))+(((0.00281174)*cj2*px*(r01*r01)))+(((0.015751)*npx*r00*sj2*(x3776*x3776)))+(((4.428771674e-5)*cj2*r00*r01*sj2*(IKcos(j8))*(IKsin(j8))))+(((-1.9764704569e-6)*(r11*r11)))+(((2.214385837e-5)*r00*r11*(IKcos(j8))*(IKsin(j8))))+(((4.428771674e-5)*r00*r10*(cj2*cj2)*(x3777*x3777)))+(((2.0)*npx*py*r11*(IKcos(j8))*(IKsin(j8))))+(((0.0001240470005)*r00*r01*(IKcos(j8))*(IKsin(j8))))+(((-0.00281174)*px*r01*r11*sj2*(x3778*x3778)))+(((6.00470297931e-5)*(cj2*cj2)*(r00*r00)*(x3779*x3779)))+(((-4.428771674e-5)*r00*r11*(cj2*cj2)*(IKcos(j8))*(IKsin(j8))))+(((2.214385837e-5)*cj2*sj2*(r10*r10)*(x3780*x3780)))+(((0.015751)*py*r01*r11*sj2))+(((0.015751)*cj2*py*r10*r11*(IKcos(j8))*(IKsin(j8))))+(((2.214385837e-5)*r01*r10*(IKcos(j8))*(IKsin(j8))))+(((6.00470297931e-5)*(cj2*cj2)*(r11*r11)*(x3781*x3781)))+(((-0.00281174)*cj2*px*(r01*r01)*(x3782*x3782)))+(((-6.202350025e-5)*(r00*r00)*(x3783*x3783)))+(((0.00281174)*npx*r10*sj2*(x3784*x3784)))+(((-2.0)*npx*pz*r20*(x3785*x3785)))+(((-0.00281174)*py*r10*r11*sj2*(IKcos(j8))*(IKsin(j8))))+(((-2.214385837e-5)*r01*r11))+(((-0.015751)*cj2*npx*r10*(x3786*x3786)))+(((px*px)*(r01*r01)*(x3787*x3787)))+(((2.214385837e-5)*r01*r11*(x3788*x3788)))+(((-4.428771674e-5)*cj2*r10*r11*sj2*(IKcos(j8))*(IKsin(j8))))+(((-0.015751)*py*r00*r11*sj2*(IKcos(j8))*(IKsin(j8))))+(((0.00281174)*cj2*npx*r00*(x3789*x3789)))+(((0.015751)*px*sj2*(r01*r01)))+(((-0.00281174)*cj2*py*r00*r11*(IKcos(j8))*(IKsin(j8))))+(((-1.0)*(py*py)*(r11*r11)))+(((-0.015751)*cj2*px*r01*r11))+(((0.015751)*cj2*px*r01*r10*(IKcos(j8))*(IKsin(j8))))+(((-4.428771674e-5)*r01*r10*(cj2*cj2)*(IKcos(j8))*(IKsin(j8))))+(((-0.015751)*npx*r01*sj2*(IKcos(j8))*(IKsin(j8))))+(((-0.0001200940595862)*cj2*r01*r10*sj2*(IKcos(j8))*(IKsin(j8))))+(((0.00281174)*px*r01*r11*sj2))+(((0.015751)*cj2*px*r01*r11*(x3790*x3790)))+(((0.0001200940595862)*r10*r11*(cj2*cj2)*(IKcos(j8))*(IKsin(j8))))+(((-0.00281174)*cj2*npx*r01*(IKcos(j8))*(IKsin(j8))))+(((0.00281174)*py*sj2*(r11*r11)))+(((-0.0001200940595862)*r00*r01*(cj2*cj2)*(IKcos(j8))*(IKsin(j8))))+(((-2.214385837e-5)*cj2*sj2*(r01*r01)))+(((-4.428771674e-5)*r01*r11*(cj2*cj2)*(x3791*x3791)))+(((0.0001200940595862)*cj2*r00*r10*sj2*(x3792*x3792)))+(((-0.015751)*py*r01*r11*sj2*(x3793*x3793)))+(((2.0)*npx*px*r01*(IKcos(j8))*(IKsin(j8))))+(((-2.214385837e-5)*cj2*sj2*(r00*r00)*(x3794*x3794)))+(((-2.214385837e-5)*cj2*sj2*(r11*r11)*(x3795*x3795)))+(((2.214385837e-5)*cj2*sj2*(r11*r11)))+(((2.214385837e-5)*cj2*sj2*(r01*r01)*(x3796*x3796)))+(((-0.00281174)*px*r01*r10*sj2*(IKcos(j8))*(IKsin(j8))))+(((0.015751)*cj2*py*(r11*r11)*(x3797*x3797)))+(((-0.00281174)*py*sj2*(r11*r11)*(x3798*x3798)))+(((3.9529409138e-6)*r10*r11*(IKcos(j8))*(IKsin(j8))))+(((-0.015751)*cj2*py*(r11*r11)))+(((1.9764704569e-6)*(r11*r11)*(x3799*x3799)))+(((py*py)*(r11*r11)*(x3800*x3800)))+(((-1.0)*(px*px)*(r01*r01)))+(((-6.00470297931e-5)*(cj2*cj2)*(r11*r11))));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

rotationfunction0(solutions);
}
}

}

}
    }

}

}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=IKabs(r22);
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j2eval[3];
r22=0;
npz=(((px*r02))+((py*r12)));
rxp2_0=(pz*r12);
rxp2_1=((-1.0)*pz*r02);
IkReal x3801=(npx*px);
IkReal x3802=(npx*py);
IkReal x3803=(pp*r10);
IkReal x3804=(pp*r00);
j2eval[0]=rxp0_2;
j2eval[1]=IKsign(rxp0_2);
j2eval[2]=((IKabs(((((0.0078755)*x3804))+(((5.04031769302191e-7)*r00))+(((8.99756388177095e-8)*r10))+(((-0.00281174)*x3802))+(((0.00140587)*x3803))+(((-0.015751)*x3801)))))+(IKabs(((((-0.00140587)*x3804))+(((5.04031769302191e-7)*r10))+(((0.0078755)*x3803))+(((0.00281174)*x3801))+(((-8.99756388177095e-8)*r00))+(((-0.015751)*x3802))))));
if( IKabs(j2eval[0]) < 0.0000010000000000  || IKabs(j2eval[1]) < 0.0000010000000000  || IKabs(j2eval[2]) < 0.0000010000000000  )
{
{
IkReal j2eval[3];
r22=0;
npz=(((px*r02))+((py*r12)));
rxp2_0=(pz*r12);
rxp2_1=((-1.0)*pz*r02);
IkReal x3805=(pp*r01);
IkReal x3806=(npy*py);
IkReal x3807=(pp*r11);
IkReal x3808=(npy*px);
j2eval[0]=rxp1_2;
j2eval[1]=IKsign(rxp1_2);
j2eval[2]=((IKabs(((((-0.00140587)*x3805))+(((5.04031769302191e-7)*r11))+(((0.0078755)*x3807))+(((0.00281174)*x3808))+(((-8.99756388177095e-8)*r01))+(((-0.015751)*x3806)))))+(IKabs(((((0.0078755)*x3805))+(((5.04031769302191e-7)*r01))+(((8.99756388177095e-8)*r11))+(((-0.00281174)*x3806))+(((0.00140587)*x3807))+(((-0.015751)*x3808))))));
if( IKabs(j2eval[0]) < 0.0000010000000000  || IKabs(j2eval[1]) < 0.0000010000000000  || IKabs(j2eval[2]) < 0.0000010000000000  )
{
{
IkReal j2eval[3];
r22=0;
npz=(((px*r02))+((py*r12)));
rxp2_0=(pz*r12);
rxp2_1=((-1.0)*pz*r02);
IkReal x3809=((0.00140587)*r12);
IkReal x3810=(py*r10);
IkReal x3811=((0.0078755)*r12);
IkReal x3812=(npx*r02);
IkReal x3813=(py*r00);
IkReal x3814=((0.0078755)*px*r02);
IkReal x3815=((0.00140587)*px*r02);
j2eval[0]=r21;
j2eval[1]=IKsign(r21);
j2eval[2]=((IKabs(((((-1.0)*r00*x3814))+(((0.0078755)*x3812))+(((-1.0)*x3809*x3810))+((npx*x3809))+(((-1.0)*x3811*x3813))+(((-1.0)*r10*x3815)))))+(IKabs(((((-0.00140587)*x3812))+(((-1.0)*x3810*x3811))+((x3809*x3813))+((npx*x3811))+(((-1.0)*r10*x3814))+((r00*x3815))))));
if( IKabs(j2eval[0]) < 0.0000010000000000  || IKabs(j2eval[1]) < 0.0000010000000000  || IKabs(j2eval[2]) < 0.0000010000000000  )
{
{
IkReal evalcond[1];
bool bgotonextstatement = true;
do
{
evalcond[0]=((IKabs(r02))+(IKabs(r12)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j2eval[2];
IkReal x3816=((-1.0)*pz);
r22=0;
npz=0;
rxp2_0=0;
rxp2_1=0;
r12=0;
r02=0;
r20=0;
r21=0;
npx=(((px*r00))+((py*r10)));
npy=(((px*r01))+((py*r11)));
rxp0_0=(pz*r10);
rxp0_1=(r00*x3816);
rxp1_0=(pz*r11);
rxp1_1=(r01*x3816);
rxp2_2=0;
j2eval[0]=rxp0_2;
j2eval[1]=IKsign(rxp0_2);
if( IKabs(j2eval[0]) < 0.0000010000000000  || IKabs(j2eval[1]) < 0.0000010000000000  )
{
{
IkReal j2eval[2];
IkReal x3817=((-1.0)*pz);
r22=0;
npz=0;
rxp2_0=0;
rxp2_1=0;
r12=0;
r02=0;
r20=0;
r21=0;
npx=(((px*r00))+((py*r10)));
npy=(((px*r01))+((py*r11)));
rxp0_0=(pz*r10);
rxp0_1=(r00*x3817);
rxp1_0=(pz*r11);
rxp1_1=(r01*x3817);
rxp2_2=0;
j2eval[0]=rxp1_2;
j2eval[1]=IKsign(rxp1_2);
if( IKabs(j2eval[0]) < 0.0000010000000000  || IKabs(j2eval[1]) < 0.0000010000000000  )
{
{
IkReal j7eval[1];
IkReal x3818=((-1.0)*pz);
r22=0;
npz=0;
rxp2_0=0;
rxp2_1=0;
r12=0;
r02=0;
r20=0;
r21=0;
npx=(((px*r00))+((py*r10)));
npy=(((px*r01))+((py*r11)));
rxp0_0=(pz*r10);
rxp0_1=(r00*x3818);
rxp1_0=(pz*r11);
rxp1_1=(r01*x3818);
rxp2_2=0;
j7eval[0]=1.0;
if( IKabs(j7eval[0]) < 0.0000000100000000  )
{
continue; // no branches [j2, j7, j8]

} else
{
IkReal op[2+1], zeror[2];
int numroots;
op[0]=-1.0;
op[1]=0;
op[2]=1.0;
polyroots2(op,zeror,numroots);
IkReal j7array[2], cj7array[2], sj7array[2], tempj7array[1];
int numsolutions = 0;
for(int ij7 = 0; ij7 < numroots; ++ij7)
{
IkReal htj7 = zeror[ij7];
tempj7array[0]=((2.0)*(atan(htj7)));
for(int kj7 = 0; kj7 < 1; ++kj7)
{
j7array[numsolutions] = tempj7array[kj7];
if( j7array[numsolutions] > IKPI )
{
    j7array[numsolutions]-=IK2PI;
}
else if( j7array[numsolutions] < -IKPI )
{
    j7array[numsolutions]+=IK2PI;
}
sj7array[numsolutions] = IKsin(j7array[numsolutions]);
cj7array[numsolutions] = IKcos(j7array[numsolutions]);
numsolutions++;
}
}
bool j7valid[2]={true,true};
_nj7 = 2;
for(int ij7 = 0; ij7 < numsolutions; ++ij7)
    {
if( !j7valid[ij7] )
{
    continue;
}
    j7 = j7array[ij7]; cj7 = cj7array[ij7]; sj7 = sj7array[ij7];
htj7 = IKtan(j7/2);

_ij7[0] = ij7; _ij7[1] = -1;
for(int iij7 = ij7+1; iij7 < numsolutions; ++iij7)
{
if( j7valid[iij7] && IKabs(cj7array[ij7]-cj7array[iij7]) < IKFAST_SOLUTION_THRESH && IKabs(sj7array[ij7]-sj7array[iij7]) < IKFAST_SOLUTION_THRESH )
{
    j7valid[iij7]=false; _ij7[1] = iij7; break; 
}
}
{
IkReal j2eval[2];
IkReal x3819=((-1.0)*pz);
r22=0;
npz=0;
rxp2_0=0;
rxp2_1=0;
r12=0;
r02=0;
r20=0;
r21=0;
npx=(((px*r00))+((py*r10)));
npy=(((px*r01))+((py*r11)));
rxp0_0=(pz*r10);
rxp0_1=(r00*x3819);
rxp1_0=(pz*r11);
rxp1_1=(r01*x3819);
rxp2_2=0;
j2eval[0]=rxp0_2;
j2eval[1]=IKsign(rxp0_2);
if( IKabs(j2eval[0]) < 0.0000010000000000  || IKabs(j2eval[1]) < 0.0000010000000000  )
{
{
IkReal j2eval[2];
IkReal x3820=((-1.0)*pz);
r22=0;
npz=0;
rxp2_0=0;
rxp2_1=0;
r12=0;
r02=0;
r20=0;
r21=0;
npx=(((px*r00))+((py*r10)));
npy=(((px*r01))+((py*r11)));
rxp0_0=(pz*r10);
rxp0_1=(r00*x3820);
rxp1_0=(pz*r11);
rxp1_1=(r01*x3820);
rxp2_2=0;
j2eval[0]=rxp1_2;
j2eval[1]=IKsign(rxp1_2);
if( IKabs(j2eval[0]) < 0.0000010000000000  || IKabs(j2eval[1]) < 0.0000010000000000  )
{
continue; // no branches [j2, j8]

} else
{
{
IkReal j2array[1], cj2array[1], sj2array[1];
bool j2valid[1]={false};
_nj2 = 1;
IkReal x3821=px*px;
IkReal x3822=py*py;
IkReal x3823=((0.00281174)*r01);
IkReal x3824=(pp*r01);
IkReal x3825=(px*py);
IkReal x3826=(pp*r11);
IkReal x3827=((0.015751)*x3825);
IkReal x3828=(r11*x3822);
CheckValue<IkReal> x3829 = IKatan2WithCheck(IkReal(((((-0.00281174)*r11*x3825))+(((-0.0078755)*x3826))+(((8.99756388177095e-8)*r01))+(((0.015751)*x3828))+(((-5.04031769302191e-7)*r11))+(((-1.0)*x3821*x3823))+(((0.00140587)*x3824))+((r01*x3827)))),IkReal(((((-0.0078755)*x3824))+((r11*x3827))+(((0.015751)*r01*x3821))+(((-5.04031769302191e-7)*r01))+(((-8.99756388177095e-8)*r11))+((x3823*x3825))+(((0.00281174)*x3828))+(((-0.00140587)*x3826)))),IKFAST_ATAN2_MAGTHRESH);
if(!x3829.valid){
continue;
}
CheckValue<IkReal> x3830=IKPowWithIntegerCheck(IKsign(rxp1_2),-1);
if(!x3830.valid){
continue;
}
j2array[0]=((-1.5707963267949)+(x3829.value)+(((1.5707963267949)*(x3830.value))));
sj2array[0]=IKsin(j2array[0]);
cj2array[0]=IKcos(j2array[0]);
if( j2array[0] > IKPI )
{
    j2array[0]-=IK2PI;
}
else if( j2array[0] < -IKPI )
{    j2array[0]+=IK2PI;
}
j2valid[0] = true;
for(int ij2 = 0; ij2 < 1; ++ij2)
{
if( !j2valid[ij2] )
{
    continue;
}
_ij2[0] = ij2; _ij2[1] = -1;
for(int iij2 = ij2+1; iij2 < 1; ++iij2)
{
if( j2valid[iij2] && IKabs(cj2array[ij2]-cj2array[iij2]) < IKFAST_SOLUTION_THRESH && IKabs(sj2array[ij2]-sj2array[iij2]) < IKFAST_SOLUTION_THRESH )
{
    j2valid[iij2]=false; _ij2[1] = iij2; break; 
}
}
j2 = j2array[ij2]; cj2 = cj2array[ij2]; sj2 = sj2array[ij2];
{
IkReal evalcond[3];
IkReal x3831=IKsin(j2);
IkReal x3832=IKcos(j2);
IkReal x3833=((0.00140587)*x3831);
IkReal x3834=((0.0078755)*x3832);
IkReal x3835=((0.00140587)*x3832);
IkReal x3836=((0.0078755)*x3831);
evalcond[0]=((-6.39999707069e-5)+(((-0.015751)*py*x3832))+(((-1.0)*pp))+(((0.015751)*px*x3831))+(((0.00281174)*px*x3832))+(((0.00281174)*py*x3831)));
evalcond[1]=((((-1.0)*r10*x3833))+((px*r00))+(((-1.0)*r00*x3836))+(((-1.0)*r00*x3835))+((py*r10))+((r10*x3834)));
evalcond[2]=(((px*r01))+(((-1.0)*r11*x3833))+((r11*x3834))+(((-1.0)*r01*x3836))+(((-1.0)*r01*x3835))+((py*r11)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j8eval[1];
IkReal x3837=((-1.0)*pz);
r22=0;
npz=0;
rxp2_0=0;
rxp2_1=0;
r12=0;
r02=0;
r20=0;
r21=0;
npx=(((px*r00))+((py*r10)));
npy=(((px*r01))+((py*r11)));
rxp0_0=(pz*r10);
rxp0_1=(r00*x3837);
rxp1_0=(pz*r11);
rxp1_1=(r01*x3837);
rxp2_2=0;
j8eval[0]=((sj2*sj2)+(cj2*cj2)+(((-43.9334576085495)*py*sj2))+(((-246.109487645466)*px*sj2))+(((-43.9334576085495)*cj2*px))+(((-15625.007151639)*(pz*pz)))+(((246.109487645466)*cj2*py))+(((15625.007151639)*pp)));
if( IKabs(j8eval[0]) < 0.0000010000000000  )
{
continue; // no branches [j8]

} else
{
{
IkReal j8array[2], cj8array[2], sj8array[2];
bool j8valid[2]={false};
_nj8 = 2;
IkReal x3838=((0.0078755)*cj2);
IkReal x3839=((0.0078755)*sj2);
IkReal x3840=((0.00140587)*sj2);
IkReal x3841=((0.00140587)*cj2);
CheckValue<IkReal> x3843 = IKatan2WithCheck(IkReal((((px*r00))+(((-1.0)*r00*x3839))+((py*r10))+(((-1.0)*r10*x3840))+(((-1.0)*r00*x3841))+((r10*x3838)))),IkReal(((((-1.0)*px*r01))+((r01*x3839))+(((-1.0)*r11*x3838))+((r01*x3841))+(((-1.0)*py*r11))+((r11*x3840)))),IKFAST_ATAN2_MAGTHRESH);
if(!x3843.valid){
continue;
}
IkReal x3842=x3843.value;
j8array[0]=((-1.0)*x3842);
sj8array[0]=IKsin(j8array[0]);
cj8array[0]=IKcos(j8array[0]);
j8array[1]=((3.14159265358979)+(((-1.0)*x3842)));
sj8array[1]=IKsin(j8array[1]);
cj8array[1]=IKcos(j8array[1]);
if( j8array[0] > IKPI )
{
    j8array[0]-=IK2PI;
}
else if( j8array[0] < -IKPI )
{    j8array[0]+=IK2PI;
}
j8valid[0] = true;
if( j8array[1] > IKPI )
{
    j8array[1]-=IK2PI;
}
else if( j8array[1] < -IKPI )
{    j8array[1]+=IK2PI;
}
j8valid[1] = true;
for(int ij8 = 0; ij8 < 2; ++ij8)
{
if( !j8valid[ij8] )
{
    continue;
}
_ij8[0] = ij8; _ij8[1] = -1;
for(int iij8 = ij8+1; iij8 < 2; ++iij8)
{
if( j8valid[iij8] && IKabs(cj8array[ij8]-cj8array[iij8]) < IKFAST_SOLUTION_THRESH && IKabs(sj8array[ij8]-sj8array[iij8]) < IKFAST_SOLUTION_THRESH )
{
    j8valid[iij8]=false; _ij8[1] = iij8; break; 
}
}
j8 = j8array[ij8]; cj8 = cj8array[ij8]; sj8 = sj8array[ij8];
{
IkReal evalcond[1];
IkReal x3844=IKcos(j8);
IkReal x3845=IKcos(j8);
IkReal x3846=IKcos(j8);
IkReal x3847=IKcos(j8);
IkReal x3848=IKcos(j8);
IkReal x3849=IKcos(j8);
IkReal x3850=IKcos(j8);
IkReal x3851=IKcos(j8);
IkReal x3852=IKcos(j8);
IkReal x3853=IKcos(j8);
IkReal x3854=IKcos(j8);
IkReal x3855=IKcos(j8);
IkReal x3856=IKcos(j8);
IkReal x3857=IKcos(j8);
IkReal x3858=IKcos(j8);
IkReal x3859=IKcos(j8);
IkReal x3860=IKcos(j8);
IkReal x3861=IKcos(j8);
IkReal x3862=IKcos(j8);
IkReal x3863=IKcos(j8);
IkReal x3864=IKcos(j8);
IkReal x3865=IKcos(j8);
IkReal x3866=IKcos(j8);
IkReal x3867=IKcos(j8);
IkReal x3868=IKcos(j8);
IkReal x3869=IKcos(j8);
IkReal x3870=IKcos(j8);
IkReal x3871=IKcos(j8);
IkReal x3872=IKcos(j8);
IkReal x3873=IKcos(j8);
IkReal x3874=IKcos(j8);
IkReal x3875=IKcos(j8);
IkReal x3876=IKcos(j8);
IkReal x3877=IKcos(j8);
IkReal x3878=IKcos(j8);
IkReal x3879=IKcos(j8);
IkReal x3880=IKcos(j8);
IkReal x3881=IKcos(j8);
evalcond[0]=((0.0840980235295431)+(((-0.0001200940595862)*cj2*r00*r11*sj2*(IKcos(j8))*(IKsin(j8))))+(((-0.015751)*cj2*py*(r10*r10)*(x3844*x3844)))+(((0.00281174)*cj2*py*r00*r10*(x3845*x3845)))+(((-6.00470297931e-5)*(cj2*cj2)))+(((-0.00562348)*py*r10*r11*sj2*(IKcos(j8))*(IKsin(j8))))+(((2.0)*px*py*r01*r11*(x3846*x3846)))+(((-0.00281174)*cj2*py*r01*r10*(IKcos(j8))*(IKsin(j8))))+(((6.202350025e-5)*(r01*r01)*(x3847*x3847)))+(((0.0001200940595862)*cj2*r01*r11*sj2))+(((6.643157511e-5)*cj2*sj2*(r10*r10)*(x3848*x3848)))+(((py*py)*(x3849*x3849)))+(((-2.214385837e-5)*r00*r10*(x3850*x3850)))+(((-0.00281174)*cj2*py*r01*r11*(x3851*x3851)))+(((-0.00281174)*px*r00*r11*sj2*(IKcos(j8))*(IKsin(j8))))+(((-2.0)*px*py*r00*r10*(x3852*x3852)))+(((0.015751)*px*sj2*(r00*r00)*(x3853*x3853)))+(((-6.202350025e-5)*(r01*r01)))+(((-0.0001200940595862)*cj2*r01*r11*sj2*(x3854*x3854)))+(((-0.015751)*px*sj2*(r01*r01)*(x3855*x3855)))+(((-6.00470297931e-5)*(cj2*cj2)*(r01*r01)*(x3856*x3856)))+(((-0.015751)*py*r01*r10*sj2*(IKcos(j8))*(IKsin(j8))))+(((6.00470297931e-5)*(cj2*cj2)*(r01*r01)))+(((-2.0)*px*py*r01*r11))+(((4.428771674e-5)*r01*r11*(cj2*cj2)))+(((0.00281174)*cj2*py*r01*r11))+(((0.00281174)*cj2*px*(r01*r01)))+(((4.428771674e-5)*cj2*r00*r01*sj2*(IKcos(j8))*(IKsin(j8))))+(((0.015751)*py*r00*r10*sj2*(x3857*x3857)))+(((2.214385837e-5)*r00*r11*(IKcos(j8))*(IKsin(j8))))+(((0.015751)*cj2*px*r00*r11*(IKcos(j8))*(IKsin(j8))))+(((4.428771674e-5)*r00*r10*(cj2*cj2)*(x3858*x3858)))+(((0.0001240470005)*r00*r01*(IKcos(j8))*(IKsin(j8))))+(((-0.00281174)*px*r01*r11*sj2*(x3859*x3859)))+(((-2.214385837e-5)*cj2*sj2*(r10*r10)))+(((2.214385837e-5)*cj2*sj2))+(((-4.428771674e-5)*r00*r11*(cj2*cj2)*(IKcos(j8))*(IKsin(j8))))+(((0.015751)*py*r01*r11*sj2))+(((-0.00562348)*cj2*px*r00*r01*(IKcos(j8))*(IKsin(j8))))+(((2.214385837e-5)*r01*r10*(IKcos(j8))*(IKsin(j8))))+(((-0.00281174)*cj2*px*(r01*r01)*(x3860*x3860)))+(((-2.214385837e-5)*r01*r11))+(((-2.0)*(py*py)*(r10*r10)*(x3861*x3861)))+(((px*px)*(r01*r01)*(x3862*x3862)))+(((0.0001200940595862)*(cj2*cj2)*(x3863*x3863)))+(((2.214385837e-5)*r01*r11*(x3864*x3864)))+(((-4.428771674e-5)*cj2*r10*r11*sj2*(IKcos(j8))*(IKsin(j8))))+(((-0.015751)*py*r00*r11*sj2*(IKcos(j8))*(IKsin(j8))))+(((0.015751)*px*sj2*(r01*r01)))+(((-0.00281174)*cj2*py*r00*r11*(IKcos(j8))*(IKsin(j8))))+(((-0.015751)*cj2*px*r00*r10*(x3865*x3865)))+(((-4.428771674e-5)*cj2*sj2*(x3866*x3866)))+(((-0.015751)*cj2*px*r01*r11))+(((0.00281174)*cj2*px*(r00*r00)*(x3867*x3867)))+(((0.015751)*cj2*px*r01*r10*(IKcos(j8))*(IKsin(j8))))+(((-4.428771674e-5)*r01*r10*(cj2*cj2)*(IKcos(j8))*(IKsin(j8))))+(((1.9764704569e-6)*(r10*r10)))+(((2.0)*px*py*r01*r10*(IKcos(j8))*(IKsin(j8))))+(((2.0)*r00*r01*(px*px)*(IKcos(j8))*(IKsin(j8))))+(((-0.0001200940595862)*cj2*r01*r10*sj2*(IKcos(j8))*(IKsin(j8))))+(((0.00281174)*px*r01*r11*sj2))+(((px*px)*(r10*r10)*(x3868*x3868)))+(((-1.0)*(px*px)*(x3869*x3869)))+(((0.015751)*cj2*px*r01*r11*(x3870*x3870)))+(((-0.031502)*px*r00*r01*sj2*(IKcos(j8))*(IKsin(j8))))+(((0.0001200940595862)*r10*r11*(cj2*cj2)*(IKcos(j8))*(IKsin(j8))))+(((py*py)*(r10*r10)))+(((2.0)*px*py*r00*r11*(IKcos(j8))*(IKsin(j8))))+(((0.00281174)*py*sj2*(r11*r11)))+(((-0.0001200940595862)*r00*r01*(cj2*cj2)*(IKcos(j8))*(IKsin(j8))))+(((-2.214385837e-5)*cj2*sj2*(r01*r01)))+(((-0.0001801410893793)*(cj2*cj2)*(r10*r10)*(x3871*x3871)))+(((-1.0)*(py*py)))+(((-4.428771674e-5)*r01*r11*(cj2*cj2)*(x3872*x3872)))+(((0.0001200940595862)*cj2*r00*r10*sj2*(x3873*x3873)))+(((-0.015751)*py*r01*r11*sj2*(x3874*x3874)))+(((-6.00470297931e-5)*(x3875*x3875)))+(((5.80705593362e-5)*(r10*r10)*(x3876*x3876)))+(((0.00281174)*px*r00*r10*sj2*(x3877*x3877)))+(((2.214385837e-5)*cj2*sj2*(r01*r01)*(x3878*x3878)))+(((-0.00281174)*px*r01*r10*sj2*(IKcos(j8))*(IKsin(j8))))+(((0.015751)*cj2*py*(r11*r11)*(x3879*x3879)))+(((2.0)*r10*r11*(py*py)*(IKcos(j8))*(IKsin(j8))))+(((0.00281174)*py*sj2*(r10*r10)*(x3880*x3880)))+(((-0.00281174)*py*sj2*(r11*r11)*(x3881*x3881)))+(((3.9529409138e-6)*r10*r11*(IKcos(j8))*(IKsin(j8))))+(((-0.015751)*cj2*py*(r11*r11)))+(((6.00470297931e-5)*(cj2*cj2)*(r10*r10)))+(((-1.0)*(px*px)*(r01*r01)))+(((0.031502)*cj2*py*r10*r11*(IKcos(j8))*(IKsin(j8)))));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

rotationfunction0(solutions);
}
}

}

}
}
}

}

}

} else
{
{
IkReal j2array[1], cj2array[1], sj2array[1];
bool j2valid[1]={false};
_nj2 = 1;
IkReal x3882=py*py;
IkReal x3883=px*px;
IkReal x3884=(pp*r00);
IkReal x3885=(px*py);
IkReal x3886=(pp*r10);
IkReal x3887=(r00*x3883);
IkReal x3888=(r10*x3882);
CheckValue<IkReal> x3889 = IKatan2WithCheck(IkReal(((((-0.00281174)*x3887))+(((8.99756388177095e-8)*r00))+(((0.00140587)*x3884))+(((-5.04031769302191e-7)*r10))+(((0.015751)*x3888))+(((-0.00281174)*r10*x3885))+(((0.015751)*r00*x3885))+(((-0.0078755)*x3886)))),IkReal(((((0.00281174)*r00*x3885))+(((0.015751)*r10*x3885))+(((-5.04031769302191e-7)*r00))+(((0.015751)*x3887))+(((0.00281174)*x3888))+(((-8.99756388177095e-8)*r10))+(((-0.00140587)*x3886))+(((-0.0078755)*x3884)))),IKFAST_ATAN2_MAGTHRESH);
if(!x3889.valid){
continue;
}
CheckValue<IkReal> x3890=IKPowWithIntegerCheck(IKsign(rxp0_2),-1);
if(!x3890.valid){
continue;
}
j2array[0]=((-1.5707963267949)+(x3889.value)+(((1.5707963267949)*(x3890.value))));
sj2array[0]=IKsin(j2array[0]);
cj2array[0]=IKcos(j2array[0]);
if( j2array[0] > IKPI )
{
    j2array[0]-=IK2PI;
}
else if( j2array[0] < -IKPI )
{    j2array[0]+=IK2PI;
}
j2valid[0] = true;
for(int ij2 = 0; ij2 < 1; ++ij2)
{
if( !j2valid[ij2] )
{
    continue;
}
_ij2[0] = ij2; _ij2[1] = -1;
for(int iij2 = ij2+1; iij2 < 1; ++iij2)
{
if( j2valid[iij2] && IKabs(cj2array[ij2]-cj2array[iij2]) < IKFAST_SOLUTION_THRESH && IKabs(sj2array[ij2]-sj2array[iij2]) < IKFAST_SOLUTION_THRESH )
{
    j2valid[iij2]=false; _ij2[1] = iij2; break; 
}
}
j2 = j2array[ij2]; cj2 = cj2array[ij2]; sj2 = sj2array[ij2];
{
IkReal evalcond[3];
IkReal x3891=IKsin(j2);
IkReal x3892=IKcos(j2);
IkReal x3893=((0.00140587)*x3891);
IkReal x3894=((0.0078755)*x3892);
IkReal x3895=((0.00140587)*x3892);
IkReal x3896=((0.0078755)*x3891);
evalcond[0]=((-6.39999707069e-5)+(((-0.015751)*py*x3892))+(((0.015751)*px*x3891))+(((0.00281174)*px*x3892))+(((-1.0)*pp))+(((0.00281174)*py*x3891)));
evalcond[1]=(((r10*x3894))+(((-1.0)*r10*x3893))+((px*r00))+((py*r10))+(((-1.0)*r00*x3896))+(((-1.0)*r00*x3895)));
evalcond[2]=(((px*r01))+(((-1.0)*r11*x3893))+((r11*x3894))+((py*r11))+(((-1.0)*r01*x3896))+(((-1.0)*r01*x3895)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j8eval[1];
IkReal x3897=((-1.0)*pz);
r22=0;
npz=0;
rxp2_0=0;
rxp2_1=0;
r12=0;
r02=0;
r20=0;
r21=0;
npx=(((px*r00))+((py*r10)));
npy=(((px*r01))+((py*r11)));
rxp0_0=(pz*r10);
rxp0_1=(r00*x3897);
rxp1_0=(pz*r11);
rxp1_1=(r01*x3897);
rxp2_2=0;
j8eval[0]=((sj2*sj2)+(cj2*cj2)+(((-43.9334576085495)*py*sj2))+(((-246.109487645466)*px*sj2))+(((-43.9334576085495)*cj2*px))+(((-15625.007151639)*(pz*pz)))+(((246.109487645466)*cj2*py))+(((15625.007151639)*pp)));
if( IKabs(j8eval[0]) < 0.0000010000000000  )
{
continue; // no branches [j8]

} else
{
{
IkReal j8array[2], cj8array[2], sj8array[2];
bool j8valid[2]={false};
_nj8 = 2;
IkReal x3898=((0.0078755)*cj2);
IkReal x3899=((0.0078755)*sj2);
IkReal x3900=((0.00140587)*sj2);
IkReal x3901=((0.00140587)*cj2);
CheckValue<IkReal> x3903 = IKatan2WithCheck(IkReal((((r10*x3898))+((px*r00))+(((-1.0)*r10*x3900))+((py*r10))+(((-1.0)*r00*x3901))+(((-1.0)*r00*x3899)))),IkReal(((((-1.0)*px*r01))+(((-1.0)*r11*x3898))+((r01*x3901))+((r01*x3899))+((r11*x3900))+(((-1.0)*py*r11)))),IKFAST_ATAN2_MAGTHRESH);
if(!x3903.valid){
continue;
}
IkReal x3902=x3903.value;
j8array[0]=((-1.0)*x3902);
sj8array[0]=IKsin(j8array[0]);
cj8array[0]=IKcos(j8array[0]);
j8array[1]=((3.14159265358979)+(((-1.0)*x3902)));
sj8array[1]=IKsin(j8array[1]);
cj8array[1]=IKcos(j8array[1]);
if( j8array[0] > IKPI )
{
    j8array[0]-=IK2PI;
}
else if( j8array[0] < -IKPI )
{    j8array[0]+=IK2PI;
}
j8valid[0] = true;
if( j8array[1] > IKPI )
{
    j8array[1]-=IK2PI;
}
else if( j8array[1] < -IKPI )
{    j8array[1]+=IK2PI;
}
j8valid[1] = true;
for(int ij8 = 0; ij8 < 2; ++ij8)
{
if( !j8valid[ij8] )
{
    continue;
}
_ij8[0] = ij8; _ij8[1] = -1;
for(int iij8 = ij8+1; iij8 < 2; ++iij8)
{
if( j8valid[iij8] && IKabs(cj8array[ij8]-cj8array[iij8]) < IKFAST_SOLUTION_THRESH && IKabs(sj8array[ij8]-sj8array[iij8]) < IKFAST_SOLUTION_THRESH )
{
    j8valid[iij8]=false; _ij8[1] = iij8; break; 
}
}
j8 = j8array[ij8]; cj8 = cj8array[ij8]; sj8 = sj8array[ij8];
{
IkReal evalcond[1];
IkReal x3904=IKcos(j8);
IkReal x3905=IKcos(j8);
IkReal x3906=IKcos(j8);
IkReal x3907=IKcos(j8);
IkReal x3908=IKcos(j8);
IkReal x3909=IKcos(j8);
IkReal x3910=IKcos(j8);
IkReal x3911=IKcos(j8);
IkReal x3912=IKcos(j8);
IkReal x3913=IKcos(j8);
IkReal x3914=IKcos(j8);
IkReal x3915=IKcos(j8);
IkReal x3916=IKcos(j8);
IkReal x3917=IKcos(j8);
IkReal x3918=IKcos(j8);
IkReal x3919=IKcos(j8);
IkReal x3920=IKcos(j8);
IkReal x3921=IKcos(j8);
IkReal x3922=IKcos(j8);
IkReal x3923=IKcos(j8);
IkReal x3924=IKcos(j8);
IkReal x3925=IKcos(j8);
IkReal x3926=IKcos(j8);
IkReal x3927=IKcos(j8);
IkReal x3928=IKcos(j8);
IkReal x3929=IKcos(j8);
IkReal x3930=IKcos(j8);
IkReal x3931=IKcos(j8);
IkReal x3932=IKcos(j8);
IkReal x3933=IKcos(j8);
IkReal x3934=IKcos(j8);
IkReal x3935=IKcos(j8);
IkReal x3936=IKcos(j8);
IkReal x3937=IKcos(j8);
IkReal x3938=IKcos(j8);
IkReal x3939=IKcos(j8);
IkReal x3940=IKcos(j8);
IkReal x3941=IKcos(j8);
evalcond[0]=((0.0840980235295431)+(((-0.0001200940595862)*cj2*r00*r11*sj2*(IKcos(j8))*(IKsin(j8))))+(((-0.015751)*cj2*py*(r10*r10)*(x3904*x3904)))+(((0.00281174)*cj2*py*r00*r10*(x3905*x3905)))+(((-6.00470297931e-5)*(cj2*cj2)))+(((-0.00562348)*py*r10*r11*sj2*(IKcos(j8))*(IKsin(j8))))+(((2.0)*px*py*r01*r11*(x3906*x3906)))+(((-0.00281174)*cj2*py*r01*r10*(IKcos(j8))*(IKsin(j8))))+(((6.202350025e-5)*(r01*r01)*(x3907*x3907)))+(((0.0001200940595862)*cj2*r01*r11*sj2))+(((6.643157511e-5)*cj2*sj2*(r10*r10)*(x3908*x3908)))+(((py*py)*(x3909*x3909)))+(((-2.214385837e-5)*r00*r10*(x3910*x3910)))+(((-0.00281174)*cj2*py*r01*r11*(x3911*x3911)))+(((-0.00281174)*px*r00*r11*sj2*(IKcos(j8))*(IKsin(j8))))+(((-2.0)*px*py*r00*r10*(x3912*x3912)))+(((0.015751)*px*sj2*(r00*r00)*(x3913*x3913)))+(((-6.202350025e-5)*(r01*r01)))+(((-0.0001200940595862)*cj2*r01*r11*sj2*(x3914*x3914)))+(((-0.015751)*px*sj2*(r01*r01)*(x3915*x3915)))+(((-6.00470297931e-5)*(cj2*cj2)*(r01*r01)*(x3916*x3916)))+(((-0.015751)*py*r01*r10*sj2*(IKcos(j8))*(IKsin(j8))))+(((6.00470297931e-5)*(cj2*cj2)*(r01*r01)))+(((-2.0)*px*py*r01*r11))+(((4.428771674e-5)*r01*r11*(cj2*cj2)))+(((0.00281174)*cj2*py*r01*r11))+(((0.00281174)*cj2*px*(r01*r01)))+(((4.428771674e-5)*cj2*r00*r01*sj2*(IKcos(j8))*(IKsin(j8))))+(((0.015751)*py*r00*r10*sj2*(x3917*x3917)))+(((2.214385837e-5)*r00*r11*(IKcos(j8))*(IKsin(j8))))+(((0.015751)*cj2*px*r00*r11*(IKcos(j8))*(IKsin(j8))))+(((4.428771674e-5)*r00*r10*(cj2*cj2)*(x3918*x3918)))+(((0.0001240470005)*r00*r01*(IKcos(j8))*(IKsin(j8))))+(((-0.00281174)*px*r01*r11*sj2*(x3919*x3919)))+(((-2.214385837e-5)*cj2*sj2*(r10*r10)))+(((2.214385837e-5)*cj2*sj2))+(((-4.428771674e-5)*r00*r11*(cj2*cj2)*(IKcos(j8))*(IKsin(j8))))+(((0.015751)*py*r01*r11*sj2))+(((-0.00562348)*cj2*px*r00*r01*(IKcos(j8))*(IKsin(j8))))+(((2.214385837e-5)*r01*r10*(IKcos(j8))*(IKsin(j8))))+(((-0.00281174)*cj2*px*(r01*r01)*(x3920*x3920)))+(((-2.214385837e-5)*r01*r11))+(((-2.0)*(py*py)*(r10*r10)*(x3921*x3921)))+(((px*px)*(r01*r01)*(x3922*x3922)))+(((0.0001200940595862)*(cj2*cj2)*(x3923*x3923)))+(((2.214385837e-5)*r01*r11*(x3924*x3924)))+(((-4.428771674e-5)*cj2*r10*r11*sj2*(IKcos(j8))*(IKsin(j8))))+(((-0.015751)*py*r00*r11*sj2*(IKcos(j8))*(IKsin(j8))))+(((0.015751)*px*sj2*(r01*r01)))+(((-0.00281174)*cj2*py*r00*r11*(IKcos(j8))*(IKsin(j8))))+(((-0.015751)*cj2*px*r00*r10*(x3925*x3925)))+(((-4.428771674e-5)*cj2*sj2*(x3926*x3926)))+(((-0.015751)*cj2*px*r01*r11))+(((0.00281174)*cj2*px*(r00*r00)*(x3927*x3927)))+(((0.015751)*cj2*px*r01*r10*(IKcos(j8))*(IKsin(j8))))+(((-4.428771674e-5)*r01*r10*(cj2*cj2)*(IKcos(j8))*(IKsin(j8))))+(((1.9764704569e-6)*(r10*r10)))+(((2.0)*px*py*r01*r10*(IKcos(j8))*(IKsin(j8))))+(((2.0)*r00*r01*(px*px)*(IKcos(j8))*(IKsin(j8))))+(((-0.0001200940595862)*cj2*r01*r10*sj2*(IKcos(j8))*(IKsin(j8))))+(((0.00281174)*px*r01*r11*sj2))+(((px*px)*(r10*r10)*(x3928*x3928)))+(((-1.0)*(px*px)*(x3929*x3929)))+(((0.015751)*cj2*px*r01*r11*(x3930*x3930)))+(((-0.031502)*px*r00*r01*sj2*(IKcos(j8))*(IKsin(j8))))+(((0.0001200940595862)*r10*r11*(cj2*cj2)*(IKcos(j8))*(IKsin(j8))))+(((py*py)*(r10*r10)))+(((2.0)*px*py*r00*r11*(IKcos(j8))*(IKsin(j8))))+(((0.00281174)*py*sj2*(r11*r11)))+(((-0.0001200940595862)*r00*r01*(cj2*cj2)*(IKcos(j8))*(IKsin(j8))))+(((-2.214385837e-5)*cj2*sj2*(r01*r01)))+(((-0.0001801410893793)*(cj2*cj2)*(r10*r10)*(x3931*x3931)))+(((-1.0)*(py*py)))+(((-4.428771674e-5)*r01*r11*(cj2*cj2)*(x3932*x3932)))+(((0.0001200940595862)*cj2*r00*r10*sj2*(x3933*x3933)))+(((-0.015751)*py*r01*r11*sj2*(x3934*x3934)))+(((-6.00470297931e-5)*(x3935*x3935)))+(((5.80705593362e-5)*(r10*r10)*(x3936*x3936)))+(((0.00281174)*px*r00*r10*sj2*(x3937*x3937)))+(((2.214385837e-5)*cj2*sj2*(r01*r01)*(x3938*x3938)))+(((-0.00281174)*px*r01*r10*sj2*(IKcos(j8))*(IKsin(j8))))+(((0.015751)*cj2*py*(r11*r11)*(x3939*x3939)))+(((2.0)*r10*r11*(py*py)*(IKcos(j8))*(IKsin(j8))))+(((0.00281174)*py*sj2*(r10*r10)*(x3940*x3940)))+(((-0.00281174)*py*sj2*(r11*r11)*(x3941*x3941)))+(((3.9529409138e-6)*r10*r11*(IKcos(j8))*(IKsin(j8))))+(((-0.015751)*cj2*py*(r11*r11)))+(((6.00470297931e-5)*(cj2*cj2)*(r10*r10)))+(((-1.0)*(px*px)*(r01*r01)))+(((0.031502)*cj2*py*r10*r11*(IKcos(j8))*(IKsin(j8)))));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

rotationfunction0(solutions);
}
}

}

}
}
}

}

}
    }

}

}

} else
{
{
IkReal j2array[1], cj2array[1], sj2array[1];
bool j2valid[1]={false};
_nj2 = 1;
IkReal x3942=px*px;
IkReal x3943=py*py;
IkReal x3944=((0.00281174)*r01);
IkReal x3945=(pp*r01);
IkReal x3946=(px*py);
IkReal x3947=(pp*r11);
IkReal x3948=((0.015751)*x3946);
IkReal x3949=(r11*x3943);
CheckValue<IkReal> x3950 = IKatan2WithCheck(IkReal(((((0.015751)*x3949))+((r01*x3948))+(((8.99756388177095e-8)*r01))+(((-5.04031769302191e-7)*r11))+(((-1.0)*x3942*x3944))+(((0.00140587)*x3945))+(((-0.00281174)*r11*x3946))+(((-0.0078755)*x3947)))),IkReal(((((-5.04031769302191e-7)*r01))+(((0.015751)*r01*x3942))+(((-8.99756388177095e-8)*r11))+(((-0.0078755)*x3945))+(((0.00281174)*x3949))+((x3944*x3946))+(((-0.00140587)*x3947))+((r11*x3948)))),IKFAST_ATAN2_MAGTHRESH);
if(!x3950.valid){
continue;
}
CheckValue<IkReal> x3951=IKPowWithIntegerCheck(IKsign(rxp1_2),-1);
if(!x3951.valid){
continue;
}
j2array[0]=((-1.5707963267949)+(x3950.value)+(((1.5707963267949)*(x3951.value))));
sj2array[0]=IKsin(j2array[0]);
cj2array[0]=IKcos(j2array[0]);
if( j2array[0] > IKPI )
{
    j2array[0]-=IK2PI;
}
else if( j2array[0] < -IKPI )
{    j2array[0]+=IK2PI;
}
j2valid[0] = true;
for(int ij2 = 0; ij2 < 1; ++ij2)
{
if( !j2valid[ij2] )
{
    continue;
}
_ij2[0] = ij2; _ij2[1] = -1;
for(int iij2 = ij2+1; iij2 < 1; ++iij2)
{
if( j2valid[iij2] && IKabs(cj2array[ij2]-cj2array[iij2]) < IKFAST_SOLUTION_THRESH && IKabs(sj2array[ij2]-sj2array[iij2]) < IKFAST_SOLUTION_THRESH )
{
    j2valid[iij2]=false; _ij2[1] = iij2; break; 
}
}
j2 = j2array[ij2]; cj2 = cj2array[ij2]; sj2 = sj2array[ij2];
{
IkReal evalcond[3];
IkReal x3952=IKsin(j2);
IkReal x3953=IKcos(j2);
IkReal x3954=((0.00140587)*x3952);
IkReal x3955=((0.0078755)*x3953);
IkReal x3956=((0.00140587)*x3953);
IkReal x3957=((0.0078755)*x3952);
evalcond[0]=((-6.39999707069e-5)+(((0.00281174)*px*x3953))+(((-0.015751)*py*x3953))+(((-1.0)*pp))+(((0.00281174)*py*x3952))+(((0.015751)*px*x3952)));
evalcond[1]=(((px*r00))+(((-1.0)*r00*x3956))+(((-1.0)*r00*x3957))+((py*r10))+((r10*x3955))+(((-1.0)*r10*x3954)));
evalcond[2]=(((px*r01))+(((-1.0)*r01*x3956))+(((-1.0)*r01*x3957))+(((-1.0)*r11*x3954))+((py*r11))+((r11*x3955)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j7eval[1];
IkReal x3958=((-1.0)*pz);
r22=0;
npz=0;
rxp2_0=0;
rxp2_1=0;
r12=0;
r02=0;
r20=0;
r21=0;
npx=(((px*r00))+((py*r10)));
npy=(((px*r01))+((py*r11)));
rxp0_0=(pz*r10);
rxp0_1=(r00*x3958);
rxp1_0=(pz*r11);
rxp1_1=(r01*x3958);
rxp2_2=0;
j7eval[0]=1.0;
if( IKabs(j7eval[0]) < 0.0000000100000000  )
{
{
IkReal j8eval[1];
IkReal x3959=((-1.0)*pz);
r22=0;
npz=0;
rxp2_0=0;
rxp2_1=0;
r12=0;
r02=0;
r20=0;
r21=0;
npx=(((px*r00))+((py*r10)));
npy=(((px*r01))+((py*r11)));
rxp0_0=(pz*r10);
rxp0_1=(r00*x3959);
rxp1_0=(pz*r11);
rxp1_1=(r01*x3959);
rxp2_2=0;
j8eval[0]=((sj2*sj2)+(cj2*cj2)+(((-43.9334576085495)*py*sj2))+(((-246.109487645466)*px*sj2))+(((-43.9334576085495)*cj2*px))+(((-15625.007151639)*(pz*pz)))+(((246.109487645466)*cj2*py))+(((15625.007151639)*pp)));
if( IKabs(j8eval[0]) < 0.0000010000000000  )
{
continue; // no branches [j7, j8]

} else
{
{
IkReal j8array[2], cj8array[2], sj8array[2];
bool j8valid[2]={false};
_nj8 = 2;
IkReal x3960=((0.0078755)*cj2);
IkReal x3961=((0.0078755)*sj2);
IkReal x3962=((0.00140587)*sj2);
IkReal x3963=((0.00140587)*cj2);
CheckValue<IkReal> x3965 = IKatan2WithCheck(IkReal((((px*r00))+((r10*x3960))+(((-1.0)*r10*x3962))+((py*r10))+(((-1.0)*r00*x3963))+(((-1.0)*r00*x3961)))),IkReal(((((-1.0)*px*r01))+((r11*x3962))+(((-1.0)*py*r11))+((r01*x3961))+((r01*x3963))+(((-1.0)*r11*x3960)))),IKFAST_ATAN2_MAGTHRESH);
if(!x3965.valid){
continue;
}
IkReal x3964=x3965.value;
j8array[0]=((-1.0)*x3964);
sj8array[0]=IKsin(j8array[0]);
cj8array[0]=IKcos(j8array[0]);
j8array[1]=((3.14159265358979)+(((-1.0)*x3964)));
sj8array[1]=IKsin(j8array[1]);
cj8array[1]=IKcos(j8array[1]);
if( j8array[0] > IKPI )
{
    j8array[0]-=IK2PI;
}
else if( j8array[0] < -IKPI )
{    j8array[0]+=IK2PI;
}
j8valid[0] = true;
if( j8array[1] > IKPI )
{
    j8array[1]-=IK2PI;
}
else if( j8array[1] < -IKPI )
{    j8array[1]+=IK2PI;
}
j8valid[1] = true;
for(int ij8 = 0; ij8 < 2; ++ij8)
{
if( !j8valid[ij8] )
{
    continue;
}
_ij8[0] = ij8; _ij8[1] = -1;
for(int iij8 = ij8+1; iij8 < 2; ++iij8)
{
if( j8valid[iij8] && IKabs(cj8array[ij8]-cj8array[iij8]) < IKFAST_SOLUTION_THRESH && IKabs(sj8array[ij8]-sj8array[iij8]) < IKFAST_SOLUTION_THRESH )
{
    j8valid[iij8]=false; _ij8[1] = iij8; break; 
}
}
j8 = j8array[ij8]; cj8 = cj8array[ij8]; sj8 = sj8array[ij8];
{
IkReal evalcond[1];
IkReal x3966=IKcos(j8);
IkReal x3967=IKcos(j8);
IkReal x3968=IKcos(j8);
IkReal x3969=IKcos(j8);
IkReal x3970=IKcos(j8);
IkReal x3971=IKcos(j8);
IkReal x3972=IKcos(j8);
IkReal x3973=IKcos(j8);
IkReal x3974=IKcos(j8);
IkReal x3975=IKcos(j8);
IkReal x3976=IKcos(j8);
IkReal x3977=IKcos(j8);
IkReal x3978=IKcos(j8);
IkReal x3979=IKcos(j8);
IkReal x3980=IKcos(j8);
IkReal x3981=IKcos(j8);
IkReal x3982=IKcos(j8);
IkReal x3983=IKcos(j8);
IkReal x3984=IKcos(j8);
IkReal x3985=IKcos(j8);
IkReal x3986=IKcos(j8);
IkReal x3987=IKcos(j8);
IkReal x3988=IKcos(j8);
IkReal x3989=IKcos(j8);
IkReal x3990=IKcos(j8);
IkReal x3991=IKcos(j8);
IkReal x3992=IKcos(j8);
IkReal x3993=IKcos(j8);
IkReal x3994=IKcos(j8);
IkReal x3995=IKcos(j8);
IkReal x3996=IKcos(j8);
IkReal x3997=IKcos(j8);
IkReal x3998=IKcos(j8);
IkReal x3999=IKcos(j8);
IkReal x4000=IKcos(j8);
IkReal x4001=IKcos(j8);
IkReal x4002=IKcos(j8);
IkReal x4003=IKcos(j8);
evalcond[0]=((0.0840980235295431)+(((-0.0001200940595862)*cj2*r00*r11*sj2*(IKcos(j8))*(IKsin(j8))))+(((-0.015751)*cj2*py*(r10*r10)*(x3966*x3966)))+(((0.00281174)*cj2*py*r00*r10*(x3967*x3967)))+(((-6.00470297931e-5)*(cj2*cj2)))+(((-0.00562348)*py*r10*r11*sj2*(IKcos(j8))*(IKsin(j8))))+(((2.0)*px*py*r01*r11*(x3968*x3968)))+(((-0.00281174)*cj2*py*r01*r10*(IKcos(j8))*(IKsin(j8))))+(((6.202350025e-5)*(r01*r01)*(x3969*x3969)))+(((0.0001200940595862)*cj2*r01*r11*sj2))+(((6.643157511e-5)*cj2*sj2*(r10*r10)*(x3970*x3970)))+(((py*py)*(x3971*x3971)))+(((-2.214385837e-5)*r00*r10*(x3972*x3972)))+(((-0.00281174)*cj2*py*r01*r11*(x3973*x3973)))+(((-0.00281174)*px*r00*r11*sj2*(IKcos(j8))*(IKsin(j8))))+(((-2.0)*px*py*r00*r10*(x3974*x3974)))+(((0.015751)*px*sj2*(r00*r00)*(x3975*x3975)))+(((-6.202350025e-5)*(r01*r01)))+(((-0.0001200940595862)*cj2*r01*r11*sj2*(x3976*x3976)))+(((-0.015751)*px*sj2*(r01*r01)*(x3977*x3977)))+(((-6.00470297931e-5)*(cj2*cj2)*(r01*r01)*(x3978*x3978)))+(((-0.015751)*py*r01*r10*sj2*(IKcos(j8))*(IKsin(j8))))+(((6.00470297931e-5)*(cj2*cj2)*(r01*r01)))+(((-2.0)*px*py*r01*r11))+(((4.428771674e-5)*r01*r11*(cj2*cj2)))+(((0.00281174)*cj2*py*r01*r11))+(((0.00281174)*cj2*px*(r01*r01)))+(((4.428771674e-5)*cj2*r00*r01*sj2*(IKcos(j8))*(IKsin(j8))))+(((0.015751)*py*r00*r10*sj2*(x3979*x3979)))+(((2.214385837e-5)*r00*r11*(IKcos(j8))*(IKsin(j8))))+(((0.015751)*cj2*px*r00*r11*(IKcos(j8))*(IKsin(j8))))+(((4.428771674e-5)*r00*r10*(cj2*cj2)*(x3980*x3980)))+(((0.0001240470005)*r00*r01*(IKcos(j8))*(IKsin(j8))))+(((-0.00281174)*px*r01*r11*sj2*(x3981*x3981)))+(((-2.214385837e-5)*cj2*sj2*(r10*r10)))+(((2.214385837e-5)*cj2*sj2))+(((-4.428771674e-5)*r00*r11*(cj2*cj2)*(IKcos(j8))*(IKsin(j8))))+(((0.015751)*py*r01*r11*sj2))+(((-0.00562348)*cj2*px*r00*r01*(IKcos(j8))*(IKsin(j8))))+(((2.214385837e-5)*r01*r10*(IKcos(j8))*(IKsin(j8))))+(((-0.00281174)*cj2*px*(r01*r01)*(x3982*x3982)))+(((-2.214385837e-5)*r01*r11))+(((-2.0)*(py*py)*(r10*r10)*(x3983*x3983)))+(((px*px)*(r01*r01)*(x3984*x3984)))+(((0.0001200940595862)*(cj2*cj2)*(x3985*x3985)))+(((2.214385837e-5)*r01*r11*(x3986*x3986)))+(((-4.428771674e-5)*cj2*r10*r11*sj2*(IKcos(j8))*(IKsin(j8))))+(((-0.015751)*py*r00*r11*sj2*(IKcos(j8))*(IKsin(j8))))+(((0.015751)*px*sj2*(r01*r01)))+(((-0.00281174)*cj2*py*r00*r11*(IKcos(j8))*(IKsin(j8))))+(((-0.015751)*cj2*px*r00*r10*(x3987*x3987)))+(((-4.428771674e-5)*cj2*sj2*(x3988*x3988)))+(((-0.015751)*cj2*px*r01*r11))+(((0.00281174)*cj2*px*(r00*r00)*(x3989*x3989)))+(((0.015751)*cj2*px*r01*r10*(IKcos(j8))*(IKsin(j8))))+(((-4.428771674e-5)*r01*r10*(cj2*cj2)*(IKcos(j8))*(IKsin(j8))))+(((1.9764704569e-6)*(r10*r10)))+(((2.0)*px*py*r01*r10*(IKcos(j8))*(IKsin(j8))))+(((2.0)*r00*r01*(px*px)*(IKcos(j8))*(IKsin(j8))))+(((-0.0001200940595862)*cj2*r01*r10*sj2*(IKcos(j8))*(IKsin(j8))))+(((0.00281174)*px*r01*r11*sj2))+(((px*px)*(r10*r10)*(x3990*x3990)))+(((-1.0)*(px*px)*(x3991*x3991)))+(((0.015751)*cj2*px*r01*r11*(x3992*x3992)))+(((-0.031502)*px*r00*r01*sj2*(IKcos(j8))*(IKsin(j8))))+(((0.0001200940595862)*r10*r11*(cj2*cj2)*(IKcos(j8))*(IKsin(j8))))+(((py*py)*(r10*r10)))+(((2.0)*px*py*r00*r11*(IKcos(j8))*(IKsin(j8))))+(((0.00281174)*py*sj2*(r11*r11)))+(((-0.0001200940595862)*r00*r01*(cj2*cj2)*(IKcos(j8))*(IKsin(j8))))+(((-2.214385837e-5)*cj2*sj2*(r01*r01)))+(((-0.0001801410893793)*(cj2*cj2)*(r10*r10)*(x3993*x3993)))+(((-1.0)*(py*py)))+(((-4.428771674e-5)*r01*r11*(cj2*cj2)*(x3994*x3994)))+(((0.0001200940595862)*cj2*r00*r10*sj2*(x3995*x3995)))+(((-0.015751)*py*r01*r11*sj2*(x3996*x3996)))+(((-6.00470297931e-5)*(x3997*x3997)))+(((5.80705593362e-5)*(r10*r10)*(x3998*x3998)))+(((0.00281174)*px*r00*r10*sj2*(x3999*x3999)))+(((2.214385837e-5)*cj2*sj2*(r01*r01)*(x4000*x4000)))+(((-0.00281174)*px*r01*r10*sj2*(IKcos(j8))*(IKsin(j8))))+(((0.015751)*cj2*py*(r11*r11)*(x4001*x4001)))+(((2.0)*r10*r11*(py*py)*(IKcos(j8))*(IKsin(j8))))+(((0.00281174)*py*sj2*(r10*r10)*(x4002*x4002)))+(((-0.00281174)*py*sj2*(r11*r11)*(x4003*x4003)))+(((3.9529409138e-6)*r10*r11*(IKcos(j8))*(IKsin(j8))))+(((-0.015751)*cj2*py*(r11*r11)))+(((6.00470297931e-5)*(cj2*cj2)*(r10*r10)))+(((-1.0)*(px*px)*(r01*r01)))+(((0.031502)*cj2*py*r10*r11*(IKcos(j8))*(IKsin(j8)))));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j7eval[1];
IkReal x4004=((-1.0)*pz);
r22=0;
npz=0;
rxp2_0=0;
rxp2_1=0;
r12=0;
r02=0;
r20=0;
r21=0;
npx=(((px*r00))+((py*r10)));
npy=(((px*r01))+((py*r11)));
rxp0_0=(pz*r10);
rxp0_1=(r00*x4004);
rxp1_0=(pz*r11);
rxp1_1=(r01*x4004);
rxp2_2=0;
j7eval[0]=1.0;
if( IKabs(j7eval[0]) < 0.0000000100000000  )
{
continue; // no branches [j7]

} else
{
IkReal op[2+1], zeror[2];
int numroots;
op[0]=-1.0;
op[1]=0;
op[2]=1.0;
polyroots2(op,zeror,numroots);
IkReal j7array[2], cj7array[2], sj7array[2], tempj7array[1];
int numsolutions = 0;
for(int ij7 = 0; ij7 < numroots; ++ij7)
{
IkReal htj7 = zeror[ij7];
tempj7array[0]=((2.0)*(atan(htj7)));
for(int kj7 = 0; kj7 < 1; ++kj7)
{
j7array[numsolutions] = tempj7array[kj7];
if( j7array[numsolutions] > IKPI )
{
    j7array[numsolutions]-=IK2PI;
}
else if( j7array[numsolutions] < -IKPI )
{
    j7array[numsolutions]+=IK2PI;
}
sj7array[numsolutions] = IKsin(j7array[numsolutions]);
cj7array[numsolutions] = IKcos(j7array[numsolutions]);
numsolutions++;
}
}
bool j7valid[2]={true,true};
_nj7 = 2;
for(int ij7 = 0; ij7 < numsolutions; ++ij7)
    {
if( !j7valid[ij7] )
{
    continue;
}
    j7 = j7array[ij7]; cj7 = cj7array[ij7]; sj7 = sj7array[ij7];
htj7 = IKtan(j7/2);

_ij7[0] = ij7; _ij7[1] = -1;
for(int iij7 = ij7+1; iij7 < numsolutions; ++iij7)
{
if( j7valid[iij7] && IKabs(cj7array[ij7]-cj7array[iij7]) < IKFAST_SOLUTION_THRESH && IKabs(sj7array[ij7]-sj7array[iij7]) < IKFAST_SOLUTION_THRESH )
{
    j7valid[iij7]=false; _ij7[1] = iij7; break; 
}
}
rotationfunction0(solutions);
    }

}

}
}
}

}

}

} else
{
IkReal op[2+1], zeror[2];
int numroots;
op[0]=-1.0;
op[1]=0;
op[2]=1.0;
polyroots2(op,zeror,numroots);
IkReal j7array[2], cj7array[2], sj7array[2], tempj7array[1];
int numsolutions = 0;
for(int ij7 = 0; ij7 < numroots; ++ij7)
{
IkReal htj7 = zeror[ij7];
tempj7array[0]=((2.0)*(atan(htj7)));
for(int kj7 = 0; kj7 < 1; ++kj7)
{
j7array[numsolutions] = tempj7array[kj7];
if( j7array[numsolutions] > IKPI )
{
    j7array[numsolutions]-=IK2PI;
}
else if( j7array[numsolutions] < -IKPI )
{
    j7array[numsolutions]+=IK2PI;
}
sj7array[numsolutions] = IKsin(j7array[numsolutions]);
cj7array[numsolutions] = IKcos(j7array[numsolutions]);
numsolutions++;
}
}
bool j7valid[2]={true,true};
_nj7 = 2;
for(int ij7 = 0; ij7 < numsolutions; ++ij7)
    {
if( !j7valid[ij7] )
{
    continue;
}
    j7 = j7array[ij7]; cj7 = cj7array[ij7]; sj7 = sj7array[ij7];
htj7 = IKtan(j7/2);

_ij7[0] = ij7; _ij7[1] = -1;
for(int iij7 = ij7+1; iij7 < numsolutions; ++iij7)
{
if( j7valid[iij7] && IKabs(cj7array[ij7]-cj7array[iij7]) < IKFAST_SOLUTION_THRESH && IKabs(sj7array[ij7]-sj7array[iij7]) < IKFAST_SOLUTION_THRESH )
{
    j7valid[iij7]=false; _ij7[1] = iij7; break; 
}
}
{
IkReal j8eval[1];
IkReal x4005=((-1.0)*pz);
r22=0;
npz=0;
rxp2_0=0;
rxp2_1=0;
r12=0;
r02=0;
r20=0;
r21=0;
npx=(((px*r00))+((py*r10)));
npy=(((px*r01))+((py*r11)));
rxp0_0=(pz*r10);
rxp0_1=(r00*x4005);
rxp1_0=(pz*r11);
rxp1_1=(r01*x4005);
rxp2_2=0;
j8eval[0]=((sj2*sj2)+(cj2*cj2)+(((-43.9334576085495)*py*sj2))+(((-246.109487645466)*px*sj2))+(((-43.9334576085495)*cj2*px))+(((-15625.007151639)*(pz*pz)))+(((246.109487645466)*cj2*py))+(((15625.007151639)*pp)));
if( IKabs(j8eval[0]) < 0.0000010000000000  )
{
continue; // no branches [j8]

} else
{
{
IkReal j8array[2], cj8array[2], sj8array[2];
bool j8valid[2]={false};
_nj8 = 2;
IkReal x4006=((0.0078755)*cj2);
IkReal x4007=((0.0078755)*sj2);
IkReal x4008=((0.00140587)*sj2);
IkReal x4009=((0.00140587)*cj2);
CheckValue<IkReal> x4011 = IKatan2WithCheck(IkReal(((((-1.0)*r10*x4008))+(((-1.0)*r00*x4007))+(((-1.0)*r00*x4009))+((px*r00))+((r10*x4006))+((py*r10)))),IkReal(((((-1.0)*px*r01))+((r01*x4007))+((r01*x4009))+(((-1.0)*r11*x4006))+(((-1.0)*py*r11))+((r11*x4008)))),IKFAST_ATAN2_MAGTHRESH);
if(!x4011.valid){
continue;
}
IkReal x4010=x4011.value;
j8array[0]=((-1.0)*x4010);
sj8array[0]=IKsin(j8array[0]);
cj8array[0]=IKcos(j8array[0]);
j8array[1]=((3.14159265358979)+(((-1.0)*x4010)));
sj8array[1]=IKsin(j8array[1]);
cj8array[1]=IKcos(j8array[1]);
if( j8array[0] > IKPI )
{
    j8array[0]-=IK2PI;
}
else if( j8array[0] < -IKPI )
{    j8array[0]+=IK2PI;
}
j8valid[0] = true;
if( j8array[1] > IKPI )
{
    j8array[1]-=IK2PI;
}
else if( j8array[1] < -IKPI )
{    j8array[1]+=IK2PI;
}
j8valid[1] = true;
for(int ij8 = 0; ij8 < 2; ++ij8)
{
if( !j8valid[ij8] )
{
    continue;
}
_ij8[0] = ij8; _ij8[1] = -1;
for(int iij8 = ij8+1; iij8 < 2; ++iij8)
{
if( j8valid[iij8] && IKabs(cj8array[ij8]-cj8array[iij8]) < IKFAST_SOLUTION_THRESH && IKabs(sj8array[ij8]-sj8array[iij8]) < IKFAST_SOLUTION_THRESH )
{
    j8valid[iij8]=false; _ij8[1] = iij8; break; 
}
}
j8 = j8array[ij8]; cj8 = cj8array[ij8]; sj8 = sj8array[ij8];
{
IkReal evalcond[1];
IkReal x4012=IKcos(j8);
IkReal x4013=IKcos(j8);
IkReal x4014=IKcos(j8);
IkReal x4015=IKcos(j8);
IkReal x4016=IKcos(j8);
IkReal x4017=IKcos(j8);
IkReal x4018=IKcos(j8);
IkReal x4019=IKcos(j8);
IkReal x4020=IKcos(j8);
IkReal x4021=IKcos(j8);
IkReal x4022=IKcos(j8);
IkReal x4023=IKcos(j8);
IkReal x4024=IKcos(j8);
IkReal x4025=IKcos(j8);
IkReal x4026=IKcos(j8);
IkReal x4027=IKcos(j8);
IkReal x4028=IKcos(j8);
IkReal x4029=IKcos(j8);
IkReal x4030=IKcos(j8);
IkReal x4031=IKcos(j8);
IkReal x4032=IKcos(j8);
IkReal x4033=IKcos(j8);
IkReal x4034=IKcos(j8);
IkReal x4035=IKcos(j8);
IkReal x4036=IKcos(j8);
IkReal x4037=IKcos(j8);
IkReal x4038=IKcos(j8);
IkReal x4039=IKcos(j8);
IkReal x4040=IKcos(j8);
IkReal x4041=IKcos(j8);
IkReal x4042=IKcos(j8);
IkReal x4043=IKcos(j8);
IkReal x4044=IKcos(j8);
IkReal x4045=IKcos(j8);
IkReal x4046=IKcos(j8);
IkReal x4047=IKcos(j8);
IkReal x4048=IKcos(j8);
IkReal x4049=IKcos(j8);
evalcond[0]=((0.0840980235295431)+(((-0.0001200940595862)*cj2*r00*r11*sj2*(IKcos(j8))*(IKsin(j8))))+(((-0.015751)*cj2*py*(r10*r10)*(x4012*x4012)))+(((0.00281174)*cj2*py*r00*r10*(x4013*x4013)))+(((-6.00470297931e-5)*(cj2*cj2)))+(((-0.00562348)*py*r10*r11*sj2*(IKcos(j8))*(IKsin(j8))))+(((2.0)*px*py*r01*r11*(x4014*x4014)))+(((-0.00281174)*cj2*py*r01*r10*(IKcos(j8))*(IKsin(j8))))+(((6.202350025e-5)*(r01*r01)*(x4015*x4015)))+(((0.0001200940595862)*cj2*r01*r11*sj2))+(((6.643157511e-5)*cj2*sj2*(r10*r10)*(x4016*x4016)))+(((py*py)*(x4017*x4017)))+(((-2.214385837e-5)*r00*r10*(x4018*x4018)))+(((-0.00281174)*cj2*py*r01*r11*(x4019*x4019)))+(((-0.00281174)*px*r00*r11*sj2*(IKcos(j8))*(IKsin(j8))))+(((-2.0)*px*py*r00*r10*(x4020*x4020)))+(((0.015751)*px*sj2*(r00*r00)*(x4021*x4021)))+(((-6.202350025e-5)*(r01*r01)))+(((-0.0001200940595862)*cj2*r01*r11*sj2*(x4022*x4022)))+(((-0.015751)*px*sj2*(r01*r01)*(x4023*x4023)))+(((-6.00470297931e-5)*(cj2*cj2)*(r01*r01)*(x4024*x4024)))+(((-0.015751)*py*r01*r10*sj2*(IKcos(j8))*(IKsin(j8))))+(((6.00470297931e-5)*(cj2*cj2)*(r01*r01)))+(((-2.0)*px*py*r01*r11))+(((4.428771674e-5)*r01*r11*(cj2*cj2)))+(((0.00281174)*cj2*py*r01*r11))+(((0.00281174)*cj2*px*(r01*r01)))+(((4.428771674e-5)*cj2*r00*r01*sj2*(IKcos(j8))*(IKsin(j8))))+(((0.015751)*py*r00*r10*sj2*(x4025*x4025)))+(((2.214385837e-5)*r00*r11*(IKcos(j8))*(IKsin(j8))))+(((0.015751)*cj2*px*r00*r11*(IKcos(j8))*(IKsin(j8))))+(((4.428771674e-5)*r00*r10*(cj2*cj2)*(x4026*x4026)))+(((0.0001240470005)*r00*r01*(IKcos(j8))*(IKsin(j8))))+(((-0.00281174)*px*r01*r11*sj2*(x4027*x4027)))+(((-2.214385837e-5)*cj2*sj2*(r10*r10)))+(((2.214385837e-5)*cj2*sj2))+(((-4.428771674e-5)*r00*r11*(cj2*cj2)*(IKcos(j8))*(IKsin(j8))))+(((0.015751)*py*r01*r11*sj2))+(((-0.00562348)*cj2*px*r00*r01*(IKcos(j8))*(IKsin(j8))))+(((2.214385837e-5)*r01*r10*(IKcos(j8))*(IKsin(j8))))+(((-0.00281174)*cj2*px*(r01*r01)*(x4028*x4028)))+(((-2.214385837e-5)*r01*r11))+(((-2.0)*(py*py)*(r10*r10)*(x4029*x4029)))+(((px*px)*(r01*r01)*(x4030*x4030)))+(((0.0001200940595862)*(cj2*cj2)*(x4031*x4031)))+(((2.214385837e-5)*r01*r11*(x4032*x4032)))+(((-4.428771674e-5)*cj2*r10*r11*sj2*(IKcos(j8))*(IKsin(j8))))+(((-0.015751)*py*r00*r11*sj2*(IKcos(j8))*(IKsin(j8))))+(((0.015751)*px*sj2*(r01*r01)))+(((-0.00281174)*cj2*py*r00*r11*(IKcos(j8))*(IKsin(j8))))+(((-0.015751)*cj2*px*r00*r10*(x4033*x4033)))+(((-4.428771674e-5)*cj2*sj2*(x4034*x4034)))+(((-0.015751)*cj2*px*r01*r11))+(((0.00281174)*cj2*px*(r00*r00)*(x4035*x4035)))+(((0.015751)*cj2*px*r01*r10*(IKcos(j8))*(IKsin(j8))))+(((-4.428771674e-5)*r01*r10*(cj2*cj2)*(IKcos(j8))*(IKsin(j8))))+(((1.9764704569e-6)*(r10*r10)))+(((2.0)*px*py*r01*r10*(IKcos(j8))*(IKsin(j8))))+(((2.0)*r00*r01*(px*px)*(IKcos(j8))*(IKsin(j8))))+(((-0.0001200940595862)*cj2*r01*r10*sj2*(IKcos(j8))*(IKsin(j8))))+(((0.00281174)*px*r01*r11*sj2))+(((px*px)*(r10*r10)*(x4036*x4036)))+(((-1.0)*(px*px)*(x4037*x4037)))+(((0.015751)*cj2*px*r01*r11*(x4038*x4038)))+(((-0.031502)*px*r00*r01*sj2*(IKcos(j8))*(IKsin(j8))))+(((0.0001200940595862)*r10*r11*(cj2*cj2)*(IKcos(j8))*(IKsin(j8))))+(((py*py)*(r10*r10)))+(((2.0)*px*py*r00*r11*(IKcos(j8))*(IKsin(j8))))+(((0.00281174)*py*sj2*(r11*r11)))+(((-0.0001200940595862)*r00*r01*(cj2*cj2)*(IKcos(j8))*(IKsin(j8))))+(((-2.214385837e-5)*cj2*sj2*(r01*r01)))+(((-0.0001801410893793)*(cj2*cj2)*(r10*r10)*(x4039*x4039)))+(((-1.0)*(py*py)))+(((-4.428771674e-5)*r01*r11*(cj2*cj2)*(x4040*x4040)))+(((0.0001200940595862)*cj2*r00*r10*sj2*(x4041*x4041)))+(((-0.015751)*py*r01*r11*sj2*(x4042*x4042)))+(((-6.00470297931e-5)*(x4043*x4043)))+(((5.80705593362e-5)*(r10*r10)*(x4044*x4044)))+(((0.00281174)*px*r00*r10*sj2*(x4045*x4045)))+(((2.214385837e-5)*cj2*sj2*(r01*r01)*(x4046*x4046)))+(((-0.00281174)*px*r01*r10*sj2*(IKcos(j8))*(IKsin(j8))))+(((0.015751)*cj2*py*(r11*r11)*(x4047*x4047)))+(((2.0)*r10*r11*(py*py)*(IKcos(j8))*(IKsin(j8))))+(((0.00281174)*py*sj2*(r10*r10)*(x4048*x4048)))+(((-0.00281174)*py*sj2*(r11*r11)*(x4049*x4049)))+(((3.9529409138e-6)*r10*r11*(IKcos(j8))*(IKsin(j8))))+(((-0.015751)*cj2*py*(r11*r11)))+(((6.00470297931e-5)*(cj2*cj2)*(r10*r10)))+(((-1.0)*(px*px)*(r01*r01)))+(((0.031502)*cj2*py*r10*r11*(IKcos(j8))*(IKsin(j8)))));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

rotationfunction0(solutions);
}
}

}

}
    }

}

}
}
}

}

}

} else
{
{
IkReal j2array[1], cj2array[1], sj2array[1];
bool j2valid[1]={false};
_nj2 = 1;
IkReal x4050=py*py;
IkReal x4051=px*px;
IkReal x4052=(pp*r00);
IkReal x4053=(px*py);
IkReal x4054=(pp*r10);
IkReal x4055=(r00*x4051);
IkReal x4056=(r10*x4050);
CheckValue<IkReal> x4057 = IKatan2WithCheck(IkReal(((((-0.0078755)*x4054))+(((-0.00281174)*r10*x4053))+(((8.99756388177095e-8)*r00))+(((0.015751)*x4056))+(((-5.04031769302191e-7)*r10))+(((-0.00281174)*x4055))+(((0.015751)*r00*x4053))+(((0.00140587)*x4052)))),IkReal(((((-0.0078755)*x4052))+(((0.015751)*x4055))+(((-5.04031769302191e-7)*r00))+(((-8.99756388177095e-8)*r10))+(((0.015751)*r10*x4053))+(((0.00281174)*x4056))+(((-0.00140587)*x4054))+(((0.00281174)*r00*x4053)))),IKFAST_ATAN2_MAGTHRESH);
if(!x4057.valid){
continue;
}
CheckValue<IkReal> x4058=IKPowWithIntegerCheck(IKsign(rxp0_2),-1);
if(!x4058.valid){
continue;
}
j2array[0]=((-1.5707963267949)+(x4057.value)+(((1.5707963267949)*(x4058.value))));
sj2array[0]=IKsin(j2array[0]);
cj2array[0]=IKcos(j2array[0]);
if( j2array[0] > IKPI )
{
    j2array[0]-=IK2PI;
}
else if( j2array[0] < -IKPI )
{    j2array[0]+=IK2PI;
}
j2valid[0] = true;
for(int ij2 = 0; ij2 < 1; ++ij2)
{
if( !j2valid[ij2] )
{
    continue;
}
_ij2[0] = ij2; _ij2[1] = -1;
for(int iij2 = ij2+1; iij2 < 1; ++iij2)
{
if( j2valid[iij2] && IKabs(cj2array[ij2]-cj2array[iij2]) < IKFAST_SOLUTION_THRESH && IKabs(sj2array[ij2]-sj2array[iij2]) < IKFAST_SOLUTION_THRESH )
{
    j2valid[iij2]=false; _ij2[1] = iij2; break; 
}
}
j2 = j2array[ij2]; cj2 = cj2array[ij2]; sj2 = sj2array[ij2];
{
IkReal evalcond[3];
IkReal x4059=IKsin(j2);
IkReal x4060=IKcos(j2);
IkReal x4061=((0.00140587)*x4059);
IkReal x4062=((0.0078755)*x4060);
IkReal x4063=((0.00140587)*x4060);
IkReal x4064=((0.0078755)*x4059);
evalcond[0]=((-6.39999707069e-5)+(((0.00281174)*px*x4060))+(((-0.015751)*py*x4060))+(((-1.0)*pp))+(((0.015751)*px*x4059))+(((0.00281174)*py*x4059)));
evalcond[1]=(((px*r00))+(((-1.0)*r10*x4061))+(((-1.0)*r00*x4063))+(((-1.0)*r00*x4064))+((r10*x4062))+((py*r10)));
evalcond[2]=(((px*r01))+(((-1.0)*r11*x4061))+((r11*x4062))+(((-1.0)*r01*x4063))+(((-1.0)*r01*x4064))+((py*r11)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j7eval[1];
IkReal x4065=((-1.0)*pz);
r22=0;
npz=0;
rxp2_0=0;
rxp2_1=0;
r12=0;
r02=0;
r20=0;
r21=0;
npx=(((px*r00))+((py*r10)));
npy=(((px*r01))+((py*r11)));
rxp0_0=(pz*r10);
rxp0_1=(r00*x4065);
rxp1_0=(pz*r11);
rxp1_1=(r01*x4065);
rxp2_2=0;
j7eval[0]=1.0;
if( IKabs(j7eval[0]) < 0.0000000100000000  )
{
{
IkReal j8eval[1];
IkReal x4066=((-1.0)*pz);
r22=0;
npz=0;
rxp2_0=0;
rxp2_1=0;
r12=0;
r02=0;
r20=0;
r21=0;
npx=(((px*r00))+((py*r10)));
npy=(((px*r01))+((py*r11)));
rxp0_0=(pz*r10);
rxp0_1=(r00*x4066);
rxp1_0=(pz*r11);
rxp1_1=(r01*x4066);
rxp2_2=0;
j8eval[0]=((sj2*sj2)+(cj2*cj2)+(((-43.9334576085495)*py*sj2))+(((-246.109487645466)*px*sj2))+(((-43.9334576085495)*cj2*px))+(((-15625.007151639)*(pz*pz)))+(((246.109487645466)*cj2*py))+(((15625.007151639)*pp)));
if( IKabs(j8eval[0]) < 0.0000010000000000  )
{
continue; // no branches [j7, j8]

} else
{
{
IkReal j8array[2], cj8array[2], sj8array[2];
bool j8valid[2]={false};
_nj8 = 2;
IkReal x4067=((0.0078755)*cj2);
IkReal x4068=((0.0078755)*sj2);
IkReal x4069=((0.00140587)*sj2);
IkReal x4070=((0.00140587)*cj2);
CheckValue<IkReal> x4072 = IKatan2WithCheck(IkReal(((((-1.0)*r00*x4070))+((px*r00))+(((-1.0)*r10*x4069))+(((-1.0)*r00*x4068))+((r10*x4067))+((py*r10)))),IkReal(((((-1.0)*px*r01))+(((-1.0)*r11*x4067))+((r01*x4070))+((r11*x4069))+(((-1.0)*py*r11))+((r01*x4068)))),IKFAST_ATAN2_MAGTHRESH);
if(!x4072.valid){
continue;
}
IkReal x4071=x4072.value;
j8array[0]=((-1.0)*x4071);
sj8array[0]=IKsin(j8array[0]);
cj8array[0]=IKcos(j8array[0]);
j8array[1]=((3.14159265358979)+(((-1.0)*x4071)));
sj8array[1]=IKsin(j8array[1]);
cj8array[1]=IKcos(j8array[1]);
if( j8array[0] > IKPI )
{
    j8array[0]-=IK2PI;
}
else if( j8array[0] < -IKPI )
{    j8array[0]+=IK2PI;
}
j8valid[0] = true;
if( j8array[1] > IKPI )
{
    j8array[1]-=IK2PI;
}
else if( j8array[1] < -IKPI )
{    j8array[1]+=IK2PI;
}
j8valid[1] = true;
for(int ij8 = 0; ij8 < 2; ++ij8)
{
if( !j8valid[ij8] )
{
    continue;
}
_ij8[0] = ij8; _ij8[1] = -1;
for(int iij8 = ij8+1; iij8 < 2; ++iij8)
{
if( j8valid[iij8] && IKabs(cj8array[ij8]-cj8array[iij8]) < IKFAST_SOLUTION_THRESH && IKabs(sj8array[ij8]-sj8array[iij8]) < IKFAST_SOLUTION_THRESH )
{
    j8valid[iij8]=false; _ij8[1] = iij8; break; 
}
}
j8 = j8array[ij8]; cj8 = cj8array[ij8]; sj8 = sj8array[ij8];
{
IkReal evalcond[1];
IkReal x4073=IKcos(j8);
IkReal x4074=IKcos(j8);
IkReal x4075=IKcos(j8);
IkReal x4076=IKcos(j8);
IkReal x4077=IKcos(j8);
IkReal x4078=IKcos(j8);
IkReal x4079=IKcos(j8);
IkReal x4080=IKcos(j8);
IkReal x4081=IKcos(j8);
IkReal x4082=IKcos(j8);
IkReal x4083=IKcos(j8);
IkReal x4084=IKcos(j8);
IkReal x4085=IKcos(j8);
IkReal x4086=IKcos(j8);
IkReal x4087=IKcos(j8);
IkReal x4088=IKcos(j8);
IkReal x4089=IKcos(j8);
IkReal x4090=IKcos(j8);
IkReal x4091=IKcos(j8);
IkReal x4092=IKcos(j8);
IkReal x4093=IKcos(j8);
IkReal x4094=IKcos(j8);
IkReal x4095=IKcos(j8);
IkReal x4096=IKcos(j8);
IkReal x4097=IKcos(j8);
IkReal x4098=IKcos(j8);
IkReal x4099=IKcos(j8);
IkReal x4100=IKcos(j8);
IkReal x4101=IKcos(j8);
IkReal x4102=IKcos(j8);
IkReal x4103=IKcos(j8);
IkReal x4104=IKcos(j8);
IkReal x4105=IKcos(j8);
IkReal x4106=IKcos(j8);
IkReal x4107=IKcos(j8);
IkReal x4108=IKcos(j8);
IkReal x4109=IKcos(j8);
IkReal x4110=IKcos(j8);
evalcond[0]=((0.0840980235295431)+(((-0.0001200940595862)*cj2*r00*r11*sj2*(IKcos(j8))*(IKsin(j8))))+(((-0.015751)*cj2*py*(r10*r10)*(x4073*x4073)))+(((0.00281174)*cj2*py*r00*r10*(x4074*x4074)))+(((-6.00470297931e-5)*(cj2*cj2)))+(((-0.00562348)*py*r10*r11*sj2*(IKcos(j8))*(IKsin(j8))))+(((2.0)*px*py*r01*r11*(x4075*x4075)))+(((-0.00281174)*cj2*py*r01*r10*(IKcos(j8))*(IKsin(j8))))+(((6.202350025e-5)*(r01*r01)*(x4076*x4076)))+(((0.0001200940595862)*cj2*r01*r11*sj2))+(((6.643157511e-5)*cj2*sj2*(r10*r10)*(x4077*x4077)))+(((py*py)*(x4078*x4078)))+(((-2.214385837e-5)*r00*r10*(x4079*x4079)))+(((-0.00281174)*cj2*py*r01*r11*(x4080*x4080)))+(((-0.00281174)*px*r00*r11*sj2*(IKcos(j8))*(IKsin(j8))))+(((-2.0)*px*py*r00*r10*(x4081*x4081)))+(((0.015751)*px*sj2*(r00*r00)*(x4082*x4082)))+(((-6.202350025e-5)*(r01*r01)))+(((-0.0001200940595862)*cj2*r01*r11*sj2*(x4083*x4083)))+(((-0.015751)*px*sj2*(r01*r01)*(x4084*x4084)))+(((-6.00470297931e-5)*(cj2*cj2)*(r01*r01)*(x4085*x4085)))+(((-0.015751)*py*r01*r10*sj2*(IKcos(j8))*(IKsin(j8))))+(((6.00470297931e-5)*(cj2*cj2)*(r01*r01)))+(((-2.0)*px*py*r01*r11))+(((4.428771674e-5)*r01*r11*(cj2*cj2)))+(((0.00281174)*cj2*py*r01*r11))+(((0.00281174)*cj2*px*(r01*r01)))+(((4.428771674e-5)*cj2*r00*r01*sj2*(IKcos(j8))*(IKsin(j8))))+(((0.015751)*py*r00*r10*sj2*(x4086*x4086)))+(((2.214385837e-5)*r00*r11*(IKcos(j8))*(IKsin(j8))))+(((0.015751)*cj2*px*r00*r11*(IKcos(j8))*(IKsin(j8))))+(((4.428771674e-5)*r00*r10*(cj2*cj2)*(x4087*x4087)))+(((0.0001240470005)*r00*r01*(IKcos(j8))*(IKsin(j8))))+(((-0.00281174)*px*r01*r11*sj2*(x4088*x4088)))+(((-2.214385837e-5)*cj2*sj2*(r10*r10)))+(((2.214385837e-5)*cj2*sj2))+(((-4.428771674e-5)*r00*r11*(cj2*cj2)*(IKcos(j8))*(IKsin(j8))))+(((0.015751)*py*r01*r11*sj2))+(((-0.00562348)*cj2*px*r00*r01*(IKcos(j8))*(IKsin(j8))))+(((2.214385837e-5)*r01*r10*(IKcos(j8))*(IKsin(j8))))+(((-0.00281174)*cj2*px*(r01*r01)*(x4089*x4089)))+(((-2.214385837e-5)*r01*r11))+(((-2.0)*(py*py)*(r10*r10)*(x4090*x4090)))+(((px*px)*(r01*r01)*(x4091*x4091)))+(((0.0001200940595862)*(cj2*cj2)*(x4092*x4092)))+(((2.214385837e-5)*r01*r11*(x4093*x4093)))+(((-4.428771674e-5)*cj2*r10*r11*sj2*(IKcos(j8))*(IKsin(j8))))+(((-0.015751)*py*r00*r11*sj2*(IKcos(j8))*(IKsin(j8))))+(((0.015751)*px*sj2*(r01*r01)))+(((-0.00281174)*cj2*py*r00*r11*(IKcos(j8))*(IKsin(j8))))+(((-0.015751)*cj2*px*r00*r10*(x4094*x4094)))+(((-4.428771674e-5)*cj2*sj2*(x4095*x4095)))+(((-0.015751)*cj2*px*r01*r11))+(((0.00281174)*cj2*px*(r00*r00)*(x4096*x4096)))+(((0.015751)*cj2*px*r01*r10*(IKcos(j8))*(IKsin(j8))))+(((-4.428771674e-5)*r01*r10*(cj2*cj2)*(IKcos(j8))*(IKsin(j8))))+(((1.9764704569e-6)*(r10*r10)))+(((2.0)*px*py*r01*r10*(IKcos(j8))*(IKsin(j8))))+(((2.0)*r00*r01*(px*px)*(IKcos(j8))*(IKsin(j8))))+(((-0.0001200940595862)*cj2*r01*r10*sj2*(IKcos(j8))*(IKsin(j8))))+(((0.00281174)*px*r01*r11*sj2))+(((px*px)*(r10*r10)*(x4097*x4097)))+(((-1.0)*(px*px)*(x4098*x4098)))+(((0.015751)*cj2*px*r01*r11*(x4099*x4099)))+(((-0.031502)*px*r00*r01*sj2*(IKcos(j8))*(IKsin(j8))))+(((0.0001200940595862)*r10*r11*(cj2*cj2)*(IKcos(j8))*(IKsin(j8))))+(((py*py)*(r10*r10)))+(((2.0)*px*py*r00*r11*(IKcos(j8))*(IKsin(j8))))+(((0.00281174)*py*sj2*(r11*r11)))+(((-0.0001200940595862)*r00*r01*(cj2*cj2)*(IKcos(j8))*(IKsin(j8))))+(((-2.214385837e-5)*cj2*sj2*(r01*r01)))+(((-0.0001801410893793)*(cj2*cj2)*(r10*r10)*(x4100*x4100)))+(((-1.0)*(py*py)))+(((-4.428771674e-5)*r01*r11*(cj2*cj2)*(x4101*x4101)))+(((0.0001200940595862)*cj2*r00*r10*sj2*(x4102*x4102)))+(((-0.015751)*py*r01*r11*sj2*(x4103*x4103)))+(((-6.00470297931e-5)*(x4104*x4104)))+(((5.80705593362e-5)*(r10*r10)*(x4105*x4105)))+(((0.00281174)*px*r00*r10*sj2*(x4106*x4106)))+(((2.214385837e-5)*cj2*sj2*(r01*r01)*(x4107*x4107)))+(((-0.00281174)*px*r01*r10*sj2*(IKcos(j8))*(IKsin(j8))))+(((0.015751)*cj2*py*(r11*r11)*(x4108*x4108)))+(((2.0)*r10*r11*(py*py)*(IKcos(j8))*(IKsin(j8))))+(((0.00281174)*py*sj2*(r10*r10)*(x4109*x4109)))+(((-0.00281174)*py*sj2*(r11*r11)*(x4110*x4110)))+(((3.9529409138e-6)*r10*r11*(IKcos(j8))*(IKsin(j8))))+(((-0.015751)*cj2*py*(r11*r11)))+(((6.00470297931e-5)*(cj2*cj2)*(r10*r10)))+(((-1.0)*(px*px)*(r01*r01)))+(((0.031502)*cj2*py*r10*r11*(IKcos(j8))*(IKsin(j8)))));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j7eval[1];
IkReal x4111=((-1.0)*pz);
r22=0;
npz=0;
rxp2_0=0;
rxp2_1=0;
r12=0;
r02=0;
r20=0;
r21=0;
npx=(((px*r00))+((py*r10)));
npy=(((px*r01))+((py*r11)));
rxp0_0=(pz*r10);
rxp0_1=(r00*x4111);
rxp1_0=(pz*r11);
rxp1_1=(r01*x4111);
rxp2_2=0;
j7eval[0]=1.0;
if( IKabs(j7eval[0]) < 0.0000000100000000  )
{
continue; // no branches [j7]

} else
{
IkReal op[2+1], zeror[2];
int numroots;
op[0]=-1.0;
op[1]=0;
op[2]=1.0;
polyroots2(op,zeror,numroots);
IkReal j7array[2], cj7array[2], sj7array[2], tempj7array[1];
int numsolutions = 0;
for(int ij7 = 0; ij7 < numroots; ++ij7)
{
IkReal htj7 = zeror[ij7];
tempj7array[0]=((2.0)*(atan(htj7)));
for(int kj7 = 0; kj7 < 1; ++kj7)
{
j7array[numsolutions] = tempj7array[kj7];
if( j7array[numsolutions] > IKPI )
{
    j7array[numsolutions]-=IK2PI;
}
else if( j7array[numsolutions] < -IKPI )
{
    j7array[numsolutions]+=IK2PI;
}
sj7array[numsolutions] = IKsin(j7array[numsolutions]);
cj7array[numsolutions] = IKcos(j7array[numsolutions]);
numsolutions++;
}
}
bool j7valid[2]={true,true};
_nj7 = 2;
for(int ij7 = 0; ij7 < numsolutions; ++ij7)
    {
if( !j7valid[ij7] )
{
    continue;
}
    j7 = j7array[ij7]; cj7 = cj7array[ij7]; sj7 = sj7array[ij7];
htj7 = IKtan(j7/2);

_ij7[0] = ij7; _ij7[1] = -1;
for(int iij7 = ij7+1; iij7 < numsolutions; ++iij7)
{
if( j7valid[iij7] && IKabs(cj7array[ij7]-cj7array[iij7]) < IKFAST_SOLUTION_THRESH && IKabs(sj7array[ij7]-sj7array[iij7]) < IKFAST_SOLUTION_THRESH )
{
    j7valid[iij7]=false; _ij7[1] = iij7; break; 
}
}
rotationfunction0(solutions);
    }

}

}
}
}

}

}

} else
{
IkReal op[2+1], zeror[2];
int numroots;
op[0]=-1.0;
op[1]=0;
op[2]=1.0;
polyroots2(op,zeror,numroots);
IkReal j7array[2], cj7array[2], sj7array[2], tempj7array[1];
int numsolutions = 0;
for(int ij7 = 0; ij7 < numroots; ++ij7)
{
IkReal htj7 = zeror[ij7];
tempj7array[0]=((2.0)*(atan(htj7)));
for(int kj7 = 0; kj7 < 1; ++kj7)
{
j7array[numsolutions] = tempj7array[kj7];
if( j7array[numsolutions] > IKPI )
{
    j7array[numsolutions]-=IK2PI;
}
else if( j7array[numsolutions] < -IKPI )
{
    j7array[numsolutions]+=IK2PI;
}
sj7array[numsolutions] = IKsin(j7array[numsolutions]);
cj7array[numsolutions] = IKcos(j7array[numsolutions]);
numsolutions++;
}
}
bool j7valid[2]={true,true};
_nj7 = 2;
for(int ij7 = 0; ij7 < numsolutions; ++ij7)
    {
if( !j7valid[ij7] )
{
    continue;
}
    j7 = j7array[ij7]; cj7 = cj7array[ij7]; sj7 = sj7array[ij7];
htj7 = IKtan(j7/2);

_ij7[0] = ij7; _ij7[1] = -1;
for(int iij7 = ij7+1; iij7 < numsolutions; ++iij7)
{
if( j7valid[iij7] && IKabs(cj7array[ij7]-cj7array[iij7]) < IKFAST_SOLUTION_THRESH && IKabs(sj7array[ij7]-sj7array[iij7]) < IKFAST_SOLUTION_THRESH )
{
    j7valid[iij7]=false; _ij7[1] = iij7; break; 
}
}
{
IkReal j8eval[1];
IkReal x4112=((-1.0)*pz);
r22=0;
npz=0;
rxp2_0=0;
rxp2_1=0;
r12=0;
r02=0;
r20=0;
r21=0;
npx=(((px*r00))+((py*r10)));
npy=(((px*r01))+((py*r11)));
rxp0_0=(pz*r10);
rxp0_1=(r00*x4112);
rxp1_0=(pz*r11);
rxp1_1=(r01*x4112);
rxp2_2=0;
j8eval[0]=((sj2*sj2)+(cj2*cj2)+(((-43.9334576085495)*py*sj2))+(((-246.109487645466)*px*sj2))+(((-43.9334576085495)*cj2*px))+(((-15625.007151639)*(pz*pz)))+(((246.109487645466)*cj2*py))+(((15625.007151639)*pp)));
if( IKabs(j8eval[0]) < 0.0000010000000000  )
{
continue; // no branches [j8]

} else
{
{
IkReal j8array[2], cj8array[2], sj8array[2];
bool j8valid[2]={false};
_nj8 = 2;
IkReal x4113=((0.0078755)*cj2);
IkReal x4114=((0.0078755)*sj2);
IkReal x4115=((0.00140587)*sj2);
IkReal x4116=((0.00140587)*cj2);
CheckValue<IkReal> x4118 = IKatan2WithCheck(IkReal(((((-1.0)*r00*x4116))+(((-1.0)*r00*x4114))+((px*r00))+(((-1.0)*r10*x4115))+((py*r10))+((r10*x4113)))),IkReal(((((-1.0)*r11*x4113))+(((-1.0)*px*r01))+(((-1.0)*py*r11))+((r11*x4115))+((r01*x4114))+((r01*x4116)))),IKFAST_ATAN2_MAGTHRESH);
if(!x4118.valid){
continue;
}
IkReal x4117=x4118.value;
j8array[0]=((-1.0)*x4117);
sj8array[0]=IKsin(j8array[0]);
cj8array[0]=IKcos(j8array[0]);
j8array[1]=((3.14159265358979)+(((-1.0)*x4117)));
sj8array[1]=IKsin(j8array[1]);
cj8array[1]=IKcos(j8array[1]);
if( j8array[0] > IKPI )
{
    j8array[0]-=IK2PI;
}
else if( j8array[0] < -IKPI )
{    j8array[0]+=IK2PI;
}
j8valid[0] = true;
if( j8array[1] > IKPI )
{
    j8array[1]-=IK2PI;
}
else if( j8array[1] < -IKPI )
{    j8array[1]+=IK2PI;
}
j8valid[1] = true;
for(int ij8 = 0; ij8 < 2; ++ij8)
{
if( !j8valid[ij8] )
{
    continue;
}
_ij8[0] = ij8; _ij8[1] = -1;
for(int iij8 = ij8+1; iij8 < 2; ++iij8)
{
if( j8valid[iij8] && IKabs(cj8array[ij8]-cj8array[iij8]) < IKFAST_SOLUTION_THRESH && IKabs(sj8array[ij8]-sj8array[iij8]) < IKFAST_SOLUTION_THRESH )
{
    j8valid[iij8]=false; _ij8[1] = iij8; break; 
}
}
j8 = j8array[ij8]; cj8 = cj8array[ij8]; sj8 = sj8array[ij8];
{
IkReal evalcond[1];
IkReal x4119=IKcos(j8);
IkReal x4120=IKcos(j8);
IkReal x4121=IKcos(j8);
IkReal x4122=IKcos(j8);
IkReal x4123=IKcos(j8);
IkReal x4124=IKcos(j8);
IkReal x4125=IKcos(j8);
IkReal x4126=IKcos(j8);
IkReal x4127=IKcos(j8);
IkReal x4128=IKcos(j8);
IkReal x4129=IKcos(j8);
IkReal x4130=IKcos(j8);
IkReal x4131=IKcos(j8);
IkReal x4132=IKcos(j8);
IkReal x4133=IKcos(j8);
IkReal x4134=IKcos(j8);
IkReal x4135=IKcos(j8);
IkReal x4136=IKcos(j8);
IkReal x4137=IKcos(j8);
IkReal x4138=IKcos(j8);
IkReal x4139=IKcos(j8);
IkReal x4140=IKcos(j8);
IkReal x4141=IKcos(j8);
IkReal x4142=IKcos(j8);
IkReal x4143=IKcos(j8);
IkReal x4144=IKcos(j8);
IkReal x4145=IKcos(j8);
IkReal x4146=IKcos(j8);
IkReal x4147=IKcos(j8);
IkReal x4148=IKcos(j8);
IkReal x4149=IKcos(j8);
IkReal x4150=IKcos(j8);
IkReal x4151=IKcos(j8);
IkReal x4152=IKcos(j8);
IkReal x4153=IKcos(j8);
IkReal x4154=IKcos(j8);
IkReal x4155=IKcos(j8);
IkReal x4156=IKcos(j8);
evalcond[0]=((0.0840980235295431)+(((-0.0001200940595862)*cj2*r00*r11*sj2*(IKcos(j8))*(IKsin(j8))))+(((-0.015751)*cj2*py*(r10*r10)*(x4119*x4119)))+(((0.00281174)*cj2*py*r00*r10*(x4120*x4120)))+(((-6.00470297931e-5)*(cj2*cj2)))+(((-0.00562348)*py*r10*r11*sj2*(IKcos(j8))*(IKsin(j8))))+(((2.0)*px*py*r01*r11*(x4121*x4121)))+(((-0.00281174)*cj2*py*r01*r10*(IKcos(j8))*(IKsin(j8))))+(((6.202350025e-5)*(r01*r01)*(x4122*x4122)))+(((0.0001200940595862)*cj2*r01*r11*sj2))+(((6.643157511e-5)*cj2*sj2*(r10*r10)*(x4123*x4123)))+(((py*py)*(x4124*x4124)))+(((-2.214385837e-5)*r00*r10*(x4125*x4125)))+(((-0.00281174)*cj2*py*r01*r11*(x4126*x4126)))+(((-0.00281174)*px*r00*r11*sj2*(IKcos(j8))*(IKsin(j8))))+(((-2.0)*px*py*r00*r10*(x4127*x4127)))+(((0.015751)*px*sj2*(r00*r00)*(x4128*x4128)))+(((-6.202350025e-5)*(r01*r01)))+(((-0.0001200940595862)*cj2*r01*r11*sj2*(x4129*x4129)))+(((-0.015751)*px*sj2*(r01*r01)*(x4130*x4130)))+(((-6.00470297931e-5)*(cj2*cj2)*(r01*r01)*(x4131*x4131)))+(((-0.015751)*py*r01*r10*sj2*(IKcos(j8))*(IKsin(j8))))+(((6.00470297931e-5)*(cj2*cj2)*(r01*r01)))+(((-2.0)*px*py*r01*r11))+(((4.428771674e-5)*r01*r11*(cj2*cj2)))+(((0.00281174)*cj2*py*r01*r11))+(((0.00281174)*cj2*px*(r01*r01)))+(((4.428771674e-5)*cj2*r00*r01*sj2*(IKcos(j8))*(IKsin(j8))))+(((0.015751)*py*r00*r10*sj2*(x4132*x4132)))+(((2.214385837e-5)*r00*r11*(IKcos(j8))*(IKsin(j8))))+(((0.015751)*cj2*px*r00*r11*(IKcos(j8))*(IKsin(j8))))+(((4.428771674e-5)*r00*r10*(cj2*cj2)*(x4133*x4133)))+(((0.0001240470005)*r00*r01*(IKcos(j8))*(IKsin(j8))))+(((-0.00281174)*px*r01*r11*sj2*(x4134*x4134)))+(((-2.214385837e-5)*cj2*sj2*(r10*r10)))+(((2.214385837e-5)*cj2*sj2))+(((-4.428771674e-5)*r00*r11*(cj2*cj2)*(IKcos(j8))*(IKsin(j8))))+(((0.015751)*py*r01*r11*sj2))+(((-0.00562348)*cj2*px*r00*r01*(IKcos(j8))*(IKsin(j8))))+(((2.214385837e-5)*r01*r10*(IKcos(j8))*(IKsin(j8))))+(((-0.00281174)*cj2*px*(r01*r01)*(x4135*x4135)))+(((-2.214385837e-5)*r01*r11))+(((-2.0)*(py*py)*(r10*r10)*(x4136*x4136)))+(((px*px)*(r01*r01)*(x4137*x4137)))+(((0.0001200940595862)*(cj2*cj2)*(x4138*x4138)))+(((2.214385837e-5)*r01*r11*(x4139*x4139)))+(((-4.428771674e-5)*cj2*r10*r11*sj2*(IKcos(j8))*(IKsin(j8))))+(((-0.015751)*py*r00*r11*sj2*(IKcos(j8))*(IKsin(j8))))+(((0.015751)*px*sj2*(r01*r01)))+(((-0.00281174)*cj2*py*r00*r11*(IKcos(j8))*(IKsin(j8))))+(((-0.015751)*cj2*px*r00*r10*(x4140*x4140)))+(((-4.428771674e-5)*cj2*sj2*(x4141*x4141)))+(((-0.015751)*cj2*px*r01*r11))+(((0.00281174)*cj2*px*(r00*r00)*(x4142*x4142)))+(((0.015751)*cj2*px*r01*r10*(IKcos(j8))*(IKsin(j8))))+(((-4.428771674e-5)*r01*r10*(cj2*cj2)*(IKcos(j8))*(IKsin(j8))))+(((1.9764704569e-6)*(r10*r10)))+(((2.0)*px*py*r01*r10*(IKcos(j8))*(IKsin(j8))))+(((2.0)*r00*r01*(px*px)*(IKcos(j8))*(IKsin(j8))))+(((-0.0001200940595862)*cj2*r01*r10*sj2*(IKcos(j8))*(IKsin(j8))))+(((0.00281174)*px*r01*r11*sj2))+(((px*px)*(r10*r10)*(x4143*x4143)))+(((-1.0)*(px*px)*(x4144*x4144)))+(((0.015751)*cj2*px*r01*r11*(x4145*x4145)))+(((-0.031502)*px*r00*r01*sj2*(IKcos(j8))*(IKsin(j8))))+(((0.0001200940595862)*r10*r11*(cj2*cj2)*(IKcos(j8))*(IKsin(j8))))+(((py*py)*(r10*r10)))+(((2.0)*px*py*r00*r11*(IKcos(j8))*(IKsin(j8))))+(((0.00281174)*py*sj2*(r11*r11)))+(((-0.0001200940595862)*r00*r01*(cj2*cj2)*(IKcos(j8))*(IKsin(j8))))+(((-2.214385837e-5)*cj2*sj2*(r01*r01)))+(((-0.0001801410893793)*(cj2*cj2)*(r10*r10)*(x4146*x4146)))+(((-1.0)*(py*py)))+(((-4.428771674e-5)*r01*r11*(cj2*cj2)*(x4147*x4147)))+(((0.0001200940595862)*cj2*r00*r10*sj2*(x4148*x4148)))+(((-0.015751)*py*r01*r11*sj2*(x4149*x4149)))+(((-6.00470297931e-5)*(x4150*x4150)))+(((5.80705593362e-5)*(r10*r10)*(x4151*x4151)))+(((0.00281174)*px*r00*r10*sj2*(x4152*x4152)))+(((2.214385837e-5)*cj2*sj2*(r01*r01)*(x4153*x4153)))+(((-0.00281174)*px*r01*r10*sj2*(IKcos(j8))*(IKsin(j8))))+(((0.015751)*cj2*py*(r11*r11)*(x4154*x4154)))+(((2.0)*r10*r11*(py*py)*(IKcos(j8))*(IKsin(j8))))+(((0.00281174)*py*sj2*(r10*r10)*(x4155*x4155)))+(((-0.00281174)*py*sj2*(r11*r11)*(x4156*x4156)))+(((3.9529409138e-6)*r10*r11*(IKcos(j8))*(IKsin(j8))))+(((-0.015751)*cj2*py*(r11*r11)))+(((6.00470297931e-5)*(cj2*cj2)*(r10*r10)))+(((-1.0)*(px*px)*(r01*r01)))+(((0.031502)*cj2*py*r10*r11*(IKcos(j8))*(IKsin(j8)))));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

rotationfunction0(solutions);
}
}

}

}
    }

}

}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
if( 1 )
{
bgotonextstatement=false;
continue; // branch miss [j2, j7, j8]

}
} while(0);
if( bgotonextstatement )
{
}
}
}

} else
{
{
IkReal j2array[1], cj2array[1], sj2array[1];
bool j2valid[1]={false};
_nj2 = 1;
IkReal x4157=((0.00140587)*npx);
IkReal x4158=((0.0078755)*npx);
IkReal x4159=((0.0078755)*px*r02);
IkReal x4160=(py*r10*r12);
IkReal x4161=((0.00140587)*px*r02);
IkReal x4162=(py*r00*r12);
CheckValue<IkReal> x4163=IKPowWithIntegerCheck(IKsign(r21),-1);
if(!x4163.valid){
continue;
}
CheckValue<IkReal> x4164 = IKatan2WithCheck(IkReal((((r00*x4161))+(((-0.0078755)*x4160))+(((0.00140587)*x4162))+(((-1.0)*r02*x4157))+((r12*x4158))+(((-1.0)*r10*x4159)))),IkReal((((r02*x4158))+(((-0.0078755)*x4162))+(((-1.0)*r10*x4161))+((r12*x4157))+(((-1.0)*r00*x4159))+(((-0.00140587)*x4160)))),IKFAST_ATAN2_MAGTHRESH);
if(!x4164.valid){
continue;
}
j2array[0]=((-1.5707963267949)+(((-1.5707963267949)*(x4163.value)))+(x4164.value));
sj2array[0]=IKsin(j2array[0]);
cj2array[0]=IKcos(j2array[0]);
if( j2array[0] > IKPI )
{
    j2array[0]-=IK2PI;
}
else if( j2array[0] < -IKPI )
{    j2array[0]+=IK2PI;
}
j2valid[0] = true;
for(int ij2 = 0; ij2 < 1; ++ij2)
{
if( !j2valid[ij2] )
{
    continue;
}
_ij2[0] = ij2; _ij2[1] = -1;
for(int iij2 = ij2+1; iij2 < 1; ++iij2)
{
if( j2valid[iij2] && IKabs(cj2array[ij2]-cj2array[iij2]) < IKFAST_SOLUTION_THRESH && IKabs(sj2array[ij2]-sj2array[iij2]) < IKFAST_SOLUTION_THRESH )
{
    j2valid[iij2]=false; _ij2[1] = iij2; break; 
}
}
j2 = j2array[ij2]; cj2 = cj2array[ij2]; sj2 = sj2array[ij2];
{
IkReal evalcond[4];
IkReal x4165=IKcos(j2);
IkReal x4166=IKsin(j2);
IkReal x4167=((0.00140587)*x4166);
IkReal x4168=((0.00140587)*x4165);
IkReal x4169=((0.0078755)*x4165);
IkReal x4170=((0.0078755)*x4166);
evalcond[0]=((((-1.0)*r00*x4168))+((r10*x4169))+(((-1.0)*r00*x4170))+(((-1.0)*r10*x4167))+npx);
evalcond[1]=((((-1.0)*r01*x4170))+(((-1.0)*r11*x4167))+npy+((r11*x4169))+(((-1.0)*r01*x4168)));
evalcond[2]=((-6.39999707069e-5)+(((-0.015751)*py*x4165))+(((0.00281174)*px*x4165))+(((0.00281174)*py*x4166))+(((-1.0)*pp))+(((0.015751)*px*x4166)));
evalcond[3]=((((-1.0)*r02*x4168))+((px*r02))+(((-1.0)*r12*x4167))+((r12*x4169))+((py*r12))+(((-1.0)*r02*x4170)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j7eval[1];
r22=0;
npz=(((px*r02))+((py*r12)));
rxp2_0=(pz*r12);
rxp2_1=((-1.0)*pz*r02);
j7eval[0]=1.0;
if( IKabs(j7eval[0]) < 0.0000000100000000  )
{
{
IkReal j8eval[1];
r22=0;
npz=(((px*r02))+((py*r12)));
rxp2_0=(pz*r12);
rxp2_1=((-1.0)*pz*r02);
IkReal x4171=((0.0078755)*cj2);
IkReal x4172=((0.0078755)*sj2);
IkReal x4173=((0.00140587)*sj2);
IkReal x4174=((0.00140587)*cj2);
j8eval[0]=((IKabs((((r11*x4173))+(((-1.0)*npy))+((r01*x4172))+((r01*x4174))+(((-1.0)*r11*x4171)))))+(IKabs(((((-1.0)*r00*x4174))+(((-1.0)*r00*x4172))+npx+((r10*x4171))+(((-1.0)*r10*x4173))))));
if( IKabs(j8eval[0]) < 0.0000010000000000  )
{
continue; // no branches [j7, j8]

} else
{
{
IkReal j8array[2], cj8array[2], sj8array[2];
bool j8valid[2]={false};
_nj8 = 2;
IkReal x4175=((0.0078755)*cj2);
IkReal x4176=((0.0078755)*sj2);
IkReal x4177=((0.00140587)*sj2);
IkReal x4178=((0.00140587)*cj2);
CheckValue<IkReal> x4180 = IKatan2WithCheck(IkReal(((((-1.0)*r00*x4178))+(((-1.0)*r00*x4176))+npx+((r10*x4175))+(((-1.0)*r10*x4177)))),IkReal((((r11*x4177))+(((-1.0)*npy))+((r01*x4178))+((r01*x4176))+(((-1.0)*r11*x4175)))),IKFAST_ATAN2_MAGTHRESH);
if(!x4180.valid){
continue;
}
IkReal x4179=x4180.value;
j8array[0]=((-1.0)*x4179);
sj8array[0]=IKsin(j8array[0]);
cj8array[0]=IKcos(j8array[0]);
j8array[1]=((3.14159265358979)+(((-1.0)*x4179)));
sj8array[1]=IKsin(j8array[1]);
cj8array[1]=IKcos(j8array[1]);
if( j8array[0] > IKPI )
{
    j8array[0]-=IK2PI;
}
else if( j8array[0] < -IKPI )
{    j8array[0]+=IK2PI;
}
j8valid[0] = true;
if( j8array[1] > IKPI )
{
    j8array[1]-=IK2PI;
}
else if( j8array[1] < -IKPI )
{    j8array[1]+=IK2PI;
}
j8valid[1] = true;
for(int ij8 = 0; ij8 < 2; ++ij8)
{
if( !j8valid[ij8] )
{
    continue;
}
_ij8[0] = ij8; _ij8[1] = -1;
for(int iij8 = ij8+1; iij8 < 2; ++iij8)
{
if( j8valid[iij8] && IKabs(cj8array[ij8]-cj8array[iij8]) < IKFAST_SOLUTION_THRESH && IKabs(sj8array[ij8]-sj8array[iij8]) < IKFAST_SOLUTION_THRESH )
{
    j8valid[iij8]=false; _ij8[1] = iij8; break; 
}
}
j8 = j8array[ij8]; cj8 = cj8array[ij8]; sj8 = sj8array[ij8];
{
IkReal evalcond[1];
IkReal x4181=IKcos(j8);
IkReal x4182=IKcos(j8);
IkReal x4183=IKcos(j8);
IkReal x4184=IKcos(j8);
IkReal x4185=IKcos(j8);
IkReal x4186=IKcos(j8);
IkReal x4187=IKcos(j8);
IkReal x4188=IKcos(j8);
IkReal x4189=IKcos(j8);
IkReal x4190=IKcos(j8);
IkReal x4191=IKcos(j8);
IkReal x4192=IKcos(j8);
IkReal x4193=IKcos(j8);
IkReal x4194=IKcos(j8);
IkReal x4195=IKcos(j8);
IkReal x4196=IKcos(j8);
IkReal x4197=IKcos(j8);
IkReal x4198=IKcos(j8);
IkReal x4199=IKcos(j8);
IkReal x4200=IKcos(j8);
IkReal x4201=IKcos(j8);
IkReal x4202=IKcos(j8);
IkReal x4203=IKcos(j8);
IkReal x4204=IKcos(j8);
IkReal x4205=IKcos(j8);
IkReal x4206=IKcos(j8);
IkReal x4207=IKcos(j8);
IkReal x4208=IKcos(j8);
IkReal x4209=IKcos(j8);
IkReal x4210=IKcos(j8);
IkReal x4211=IKcos(j8);
IkReal x4212=IKcos(j8);
IkReal x4213=IKcos(j8);
IkReal x4214=IKcos(j8);
IkReal x4215=IKcos(j8);
IkReal x4216=IKcos(j8);
evalcond[0]=((0.0841)+(((-0.0001200940595862)*cj2*r00*r11*sj2*(IKcos(j8))*(IKsin(j8))))+(((-0.00281174)*npx*r11*sj2*(IKcos(j8))*(IKsin(j8))))+(((0.00281174)*npy*r11*sj2))+(((2.0)*npx*npy*(IKcos(j8))*(IKsin(j8))))+(((-1.9764704569e-6)*(r10*r10)*(x4181*x4181)))+(((0.015751)*cj2*npy*r11*(x4182*x4182)))+(((2.0)*px*py*r01*r11*(x4183*x4183)))+(((pz*pz)*(r20*r20)*(x4184*x4184)))+(((6.202350025e-5)*(r01*r01)*(x4185*x4185)))+(((-6.00470297931e-5)*(cj2*cj2)*(r10*r10)*(x4186*x4186)))+(((0.0001200940595862)*cj2*r01*r11*sj2))+(((-2.214385837e-5)*r00*r10*(x4187*x4187)))+(((-2.0)*px*py*r00*r10*(x4188*x4188)))+(((0.015751)*cj2*npx*r11*(IKcos(j8))*(IKsin(j8))))+(((-6.202350025e-5)*(r01*r01)))+(((-0.00281174)*npy*r11*sj2*(x4189*x4189)))+(((-1.0)*(px*px)*(r00*r00)*(x4190*x4190)))+(((-1.0)*(py*py)*(r10*r10)*(x4191*x4191)))+(((-0.0001200940595862)*cj2*r01*r11*sj2*(x4192*x4192)))+(((-6.00470297931e-5)*(cj2*cj2)*(r01*r01)*(x4193*x4193)))+(((-0.00281174)*cj2*npy*r00*(IKcos(j8))*(IKsin(j8))))+(((6.00470297931e-5)*(cj2*cj2)*(r01*r01)))+(((-2.0)*px*py*r01*r11))+(((4.428771674e-5)*r01*r11*(cj2*cj2)))+(((-0.015751)*cj2*npy*r11))+(((0.015751)*npx*r00*sj2*(x4194*x4194)))+(((4.428771674e-5)*cj2*r00*r01*sj2*(IKcos(j8))*(IKsin(j8))))+(((0.00281174)*cj2*npy*r01))+(((-1.9764704569e-6)*(r11*r11)))+(((2.214385837e-5)*r00*r11*(IKcos(j8))*(IKsin(j8))))+(((4.428771674e-5)*r00*r10*(cj2*cj2)*(x4195*x4195)))+(((0.015751)*cj2*npy*r10*(IKcos(j8))*(IKsin(j8))))+(((0.0001240470005)*r00*r01*(IKcos(j8))*(IKsin(j8))))+(((6.00470297931e-5)*(cj2*cj2)*(r00*r00)*(x4196*x4196)))+(((-0.00281174)*npy*r10*sj2*(IKcos(j8))*(IKsin(j8))))+(((-1.0)*(pz*pz)*(r21*r21)*(x4197*x4197)))+(((-4.428771674e-5)*r00*r11*(cj2*cj2)*(IKcos(j8))*(IKsin(j8))))+(((2.214385837e-5)*cj2*sj2*(r10*r10)*(x4198*x4198)))+(((2.214385837e-5)*r01*r10*(IKcos(j8))*(IKsin(j8))))+(((-2.0)*npy*pz*r21))+(((6.00470297931e-5)*(cj2*cj2)*(r11*r11)*(x4199*x4199)))+(((-6.202350025e-5)*(r00*r00)*(x4200*x4200)))+(((0.00281174)*npx*r10*sj2*(x4201*x4201)))+(((-2.0)*npx*pz*r20*(x4202*x4202)))+(((-2.214385837e-5)*r01*r11))+(((-0.015751)*cj2*npx*r10*(x4203*x4203)))+(((-0.015751)*npy*r00*sj2*(IKcos(j8))*(IKsin(j8))))+(((px*px)*(r01*r01)*(x4204*x4204)))+(((2.214385837e-5)*r01*r11*(x4205*x4205)))+(((-4.428771674e-5)*cj2*r10*r11*sj2*(IKcos(j8))*(IKsin(j8))))+(((0.00281174)*cj2*npx*r00*(x4206*x4206)))+(((-1.0)*(py*py)*(r11*r11)))+(((-4.428771674e-5)*r01*r10*(cj2*cj2)*(IKcos(j8))*(IKsin(j8))))+(((-0.015751)*npx*r01*sj2*(IKcos(j8))*(IKsin(j8))))+(((-0.015751)*npy*r01*sj2*(x4207*x4207)))+(((-0.0001200940595862)*cj2*r01*r10*sj2*(IKcos(j8))*(IKsin(j8))))+(((pz*pz)*(r21*r21)))+(((-0.00281174)*cj2*npy*r01*(x4208*x4208)))+(((0.0001200940595862)*r10*r11*(cj2*cj2)*(IKcos(j8))*(IKsin(j8))))+(((-0.00281174)*cj2*npx*r01*(IKcos(j8))*(IKsin(j8))))+(((-0.0001200940595862)*r00*r01*(cj2*cj2)*(IKcos(j8))*(IKsin(j8))))+(((-2.214385837e-5)*cj2*sj2*(r01*r01)))+(((-4.428771674e-5)*r01*r11*(cj2*cj2)*(x4209*x4209)))+(((0.0001200940595862)*cj2*r00*r10*sj2*(x4210*x4210)))+(((-2.214385837e-5)*cj2*sj2*(r00*r00)*(x4211*x4211)))+(((-2.214385837e-5)*cj2*sj2*(r11*r11)*(x4212*x4212)))+(((2.214385837e-5)*cj2*sj2*(r11*r11)))+(((2.214385837e-5)*cj2*sj2*(r01*r01)*(x4213*x4213)))+(((3.9529409138e-6)*r10*r11*(IKcos(j8))*(IKsin(j8))))+(((1.9764704569e-6)*(r11*r11)*(x4214*x4214)))+(((py*py)*(r11*r11)*(x4215*x4215)))+(((0.015751)*npy*r01*sj2))+(((2.0)*npy*pz*r21*(x4216*x4216)))+(((-1.0)*(px*px)*(r01*r01)))+(((-6.00470297931e-5)*(cj2*cj2)*(r11*r11))));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j7eval[1];
r22=0;
npz=(((px*r02))+((py*r12)));
rxp2_0=(pz*r12);
rxp2_1=((-1.0)*pz*r02);
j7eval[0]=1.0;
if( IKabs(j7eval[0]) < 0.0000000100000000  )
{
continue; // no branches [j7]

} else
{
IkReal op[2+1], zeror[2];
int numroots;
op[0]=-1.0;
op[1]=0;
op[2]=1.0;
polyroots2(op,zeror,numroots);
IkReal j7array[2], cj7array[2], sj7array[2], tempj7array[1];
int numsolutions = 0;
for(int ij7 = 0; ij7 < numroots; ++ij7)
{
IkReal htj7 = zeror[ij7];
tempj7array[0]=((2.0)*(atan(htj7)));
for(int kj7 = 0; kj7 < 1; ++kj7)
{
j7array[numsolutions] = tempj7array[kj7];
if( j7array[numsolutions] > IKPI )
{
    j7array[numsolutions]-=IK2PI;
}
else if( j7array[numsolutions] < -IKPI )
{
    j7array[numsolutions]+=IK2PI;
}
sj7array[numsolutions] = IKsin(j7array[numsolutions]);
cj7array[numsolutions] = IKcos(j7array[numsolutions]);
numsolutions++;
}
}
bool j7valid[2]={true,true};
_nj7 = 2;
for(int ij7 = 0; ij7 < numsolutions; ++ij7)
    {
if( !j7valid[ij7] )
{
    continue;
}
    j7 = j7array[ij7]; cj7 = cj7array[ij7]; sj7 = sj7array[ij7];
htj7 = IKtan(j7/2);

_ij7[0] = ij7; _ij7[1] = -1;
for(int iij7 = ij7+1; iij7 < numsolutions; ++iij7)
{
if( j7valid[iij7] && IKabs(cj7array[ij7]-cj7array[iij7]) < IKFAST_SOLUTION_THRESH && IKabs(sj7array[ij7]-sj7array[iij7]) < IKFAST_SOLUTION_THRESH )
{
    j7valid[iij7]=false; _ij7[1] = iij7; break; 
}
}
rotationfunction0(solutions);
    }

}

}
}
}

}

}

} else
{
IkReal op[2+1], zeror[2];
int numroots;
op[0]=-1.0;
op[1]=0;
op[2]=1.0;
polyroots2(op,zeror,numroots);
IkReal j7array[2], cj7array[2], sj7array[2], tempj7array[1];
int numsolutions = 0;
for(int ij7 = 0; ij7 < numroots; ++ij7)
{
IkReal htj7 = zeror[ij7];
tempj7array[0]=((2.0)*(atan(htj7)));
for(int kj7 = 0; kj7 < 1; ++kj7)
{
j7array[numsolutions] = tempj7array[kj7];
if( j7array[numsolutions] > IKPI )
{
    j7array[numsolutions]-=IK2PI;
}
else if( j7array[numsolutions] < -IKPI )
{
    j7array[numsolutions]+=IK2PI;
}
sj7array[numsolutions] = IKsin(j7array[numsolutions]);
cj7array[numsolutions] = IKcos(j7array[numsolutions]);
numsolutions++;
}
}
bool j7valid[2]={true,true};
_nj7 = 2;
for(int ij7 = 0; ij7 < numsolutions; ++ij7)
    {
if( !j7valid[ij7] )
{
    continue;
}
    j7 = j7array[ij7]; cj7 = cj7array[ij7]; sj7 = sj7array[ij7];
htj7 = IKtan(j7/2);

_ij7[0] = ij7; _ij7[1] = -1;
for(int iij7 = ij7+1; iij7 < numsolutions; ++iij7)
{
if( j7valid[iij7] && IKabs(cj7array[ij7]-cj7array[iij7]) < IKFAST_SOLUTION_THRESH && IKabs(sj7array[ij7]-sj7array[iij7]) < IKFAST_SOLUTION_THRESH )
{
    j7valid[iij7]=false; _ij7[1] = iij7; break; 
}
}
{
IkReal j8eval[1];
r22=0;
npz=(((px*r02))+((py*r12)));
rxp2_0=(pz*r12);
rxp2_1=((-1.0)*pz*r02);
IkReal x4217=((0.0078755)*cj2);
IkReal x4218=((0.0078755)*sj2);
IkReal x4219=((0.00140587)*sj2);
IkReal x4220=((0.00140587)*cj2);
j8eval[0]=((IKabs((((r01*x4220))+(((-1.0)*r11*x4217))+((r11*x4219))+(((-1.0)*npy))+((r01*x4218)))))+(IKabs(((((-1.0)*r00*x4218))+npx+(((-1.0)*r00*x4220))+((r10*x4217))+(((-1.0)*r10*x4219))))));
if( IKabs(j8eval[0]) < 0.0000010000000000  )
{
continue; // no branches [j8]

} else
{
{
IkReal j8array[2], cj8array[2], sj8array[2];
bool j8valid[2]={false};
_nj8 = 2;
IkReal x4221=((0.0078755)*cj2);
IkReal x4222=((0.0078755)*sj2);
IkReal x4223=((0.00140587)*sj2);
IkReal x4224=((0.00140587)*cj2);
CheckValue<IkReal> x4226 = IKatan2WithCheck(IkReal((((r10*x4221))+npx+(((-1.0)*r10*x4223))+(((-1.0)*r00*x4222))+(((-1.0)*r00*x4224)))),IkReal((((r01*x4222))+((r01*x4224))+(((-1.0)*r11*x4221))+(((-1.0)*npy))+((r11*x4223)))),IKFAST_ATAN2_MAGTHRESH);
if(!x4226.valid){
continue;
}
IkReal x4225=x4226.value;
j8array[0]=((-1.0)*x4225);
sj8array[0]=IKsin(j8array[0]);
cj8array[0]=IKcos(j8array[0]);
j8array[1]=((3.14159265358979)+(((-1.0)*x4225)));
sj8array[1]=IKsin(j8array[1]);
cj8array[1]=IKcos(j8array[1]);
if( j8array[0] > IKPI )
{
    j8array[0]-=IK2PI;
}
else if( j8array[0] < -IKPI )
{    j8array[0]+=IK2PI;
}
j8valid[0] = true;
if( j8array[1] > IKPI )
{
    j8array[1]-=IK2PI;
}
else if( j8array[1] < -IKPI )
{    j8array[1]+=IK2PI;
}
j8valid[1] = true;
for(int ij8 = 0; ij8 < 2; ++ij8)
{
if( !j8valid[ij8] )
{
    continue;
}
_ij8[0] = ij8; _ij8[1] = -1;
for(int iij8 = ij8+1; iij8 < 2; ++iij8)
{
if( j8valid[iij8] && IKabs(cj8array[ij8]-cj8array[iij8]) < IKFAST_SOLUTION_THRESH && IKabs(sj8array[ij8]-sj8array[iij8]) < IKFAST_SOLUTION_THRESH )
{
    j8valid[iij8]=false; _ij8[1] = iij8; break; 
}
}
j8 = j8array[ij8]; cj8 = cj8array[ij8]; sj8 = sj8array[ij8];
{
IkReal evalcond[1];
IkReal x4227=IKcos(j8);
IkReal x4228=IKcos(j8);
IkReal x4229=IKcos(j8);
IkReal x4230=IKcos(j8);
IkReal x4231=IKcos(j8);
IkReal x4232=IKcos(j8);
IkReal x4233=IKcos(j8);
IkReal x4234=IKcos(j8);
IkReal x4235=IKcos(j8);
IkReal x4236=IKcos(j8);
IkReal x4237=IKcos(j8);
IkReal x4238=IKcos(j8);
IkReal x4239=IKcos(j8);
IkReal x4240=IKcos(j8);
IkReal x4241=IKcos(j8);
IkReal x4242=IKcos(j8);
IkReal x4243=IKcos(j8);
IkReal x4244=IKcos(j8);
IkReal x4245=IKcos(j8);
IkReal x4246=IKcos(j8);
IkReal x4247=IKcos(j8);
IkReal x4248=IKcos(j8);
IkReal x4249=IKcos(j8);
IkReal x4250=IKcos(j8);
IkReal x4251=IKcos(j8);
IkReal x4252=IKcos(j8);
IkReal x4253=IKcos(j8);
IkReal x4254=IKcos(j8);
IkReal x4255=IKcos(j8);
IkReal x4256=IKcos(j8);
IkReal x4257=IKcos(j8);
IkReal x4258=IKcos(j8);
IkReal x4259=IKcos(j8);
IkReal x4260=IKcos(j8);
IkReal x4261=IKcos(j8);
IkReal x4262=IKcos(j8);
evalcond[0]=((0.0841)+(((-0.0001200940595862)*cj2*r00*r11*sj2*(IKcos(j8))*(IKsin(j8))))+(((-0.00281174)*npx*r11*sj2*(IKcos(j8))*(IKsin(j8))))+(((0.00281174)*npy*r11*sj2))+(((2.0)*npx*npy*(IKcos(j8))*(IKsin(j8))))+(((-1.9764704569e-6)*(r10*r10)*(x4227*x4227)))+(((0.015751)*cj2*npy*r11*(x4228*x4228)))+(((2.0)*px*py*r01*r11*(x4229*x4229)))+(((pz*pz)*(r20*r20)*(x4230*x4230)))+(((6.202350025e-5)*(r01*r01)*(x4231*x4231)))+(((-6.00470297931e-5)*(cj2*cj2)*(r10*r10)*(x4232*x4232)))+(((0.0001200940595862)*cj2*r01*r11*sj2))+(((-2.214385837e-5)*r00*r10*(x4233*x4233)))+(((-2.0)*px*py*r00*r10*(x4234*x4234)))+(((0.015751)*cj2*npx*r11*(IKcos(j8))*(IKsin(j8))))+(((-6.202350025e-5)*(r01*r01)))+(((-0.00281174)*npy*r11*sj2*(x4235*x4235)))+(((-1.0)*(px*px)*(r00*r00)*(x4236*x4236)))+(((-1.0)*(py*py)*(r10*r10)*(x4237*x4237)))+(((-0.0001200940595862)*cj2*r01*r11*sj2*(x4238*x4238)))+(((-6.00470297931e-5)*(cj2*cj2)*(r01*r01)*(x4239*x4239)))+(((-0.00281174)*cj2*npy*r00*(IKcos(j8))*(IKsin(j8))))+(((6.00470297931e-5)*(cj2*cj2)*(r01*r01)))+(((-2.0)*px*py*r01*r11))+(((4.428771674e-5)*r01*r11*(cj2*cj2)))+(((-0.015751)*cj2*npy*r11))+(((0.015751)*npx*r00*sj2*(x4240*x4240)))+(((4.428771674e-5)*cj2*r00*r01*sj2*(IKcos(j8))*(IKsin(j8))))+(((0.00281174)*cj2*npy*r01))+(((-1.9764704569e-6)*(r11*r11)))+(((2.214385837e-5)*r00*r11*(IKcos(j8))*(IKsin(j8))))+(((4.428771674e-5)*r00*r10*(cj2*cj2)*(x4241*x4241)))+(((0.015751)*cj2*npy*r10*(IKcos(j8))*(IKsin(j8))))+(((0.0001240470005)*r00*r01*(IKcos(j8))*(IKsin(j8))))+(((6.00470297931e-5)*(cj2*cj2)*(r00*r00)*(x4242*x4242)))+(((-0.00281174)*npy*r10*sj2*(IKcos(j8))*(IKsin(j8))))+(((-1.0)*(pz*pz)*(r21*r21)*(x4243*x4243)))+(((-4.428771674e-5)*r00*r11*(cj2*cj2)*(IKcos(j8))*(IKsin(j8))))+(((2.214385837e-5)*cj2*sj2*(r10*r10)*(x4244*x4244)))+(((2.214385837e-5)*r01*r10*(IKcos(j8))*(IKsin(j8))))+(((-2.0)*npy*pz*r21))+(((6.00470297931e-5)*(cj2*cj2)*(r11*r11)*(x4245*x4245)))+(((-6.202350025e-5)*(r00*r00)*(x4246*x4246)))+(((0.00281174)*npx*r10*sj2*(x4247*x4247)))+(((-2.0)*npx*pz*r20*(x4248*x4248)))+(((-2.214385837e-5)*r01*r11))+(((-0.015751)*cj2*npx*r10*(x4249*x4249)))+(((-0.015751)*npy*r00*sj2*(IKcos(j8))*(IKsin(j8))))+(((px*px)*(r01*r01)*(x4250*x4250)))+(((2.214385837e-5)*r01*r11*(x4251*x4251)))+(((-4.428771674e-5)*cj2*r10*r11*sj2*(IKcos(j8))*(IKsin(j8))))+(((0.00281174)*cj2*npx*r00*(x4252*x4252)))+(((-1.0)*(py*py)*(r11*r11)))+(((-4.428771674e-5)*r01*r10*(cj2*cj2)*(IKcos(j8))*(IKsin(j8))))+(((-0.015751)*npx*r01*sj2*(IKcos(j8))*(IKsin(j8))))+(((-0.015751)*npy*r01*sj2*(x4253*x4253)))+(((-0.0001200940595862)*cj2*r01*r10*sj2*(IKcos(j8))*(IKsin(j8))))+(((pz*pz)*(r21*r21)))+(((-0.00281174)*cj2*npy*r01*(x4254*x4254)))+(((0.0001200940595862)*r10*r11*(cj2*cj2)*(IKcos(j8))*(IKsin(j8))))+(((-0.00281174)*cj2*npx*r01*(IKcos(j8))*(IKsin(j8))))+(((-0.0001200940595862)*r00*r01*(cj2*cj2)*(IKcos(j8))*(IKsin(j8))))+(((-2.214385837e-5)*cj2*sj2*(r01*r01)))+(((-4.428771674e-5)*r01*r11*(cj2*cj2)*(x4255*x4255)))+(((0.0001200940595862)*cj2*r00*r10*sj2*(x4256*x4256)))+(((-2.214385837e-5)*cj2*sj2*(r00*r00)*(x4257*x4257)))+(((-2.214385837e-5)*cj2*sj2*(r11*r11)*(x4258*x4258)))+(((2.214385837e-5)*cj2*sj2*(r11*r11)))+(((2.214385837e-5)*cj2*sj2*(r01*r01)*(x4259*x4259)))+(((3.9529409138e-6)*r10*r11*(IKcos(j8))*(IKsin(j8))))+(((1.9764704569e-6)*(r11*r11)*(x4260*x4260)))+(((py*py)*(r11*r11)*(x4261*x4261)))+(((0.015751)*npy*r01*sj2))+(((2.0)*npy*pz*r21*(x4262*x4262)))+(((-1.0)*(px*px)*(r01*r01)))+(((-6.00470297931e-5)*(cj2*cj2)*(r11*r11))));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

rotationfunction0(solutions);
}
}

}

}
    }

}

}
}
}

}

}

} else
{
{
IkReal j2array[1], cj2array[1], sj2array[1];
bool j2valid[1]={false};
_nj2 = 1;
IkReal x4263=(pp*r01);
IkReal x4264=(npy*py);
IkReal x4265=(pp*r11);
IkReal x4266=(npy*px);
CheckValue<IkReal> x4267 = IKatan2WithCheck(IkReal(((((0.00281174)*x4266))+(((0.0078755)*x4265))+(((5.04031769302191e-7)*r11))+(((-0.015751)*x4264))+(((-0.00140587)*x4263))+(((-8.99756388177095e-8)*r01)))),IkReal(((((0.0078755)*x4263))+(((0.00140587)*x4265))+(((-0.015751)*x4266))+(((5.04031769302191e-7)*r01))+(((8.99756388177095e-8)*r11))+(((-0.00281174)*x4264)))),IKFAST_ATAN2_MAGTHRESH);
if(!x4267.valid){
continue;
}
CheckValue<IkReal> x4268=IKPowWithIntegerCheck(IKsign(rxp1_2),-1);
if(!x4268.valid){
continue;
}
j2array[0]=((-1.5707963267949)+(x4267.value)+(((-1.5707963267949)*(x4268.value))));
sj2array[0]=IKsin(j2array[0]);
cj2array[0]=IKcos(j2array[0]);
if( j2array[0] > IKPI )
{
    j2array[0]-=IK2PI;
}
else if( j2array[0] < -IKPI )
{    j2array[0]+=IK2PI;
}
j2valid[0] = true;
for(int ij2 = 0; ij2 < 1; ++ij2)
{
if( !j2valid[ij2] )
{
    continue;
}
_ij2[0] = ij2; _ij2[1] = -1;
for(int iij2 = ij2+1; iij2 < 1; ++iij2)
{
if( j2valid[iij2] && IKabs(cj2array[ij2]-cj2array[iij2]) < IKFAST_SOLUTION_THRESH && IKabs(sj2array[ij2]-sj2array[iij2]) < IKFAST_SOLUTION_THRESH )
{
    j2valid[iij2]=false; _ij2[1] = iij2; break; 
}
}
j2 = j2array[ij2]; cj2 = cj2array[ij2]; sj2 = sj2array[ij2];
{
IkReal evalcond[4];
IkReal x4269=IKcos(j2);
IkReal x4270=IKsin(j2);
IkReal x4271=((0.00140587)*x4270);
IkReal x4272=((0.00140587)*x4269);
IkReal x4273=((0.0078755)*x4269);
IkReal x4274=((0.0078755)*x4270);
evalcond[0]=((((-1.0)*r10*x4271))+npx+(((-1.0)*r00*x4272))+(((-1.0)*r00*x4274))+((r10*x4273)));
evalcond[1]=((((-1.0)*r11*x4271))+((r11*x4273))+(((-1.0)*r01*x4272))+(((-1.0)*r01*x4274))+npy);
evalcond[2]=((-6.39999707069e-5)+(((-0.015751)*py*x4269))+(((0.015751)*px*x4270))+(((-1.0)*pp))+(((0.00281174)*px*x4269))+(((0.00281174)*py*x4270)));
evalcond[3]=((((-1.0)*r12*x4271))+((px*r02))+((r12*x4273))+(((-1.0)*r02*x4274))+(((-1.0)*r02*x4272))+((py*r12)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j7eval[1];
r22=0;
npz=(((px*r02))+((py*r12)));
rxp2_0=(pz*r12);
rxp2_1=((-1.0)*pz*r02);
j7eval[0]=1.0;
if( IKabs(j7eval[0]) < 0.0000000100000000  )
{
{
IkReal j8eval[1];
r22=0;
npz=(((px*r02))+((py*r12)));
rxp2_0=(pz*r12);
rxp2_1=((-1.0)*pz*r02);
IkReal x4275=((0.0078755)*cj2);
IkReal x4276=((0.0078755)*sj2);
IkReal x4277=((0.00140587)*sj2);
IkReal x4278=((0.00140587)*cj2);
j8eval[0]=((IKabs(((((-1.0)*r10*x4277))+npx+(((-1.0)*r00*x4276))+(((-1.0)*r00*x4278))+((r10*x4275)))))+(IKabs(((((-1.0)*r11*x4275))+((r11*x4277))+(((-1.0)*npy))+((r01*x4278))+((r01*x4276))))));
if( IKabs(j8eval[0]) < 0.0000010000000000  )
{
continue; // no branches [j7, j8]

} else
{
{
IkReal j8array[2], cj8array[2], sj8array[2];
bool j8valid[2]={false};
_nj8 = 2;
IkReal x4279=((0.0078755)*cj2);
IkReal x4280=((0.0078755)*sj2);
IkReal x4281=((0.00140587)*sj2);
IkReal x4282=((0.00140587)*cj2);
CheckValue<IkReal> x4284 = IKatan2WithCheck(IkReal(((((-1.0)*r10*x4281))+(((-1.0)*r00*x4282))+(((-1.0)*r00*x4280))+npx+((r10*x4279)))),IkReal(((((-1.0)*r11*x4279))+((r11*x4281))+(((-1.0)*npy))+((r01*x4282))+((r01*x4280)))),IKFAST_ATAN2_MAGTHRESH);
if(!x4284.valid){
continue;
}
IkReal x4283=x4284.value;
j8array[0]=((-1.0)*x4283);
sj8array[0]=IKsin(j8array[0]);
cj8array[0]=IKcos(j8array[0]);
j8array[1]=((3.14159265358979)+(((-1.0)*x4283)));
sj8array[1]=IKsin(j8array[1]);
cj8array[1]=IKcos(j8array[1]);
if( j8array[0] > IKPI )
{
    j8array[0]-=IK2PI;
}
else if( j8array[0] < -IKPI )
{    j8array[0]+=IK2PI;
}
j8valid[0] = true;
if( j8array[1] > IKPI )
{
    j8array[1]-=IK2PI;
}
else if( j8array[1] < -IKPI )
{    j8array[1]+=IK2PI;
}
j8valid[1] = true;
for(int ij8 = 0; ij8 < 2; ++ij8)
{
if( !j8valid[ij8] )
{
    continue;
}
_ij8[0] = ij8; _ij8[1] = -1;
for(int iij8 = ij8+1; iij8 < 2; ++iij8)
{
if( j8valid[iij8] && IKabs(cj8array[ij8]-cj8array[iij8]) < IKFAST_SOLUTION_THRESH && IKabs(sj8array[ij8]-sj8array[iij8]) < IKFAST_SOLUTION_THRESH )
{
    j8valid[iij8]=false; _ij8[1] = iij8; break; 
}
}
j8 = j8array[ij8]; cj8 = cj8array[ij8]; sj8 = sj8array[ij8];
{
IkReal evalcond[1];
IkReal x4285=IKcos(j8);
IkReal x4286=IKcos(j8);
IkReal x4287=IKcos(j8);
IkReal x4288=IKcos(j8);
IkReal x4289=IKcos(j8);
IkReal x4290=IKcos(j8);
IkReal x4291=IKcos(j8);
IkReal x4292=IKcos(j8);
IkReal x4293=IKcos(j8);
IkReal x4294=IKcos(j8);
IkReal x4295=IKcos(j8);
IkReal x4296=IKcos(j8);
IkReal x4297=IKcos(j8);
IkReal x4298=IKcos(j8);
IkReal x4299=IKcos(j8);
IkReal x4300=IKcos(j8);
IkReal x4301=IKcos(j8);
IkReal x4302=IKcos(j8);
IkReal x4303=IKcos(j8);
IkReal x4304=IKcos(j8);
IkReal x4305=IKcos(j8);
IkReal x4306=IKcos(j8);
IkReal x4307=IKcos(j8);
IkReal x4308=IKcos(j8);
IkReal x4309=IKcos(j8);
IkReal x4310=IKcos(j8);
IkReal x4311=IKcos(j8);
IkReal x4312=IKcos(j8);
IkReal x4313=IKcos(j8);
IkReal x4314=IKcos(j8);
IkReal x4315=IKcos(j8);
IkReal x4316=IKcos(j8);
IkReal x4317=IKcos(j8);
IkReal x4318=IKcos(j8);
IkReal x4319=IKcos(j8);
IkReal x4320=IKcos(j8);
evalcond[0]=((0.0841)+(((-0.0001200940595862)*cj2*r00*r11*sj2*(IKcos(j8))*(IKsin(j8))))+(((-0.00281174)*npx*r11*sj2*(IKcos(j8))*(IKsin(j8))))+(((0.00281174)*npy*r11*sj2))+(((2.0)*npx*npy*(IKcos(j8))*(IKsin(j8))))+(((-1.9764704569e-6)*(r10*r10)*(x4285*x4285)))+(((0.015751)*cj2*npy*r11*(x4286*x4286)))+(((2.0)*px*py*r01*r11*(x4287*x4287)))+(((pz*pz)*(r20*r20)*(x4288*x4288)))+(((6.202350025e-5)*(r01*r01)*(x4289*x4289)))+(((-6.00470297931e-5)*(cj2*cj2)*(r10*r10)*(x4290*x4290)))+(((0.0001200940595862)*cj2*r01*r11*sj2))+(((-2.214385837e-5)*r00*r10*(x4291*x4291)))+(((-2.0)*px*py*r00*r10*(x4292*x4292)))+(((0.015751)*cj2*npx*r11*(IKcos(j8))*(IKsin(j8))))+(((-6.202350025e-5)*(r01*r01)))+(((-0.00281174)*npy*r11*sj2*(x4293*x4293)))+(((-1.0)*(px*px)*(r00*r00)*(x4294*x4294)))+(((-1.0)*(py*py)*(r10*r10)*(x4295*x4295)))+(((-0.0001200940595862)*cj2*r01*r11*sj2*(x4296*x4296)))+(((-6.00470297931e-5)*(cj2*cj2)*(r01*r01)*(x4297*x4297)))+(((-0.00281174)*cj2*npy*r00*(IKcos(j8))*(IKsin(j8))))+(((6.00470297931e-5)*(cj2*cj2)*(r01*r01)))+(((-2.0)*px*py*r01*r11))+(((4.428771674e-5)*r01*r11*(cj2*cj2)))+(((-0.015751)*cj2*npy*r11))+(((0.015751)*npx*r00*sj2*(x4298*x4298)))+(((4.428771674e-5)*cj2*r00*r01*sj2*(IKcos(j8))*(IKsin(j8))))+(((0.00281174)*cj2*npy*r01))+(((-1.9764704569e-6)*(r11*r11)))+(((2.214385837e-5)*r00*r11*(IKcos(j8))*(IKsin(j8))))+(((4.428771674e-5)*r00*r10*(cj2*cj2)*(x4299*x4299)))+(((0.015751)*cj2*npy*r10*(IKcos(j8))*(IKsin(j8))))+(((0.0001240470005)*r00*r01*(IKcos(j8))*(IKsin(j8))))+(((6.00470297931e-5)*(cj2*cj2)*(r00*r00)*(x4300*x4300)))+(((-0.00281174)*npy*r10*sj2*(IKcos(j8))*(IKsin(j8))))+(((-1.0)*(pz*pz)*(r21*r21)*(x4301*x4301)))+(((-4.428771674e-5)*r00*r11*(cj2*cj2)*(IKcos(j8))*(IKsin(j8))))+(((2.214385837e-5)*cj2*sj2*(r10*r10)*(x4302*x4302)))+(((2.214385837e-5)*r01*r10*(IKcos(j8))*(IKsin(j8))))+(((-2.0)*npy*pz*r21))+(((6.00470297931e-5)*(cj2*cj2)*(r11*r11)*(x4303*x4303)))+(((-6.202350025e-5)*(r00*r00)*(x4304*x4304)))+(((0.00281174)*npx*r10*sj2*(x4305*x4305)))+(((-2.0)*npx*pz*r20*(x4306*x4306)))+(((-2.214385837e-5)*r01*r11))+(((-0.015751)*cj2*npx*r10*(x4307*x4307)))+(((-0.015751)*npy*r00*sj2*(IKcos(j8))*(IKsin(j8))))+(((px*px)*(r01*r01)*(x4308*x4308)))+(((2.214385837e-5)*r01*r11*(x4309*x4309)))+(((-4.428771674e-5)*cj2*r10*r11*sj2*(IKcos(j8))*(IKsin(j8))))+(((0.00281174)*cj2*npx*r00*(x4310*x4310)))+(((-1.0)*(py*py)*(r11*r11)))+(((-4.428771674e-5)*r01*r10*(cj2*cj2)*(IKcos(j8))*(IKsin(j8))))+(((-0.015751)*npx*r01*sj2*(IKcos(j8))*(IKsin(j8))))+(((-0.015751)*npy*r01*sj2*(x4311*x4311)))+(((-0.0001200940595862)*cj2*r01*r10*sj2*(IKcos(j8))*(IKsin(j8))))+(((pz*pz)*(r21*r21)))+(((-0.00281174)*cj2*npy*r01*(x4312*x4312)))+(((0.0001200940595862)*r10*r11*(cj2*cj2)*(IKcos(j8))*(IKsin(j8))))+(((-0.00281174)*cj2*npx*r01*(IKcos(j8))*(IKsin(j8))))+(((-0.0001200940595862)*r00*r01*(cj2*cj2)*(IKcos(j8))*(IKsin(j8))))+(((-2.214385837e-5)*cj2*sj2*(r01*r01)))+(((-4.428771674e-5)*r01*r11*(cj2*cj2)*(x4313*x4313)))+(((0.0001200940595862)*cj2*r00*r10*sj2*(x4314*x4314)))+(((-2.214385837e-5)*cj2*sj2*(r00*r00)*(x4315*x4315)))+(((-2.214385837e-5)*cj2*sj2*(r11*r11)*(x4316*x4316)))+(((2.214385837e-5)*cj2*sj2*(r11*r11)))+(((2.214385837e-5)*cj2*sj2*(r01*r01)*(x4317*x4317)))+(((3.9529409138e-6)*r10*r11*(IKcos(j8))*(IKsin(j8))))+(((1.9764704569e-6)*(r11*r11)*(x4318*x4318)))+(((py*py)*(r11*r11)*(x4319*x4319)))+(((0.015751)*npy*r01*sj2))+(((2.0)*npy*pz*r21*(x4320*x4320)))+(((-1.0)*(px*px)*(r01*r01)))+(((-6.00470297931e-5)*(cj2*cj2)*(r11*r11))));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j7eval[1];
r22=0;
npz=(((px*r02))+((py*r12)));
rxp2_0=(pz*r12);
rxp2_1=((-1.0)*pz*r02);
j7eval[0]=1.0;
if( IKabs(j7eval[0]) < 0.0000000100000000  )
{
continue; // no branches [j7]

} else
{
IkReal op[2+1], zeror[2];
int numroots;
op[0]=-1.0;
op[1]=0;
op[2]=1.0;
polyroots2(op,zeror,numroots);
IkReal j7array[2], cj7array[2], sj7array[2], tempj7array[1];
int numsolutions = 0;
for(int ij7 = 0; ij7 < numroots; ++ij7)
{
IkReal htj7 = zeror[ij7];
tempj7array[0]=((2.0)*(atan(htj7)));
for(int kj7 = 0; kj7 < 1; ++kj7)
{
j7array[numsolutions] = tempj7array[kj7];
if( j7array[numsolutions] > IKPI )
{
    j7array[numsolutions]-=IK2PI;
}
else if( j7array[numsolutions] < -IKPI )
{
    j7array[numsolutions]+=IK2PI;
}
sj7array[numsolutions] = IKsin(j7array[numsolutions]);
cj7array[numsolutions] = IKcos(j7array[numsolutions]);
numsolutions++;
}
}
bool j7valid[2]={true,true};
_nj7 = 2;
for(int ij7 = 0; ij7 < numsolutions; ++ij7)
    {
if( !j7valid[ij7] )
{
    continue;
}
    j7 = j7array[ij7]; cj7 = cj7array[ij7]; sj7 = sj7array[ij7];
htj7 = IKtan(j7/2);

_ij7[0] = ij7; _ij7[1] = -1;
for(int iij7 = ij7+1; iij7 < numsolutions; ++iij7)
{
if( j7valid[iij7] && IKabs(cj7array[ij7]-cj7array[iij7]) < IKFAST_SOLUTION_THRESH && IKabs(sj7array[ij7]-sj7array[iij7]) < IKFAST_SOLUTION_THRESH )
{
    j7valid[iij7]=false; _ij7[1] = iij7; break; 
}
}
rotationfunction0(solutions);
    }

}

}
}
}

}

}

} else
{
IkReal op[2+1], zeror[2];
int numroots;
op[0]=-1.0;
op[1]=0;
op[2]=1.0;
polyroots2(op,zeror,numroots);
IkReal j7array[2], cj7array[2], sj7array[2], tempj7array[1];
int numsolutions = 0;
for(int ij7 = 0; ij7 < numroots; ++ij7)
{
IkReal htj7 = zeror[ij7];
tempj7array[0]=((2.0)*(atan(htj7)));
for(int kj7 = 0; kj7 < 1; ++kj7)
{
j7array[numsolutions] = tempj7array[kj7];
if( j7array[numsolutions] > IKPI )
{
    j7array[numsolutions]-=IK2PI;
}
else if( j7array[numsolutions] < -IKPI )
{
    j7array[numsolutions]+=IK2PI;
}
sj7array[numsolutions] = IKsin(j7array[numsolutions]);
cj7array[numsolutions] = IKcos(j7array[numsolutions]);
numsolutions++;
}
}
bool j7valid[2]={true,true};
_nj7 = 2;
for(int ij7 = 0; ij7 < numsolutions; ++ij7)
    {
if( !j7valid[ij7] )
{
    continue;
}
    j7 = j7array[ij7]; cj7 = cj7array[ij7]; sj7 = sj7array[ij7];
htj7 = IKtan(j7/2);

_ij7[0] = ij7; _ij7[1] = -1;
for(int iij7 = ij7+1; iij7 < numsolutions; ++iij7)
{
if( j7valid[iij7] && IKabs(cj7array[ij7]-cj7array[iij7]) < IKFAST_SOLUTION_THRESH && IKabs(sj7array[ij7]-sj7array[iij7]) < IKFAST_SOLUTION_THRESH )
{
    j7valid[iij7]=false; _ij7[1] = iij7; break; 
}
}
{
IkReal j8eval[1];
r22=0;
npz=(((px*r02))+((py*r12)));
rxp2_0=(pz*r12);
rxp2_1=((-1.0)*pz*r02);
IkReal x4321=((0.0078755)*cj2);
IkReal x4322=((0.0078755)*sj2);
IkReal x4323=((0.00140587)*sj2);
IkReal x4324=((0.00140587)*cj2);
j8eval[0]=((IKabs(((((-1.0)*npy))+(((-1.0)*r11*x4321))+((r11*x4323))+((r01*x4324))+((r01*x4322)))))+(IKabs(((((-1.0)*r10*x4323))+(((-1.0)*r00*x4322))+(((-1.0)*r00*x4324))+npx+((r10*x4321))))));
if( IKabs(j8eval[0]) < 0.0000010000000000  )
{
continue; // no branches [j8]

} else
{
{
IkReal j8array[2], cj8array[2], sj8array[2];
bool j8valid[2]={false};
_nj8 = 2;
IkReal x4325=((0.0078755)*cj2);
IkReal x4326=((0.0078755)*sj2);
IkReal x4327=((0.00140587)*sj2);
IkReal x4328=((0.00140587)*cj2);
CheckValue<IkReal> x4330 = IKatan2WithCheck(IkReal(((((-1.0)*r10*x4327))+(((-1.0)*r00*x4328))+(((-1.0)*r00*x4326))+npx+((r10*x4325)))),IkReal(((((-1.0)*npy))+(((-1.0)*r11*x4325))+((r11*x4327))+((r01*x4328))+((r01*x4326)))),IKFAST_ATAN2_MAGTHRESH);
if(!x4330.valid){
continue;
}
IkReal x4329=x4330.value;
j8array[0]=((-1.0)*x4329);
sj8array[0]=IKsin(j8array[0]);
cj8array[0]=IKcos(j8array[0]);
j8array[1]=((3.14159265358979)+(((-1.0)*x4329)));
sj8array[1]=IKsin(j8array[1]);
cj8array[1]=IKcos(j8array[1]);
if( j8array[0] > IKPI )
{
    j8array[0]-=IK2PI;
}
else if( j8array[0] < -IKPI )
{    j8array[0]+=IK2PI;
}
j8valid[0] = true;
if( j8array[1] > IKPI )
{
    j8array[1]-=IK2PI;
}
else if( j8array[1] < -IKPI )
{    j8array[1]+=IK2PI;
}
j8valid[1] = true;
for(int ij8 = 0; ij8 < 2; ++ij8)
{
if( !j8valid[ij8] )
{
    continue;
}
_ij8[0] = ij8; _ij8[1] = -1;
for(int iij8 = ij8+1; iij8 < 2; ++iij8)
{
if( j8valid[iij8] && IKabs(cj8array[ij8]-cj8array[iij8]) < IKFAST_SOLUTION_THRESH && IKabs(sj8array[ij8]-sj8array[iij8]) < IKFAST_SOLUTION_THRESH )
{
    j8valid[iij8]=false; _ij8[1] = iij8; break; 
}
}
j8 = j8array[ij8]; cj8 = cj8array[ij8]; sj8 = sj8array[ij8];
{
IkReal evalcond[1];
IkReal x4331=IKcos(j8);
IkReal x4332=IKcos(j8);
IkReal x4333=IKcos(j8);
IkReal x4334=IKcos(j8);
IkReal x4335=IKcos(j8);
IkReal x4336=IKcos(j8);
IkReal x4337=IKcos(j8);
IkReal x4338=IKcos(j8);
IkReal x4339=IKcos(j8);
IkReal x4340=IKcos(j8);
IkReal x4341=IKcos(j8);
IkReal x4342=IKcos(j8);
IkReal x4343=IKcos(j8);
IkReal x4344=IKcos(j8);
IkReal x4345=IKcos(j8);
IkReal x4346=IKcos(j8);
IkReal x4347=IKcos(j8);
IkReal x4348=IKcos(j8);
IkReal x4349=IKcos(j8);
IkReal x4350=IKcos(j8);
IkReal x4351=IKcos(j8);
IkReal x4352=IKcos(j8);
IkReal x4353=IKcos(j8);
IkReal x4354=IKcos(j8);
IkReal x4355=IKcos(j8);
IkReal x4356=IKcos(j8);
IkReal x4357=IKcos(j8);
IkReal x4358=IKcos(j8);
IkReal x4359=IKcos(j8);
IkReal x4360=IKcos(j8);
IkReal x4361=IKcos(j8);
IkReal x4362=IKcos(j8);
IkReal x4363=IKcos(j8);
IkReal x4364=IKcos(j8);
IkReal x4365=IKcos(j8);
IkReal x4366=IKcos(j8);
evalcond[0]=((0.0841)+(((-0.0001200940595862)*cj2*r00*r11*sj2*(IKcos(j8))*(IKsin(j8))))+(((-0.00281174)*npx*r11*sj2*(IKcos(j8))*(IKsin(j8))))+(((0.00281174)*npy*r11*sj2))+(((2.0)*npx*npy*(IKcos(j8))*(IKsin(j8))))+(((-1.9764704569e-6)*(r10*r10)*(x4331*x4331)))+(((0.015751)*cj2*npy*r11*(x4332*x4332)))+(((2.0)*px*py*r01*r11*(x4333*x4333)))+(((pz*pz)*(r20*r20)*(x4334*x4334)))+(((6.202350025e-5)*(r01*r01)*(x4335*x4335)))+(((-6.00470297931e-5)*(cj2*cj2)*(r10*r10)*(x4336*x4336)))+(((0.0001200940595862)*cj2*r01*r11*sj2))+(((-2.214385837e-5)*r00*r10*(x4337*x4337)))+(((-2.0)*px*py*r00*r10*(x4338*x4338)))+(((0.015751)*cj2*npx*r11*(IKcos(j8))*(IKsin(j8))))+(((-6.202350025e-5)*(r01*r01)))+(((-0.00281174)*npy*r11*sj2*(x4339*x4339)))+(((-1.0)*(px*px)*(r00*r00)*(x4340*x4340)))+(((-1.0)*(py*py)*(r10*r10)*(x4341*x4341)))+(((-0.0001200940595862)*cj2*r01*r11*sj2*(x4342*x4342)))+(((-6.00470297931e-5)*(cj2*cj2)*(r01*r01)*(x4343*x4343)))+(((-0.00281174)*cj2*npy*r00*(IKcos(j8))*(IKsin(j8))))+(((6.00470297931e-5)*(cj2*cj2)*(r01*r01)))+(((-2.0)*px*py*r01*r11))+(((4.428771674e-5)*r01*r11*(cj2*cj2)))+(((-0.015751)*cj2*npy*r11))+(((0.015751)*npx*r00*sj2*(x4344*x4344)))+(((4.428771674e-5)*cj2*r00*r01*sj2*(IKcos(j8))*(IKsin(j8))))+(((0.00281174)*cj2*npy*r01))+(((-1.9764704569e-6)*(r11*r11)))+(((2.214385837e-5)*r00*r11*(IKcos(j8))*(IKsin(j8))))+(((4.428771674e-5)*r00*r10*(cj2*cj2)*(x4345*x4345)))+(((0.015751)*cj2*npy*r10*(IKcos(j8))*(IKsin(j8))))+(((0.0001240470005)*r00*r01*(IKcos(j8))*(IKsin(j8))))+(((6.00470297931e-5)*(cj2*cj2)*(r00*r00)*(x4346*x4346)))+(((-0.00281174)*npy*r10*sj2*(IKcos(j8))*(IKsin(j8))))+(((-1.0)*(pz*pz)*(r21*r21)*(x4347*x4347)))+(((-4.428771674e-5)*r00*r11*(cj2*cj2)*(IKcos(j8))*(IKsin(j8))))+(((2.214385837e-5)*cj2*sj2*(r10*r10)*(x4348*x4348)))+(((2.214385837e-5)*r01*r10*(IKcos(j8))*(IKsin(j8))))+(((-2.0)*npy*pz*r21))+(((6.00470297931e-5)*(cj2*cj2)*(r11*r11)*(x4349*x4349)))+(((-6.202350025e-5)*(r00*r00)*(x4350*x4350)))+(((0.00281174)*npx*r10*sj2*(x4351*x4351)))+(((-2.0)*npx*pz*r20*(x4352*x4352)))+(((-2.214385837e-5)*r01*r11))+(((-0.015751)*cj2*npx*r10*(x4353*x4353)))+(((-0.015751)*npy*r00*sj2*(IKcos(j8))*(IKsin(j8))))+(((px*px)*(r01*r01)*(x4354*x4354)))+(((2.214385837e-5)*r01*r11*(x4355*x4355)))+(((-4.428771674e-5)*cj2*r10*r11*sj2*(IKcos(j8))*(IKsin(j8))))+(((0.00281174)*cj2*npx*r00*(x4356*x4356)))+(((-1.0)*(py*py)*(r11*r11)))+(((-4.428771674e-5)*r01*r10*(cj2*cj2)*(IKcos(j8))*(IKsin(j8))))+(((-0.015751)*npx*r01*sj2*(IKcos(j8))*(IKsin(j8))))+(((-0.015751)*npy*r01*sj2*(x4357*x4357)))+(((-0.0001200940595862)*cj2*r01*r10*sj2*(IKcos(j8))*(IKsin(j8))))+(((pz*pz)*(r21*r21)))+(((-0.00281174)*cj2*npy*r01*(x4358*x4358)))+(((0.0001200940595862)*r10*r11*(cj2*cj2)*(IKcos(j8))*(IKsin(j8))))+(((-0.00281174)*cj2*npx*r01*(IKcos(j8))*(IKsin(j8))))+(((-0.0001200940595862)*r00*r01*(cj2*cj2)*(IKcos(j8))*(IKsin(j8))))+(((-2.214385837e-5)*cj2*sj2*(r01*r01)))+(((-4.428771674e-5)*r01*r11*(cj2*cj2)*(x4359*x4359)))+(((0.0001200940595862)*cj2*r00*r10*sj2*(x4360*x4360)))+(((-2.214385837e-5)*cj2*sj2*(r00*r00)*(x4361*x4361)))+(((-2.214385837e-5)*cj2*sj2*(r11*r11)*(x4362*x4362)))+(((2.214385837e-5)*cj2*sj2*(r11*r11)))+(((2.214385837e-5)*cj2*sj2*(r01*r01)*(x4363*x4363)))+(((3.9529409138e-6)*r10*r11*(IKcos(j8))*(IKsin(j8))))+(((1.9764704569e-6)*(r11*r11)*(x4364*x4364)))+(((py*py)*(r11*r11)*(x4365*x4365)))+(((0.015751)*npy*r01*sj2))+(((2.0)*npy*pz*r21*(x4366*x4366)))+(((-1.0)*(px*px)*(r01*r01)))+(((-6.00470297931e-5)*(cj2*cj2)*(r11*r11))));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

rotationfunction0(solutions);
}
}

}

}
    }

}

}
}
}

}

}

} else
{
{
IkReal j2array[1], cj2array[1], sj2array[1];
bool j2valid[1]={false};
_nj2 = 1;
IkReal x4367=(npx*px);
IkReal x4368=(npx*py);
IkReal x4369=(pp*r00);
IkReal x4370=(pp*r10);
CheckValue<IkReal> x4371 = IKatan2WithCheck(IkReal(((((5.04031769302191e-7)*r10))+(((-0.00140587)*x4369))+(((0.0078755)*x4370))+(((0.00281174)*x4367))+(((-0.015751)*x4368))+(((-8.99756388177095e-8)*r00)))),IkReal(((((5.04031769302191e-7)*r00))+(((8.99756388177095e-8)*r10))+(((0.0078755)*x4369))+(((-0.00281174)*x4368))+(((0.00140587)*x4370))+(((-0.015751)*x4367)))),IKFAST_ATAN2_MAGTHRESH);
if(!x4371.valid){
continue;
}
CheckValue<IkReal> x4372=IKPowWithIntegerCheck(IKsign(rxp0_2),-1);
if(!x4372.valid){
continue;
}
j2array[0]=((-1.5707963267949)+(x4371.value)+(((-1.5707963267949)*(x4372.value))));
sj2array[0]=IKsin(j2array[0]);
cj2array[0]=IKcos(j2array[0]);
if( j2array[0] > IKPI )
{
    j2array[0]-=IK2PI;
}
else if( j2array[0] < -IKPI )
{    j2array[0]+=IK2PI;
}
j2valid[0] = true;
for(int ij2 = 0; ij2 < 1; ++ij2)
{
if( !j2valid[ij2] )
{
    continue;
}
_ij2[0] = ij2; _ij2[1] = -1;
for(int iij2 = ij2+1; iij2 < 1; ++iij2)
{
if( j2valid[iij2] && IKabs(cj2array[ij2]-cj2array[iij2]) < IKFAST_SOLUTION_THRESH && IKabs(sj2array[ij2]-sj2array[iij2]) < IKFAST_SOLUTION_THRESH )
{
    j2valid[iij2]=false; _ij2[1] = iij2; break; 
}
}
j2 = j2array[ij2]; cj2 = cj2array[ij2]; sj2 = sj2array[ij2];
{
IkReal evalcond[4];
IkReal x4373=IKcos(j2);
IkReal x4374=IKsin(j2);
IkReal x4375=((0.00140587)*x4374);
IkReal x4376=((0.00140587)*x4373);
IkReal x4377=((0.0078755)*x4373);
IkReal x4378=((0.0078755)*x4374);
evalcond[0]=(((r10*x4377))+npx+(((-1.0)*r10*x4375))+(((-1.0)*r00*x4376))+(((-1.0)*r00*x4378)));
evalcond[1]=(npy+((r11*x4377))+(((-1.0)*r01*x4376))+(((-1.0)*r01*x4378))+(((-1.0)*r11*x4375)));
evalcond[2]=((-6.39999707069e-5)+(((-0.015751)*py*x4373))+(((-1.0)*pp))+(((0.00281174)*py*x4374))+(((0.015751)*px*x4374))+(((0.00281174)*px*x4373)));
evalcond[3]=(((px*r02))+((r12*x4377))+(((-1.0)*r02*x4378))+(((-1.0)*r02*x4376))+((py*r12))+(((-1.0)*r12*x4375)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j7eval[1];
r22=0;
npz=(((px*r02))+((py*r12)));
rxp2_0=(pz*r12);
rxp2_1=((-1.0)*pz*r02);
j7eval[0]=1.0;
if( IKabs(j7eval[0]) < 0.0000000100000000  )
{
{
IkReal j8eval[1];
r22=0;
npz=(((px*r02))+((py*r12)));
rxp2_0=(pz*r12);
rxp2_1=((-1.0)*pz*r02);
IkReal x4379=((0.0078755)*cj2);
IkReal x4380=((0.0078755)*sj2);
IkReal x4381=((0.00140587)*sj2);
IkReal x4382=((0.00140587)*cj2);
j8eval[0]=((IKabs((((r10*x4379))+(((-1.0)*r00*x4382))+(((-1.0)*r00*x4380))+npx+(((-1.0)*r10*x4381)))))+(IKabs(((((-1.0)*npy))+(((-1.0)*r11*x4379))+((r11*x4381))+((r01*x4382))+((r01*x4380))))));
if( IKabs(j8eval[0]) < 0.0000010000000000  )
{
continue; // no branches [j7, j8]

} else
{
{
IkReal j8array[2], cj8array[2], sj8array[2];
bool j8valid[2]={false};
_nj8 = 2;
IkReal x4383=((0.0078755)*cj2);
IkReal x4384=((0.0078755)*sj2);
IkReal x4385=((0.00140587)*sj2);
IkReal x4386=((0.00140587)*cj2);
CheckValue<IkReal> x4388 = IKatan2WithCheck(IkReal(((((-1.0)*r00*x4386))+(((-1.0)*r00*x4384))+npx+(((-1.0)*r10*x4385))+((r10*x4383)))),IkReal(((((-1.0)*r11*x4383))+(((-1.0)*npy))+((r11*x4385))+((r01*x4386))+((r01*x4384)))),IKFAST_ATAN2_MAGTHRESH);
if(!x4388.valid){
continue;
}
IkReal x4387=x4388.value;
j8array[0]=((-1.0)*x4387);
sj8array[0]=IKsin(j8array[0]);
cj8array[0]=IKcos(j8array[0]);
j8array[1]=((3.14159265358979)+(((-1.0)*x4387)));
sj8array[1]=IKsin(j8array[1]);
cj8array[1]=IKcos(j8array[1]);
if( j8array[0] > IKPI )
{
    j8array[0]-=IK2PI;
}
else if( j8array[0] < -IKPI )
{    j8array[0]+=IK2PI;
}
j8valid[0] = true;
if( j8array[1] > IKPI )
{
    j8array[1]-=IK2PI;
}
else if( j8array[1] < -IKPI )
{    j8array[1]+=IK2PI;
}
j8valid[1] = true;
for(int ij8 = 0; ij8 < 2; ++ij8)
{
if( !j8valid[ij8] )
{
    continue;
}
_ij8[0] = ij8; _ij8[1] = -1;
for(int iij8 = ij8+1; iij8 < 2; ++iij8)
{
if( j8valid[iij8] && IKabs(cj8array[ij8]-cj8array[iij8]) < IKFAST_SOLUTION_THRESH && IKabs(sj8array[ij8]-sj8array[iij8]) < IKFAST_SOLUTION_THRESH )
{
    j8valid[iij8]=false; _ij8[1] = iij8; break; 
}
}
j8 = j8array[ij8]; cj8 = cj8array[ij8]; sj8 = sj8array[ij8];
{
IkReal evalcond[1];
IkReal x4389=IKcos(j8);
IkReal x4390=IKcos(j8);
IkReal x4391=IKcos(j8);
IkReal x4392=IKcos(j8);
IkReal x4393=IKcos(j8);
IkReal x4394=IKcos(j8);
IkReal x4395=IKcos(j8);
IkReal x4396=IKcos(j8);
IkReal x4397=IKcos(j8);
IkReal x4398=IKcos(j8);
IkReal x4399=IKcos(j8);
IkReal x4400=IKcos(j8);
IkReal x4401=IKcos(j8);
IkReal x4402=IKcos(j8);
IkReal x4403=IKcos(j8);
IkReal x4404=IKcos(j8);
IkReal x4405=IKcos(j8);
IkReal x4406=IKcos(j8);
IkReal x4407=IKcos(j8);
IkReal x4408=IKcos(j8);
IkReal x4409=IKcos(j8);
IkReal x4410=IKcos(j8);
IkReal x4411=IKcos(j8);
IkReal x4412=IKcos(j8);
IkReal x4413=IKcos(j8);
IkReal x4414=IKcos(j8);
IkReal x4415=IKcos(j8);
IkReal x4416=IKcos(j8);
IkReal x4417=IKcos(j8);
IkReal x4418=IKcos(j8);
IkReal x4419=IKcos(j8);
IkReal x4420=IKcos(j8);
IkReal x4421=IKcos(j8);
IkReal x4422=IKcos(j8);
IkReal x4423=IKcos(j8);
IkReal x4424=IKcos(j8);
evalcond[0]=((0.0841)+(((-0.0001200940595862)*cj2*r00*r11*sj2*(IKcos(j8))*(IKsin(j8))))+(((-0.00281174)*npx*r11*sj2*(IKcos(j8))*(IKsin(j8))))+(((0.00281174)*npy*r11*sj2))+(((2.0)*npx*npy*(IKcos(j8))*(IKsin(j8))))+(((-1.9764704569e-6)*(r10*r10)*(x4389*x4389)))+(((0.015751)*cj2*npy*r11*(x4390*x4390)))+(((2.0)*px*py*r01*r11*(x4391*x4391)))+(((pz*pz)*(r20*r20)*(x4392*x4392)))+(((6.202350025e-5)*(r01*r01)*(x4393*x4393)))+(((-6.00470297931e-5)*(cj2*cj2)*(r10*r10)*(x4394*x4394)))+(((0.0001200940595862)*cj2*r01*r11*sj2))+(((-2.214385837e-5)*r00*r10*(x4395*x4395)))+(((-2.0)*px*py*r00*r10*(x4396*x4396)))+(((0.015751)*cj2*npx*r11*(IKcos(j8))*(IKsin(j8))))+(((-6.202350025e-5)*(r01*r01)))+(((-0.00281174)*npy*r11*sj2*(x4397*x4397)))+(((-1.0)*(px*px)*(r00*r00)*(x4398*x4398)))+(((-1.0)*(py*py)*(r10*r10)*(x4399*x4399)))+(((-0.0001200940595862)*cj2*r01*r11*sj2*(x4400*x4400)))+(((-6.00470297931e-5)*(cj2*cj2)*(r01*r01)*(x4401*x4401)))+(((-0.00281174)*cj2*npy*r00*(IKcos(j8))*(IKsin(j8))))+(((6.00470297931e-5)*(cj2*cj2)*(r01*r01)))+(((-2.0)*px*py*r01*r11))+(((4.428771674e-5)*r01*r11*(cj2*cj2)))+(((-0.015751)*cj2*npy*r11))+(((0.015751)*npx*r00*sj2*(x4402*x4402)))+(((4.428771674e-5)*cj2*r00*r01*sj2*(IKcos(j8))*(IKsin(j8))))+(((0.00281174)*cj2*npy*r01))+(((-1.9764704569e-6)*(r11*r11)))+(((2.214385837e-5)*r00*r11*(IKcos(j8))*(IKsin(j8))))+(((4.428771674e-5)*r00*r10*(cj2*cj2)*(x4403*x4403)))+(((0.015751)*cj2*npy*r10*(IKcos(j8))*(IKsin(j8))))+(((0.0001240470005)*r00*r01*(IKcos(j8))*(IKsin(j8))))+(((6.00470297931e-5)*(cj2*cj2)*(r00*r00)*(x4404*x4404)))+(((-0.00281174)*npy*r10*sj2*(IKcos(j8))*(IKsin(j8))))+(((-1.0)*(pz*pz)*(r21*r21)*(x4405*x4405)))+(((-4.428771674e-5)*r00*r11*(cj2*cj2)*(IKcos(j8))*(IKsin(j8))))+(((2.214385837e-5)*cj2*sj2*(r10*r10)*(x4406*x4406)))+(((2.214385837e-5)*r01*r10*(IKcos(j8))*(IKsin(j8))))+(((-2.0)*npy*pz*r21))+(((6.00470297931e-5)*(cj2*cj2)*(r11*r11)*(x4407*x4407)))+(((-6.202350025e-5)*(r00*r00)*(x4408*x4408)))+(((0.00281174)*npx*r10*sj2*(x4409*x4409)))+(((-2.0)*npx*pz*r20*(x4410*x4410)))+(((-2.214385837e-5)*r01*r11))+(((-0.015751)*cj2*npx*r10*(x4411*x4411)))+(((-0.015751)*npy*r00*sj2*(IKcos(j8))*(IKsin(j8))))+(((px*px)*(r01*r01)*(x4412*x4412)))+(((2.214385837e-5)*r01*r11*(x4413*x4413)))+(((-4.428771674e-5)*cj2*r10*r11*sj2*(IKcos(j8))*(IKsin(j8))))+(((0.00281174)*cj2*npx*r00*(x4414*x4414)))+(((-1.0)*(py*py)*(r11*r11)))+(((-4.428771674e-5)*r01*r10*(cj2*cj2)*(IKcos(j8))*(IKsin(j8))))+(((-0.015751)*npx*r01*sj2*(IKcos(j8))*(IKsin(j8))))+(((-0.015751)*npy*r01*sj2*(x4415*x4415)))+(((-0.0001200940595862)*cj2*r01*r10*sj2*(IKcos(j8))*(IKsin(j8))))+(((pz*pz)*(r21*r21)))+(((-0.00281174)*cj2*npy*r01*(x4416*x4416)))+(((0.0001200940595862)*r10*r11*(cj2*cj2)*(IKcos(j8))*(IKsin(j8))))+(((-0.00281174)*cj2*npx*r01*(IKcos(j8))*(IKsin(j8))))+(((-0.0001200940595862)*r00*r01*(cj2*cj2)*(IKcos(j8))*(IKsin(j8))))+(((-2.214385837e-5)*cj2*sj2*(r01*r01)))+(((-4.428771674e-5)*r01*r11*(cj2*cj2)*(x4417*x4417)))+(((0.0001200940595862)*cj2*r00*r10*sj2*(x4418*x4418)))+(((-2.214385837e-5)*cj2*sj2*(r00*r00)*(x4419*x4419)))+(((-2.214385837e-5)*cj2*sj2*(r11*r11)*(x4420*x4420)))+(((2.214385837e-5)*cj2*sj2*(r11*r11)))+(((2.214385837e-5)*cj2*sj2*(r01*r01)*(x4421*x4421)))+(((3.9529409138e-6)*r10*r11*(IKcos(j8))*(IKsin(j8))))+(((1.9764704569e-6)*(r11*r11)*(x4422*x4422)))+(((py*py)*(r11*r11)*(x4423*x4423)))+(((0.015751)*npy*r01*sj2))+(((2.0)*npy*pz*r21*(x4424*x4424)))+(((-1.0)*(px*px)*(r01*r01)))+(((-6.00470297931e-5)*(cj2*cj2)*(r11*r11))));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j7eval[1];
r22=0;
npz=(((px*r02))+((py*r12)));
rxp2_0=(pz*r12);
rxp2_1=((-1.0)*pz*r02);
j7eval[0]=1.0;
if( IKabs(j7eval[0]) < 0.0000000100000000  )
{
continue; // no branches [j7]

} else
{
IkReal op[2+1], zeror[2];
int numroots;
op[0]=-1.0;
op[1]=0;
op[2]=1.0;
polyroots2(op,zeror,numroots);
IkReal j7array[2], cj7array[2], sj7array[2], tempj7array[1];
int numsolutions = 0;
for(int ij7 = 0; ij7 < numroots; ++ij7)
{
IkReal htj7 = zeror[ij7];
tempj7array[0]=((2.0)*(atan(htj7)));
for(int kj7 = 0; kj7 < 1; ++kj7)
{
j7array[numsolutions] = tempj7array[kj7];
if( j7array[numsolutions] > IKPI )
{
    j7array[numsolutions]-=IK2PI;
}
else if( j7array[numsolutions] < -IKPI )
{
    j7array[numsolutions]+=IK2PI;
}
sj7array[numsolutions] = IKsin(j7array[numsolutions]);
cj7array[numsolutions] = IKcos(j7array[numsolutions]);
numsolutions++;
}
}
bool j7valid[2]={true,true};
_nj7 = 2;
for(int ij7 = 0; ij7 < numsolutions; ++ij7)
    {
if( !j7valid[ij7] )
{
    continue;
}
    j7 = j7array[ij7]; cj7 = cj7array[ij7]; sj7 = sj7array[ij7];
htj7 = IKtan(j7/2);

_ij7[0] = ij7; _ij7[1] = -1;
for(int iij7 = ij7+1; iij7 < numsolutions; ++iij7)
{
if( j7valid[iij7] && IKabs(cj7array[ij7]-cj7array[iij7]) < IKFAST_SOLUTION_THRESH && IKabs(sj7array[ij7]-sj7array[iij7]) < IKFAST_SOLUTION_THRESH )
{
    j7valid[iij7]=false; _ij7[1] = iij7; break; 
}
}
rotationfunction0(solutions);
    }

}

}
}
}

}

}

} else
{
IkReal op[2+1], zeror[2];
int numroots;
op[0]=-1.0;
op[1]=0;
op[2]=1.0;
polyroots2(op,zeror,numroots);
IkReal j7array[2], cj7array[2], sj7array[2], tempj7array[1];
int numsolutions = 0;
for(int ij7 = 0; ij7 < numroots; ++ij7)
{
IkReal htj7 = zeror[ij7];
tempj7array[0]=((2.0)*(atan(htj7)));
for(int kj7 = 0; kj7 < 1; ++kj7)
{
j7array[numsolutions] = tempj7array[kj7];
if( j7array[numsolutions] > IKPI )
{
    j7array[numsolutions]-=IK2PI;
}
else if( j7array[numsolutions] < -IKPI )
{
    j7array[numsolutions]+=IK2PI;
}
sj7array[numsolutions] = IKsin(j7array[numsolutions]);
cj7array[numsolutions] = IKcos(j7array[numsolutions]);
numsolutions++;
}
}
bool j7valid[2]={true,true};
_nj7 = 2;
for(int ij7 = 0; ij7 < numsolutions; ++ij7)
    {
if( !j7valid[ij7] )
{
    continue;
}
    j7 = j7array[ij7]; cj7 = cj7array[ij7]; sj7 = sj7array[ij7];
htj7 = IKtan(j7/2);

_ij7[0] = ij7; _ij7[1] = -1;
for(int iij7 = ij7+1; iij7 < numsolutions; ++iij7)
{
if( j7valid[iij7] && IKabs(cj7array[ij7]-cj7array[iij7]) < IKFAST_SOLUTION_THRESH && IKabs(sj7array[ij7]-sj7array[iij7]) < IKFAST_SOLUTION_THRESH )
{
    j7valid[iij7]=false; _ij7[1] = iij7; break; 
}
}
{
IkReal j8eval[1];
r22=0;
npz=(((px*r02))+((py*r12)));
rxp2_0=(pz*r12);
rxp2_1=((-1.0)*pz*r02);
IkReal x4425=((0.0078755)*cj2);
IkReal x4426=((0.0078755)*sj2);
IkReal x4427=((0.00140587)*sj2);
IkReal x4428=((0.00140587)*cj2);
j8eval[0]=((IKabs((npx+(((-1.0)*r10*x4427))+((r10*x4425))+(((-1.0)*r00*x4428))+(((-1.0)*r00*x4426)))))+(IKabs(((((-1.0)*npy))+((r01*x4426))+((r01*x4428))+((r11*x4427))+(((-1.0)*r11*x4425))))));
if( IKabs(j8eval[0]) < 0.0000010000000000  )
{
continue; // no branches [j8]

} else
{
{
IkReal j8array[2], cj8array[2], sj8array[2];
bool j8valid[2]={false};
_nj8 = 2;
IkReal x4429=((0.0078755)*cj2);
IkReal x4430=((0.0078755)*sj2);
IkReal x4431=((0.00140587)*sj2);
IkReal x4432=((0.00140587)*cj2);
CheckValue<IkReal> x4434 = IKatan2WithCheck(IkReal(((((-1.0)*r10*x4431))+npx+(((-1.0)*r00*x4430))+(((-1.0)*r00*x4432))+((r10*x4429)))),IkReal(((((-1.0)*npy))+((r11*x4431))+(((-1.0)*r11*x4429))+((r01*x4430))+((r01*x4432)))),IKFAST_ATAN2_MAGTHRESH);
if(!x4434.valid){
continue;
}
IkReal x4433=x4434.value;
j8array[0]=((-1.0)*x4433);
sj8array[0]=IKsin(j8array[0]);
cj8array[0]=IKcos(j8array[0]);
j8array[1]=((3.14159265358979)+(((-1.0)*x4433)));
sj8array[1]=IKsin(j8array[1]);
cj8array[1]=IKcos(j8array[1]);
if( j8array[0] > IKPI )
{
    j8array[0]-=IK2PI;
}
else if( j8array[0] < -IKPI )
{    j8array[0]+=IK2PI;
}
j8valid[0] = true;
if( j8array[1] > IKPI )
{
    j8array[1]-=IK2PI;
}
else if( j8array[1] < -IKPI )
{    j8array[1]+=IK2PI;
}
j8valid[1] = true;
for(int ij8 = 0; ij8 < 2; ++ij8)
{
if( !j8valid[ij8] )
{
    continue;
}
_ij8[0] = ij8; _ij8[1] = -1;
for(int iij8 = ij8+1; iij8 < 2; ++iij8)
{
if( j8valid[iij8] && IKabs(cj8array[ij8]-cj8array[iij8]) < IKFAST_SOLUTION_THRESH && IKabs(sj8array[ij8]-sj8array[iij8]) < IKFAST_SOLUTION_THRESH )
{
    j8valid[iij8]=false; _ij8[1] = iij8; break; 
}
}
j8 = j8array[ij8]; cj8 = cj8array[ij8]; sj8 = sj8array[ij8];
{
IkReal evalcond[1];
IkReal x4435=IKcos(j8);
IkReal x4436=IKcos(j8);
IkReal x4437=IKcos(j8);
IkReal x4438=IKcos(j8);
IkReal x4439=IKcos(j8);
IkReal x4440=IKcos(j8);
IkReal x4441=IKcos(j8);
IkReal x4442=IKcos(j8);
IkReal x4443=IKcos(j8);
IkReal x4444=IKcos(j8);
IkReal x4445=IKcos(j8);
IkReal x4446=IKcos(j8);
IkReal x4447=IKcos(j8);
IkReal x4448=IKcos(j8);
IkReal x4449=IKcos(j8);
IkReal x4450=IKcos(j8);
IkReal x4451=IKcos(j8);
IkReal x4452=IKcos(j8);
IkReal x4453=IKcos(j8);
IkReal x4454=IKcos(j8);
IkReal x4455=IKcos(j8);
IkReal x4456=IKcos(j8);
IkReal x4457=IKcos(j8);
IkReal x4458=IKcos(j8);
IkReal x4459=IKcos(j8);
IkReal x4460=IKcos(j8);
IkReal x4461=IKcos(j8);
IkReal x4462=IKcos(j8);
IkReal x4463=IKcos(j8);
IkReal x4464=IKcos(j8);
IkReal x4465=IKcos(j8);
IkReal x4466=IKcos(j8);
IkReal x4467=IKcos(j8);
IkReal x4468=IKcos(j8);
IkReal x4469=IKcos(j8);
IkReal x4470=IKcos(j8);
evalcond[0]=((0.0841)+(((-0.0001200940595862)*cj2*r00*r11*sj2*(IKcos(j8))*(IKsin(j8))))+(((-0.00281174)*npx*r11*sj2*(IKcos(j8))*(IKsin(j8))))+(((0.00281174)*npy*r11*sj2))+(((2.0)*npx*npy*(IKcos(j8))*(IKsin(j8))))+(((-1.9764704569e-6)*(r10*r10)*(x4435*x4435)))+(((0.015751)*cj2*npy*r11*(x4436*x4436)))+(((2.0)*px*py*r01*r11*(x4437*x4437)))+(((pz*pz)*(r20*r20)*(x4438*x4438)))+(((6.202350025e-5)*(r01*r01)*(x4439*x4439)))+(((-6.00470297931e-5)*(cj2*cj2)*(r10*r10)*(x4440*x4440)))+(((0.0001200940595862)*cj2*r01*r11*sj2))+(((-2.214385837e-5)*r00*r10*(x4441*x4441)))+(((-2.0)*px*py*r00*r10*(x4442*x4442)))+(((0.015751)*cj2*npx*r11*(IKcos(j8))*(IKsin(j8))))+(((-6.202350025e-5)*(r01*r01)))+(((-0.00281174)*npy*r11*sj2*(x4443*x4443)))+(((-1.0)*(px*px)*(r00*r00)*(x4444*x4444)))+(((-1.0)*(py*py)*(r10*r10)*(x4445*x4445)))+(((-0.0001200940595862)*cj2*r01*r11*sj2*(x4446*x4446)))+(((-6.00470297931e-5)*(cj2*cj2)*(r01*r01)*(x4447*x4447)))+(((-0.00281174)*cj2*npy*r00*(IKcos(j8))*(IKsin(j8))))+(((6.00470297931e-5)*(cj2*cj2)*(r01*r01)))+(((-2.0)*px*py*r01*r11))+(((4.428771674e-5)*r01*r11*(cj2*cj2)))+(((-0.015751)*cj2*npy*r11))+(((0.015751)*npx*r00*sj2*(x4448*x4448)))+(((4.428771674e-5)*cj2*r00*r01*sj2*(IKcos(j8))*(IKsin(j8))))+(((0.00281174)*cj2*npy*r01))+(((-1.9764704569e-6)*(r11*r11)))+(((2.214385837e-5)*r00*r11*(IKcos(j8))*(IKsin(j8))))+(((4.428771674e-5)*r00*r10*(cj2*cj2)*(x4449*x4449)))+(((0.015751)*cj2*npy*r10*(IKcos(j8))*(IKsin(j8))))+(((0.0001240470005)*r00*r01*(IKcos(j8))*(IKsin(j8))))+(((6.00470297931e-5)*(cj2*cj2)*(r00*r00)*(x4450*x4450)))+(((-0.00281174)*npy*r10*sj2*(IKcos(j8))*(IKsin(j8))))+(((-1.0)*(pz*pz)*(r21*r21)*(x4451*x4451)))+(((-4.428771674e-5)*r00*r11*(cj2*cj2)*(IKcos(j8))*(IKsin(j8))))+(((2.214385837e-5)*cj2*sj2*(r10*r10)*(x4452*x4452)))+(((2.214385837e-5)*r01*r10*(IKcos(j8))*(IKsin(j8))))+(((-2.0)*npy*pz*r21))+(((6.00470297931e-5)*(cj2*cj2)*(r11*r11)*(x4453*x4453)))+(((-6.202350025e-5)*(r00*r00)*(x4454*x4454)))+(((0.00281174)*npx*r10*sj2*(x4455*x4455)))+(((-2.0)*npx*pz*r20*(x4456*x4456)))+(((-2.214385837e-5)*r01*r11))+(((-0.015751)*cj2*npx*r10*(x4457*x4457)))+(((-0.015751)*npy*r00*sj2*(IKcos(j8))*(IKsin(j8))))+(((px*px)*(r01*r01)*(x4458*x4458)))+(((2.214385837e-5)*r01*r11*(x4459*x4459)))+(((-4.428771674e-5)*cj2*r10*r11*sj2*(IKcos(j8))*(IKsin(j8))))+(((0.00281174)*cj2*npx*r00*(x4460*x4460)))+(((-1.0)*(py*py)*(r11*r11)))+(((-4.428771674e-5)*r01*r10*(cj2*cj2)*(IKcos(j8))*(IKsin(j8))))+(((-0.015751)*npx*r01*sj2*(IKcos(j8))*(IKsin(j8))))+(((-0.015751)*npy*r01*sj2*(x4461*x4461)))+(((-0.0001200940595862)*cj2*r01*r10*sj2*(IKcos(j8))*(IKsin(j8))))+(((pz*pz)*(r21*r21)))+(((-0.00281174)*cj2*npy*r01*(x4462*x4462)))+(((0.0001200940595862)*r10*r11*(cj2*cj2)*(IKcos(j8))*(IKsin(j8))))+(((-0.00281174)*cj2*npx*r01*(IKcos(j8))*(IKsin(j8))))+(((-0.0001200940595862)*r00*r01*(cj2*cj2)*(IKcos(j8))*(IKsin(j8))))+(((-2.214385837e-5)*cj2*sj2*(r01*r01)))+(((-4.428771674e-5)*r01*r11*(cj2*cj2)*(x4463*x4463)))+(((0.0001200940595862)*cj2*r00*r10*sj2*(x4464*x4464)))+(((-2.214385837e-5)*cj2*sj2*(r00*r00)*(x4465*x4465)))+(((-2.214385837e-5)*cj2*sj2*(r11*r11)*(x4466*x4466)))+(((2.214385837e-5)*cj2*sj2*(r11*r11)))+(((2.214385837e-5)*cj2*sj2*(r01*r01)*(x4467*x4467)))+(((3.9529409138e-6)*r10*r11*(IKcos(j8))*(IKsin(j8))))+(((1.9764704569e-6)*(r11*r11)*(x4468*x4468)))+(((py*py)*(r11*r11)*(x4469*x4469)))+(((0.015751)*npy*r01*sj2))+(((2.0)*npy*pz*r21*(x4470*x4470)))+(((-1.0)*(px*px)*(r01*r01)))+(((-6.00470297931e-5)*(cj2*cj2)*(r11*r11))));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

rotationfunction0(solutions);
}
}

}

}
    }

}

}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
if( 1 )
{
bgotonextstatement=false;
continue; // branch miss [j2, j7, j8]

}
} while(0);
if( bgotonextstatement )
{
}
}
}
}

} else
{
{
IkReal j2array[1], cj2array[1], sj2array[1];
bool j2valid[1]={false};
_nj2 = 1;
IkReal x4471=(npz*r00);
IkReal x4472=((0.00140587)*npx);
IkReal x4473=((0.0078755)*npx);
IkReal x4474=(npz*r10);
CheckValue<IkReal> x4475=IKPowWithIntegerCheck(IKsign(r21),-1);
if(!x4475.valid){
continue;
}
CheckValue<IkReal> x4476 = IKatan2WithCheck(IkReal(((((-0.0078755)*x4474))+(((0.00140587)*x4471))+((r12*x4473))+(((-1.0)*r02*x4472)))),IkReal(((((-0.0078755)*x4471))+((r02*x4473))+(((-0.00140587)*x4474))+((r12*x4472)))),IKFAST_ATAN2_MAGTHRESH);
if(!x4476.valid){
continue;
}
j2array[0]=((-1.5707963267949)+(((-1.5707963267949)*(x4475.value)))+(x4476.value));
sj2array[0]=IKsin(j2array[0]);
cj2array[0]=IKcos(j2array[0]);
if( j2array[0] > IKPI )
{
    j2array[0]-=IK2PI;
}
else if( j2array[0] < -IKPI )
{    j2array[0]+=IK2PI;
}
j2valid[0] = true;
for(int ij2 = 0; ij2 < 1; ++ij2)
{
if( !j2valid[ij2] )
{
    continue;
}
_ij2[0] = ij2; _ij2[1] = -1;
for(int iij2 = ij2+1; iij2 < 1; ++iij2)
{
if( j2valid[iij2] && IKabs(cj2array[ij2]-cj2array[iij2]) < IKFAST_SOLUTION_THRESH && IKabs(sj2array[ij2]-sj2array[iij2]) < IKFAST_SOLUTION_THRESH )
{
    j2valid[iij2]=false; _ij2[1] = iij2; break; 
}
}
j2 = j2array[ij2]; cj2 = cj2array[ij2]; sj2 = sj2array[ij2];
{
IkReal evalcond[4];
IkReal x4477=IKcos(j2);
IkReal x4478=IKsin(j2);
IkReal x4479=((0.00140587)*x4478);
IkReal x4480=((0.00140587)*x4477);
IkReal x4481=((0.0078755)*x4477);
IkReal x4482=((0.0078755)*x4478);
evalcond[0]=(((r10*x4481))+npx+(((-1.0)*r10*x4479))+(((-1.0)*r00*x4480))+(((-1.0)*r00*x4482)));
evalcond[1]=(((r11*x4481))+(((-1.0)*r11*x4479))+npy+(((-1.0)*r01*x4482))+(((-1.0)*r01*x4480)));
evalcond[2]=((((-1.0)*r12*x4479))+npz+(((-1.0)*r02*x4482))+(((-1.0)*r02*x4480))+((r12*x4481)));
evalcond[3]=((-6.39999707069e-5)+(((0.015751)*px*x4478))+(((0.00281174)*px*x4477))+(((-0.015751)*py*x4477))+(((-1.0)*pp))+(((0.00281174)*py*x4478)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j7eval[1];
j7eval[0]=1.0;
if( IKabs(j7eval[0]) < 0.0000000100000000  )
{
{
IkReal j8eval[1];
IkReal x4483=((0.0078755)*cj2);
IkReal x4484=((0.0078755)*sj2);
IkReal x4485=((0.00140587)*sj2);
IkReal x4486=((0.00140587)*cj2);
j8eval[0]=((IKabs((((r10*x4483))+npx+(((-1.0)*r10*x4485))+(((-1.0)*r00*x4484))+(((-1.0)*r00*x4486)))))+(IKabs((((r11*x4485))+(((-1.0)*r11*x4483))+(((-1.0)*npy))+((r01*x4486))+((r01*x4484))))));
if( IKabs(j8eval[0]) < 0.0000010000000000  )
{
continue; // no branches [j7, j8]

} else
{
{
IkReal j8array[2], cj8array[2], sj8array[2];
bool j8valid[2]={false};
_nj8 = 2;
IkReal x4487=((0.0078755)*cj2);
IkReal x4488=((0.0078755)*sj2);
IkReal x4489=((0.00140587)*sj2);
IkReal x4490=((0.00140587)*cj2);
CheckValue<IkReal> x4492 = IKatan2WithCheck(IkReal((((r10*x4487))+npx+(((-1.0)*r10*x4489))+(((-1.0)*r00*x4488))+(((-1.0)*r00*x4490)))),IkReal((((r11*x4489))+(((-1.0)*r11*x4487))+(((-1.0)*npy))+((r01*x4488))+((r01*x4490)))),IKFAST_ATAN2_MAGTHRESH);
if(!x4492.valid){
continue;
}
IkReal x4491=x4492.value;
j8array[0]=((-1.0)*x4491);
sj8array[0]=IKsin(j8array[0]);
cj8array[0]=IKcos(j8array[0]);
j8array[1]=((3.14159265358979)+(((-1.0)*x4491)));
sj8array[1]=IKsin(j8array[1]);
cj8array[1]=IKcos(j8array[1]);
if( j8array[0] > IKPI )
{
    j8array[0]-=IK2PI;
}
else if( j8array[0] < -IKPI )
{    j8array[0]+=IK2PI;
}
j8valid[0] = true;
if( j8array[1] > IKPI )
{
    j8array[1]-=IK2PI;
}
else if( j8array[1] < -IKPI )
{    j8array[1]+=IK2PI;
}
j8valid[1] = true;
for(int ij8 = 0; ij8 < 2; ++ij8)
{
if( !j8valid[ij8] )
{
    continue;
}
_ij8[0] = ij8; _ij8[1] = -1;
for(int iij8 = ij8+1; iij8 < 2; ++iij8)
{
if( j8valid[iij8] && IKabs(cj8array[ij8]-cj8array[iij8]) < IKFAST_SOLUTION_THRESH && IKabs(sj8array[ij8]-sj8array[iij8]) < IKFAST_SOLUTION_THRESH )
{
    j8valid[iij8]=false; _ij8[1] = iij8; break; 
}
}
j8 = j8array[ij8]; cj8 = cj8array[ij8]; sj8 = sj8array[ij8];
{
IkReal evalcond[1];
IkReal x4493=IKcos(j8);
IkReal x4494=IKcos(j8);
IkReal x4495=IKcos(j8);
IkReal x4496=IKcos(j8);
IkReal x4497=IKcos(j8);
IkReal x4498=IKcos(j8);
IkReal x4499=IKcos(j8);
IkReal x4500=IKcos(j8);
IkReal x4501=IKcos(j8);
IkReal x4502=IKcos(j8);
IkReal x4503=IKcos(j8);
IkReal x4504=IKcos(j8);
IkReal x4505=IKcos(j8);
IkReal x4506=IKcos(j8);
IkReal x4507=IKcos(j8);
IkReal x4508=IKcos(j8);
IkReal x4509=IKcos(j8);
IkReal x4510=IKcos(j8);
IkReal x4511=IKcos(j8);
IkReal x4512=IKcos(j8);
IkReal x4513=IKcos(j8);
IkReal x4514=IKcos(j8);
IkReal x4515=IKcos(j8);
IkReal x4516=IKcos(j8);
IkReal x4517=IKcos(j8);
IkReal x4518=IKcos(j8);
IkReal x4519=IKcos(j8);
IkReal x4520=IKcos(j8);
IkReal x4521=IKcos(j8);
IkReal x4522=IKcos(j8);
IkReal x4523=IKcos(j8);
IkReal x4524=IKcos(j8);
IkReal x4525=IKcos(j8);
IkReal x4526=IKcos(j8);
IkReal x4527=IKcos(j8);
IkReal x4528=IKcos(j8);
evalcond[0]=((0.0841)+(((-0.0001200940595862)*cj2*r00*r11*sj2*(IKcos(j8))*(IKsin(j8))))+(((-0.00281174)*npx*r11*sj2*(IKcos(j8))*(IKsin(j8))))+(((0.00281174)*npy*r11*sj2))+(((2.0)*npx*npy*(IKcos(j8))*(IKsin(j8))))+(((-1.9764704569e-6)*(r10*r10)*(x4493*x4493)))+(((0.015751)*cj2*npy*r11*(x4494*x4494)))+(((2.0)*px*py*r01*r11*(x4495*x4495)))+(((pz*pz)*(r20*r20)*(x4496*x4496)))+(((6.202350025e-5)*(r01*r01)*(x4497*x4497)))+(((-6.00470297931e-5)*(cj2*cj2)*(r10*r10)*(x4498*x4498)))+(((0.0001200940595862)*cj2*r01*r11*sj2))+(((-2.214385837e-5)*r00*r10*(x4499*x4499)))+(((-2.0)*px*py*r00*r10*(x4500*x4500)))+(((0.015751)*cj2*npx*r11*(IKcos(j8))*(IKsin(j8))))+(((-6.202350025e-5)*(r01*r01)))+(((-0.00281174)*npy*r11*sj2*(x4501*x4501)))+(((-1.0)*(px*px)*(r00*r00)*(x4502*x4502)))+(((-1.0)*(py*py)*(r10*r10)*(x4503*x4503)))+(((-0.0001200940595862)*cj2*r01*r11*sj2*(x4504*x4504)))+(((-6.00470297931e-5)*(cj2*cj2)*(r01*r01)*(x4505*x4505)))+(((-0.00281174)*cj2*npy*r00*(IKcos(j8))*(IKsin(j8))))+(((6.00470297931e-5)*(cj2*cj2)*(r01*r01)))+(((-2.0)*px*py*r01*r11))+(((4.428771674e-5)*r01*r11*(cj2*cj2)))+(((-0.015751)*cj2*npy*r11))+(((0.015751)*npx*r00*sj2*(x4506*x4506)))+(((4.428771674e-5)*cj2*r00*r01*sj2*(IKcos(j8))*(IKsin(j8))))+(((0.00281174)*cj2*npy*r01))+(((-1.9764704569e-6)*(r11*r11)))+(((2.214385837e-5)*r00*r11*(IKcos(j8))*(IKsin(j8))))+(((4.428771674e-5)*r00*r10*(cj2*cj2)*(x4507*x4507)))+(((0.015751)*cj2*npy*r10*(IKcos(j8))*(IKsin(j8))))+(((0.0001240470005)*r00*r01*(IKcos(j8))*(IKsin(j8))))+(((6.00470297931e-5)*(cj2*cj2)*(r00*r00)*(x4508*x4508)))+(((-0.00281174)*npy*r10*sj2*(IKcos(j8))*(IKsin(j8))))+(((-1.0)*(pz*pz)*(r21*r21)*(x4509*x4509)))+(((-4.428771674e-5)*r00*r11*(cj2*cj2)*(IKcos(j8))*(IKsin(j8))))+(((2.214385837e-5)*cj2*sj2*(r10*r10)*(x4510*x4510)))+(((2.214385837e-5)*r01*r10*(IKcos(j8))*(IKsin(j8))))+(((-2.0)*npy*pz*r21))+(((6.00470297931e-5)*(cj2*cj2)*(r11*r11)*(x4511*x4511)))+(((-6.202350025e-5)*(r00*r00)*(x4512*x4512)))+(((0.00281174)*npx*r10*sj2*(x4513*x4513)))+(((-2.0)*npx*pz*r20*(x4514*x4514)))+(((-2.214385837e-5)*r01*r11))+(((-0.015751)*cj2*npx*r10*(x4515*x4515)))+(((-0.015751)*npy*r00*sj2*(IKcos(j8))*(IKsin(j8))))+(((px*px)*(r01*r01)*(x4516*x4516)))+(((2.214385837e-5)*r01*r11*(x4517*x4517)))+(((-4.428771674e-5)*cj2*r10*r11*sj2*(IKcos(j8))*(IKsin(j8))))+(((0.00281174)*cj2*npx*r00*(x4518*x4518)))+(((-1.0)*(py*py)*(r11*r11)))+(((-4.428771674e-5)*r01*r10*(cj2*cj2)*(IKcos(j8))*(IKsin(j8))))+(((-0.015751)*npx*r01*sj2*(IKcos(j8))*(IKsin(j8))))+(((-0.015751)*npy*r01*sj2*(x4519*x4519)))+(((-0.0001200940595862)*cj2*r01*r10*sj2*(IKcos(j8))*(IKsin(j8))))+(((pz*pz)*(r21*r21)))+(((-0.00281174)*cj2*npy*r01*(x4520*x4520)))+(((0.0001200940595862)*r10*r11*(cj2*cj2)*(IKcos(j8))*(IKsin(j8))))+(((-0.00281174)*cj2*npx*r01*(IKcos(j8))*(IKsin(j8))))+(((-0.0001200940595862)*r00*r01*(cj2*cj2)*(IKcos(j8))*(IKsin(j8))))+(((-2.214385837e-5)*cj2*sj2*(r01*r01)))+(((-4.428771674e-5)*r01*r11*(cj2*cj2)*(x4521*x4521)))+(((0.0001200940595862)*cj2*r00*r10*sj2*(x4522*x4522)))+(((-2.214385837e-5)*cj2*sj2*(r00*r00)*(x4523*x4523)))+(((-2.214385837e-5)*cj2*sj2*(r11*r11)*(x4524*x4524)))+(((2.214385837e-5)*cj2*sj2*(r11*r11)))+(((2.214385837e-5)*cj2*sj2*(r01*r01)*(x4525*x4525)))+(((3.9529409138e-6)*r10*r11*(IKcos(j8))*(IKsin(j8))))+(((1.9764704569e-6)*(r11*r11)*(x4526*x4526)))+(((py*py)*(r11*r11)*(x4527*x4527)))+(((0.015751)*npy*r01*sj2))+(((2.0)*npy*pz*r21*(x4528*x4528)))+(((-1.0)*(px*px)*(r01*r01)))+(((-6.00470297931e-5)*(cj2*cj2)*(r11*r11))));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j7eval[1];
j7eval[0]=1.0;
if( IKabs(j7eval[0]) < 0.0000000100000000  )
{
continue; // no branches [j7]

} else
{
IkReal op[2+1], zeror[2];
int numroots;
op[0]=-1.0;
op[1]=0;
op[2]=1.0;
polyroots2(op,zeror,numroots);
IkReal j7array[2], cj7array[2], sj7array[2], tempj7array[1];
int numsolutions = 0;
for(int ij7 = 0; ij7 < numroots; ++ij7)
{
IkReal htj7 = zeror[ij7];
tempj7array[0]=((2.0)*(atan(htj7)));
for(int kj7 = 0; kj7 < 1; ++kj7)
{
j7array[numsolutions] = tempj7array[kj7];
if( j7array[numsolutions] > IKPI )
{
    j7array[numsolutions]-=IK2PI;
}
else if( j7array[numsolutions] < -IKPI )
{
    j7array[numsolutions]+=IK2PI;
}
sj7array[numsolutions] = IKsin(j7array[numsolutions]);
cj7array[numsolutions] = IKcos(j7array[numsolutions]);
numsolutions++;
}
}
bool j7valid[2]={true,true};
_nj7 = 2;
for(int ij7 = 0; ij7 < numsolutions; ++ij7)
    {
if( !j7valid[ij7] )
{
    continue;
}
    j7 = j7array[ij7]; cj7 = cj7array[ij7]; sj7 = sj7array[ij7];
htj7 = IKtan(j7/2);

_ij7[0] = ij7; _ij7[1] = -1;
for(int iij7 = ij7+1; iij7 < numsolutions; ++iij7)
{
if( j7valid[iij7] && IKabs(cj7array[ij7]-cj7array[iij7]) < IKFAST_SOLUTION_THRESH && IKabs(sj7array[ij7]-sj7array[iij7]) < IKFAST_SOLUTION_THRESH )
{
    j7valid[iij7]=false; _ij7[1] = iij7; break; 
}
}
rotationfunction0(solutions);
    }

}

}
}
}

}

}

} else
{
IkReal op[2+1], zeror[2];
int numroots;
op[0]=-1.0;
op[1]=0;
op[2]=1.0;
polyroots2(op,zeror,numroots);
IkReal j7array[2], cj7array[2], sj7array[2], tempj7array[1];
int numsolutions = 0;
for(int ij7 = 0; ij7 < numroots; ++ij7)
{
IkReal htj7 = zeror[ij7];
tempj7array[0]=((2.0)*(atan(htj7)));
for(int kj7 = 0; kj7 < 1; ++kj7)
{
j7array[numsolutions] = tempj7array[kj7];
if( j7array[numsolutions] > IKPI )
{
    j7array[numsolutions]-=IK2PI;
}
else if( j7array[numsolutions] < -IKPI )
{
    j7array[numsolutions]+=IK2PI;
}
sj7array[numsolutions] = IKsin(j7array[numsolutions]);
cj7array[numsolutions] = IKcos(j7array[numsolutions]);
numsolutions++;
}
}
bool j7valid[2]={true,true};
_nj7 = 2;
for(int ij7 = 0; ij7 < numsolutions; ++ij7)
    {
if( !j7valid[ij7] )
{
    continue;
}
    j7 = j7array[ij7]; cj7 = cj7array[ij7]; sj7 = sj7array[ij7];
htj7 = IKtan(j7/2);

_ij7[0] = ij7; _ij7[1] = -1;
for(int iij7 = ij7+1; iij7 < numsolutions; ++iij7)
{
if( j7valid[iij7] && IKabs(cj7array[ij7]-cj7array[iij7]) < IKFAST_SOLUTION_THRESH && IKabs(sj7array[ij7]-sj7array[iij7]) < IKFAST_SOLUTION_THRESH )
{
    j7valid[iij7]=false; _ij7[1] = iij7; break; 
}
}
{
IkReal j8eval[1];
IkReal x4529=((0.0078755)*cj2);
IkReal x4530=((0.0078755)*sj2);
IkReal x4531=((0.00140587)*sj2);
IkReal x4532=((0.00140587)*cj2);
j8eval[0]=((IKabs(((((-1.0)*r00*x4530))+(((-1.0)*r00*x4532))+npx+((r10*x4529))+(((-1.0)*r10*x4531)))))+(IKabs((((r01*x4532))+((r01*x4530))+(((-1.0)*npy))+(((-1.0)*r11*x4529))+((r11*x4531))))));
if( IKabs(j8eval[0]) < 0.0000010000000000  )
{
continue; // no branches [j8]

} else
{
{
IkReal j8array[2], cj8array[2], sj8array[2];
bool j8valid[2]={false};
_nj8 = 2;
IkReal x4533=((0.0078755)*cj2);
IkReal x4534=((0.0078755)*sj2);
IkReal x4535=((0.00140587)*sj2);
IkReal x4536=((0.00140587)*cj2);
CheckValue<IkReal> x4538 = IKatan2WithCheck(IkReal(((((-1.0)*r00*x4534))+(((-1.0)*r00*x4536))+npx+((r10*x4533))+(((-1.0)*r10*x4535)))),IkReal(((((-1.0)*r11*x4533))+((r01*x4534))+((r01*x4536))+(((-1.0)*npy))+((r11*x4535)))),IKFAST_ATAN2_MAGTHRESH);
if(!x4538.valid){
continue;
}
IkReal x4537=x4538.value;
j8array[0]=((-1.0)*x4537);
sj8array[0]=IKsin(j8array[0]);
cj8array[0]=IKcos(j8array[0]);
j8array[1]=((3.14159265358979)+(((-1.0)*x4537)));
sj8array[1]=IKsin(j8array[1]);
cj8array[1]=IKcos(j8array[1]);
if( j8array[0] > IKPI )
{
    j8array[0]-=IK2PI;
}
else if( j8array[0] < -IKPI )
{    j8array[0]+=IK2PI;
}
j8valid[0] = true;
if( j8array[1] > IKPI )
{
    j8array[1]-=IK2PI;
}
else if( j8array[1] < -IKPI )
{    j8array[1]+=IK2PI;
}
j8valid[1] = true;
for(int ij8 = 0; ij8 < 2; ++ij8)
{
if( !j8valid[ij8] )
{
    continue;
}
_ij8[0] = ij8; _ij8[1] = -1;
for(int iij8 = ij8+1; iij8 < 2; ++iij8)
{
if( j8valid[iij8] && IKabs(cj8array[ij8]-cj8array[iij8]) < IKFAST_SOLUTION_THRESH && IKabs(sj8array[ij8]-sj8array[iij8]) < IKFAST_SOLUTION_THRESH )
{
    j8valid[iij8]=false; _ij8[1] = iij8; break; 
}
}
j8 = j8array[ij8]; cj8 = cj8array[ij8]; sj8 = sj8array[ij8];
{
IkReal evalcond[1];
IkReal x4539=IKcos(j8);
IkReal x4540=IKcos(j8);
IkReal x4541=IKcos(j8);
IkReal x4542=IKcos(j8);
IkReal x4543=IKcos(j8);
IkReal x4544=IKcos(j8);
IkReal x4545=IKcos(j8);
IkReal x4546=IKcos(j8);
IkReal x4547=IKcos(j8);
IkReal x4548=IKcos(j8);
IkReal x4549=IKcos(j8);
IkReal x4550=IKcos(j8);
IkReal x4551=IKcos(j8);
IkReal x4552=IKcos(j8);
IkReal x4553=IKcos(j8);
IkReal x4554=IKcos(j8);
IkReal x4555=IKcos(j8);
IkReal x4556=IKcos(j8);
IkReal x4557=IKcos(j8);
IkReal x4558=IKcos(j8);
IkReal x4559=IKcos(j8);
IkReal x4560=IKcos(j8);
IkReal x4561=IKcos(j8);
IkReal x4562=IKcos(j8);
IkReal x4563=IKcos(j8);
IkReal x4564=IKcos(j8);
IkReal x4565=IKcos(j8);
IkReal x4566=IKcos(j8);
IkReal x4567=IKcos(j8);
IkReal x4568=IKcos(j8);
IkReal x4569=IKcos(j8);
IkReal x4570=IKcos(j8);
IkReal x4571=IKcos(j8);
IkReal x4572=IKcos(j8);
IkReal x4573=IKcos(j8);
IkReal x4574=IKcos(j8);
evalcond[0]=((0.0841)+(((-0.0001200940595862)*cj2*r00*r11*sj2*(IKcos(j8))*(IKsin(j8))))+(((-0.00281174)*npx*r11*sj2*(IKcos(j8))*(IKsin(j8))))+(((0.00281174)*npy*r11*sj2))+(((2.0)*npx*npy*(IKcos(j8))*(IKsin(j8))))+(((-1.9764704569e-6)*(r10*r10)*(x4539*x4539)))+(((0.015751)*cj2*npy*r11*(x4540*x4540)))+(((2.0)*px*py*r01*r11*(x4541*x4541)))+(((pz*pz)*(r20*r20)*(x4542*x4542)))+(((6.202350025e-5)*(r01*r01)*(x4543*x4543)))+(((-6.00470297931e-5)*(cj2*cj2)*(r10*r10)*(x4544*x4544)))+(((0.0001200940595862)*cj2*r01*r11*sj2))+(((-2.214385837e-5)*r00*r10*(x4545*x4545)))+(((-2.0)*px*py*r00*r10*(x4546*x4546)))+(((0.015751)*cj2*npx*r11*(IKcos(j8))*(IKsin(j8))))+(((-6.202350025e-5)*(r01*r01)))+(((-0.00281174)*npy*r11*sj2*(x4547*x4547)))+(((-1.0)*(px*px)*(r00*r00)*(x4548*x4548)))+(((-1.0)*(py*py)*(r10*r10)*(x4549*x4549)))+(((-0.0001200940595862)*cj2*r01*r11*sj2*(x4550*x4550)))+(((-6.00470297931e-5)*(cj2*cj2)*(r01*r01)*(x4551*x4551)))+(((-0.00281174)*cj2*npy*r00*(IKcos(j8))*(IKsin(j8))))+(((6.00470297931e-5)*(cj2*cj2)*(r01*r01)))+(((-2.0)*px*py*r01*r11))+(((4.428771674e-5)*r01*r11*(cj2*cj2)))+(((-0.015751)*cj2*npy*r11))+(((0.015751)*npx*r00*sj2*(x4552*x4552)))+(((4.428771674e-5)*cj2*r00*r01*sj2*(IKcos(j8))*(IKsin(j8))))+(((0.00281174)*cj2*npy*r01))+(((-1.9764704569e-6)*(r11*r11)))+(((2.214385837e-5)*r00*r11*(IKcos(j8))*(IKsin(j8))))+(((4.428771674e-5)*r00*r10*(cj2*cj2)*(x4553*x4553)))+(((0.015751)*cj2*npy*r10*(IKcos(j8))*(IKsin(j8))))+(((0.0001240470005)*r00*r01*(IKcos(j8))*(IKsin(j8))))+(((6.00470297931e-5)*(cj2*cj2)*(r00*r00)*(x4554*x4554)))+(((-0.00281174)*npy*r10*sj2*(IKcos(j8))*(IKsin(j8))))+(((-1.0)*(pz*pz)*(r21*r21)*(x4555*x4555)))+(((-4.428771674e-5)*r00*r11*(cj2*cj2)*(IKcos(j8))*(IKsin(j8))))+(((2.214385837e-5)*cj2*sj2*(r10*r10)*(x4556*x4556)))+(((2.214385837e-5)*r01*r10*(IKcos(j8))*(IKsin(j8))))+(((-2.0)*npy*pz*r21))+(((6.00470297931e-5)*(cj2*cj2)*(r11*r11)*(x4557*x4557)))+(((-6.202350025e-5)*(r00*r00)*(x4558*x4558)))+(((0.00281174)*npx*r10*sj2*(x4559*x4559)))+(((-2.0)*npx*pz*r20*(x4560*x4560)))+(((-2.214385837e-5)*r01*r11))+(((-0.015751)*cj2*npx*r10*(x4561*x4561)))+(((-0.015751)*npy*r00*sj2*(IKcos(j8))*(IKsin(j8))))+(((px*px)*(r01*r01)*(x4562*x4562)))+(((2.214385837e-5)*r01*r11*(x4563*x4563)))+(((-4.428771674e-5)*cj2*r10*r11*sj2*(IKcos(j8))*(IKsin(j8))))+(((0.00281174)*cj2*npx*r00*(x4564*x4564)))+(((-1.0)*(py*py)*(r11*r11)))+(((-4.428771674e-5)*r01*r10*(cj2*cj2)*(IKcos(j8))*(IKsin(j8))))+(((-0.015751)*npx*r01*sj2*(IKcos(j8))*(IKsin(j8))))+(((-0.015751)*npy*r01*sj2*(x4565*x4565)))+(((-0.0001200940595862)*cj2*r01*r10*sj2*(IKcos(j8))*(IKsin(j8))))+(((pz*pz)*(r21*r21)))+(((-0.00281174)*cj2*npy*r01*(x4566*x4566)))+(((0.0001200940595862)*r10*r11*(cj2*cj2)*(IKcos(j8))*(IKsin(j8))))+(((-0.00281174)*cj2*npx*r01*(IKcos(j8))*(IKsin(j8))))+(((-0.0001200940595862)*r00*r01*(cj2*cj2)*(IKcos(j8))*(IKsin(j8))))+(((-2.214385837e-5)*cj2*sj2*(r01*r01)))+(((-4.428771674e-5)*r01*r11*(cj2*cj2)*(x4567*x4567)))+(((0.0001200940595862)*cj2*r00*r10*sj2*(x4568*x4568)))+(((-2.214385837e-5)*cj2*sj2*(r00*r00)*(x4569*x4569)))+(((-2.214385837e-5)*cj2*sj2*(r11*r11)*(x4570*x4570)))+(((2.214385837e-5)*cj2*sj2*(r11*r11)))+(((2.214385837e-5)*cj2*sj2*(r01*r01)*(x4571*x4571)))+(((3.9529409138e-6)*r10*r11*(IKcos(j8))*(IKsin(j8))))+(((1.9764704569e-6)*(r11*r11)*(x4572*x4572)))+(((py*py)*(r11*r11)*(x4573*x4573)))+(((0.015751)*npy*r01*sj2))+(((2.0)*npy*pz*r21*(x4574*x4574)))+(((-1.0)*(px*px)*(r01*r01)))+(((-6.00470297931e-5)*(cj2*cj2)*(r11*r11))));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

rotationfunction0(solutions);
}
}

}

}
    }

}

}
}
}

}

}

} else
{
{
IkReal j2array[1], cj2array[1], sj2array[1];
bool j2valid[1]={false};
_nj2 = 1;
IkReal x4575=((0.0078755)*npz);
IkReal x4576=((0.0078755)*npy);
IkReal x4577=((0.00140587)*npz);
IkReal x4578=((0.00140587)*npy);
CheckValue<IkReal> x4579=IKPowWithIntegerCheck(IKsign(r20),-1);
if(!x4579.valid){
continue;
}
CheckValue<IkReal> x4580 = IKatan2WithCheck(IkReal((((r12*x4576))+(((-1.0)*r02*x4578))+((r01*x4577))+(((-1.0)*r11*x4575)))),IkReal(((((-1.0)*r01*x4575))+((r12*x4578))+((r02*x4576))+(((-1.0)*r11*x4577)))),IKFAST_ATAN2_MAGTHRESH);
if(!x4580.valid){
continue;
}
j2array[0]=((-1.5707963267949)+(((1.5707963267949)*(x4579.value)))+(x4580.value));
sj2array[0]=IKsin(j2array[0]);
cj2array[0]=IKcos(j2array[0]);
if( j2array[0] > IKPI )
{
    j2array[0]-=IK2PI;
}
else if( j2array[0] < -IKPI )
{    j2array[0]+=IK2PI;
}
j2valid[0] = true;
for(int ij2 = 0; ij2 < 1; ++ij2)
{
if( !j2valid[ij2] )
{
    continue;
}
_ij2[0] = ij2; _ij2[1] = -1;
for(int iij2 = ij2+1; iij2 < 1; ++iij2)
{
if( j2valid[iij2] && IKabs(cj2array[ij2]-cj2array[iij2]) < IKFAST_SOLUTION_THRESH && IKabs(sj2array[ij2]-sj2array[iij2]) < IKFAST_SOLUTION_THRESH )
{
    j2valid[iij2]=false; _ij2[1] = iij2; break; 
}
}
j2 = j2array[ij2]; cj2 = cj2array[ij2]; sj2 = sj2array[ij2];
{
IkReal evalcond[4];
IkReal x4581=IKcos(j2);
IkReal x4582=IKsin(j2);
IkReal x4583=((0.00140587)*x4582);
IkReal x4584=((0.00140587)*x4581);
IkReal x4585=((0.0078755)*x4581);
IkReal x4586=((0.0078755)*x4582);
evalcond[0]=((((-1.0)*r00*x4584))+(((-1.0)*r00*x4586))+npx+(((-1.0)*r10*x4583))+((r10*x4585)));
evalcond[1]=((((-1.0)*r01*x4586))+(((-1.0)*r01*x4584))+npy+((r11*x4585))+(((-1.0)*r11*x4583)));
evalcond[2]=(npz+(((-1.0)*r02*x4586))+(((-1.0)*r02*x4584))+((r12*x4585))+(((-1.0)*r12*x4583)));
evalcond[3]=((-6.39999707069e-5)+(((0.00281174)*px*x4581))+(((0.015751)*px*x4582))+(((0.00281174)*py*x4582))+(((-0.015751)*py*x4581))+(((-1.0)*pp)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j7eval[1];
j7eval[0]=1.0;
if( IKabs(j7eval[0]) < 0.0000000100000000  )
{
{
IkReal j8eval[1];
IkReal x4587=((0.0078755)*cj2);
IkReal x4588=((0.0078755)*sj2);
IkReal x4589=((0.00140587)*sj2);
IkReal x4590=((0.00140587)*cj2);
j8eval[0]=((IKabs(((((-1.0)*r00*x4590))+(((-1.0)*r00*x4588))+npx+(((-1.0)*r10*x4589))+((r10*x4587)))))+(IKabs(((((-1.0)*npy))+((r11*x4589))+(((-1.0)*r11*x4587))+((r01*x4588))+((r01*x4590))))));
if( IKabs(j8eval[0]) < 0.0000010000000000  )
{
continue; // no branches [j7, j8]

} else
{
{
IkReal j8array[2], cj8array[2], sj8array[2];
bool j8valid[2]={false};
_nj8 = 2;
IkReal x4591=((0.0078755)*cj2);
IkReal x4592=((0.0078755)*sj2);
IkReal x4593=((0.00140587)*sj2);
IkReal x4594=((0.00140587)*cj2);
CheckValue<IkReal> x4596 = IKatan2WithCheck(IkReal(((((-1.0)*r00*x4592))+(((-1.0)*r00*x4594))+npx+(((-1.0)*r10*x4593))+((r10*x4591)))),IkReal(((((-1.0)*npy))+((r11*x4593))+(((-1.0)*r11*x4591))+((r01*x4594))+((r01*x4592)))),IKFAST_ATAN2_MAGTHRESH);
if(!x4596.valid){
continue;
}
IkReal x4595=x4596.value;
j8array[0]=((-1.0)*x4595);
sj8array[0]=IKsin(j8array[0]);
cj8array[0]=IKcos(j8array[0]);
j8array[1]=((3.14159265358979)+(((-1.0)*x4595)));
sj8array[1]=IKsin(j8array[1]);
cj8array[1]=IKcos(j8array[1]);
if( j8array[0] > IKPI )
{
    j8array[0]-=IK2PI;
}
else if( j8array[0] < -IKPI )
{    j8array[0]+=IK2PI;
}
j8valid[0] = true;
if( j8array[1] > IKPI )
{
    j8array[1]-=IK2PI;
}
else if( j8array[1] < -IKPI )
{    j8array[1]+=IK2PI;
}
j8valid[1] = true;
for(int ij8 = 0; ij8 < 2; ++ij8)
{
if( !j8valid[ij8] )
{
    continue;
}
_ij8[0] = ij8; _ij8[1] = -1;
for(int iij8 = ij8+1; iij8 < 2; ++iij8)
{
if( j8valid[iij8] && IKabs(cj8array[ij8]-cj8array[iij8]) < IKFAST_SOLUTION_THRESH && IKabs(sj8array[ij8]-sj8array[iij8]) < IKFAST_SOLUTION_THRESH )
{
    j8valid[iij8]=false; _ij8[1] = iij8; break; 
}
}
j8 = j8array[ij8]; cj8 = cj8array[ij8]; sj8 = sj8array[ij8];
{
IkReal evalcond[1];
IkReal x4597=IKcos(j8);
IkReal x4598=IKcos(j8);
IkReal x4599=IKcos(j8);
IkReal x4600=IKcos(j8);
IkReal x4601=IKcos(j8);
IkReal x4602=IKcos(j8);
IkReal x4603=IKcos(j8);
IkReal x4604=IKcos(j8);
IkReal x4605=IKcos(j8);
IkReal x4606=IKcos(j8);
IkReal x4607=IKcos(j8);
IkReal x4608=IKcos(j8);
IkReal x4609=IKcos(j8);
IkReal x4610=IKcos(j8);
IkReal x4611=IKcos(j8);
IkReal x4612=IKcos(j8);
IkReal x4613=IKcos(j8);
IkReal x4614=IKcos(j8);
IkReal x4615=IKcos(j8);
IkReal x4616=IKcos(j8);
IkReal x4617=IKcos(j8);
IkReal x4618=IKcos(j8);
IkReal x4619=IKcos(j8);
IkReal x4620=IKcos(j8);
IkReal x4621=IKcos(j8);
IkReal x4622=IKcos(j8);
IkReal x4623=IKcos(j8);
IkReal x4624=IKcos(j8);
IkReal x4625=IKcos(j8);
IkReal x4626=IKcos(j8);
IkReal x4627=IKcos(j8);
IkReal x4628=IKcos(j8);
IkReal x4629=IKcos(j8);
IkReal x4630=IKcos(j8);
IkReal x4631=IKcos(j8);
IkReal x4632=IKcos(j8);
evalcond[0]=((0.0841)+(((-0.0001200940595862)*cj2*r00*r11*sj2*(IKcos(j8))*(IKsin(j8))))+(((-0.00281174)*npx*r11*sj2*(IKcos(j8))*(IKsin(j8))))+(((0.00281174)*npy*r11*sj2))+(((2.0)*npx*npy*(IKcos(j8))*(IKsin(j8))))+(((-1.9764704569e-6)*(r10*r10)*(x4597*x4597)))+(((0.015751)*cj2*npy*r11*(x4598*x4598)))+(((2.0)*px*py*r01*r11*(x4599*x4599)))+(((pz*pz)*(r20*r20)*(x4600*x4600)))+(((6.202350025e-5)*(r01*r01)*(x4601*x4601)))+(((-6.00470297931e-5)*(cj2*cj2)*(r10*r10)*(x4602*x4602)))+(((0.0001200940595862)*cj2*r01*r11*sj2))+(((-2.214385837e-5)*r00*r10*(x4603*x4603)))+(((-2.0)*px*py*r00*r10*(x4604*x4604)))+(((0.015751)*cj2*npx*r11*(IKcos(j8))*(IKsin(j8))))+(((-6.202350025e-5)*(r01*r01)))+(((-0.00281174)*npy*r11*sj2*(x4605*x4605)))+(((-1.0)*(px*px)*(r00*r00)*(x4606*x4606)))+(((-1.0)*(py*py)*(r10*r10)*(x4607*x4607)))+(((-0.0001200940595862)*cj2*r01*r11*sj2*(x4608*x4608)))+(((-6.00470297931e-5)*(cj2*cj2)*(r01*r01)*(x4609*x4609)))+(((-0.00281174)*cj2*npy*r00*(IKcos(j8))*(IKsin(j8))))+(((6.00470297931e-5)*(cj2*cj2)*(r01*r01)))+(((-2.0)*px*py*r01*r11))+(((4.428771674e-5)*r01*r11*(cj2*cj2)))+(((-0.015751)*cj2*npy*r11))+(((0.015751)*npx*r00*sj2*(x4610*x4610)))+(((4.428771674e-5)*cj2*r00*r01*sj2*(IKcos(j8))*(IKsin(j8))))+(((0.00281174)*cj2*npy*r01))+(((-1.9764704569e-6)*(r11*r11)))+(((2.214385837e-5)*r00*r11*(IKcos(j8))*(IKsin(j8))))+(((4.428771674e-5)*r00*r10*(cj2*cj2)*(x4611*x4611)))+(((0.015751)*cj2*npy*r10*(IKcos(j8))*(IKsin(j8))))+(((0.0001240470005)*r00*r01*(IKcos(j8))*(IKsin(j8))))+(((6.00470297931e-5)*(cj2*cj2)*(r00*r00)*(x4612*x4612)))+(((-0.00281174)*npy*r10*sj2*(IKcos(j8))*(IKsin(j8))))+(((-1.0)*(pz*pz)*(r21*r21)*(x4613*x4613)))+(((-4.428771674e-5)*r00*r11*(cj2*cj2)*(IKcos(j8))*(IKsin(j8))))+(((2.214385837e-5)*cj2*sj2*(r10*r10)*(x4614*x4614)))+(((2.214385837e-5)*r01*r10*(IKcos(j8))*(IKsin(j8))))+(((-2.0)*npy*pz*r21))+(((6.00470297931e-5)*(cj2*cj2)*(r11*r11)*(x4615*x4615)))+(((-6.202350025e-5)*(r00*r00)*(x4616*x4616)))+(((0.00281174)*npx*r10*sj2*(x4617*x4617)))+(((-2.0)*npx*pz*r20*(x4618*x4618)))+(((-2.214385837e-5)*r01*r11))+(((-0.015751)*cj2*npx*r10*(x4619*x4619)))+(((-0.015751)*npy*r00*sj2*(IKcos(j8))*(IKsin(j8))))+(((px*px)*(r01*r01)*(x4620*x4620)))+(((2.214385837e-5)*r01*r11*(x4621*x4621)))+(((-4.428771674e-5)*cj2*r10*r11*sj2*(IKcos(j8))*(IKsin(j8))))+(((0.00281174)*cj2*npx*r00*(x4622*x4622)))+(((-1.0)*(py*py)*(r11*r11)))+(((-4.428771674e-5)*r01*r10*(cj2*cj2)*(IKcos(j8))*(IKsin(j8))))+(((-0.015751)*npx*r01*sj2*(IKcos(j8))*(IKsin(j8))))+(((-0.015751)*npy*r01*sj2*(x4623*x4623)))+(((-0.0001200940595862)*cj2*r01*r10*sj2*(IKcos(j8))*(IKsin(j8))))+(((pz*pz)*(r21*r21)))+(((-0.00281174)*cj2*npy*r01*(x4624*x4624)))+(((0.0001200940595862)*r10*r11*(cj2*cj2)*(IKcos(j8))*(IKsin(j8))))+(((-0.00281174)*cj2*npx*r01*(IKcos(j8))*(IKsin(j8))))+(((-0.0001200940595862)*r00*r01*(cj2*cj2)*(IKcos(j8))*(IKsin(j8))))+(((-2.214385837e-5)*cj2*sj2*(r01*r01)))+(((-4.428771674e-5)*r01*r11*(cj2*cj2)*(x4625*x4625)))+(((0.0001200940595862)*cj2*r00*r10*sj2*(x4626*x4626)))+(((-2.214385837e-5)*cj2*sj2*(r00*r00)*(x4627*x4627)))+(((-2.214385837e-5)*cj2*sj2*(r11*r11)*(x4628*x4628)))+(((2.214385837e-5)*cj2*sj2*(r11*r11)))+(((2.214385837e-5)*cj2*sj2*(r01*r01)*(x4629*x4629)))+(((3.9529409138e-6)*r10*r11*(IKcos(j8))*(IKsin(j8))))+(((1.9764704569e-6)*(r11*r11)*(x4630*x4630)))+(((py*py)*(r11*r11)*(x4631*x4631)))+(((0.015751)*npy*r01*sj2))+(((2.0)*npy*pz*r21*(x4632*x4632)))+(((-1.0)*(px*px)*(r01*r01)))+(((-6.00470297931e-5)*(cj2*cj2)*(r11*r11))));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j7eval[1];
j7eval[0]=1.0;
if( IKabs(j7eval[0]) < 0.0000000100000000  )
{
continue; // no branches [j7]

} else
{
IkReal op[2+1], zeror[2];
int numroots;
op[0]=-1.0;
op[1]=0;
op[2]=1.0;
polyroots2(op,zeror,numroots);
IkReal j7array[2], cj7array[2], sj7array[2], tempj7array[1];
int numsolutions = 0;
for(int ij7 = 0; ij7 < numroots; ++ij7)
{
IkReal htj7 = zeror[ij7];
tempj7array[0]=((2.0)*(atan(htj7)));
for(int kj7 = 0; kj7 < 1; ++kj7)
{
j7array[numsolutions] = tempj7array[kj7];
if( j7array[numsolutions] > IKPI )
{
    j7array[numsolutions]-=IK2PI;
}
else if( j7array[numsolutions] < -IKPI )
{
    j7array[numsolutions]+=IK2PI;
}
sj7array[numsolutions] = IKsin(j7array[numsolutions]);
cj7array[numsolutions] = IKcos(j7array[numsolutions]);
numsolutions++;
}
}
bool j7valid[2]={true,true};
_nj7 = 2;
for(int ij7 = 0; ij7 < numsolutions; ++ij7)
    {
if( !j7valid[ij7] )
{
    continue;
}
    j7 = j7array[ij7]; cj7 = cj7array[ij7]; sj7 = sj7array[ij7];
htj7 = IKtan(j7/2);

_ij7[0] = ij7; _ij7[1] = -1;
for(int iij7 = ij7+1; iij7 < numsolutions; ++iij7)
{
if( j7valid[iij7] && IKabs(cj7array[ij7]-cj7array[iij7]) < IKFAST_SOLUTION_THRESH && IKabs(sj7array[ij7]-sj7array[iij7]) < IKFAST_SOLUTION_THRESH )
{
    j7valid[iij7]=false; _ij7[1] = iij7; break; 
}
}
rotationfunction0(solutions);
    }

}

}
}
}

}

}

} else
{
IkReal op[2+1], zeror[2];
int numroots;
op[0]=-1.0;
op[1]=0;
op[2]=1.0;
polyroots2(op,zeror,numroots);
IkReal j7array[2], cj7array[2], sj7array[2], tempj7array[1];
int numsolutions = 0;
for(int ij7 = 0; ij7 < numroots; ++ij7)
{
IkReal htj7 = zeror[ij7];
tempj7array[0]=((2.0)*(atan(htj7)));
for(int kj7 = 0; kj7 < 1; ++kj7)
{
j7array[numsolutions] = tempj7array[kj7];
if( j7array[numsolutions] > IKPI )
{
    j7array[numsolutions]-=IK2PI;
}
else if( j7array[numsolutions] < -IKPI )
{
    j7array[numsolutions]+=IK2PI;
}
sj7array[numsolutions] = IKsin(j7array[numsolutions]);
cj7array[numsolutions] = IKcos(j7array[numsolutions]);
numsolutions++;
}
}
bool j7valid[2]={true,true};
_nj7 = 2;
for(int ij7 = 0; ij7 < numsolutions; ++ij7)
    {
if( !j7valid[ij7] )
{
    continue;
}
    j7 = j7array[ij7]; cj7 = cj7array[ij7]; sj7 = sj7array[ij7];
htj7 = IKtan(j7/2);

_ij7[0] = ij7; _ij7[1] = -1;
for(int iij7 = ij7+1; iij7 < numsolutions; ++iij7)
{
if( j7valid[iij7] && IKabs(cj7array[ij7]-cj7array[iij7]) < IKFAST_SOLUTION_THRESH && IKabs(sj7array[ij7]-sj7array[iij7]) < IKFAST_SOLUTION_THRESH )
{
    j7valid[iij7]=false; _ij7[1] = iij7; break; 
}
}
{
IkReal j8eval[1];
IkReal x4633=((0.0078755)*cj2);
IkReal x4634=((0.0078755)*sj2);
IkReal x4635=((0.00140587)*sj2);
IkReal x4636=((0.00140587)*cj2);
j8eval[0]=((IKabs((((r10*x4633))+npx+(((-1.0)*r10*x4635))+(((-1.0)*r00*x4636))+(((-1.0)*r00*x4634)))))+(IKabs((((r01*x4636))+((r01*x4634))+((r11*x4635))+(((-1.0)*npy))+(((-1.0)*r11*x4633))))));
if( IKabs(j8eval[0]) < 0.0000010000000000  )
{
continue; // no branches [j8]

} else
{
{
IkReal j8array[2], cj8array[2], sj8array[2];
bool j8valid[2]={false};
_nj8 = 2;
IkReal x4637=((0.0078755)*cj2);
IkReal x4638=((0.0078755)*sj2);
IkReal x4639=((0.00140587)*sj2);
IkReal x4640=((0.00140587)*cj2);
CheckValue<IkReal> x4642 = IKatan2WithCheck(IkReal((((r10*x4637))+npx+(((-1.0)*r10*x4639))+(((-1.0)*r00*x4638))+(((-1.0)*r00*x4640)))),IkReal((((r01*x4638))+((r11*x4639))+(((-1.0)*npy))+((r01*x4640))+(((-1.0)*r11*x4637)))),IKFAST_ATAN2_MAGTHRESH);
if(!x4642.valid){
continue;
}
IkReal x4641=x4642.value;
j8array[0]=((-1.0)*x4641);
sj8array[0]=IKsin(j8array[0]);
cj8array[0]=IKcos(j8array[0]);
j8array[1]=((3.14159265358979)+(((-1.0)*x4641)));
sj8array[1]=IKsin(j8array[1]);
cj8array[1]=IKcos(j8array[1]);
if( j8array[0] > IKPI )
{
    j8array[0]-=IK2PI;
}
else if( j8array[0] < -IKPI )
{    j8array[0]+=IK2PI;
}
j8valid[0] = true;
if( j8array[1] > IKPI )
{
    j8array[1]-=IK2PI;
}
else if( j8array[1] < -IKPI )
{    j8array[1]+=IK2PI;
}
j8valid[1] = true;
for(int ij8 = 0; ij8 < 2; ++ij8)
{
if( !j8valid[ij8] )
{
    continue;
}
_ij8[0] = ij8; _ij8[1] = -1;
for(int iij8 = ij8+1; iij8 < 2; ++iij8)
{
if( j8valid[iij8] && IKabs(cj8array[ij8]-cj8array[iij8]) < IKFAST_SOLUTION_THRESH && IKabs(sj8array[ij8]-sj8array[iij8]) < IKFAST_SOLUTION_THRESH )
{
    j8valid[iij8]=false; _ij8[1] = iij8; break; 
}
}
j8 = j8array[ij8]; cj8 = cj8array[ij8]; sj8 = sj8array[ij8];
{
IkReal evalcond[1];
IkReal x4643=IKcos(j8);
IkReal x4644=IKcos(j8);
IkReal x4645=IKcos(j8);
IkReal x4646=IKcos(j8);
IkReal x4647=IKcos(j8);
IkReal x4648=IKcos(j8);
IkReal x4649=IKcos(j8);
IkReal x4650=IKcos(j8);
IkReal x4651=IKcos(j8);
IkReal x4652=IKcos(j8);
IkReal x4653=IKcos(j8);
IkReal x4654=IKcos(j8);
IkReal x4655=IKcos(j8);
IkReal x4656=IKcos(j8);
IkReal x4657=IKcos(j8);
IkReal x4658=IKcos(j8);
IkReal x4659=IKcos(j8);
IkReal x4660=IKcos(j8);
IkReal x4661=IKcos(j8);
IkReal x4662=IKcos(j8);
IkReal x4663=IKcos(j8);
IkReal x4664=IKcos(j8);
IkReal x4665=IKcos(j8);
IkReal x4666=IKcos(j8);
IkReal x4667=IKcos(j8);
IkReal x4668=IKcos(j8);
IkReal x4669=IKcos(j8);
IkReal x4670=IKcos(j8);
IkReal x4671=IKcos(j8);
IkReal x4672=IKcos(j8);
IkReal x4673=IKcos(j8);
IkReal x4674=IKcos(j8);
IkReal x4675=IKcos(j8);
IkReal x4676=IKcos(j8);
IkReal x4677=IKcos(j8);
IkReal x4678=IKcos(j8);
evalcond[0]=((0.0841)+(((-0.0001200940595862)*cj2*r00*r11*sj2*(IKcos(j8))*(IKsin(j8))))+(((-0.00281174)*npx*r11*sj2*(IKcos(j8))*(IKsin(j8))))+(((0.00281174)*npy*r11*sj2))+(((2.0)*npx*npy*(IKcos(j8))*(IKsin(j8))))+(((-1.9764704569e-6)*(r10*r10)*(x4643*x4643)))+(((0.015751)*cj2*npy*r11*(x4644*x4644)))+(((2.0)*px*py*r01*r11*(x4645*x4645)))+(((pz*pz)*(r20*r20)*(x4646*x4646)))+(((6.202350025e-5)*(r01*r01)*(x4647*x4647)))+(((-6.00470297931e-5)*(cj2*cj2)*(r10*r10)*(x4648*x4648)))+(((0.0001200940595862)*cj2*r01*r11*sj2))+(((-2.214385837e-5)*r00*r10*(x4649*x4649)))+(((-2.0)*px*py*r00*r10*(x4650*x4650)))+(((0.015751)*cj2*npx*r11*(IKcos(j8))*(IKsin(j8))))+(((-6.202350025e-5)*(r01*r01)))+(((-0.00281174)*npy*r11*sj2*(x4651*x4651)))+(((-1.0)*(px*px)*(r00*r00)*(x4652*x4652)))+(((-1.0)*(py*py)*(r10*r10)*(x4653*x4653)))+(((-0.0001200940595862)*cj2*r01*r11*sj2*(x4654*x4654)))+(((-6.00470297931e-5)*(cj2*cj2)*(r01*r01)*(x4655*x4655)))+(((-0.00281174)*cj2*npy*r00*(IKcos(j8))*(IKsin(j8))))+(((6.00470297931e-5)*(cj2*cj2)*(r01*r01)))+(((-2.0)*px*py*r01*r11))+(((4.428771674e-5)*r01*r11*(cj2*cj2)))+(((-0.015751)*cj2*npy*r11))+(((0.015751)*npx*r00*sj2*(x4656*x4656)))+(((4.428771674e-5)*cj2*r00*r01*sj2*(IKcos(j8))*(IKsin(j8))))+(((0.00281174)*cj2*npy*r01))+(((-1.9764704569e-6)*(r11*r11)))+(((2.214385837e-5)*r00*r11*(IKcos(j8))*(IKsin(j8))))+(((4.428771674e-5)*r00*r10*(cj2*cj2)*(x4657*x4657)))+(((0.015751)*cj2*npy*r10*(IKcos(j8))*(IKsin(j8))))+(((0.0001240470005)*r00*r01*(IKcos(j8))*(IKsin(j8))))+(((6.00470297931e-5)*(cj2*cj2)*(r00*r00)*(x4658*x4658)))+(((-0.00281174)*npy*r10*sj2*(IKcos(j8))*(IKsin(j8))))+(((-1.0)*(pz*pz)*(r21*r21)*(x4659*x4659)))+(((-4.428771674e-5)*r00*r11*(cj2*cj2)*(IKcos(j8))*(IKsin(j8))))+(((2.214385837e-5)*cj2*sj2*(r10*r10)*(x4660*x4660)))+(((2.214385837e-5)*r01*r10*(IKcos(j8))*(IKsin(j8))))+(((-2.0)*npy*pz*r21))+(((6.00470297931e-5)*(cj2*cj2)*(r11*r11)*(x4661*x4661)))+(((-6.202350025e-5)*(r00*r00)*(x4662*x4662)))+(((0.00281174)*npx*r10*sj2*(x4663*x4663)))+(((-2.0)*npx*pz*r20*(x4664*x4664)))+(((-2.214385837e-5)*r01*r11))+(((-0.015751)*cj2*npx*r10*(x4665*x4665)))+(((-0.015751)*npy*r00*sj2*(IKcos(j8))*(IKsin(j8))))+(((px*px)*(r01*r01)*(x4666*x4666)))+(((2.214385837e-5)*r01*r11*(x4667*x4667)))+(((-4.428771674e-5)*cj2*r10*r11*sj2*(IKcos(j8))*(IKsin(j8))))+(((0.00281174)*cj2*npx*r00*(x4668*x4668)))+(((-1.0)*(py*py)*(r11*r11)))+(((-4.428771674e-5)*r01*r10*(cj2*cj2)*(IKcos(j8))*(IKsin(j8))))+(((-0.015751)*npx*r01*sj2*(IKcos(j8))*(IKsin(j8))))+(((-0.015751)*npy*r01*sj2*(x4669*x4669)))+(((-0.0001200940595862)*cj2*r01*r10*sj2*(IKcos(j8))*(IKsin(j8))))+(((pz*pz)*(r21*r21)))+(((-0.00281174)*cj2*npy*r01*(x4670*x4670)))+(((0.0001200940595862)*r10*r11*(cj2*cj2)*(IKcos(j8))*(IKsin(j8))))+(((-0.00281174)*cj2*npx*r01*(IKcos(j8))*(IKsin(j8))))+(((-0.0001200940595862)*r00*r01*(cj2*cj2)*(IKcos(j8))*(IKsin(j8))))+(((-2.214385837e-5)*cj2*sj2*(r01*r01)))+(((-4.428771674e-5)*r01*r11*(cj2*cj2)*(x4671*x4671)))+(((0.0001200940595862)*cj2*r00*r10*sj2*(x4672*x4672)))+(((-2.214385837e-5)*cj2*sj2*(r00*r00)*(x4673*x4673)))+(((-2.214385837e-5)*cj2*sj2*(r11*r11)*(x4674*x4674)))+(((2.214385837e-5)*cj2*sj2*(r11*r11)))+(((2.214385837e-5)*cj2*sj2*(r01*r01)*(x4675*x4675)))+(((3.9529409138e-6)*r10*r11*(IKcos(j8))*(IKsin(j8))))+(((1.9764704569e-6)*(r11*r11)*(x4676*x4676)))+(((py*py)*(r11*r11)*(x4677*x4677)))+(((0.015751)*npy*r01*sj2))+(((2.0)*npy*pz*r21*(x4678*x4678)))+(((-1.0)*(px*px)*(r01*r01)))+(((-6.00470297931e-5)*(cj2*cj2)*(r11*r11))));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

rotationfunction0(solutions);
}
}

}

}
    }

}

}
}
}

}

}

} else
{
{
IkReal j2array[1], cj2array[1], sj2array[1];
bool j2valid[1]={false};
_nj2 = 1;
IkReal x4679=((0.00140587)*npx);
IkReal x4680=((0.0078755)*npy);
IkReal x4681=((0.0078755)*npx);
IkReal x4682=((0.00140587)*npy);
CheckValue<IkReal> x4683 = IKatan2WithCheck(IkReal((((r00*x4682))+((r11*x4681))+(((-1.0)*r01*x4679))+(((-1.0)*r10*x4680)))),IkReal(((((-1.0)*r00*x4680))+((r11*x4679))+((r01*x4681))+(((-1.0)*r10*x4682)))),IKFAST_ATAN2_MAGTHRESH);
if(!x4683.valid){
continue;
}
CheckValue<IkReal> x4684=IKPowWithIntegerCheck(IKsign(r22),-1);
if(!x4684.valid){
continue;
}
j2array[0]=((-1.5707963267949)+(x4683.value)+(((1.5707963267949)*(x4684.value))));
sj2array[0]=IKsin(j2array[0]);
cj2array[0]=IKcos(j2array[0]);
if( j2array[0] > IKPI )
{
    j2array[0]-=IK2PI;
}
else if( j2array[0] < -IKPI )
{    j2array[0]+=IK2PI;
}
j2valid[0] = true;
for(int ij2 = 0; ij2 < 1; ++ij2)
{
if( !j2valid[ij2] )
{
    continue;
}
_ij2[0] = ij2; _ij2[1] = -1;
for(int iij2 = ij2+1; iij2 < 1; ++iij2)
{
if( j2valid[iij2] && IKabs(cj2array[ij2]-cj2array[iij2]) < IKFAST_SOLUTION_THRESH && IKabs(sj2array[ij2]-sj2array[iij2]) < IKFAST_SOLUTION_THRESH )
{
    j2valid[iij2]=false; _ij2[1] = iij2; break; 
}
}
j2 = j2array[ij2]; cj2 = cj2array[ij2]; sj2 = sj2array[ij2];
{
IkReal evalcond[4];
IkReal x4685=IKcos(j2);
IkReal x4686=IKsin(j2);
IkReal x4687=((0.00140587)*x4686);
IkReal x4688=((0.00140587)*x4685);
IkReal x4689=((0.0078755)*x4685);
IkReal x4690=((0.0078755)*x4686);
evalcond[0]=((((-1.0)*r00*x4688))+(((-1.0)*r00*x4690))+npx+((r10*x4689))+(((-1.0)*r10*x4687)));
evalcond[1]=((((-1.0)*r11*x4687))+(((-1.0)*r01*x4690))+(((-1.0)*r01*x4688))+npy+((r11*x4689)));
evalcond[2]=(npz+(((-1.0)*r02*x4690))+(((-1.0)*r02*x4688))+((r12*x4689))+(((-1.0)*r12*x4687)));
evalcond[3]=((-6.39999707069e-5)+(((0.00281174)*px*x4685))+(((-1.0)*pp))+(((-0.015751)*py*x4685))+(((0.015751)*px*x4686))+(((0.00281174)*py*x4686)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j7eval[1];
j7eval[0]=1.0;
if( IKabs(j7eval[0]) < 0.0000000100000000  )
{
{
IkReal j8eval[1];
IkReal x4691=((0.0078755)*cj2);
IkReal x4692=((0.0078755)*sj2);
IkReal x4693=((0.00140587)*sj2);
IkReal x4694=((0.00140587)*cj2);
j8eval[0]=((IKabs(((((-1.0)*r00*x4692))+(((-1.0)*r00*x4694))+npx+((r10*x4691))+(((-1.0)*r10*x4693)))))+(IKabs(((((-1.0)*npy))+((r01*x4692))+((r01*x4694))+((r11*x4693))+(((-1.0)*r11*x4691))))));
if( IKabs(j8eval[0]) < 0.0000010000000000  )
{
continue; // no branches [j7, j8]

} else
{
{
IkReal j8array[2], cj8array[2], sj8array[2];
bool j8valid[2]={false};
_nj8 = 2;
IkReal x4695=((0.0078755)*cj2);
IkReal x4696=((0.0078755)*sj2);
IkReal x4697=((0.00140587)*sj2);
IkReal x4698=((0.00140587)*cj2);
CheckValue<IkReal> x4700 = IKatan2WithCheck(IkReal(((((-1.0)*r00*x4696))+(((-1.0)*r00*x4698))+npx+((r10*x4695))+(((-1.0)*r10*x4697)))),IkReal(((((-1.0)*npy))+((r01*x4698))+((r01*x4696))+((r11*x4697))+(((-1.0)*r11*x4695)))),IKFAST_ATAN2_MAGTHRESH);
if(!x4700.valid){
continue;
}
IkReal x4699=x4700.value;
j8array[0]=((-1.0)*x4699);
sj8array[0]=IKsin(j8array[0]);
cj8array[0]=IKcos(j8array[0]);
j8array[1]=((3.14159265358979)+(((-1.0)*x4699)));
sj8array[1]=IKsin(j8array[1]);
cj8array[1]=IKcos(j8array[1]);
if( j8array[0] > IKPI )
{
    j8array[0]-=IK2PI;
}
else if( j8array[0] < -IKPI )
{    j8array[0]+=IK2PI;
}
j8valid[0] = true;
if( j8array[1] > IKPI )
{
    j8array[1]-=IK2PI;
}
else if( j8array[1] < -IKPI )
{    j8array[1]+=IK2PI;
}
j8valid[1] = true;
for(int ij8 = 0; ij8 < 2; ++ij8)
{
if( !j8valid[ij8] )
{
    continue;
}
_ij8[0] = ij8; _ij8[1] = -1;
for(int iij8 = ij8+1; iij8 < 2; ++iij8)
{
if( j8valid[iij8] && IKabs(cj8array[ij8]-cj8array[iij8]) < IKFAST_SOLUTION_THRESH && IKabs(sj8array[ij8]-sj8array[iij8]) < IKFAST_SOLUTION_THRESH )
{
    j8valid[iij8]=false; _ij8[1] = iij8; break; 
}
}
j8 = j8array[ij8]; cj8 = cj8array[ij8]; sj8 = sj8array[ij8];
{
IkReal evalcond[1];
IkReal x4701=IKcos(j8);
IkReal x4702=IKcos(j8);
IkReal x4703=IKcos(j8);
IkReal x4704=IKcos(j8);
IkReal x4705=IKcos(j8);
IkReal x4706=IKcos(j8);
IkReal x4707=IKcos(j8);
IkReal x4708=IKcos(j8);
IkReal x4709=IKcos(j8);
IkReal x4710=IKcos(j8);
IkReal x4711=IKcos(j8);
IkReal x4712=IKcos(j8);
IkReal x4713=IKcos(j8);
IkReal x4714=IKcos(j8);
IkReal x4715=IKcos(j8);
IkReal x4716=IKcos(j8);
IkReal x4717=IKcos(j8);
IkReal x4718=IKcos(j8);
IkReal x4719=IKcos(j8);
IkReal x4720=IKcos(j8);
IkReal x4721=IKcos(j8);
IkReal x4722=IKcos(j8);
IkReal x4723=IKcos(j8);
IkReal x4724=IKcos(j8);
IkReal x4725=IKcos(j8);
IkReal x4726=IKcos(j8);
IkReal x4727=IKcos(j8);
IkReal x4728=IKcos(j8);
IkReal x4729=IKcos(j8);
IkReal x4730=IKcos(j8);
IkReal x4731=IKcos(j8);
IkReal x4732=IKcos(j8);
IkReal x4733=IKcos(j8);
IkReal x4734=IKcos(j8);
IkReal x4735=IKcos(j8);
IkReal x4736=IKcos(j8);
evalcond[0]=((0.0841)+(((-0.0001200940595862)*cj2*r00*r11*sj2*(IKcos(j8))*(IKsin(j8))))+(((-0.00281174)*npx*r11*sj2*(IKcos(j8))*(IKsin(j8))))+(((0.00281174)*npy*r11*sj2))+(((2.0)*npx*npy*(IKcos(j8))*(IKsin(j8))))+(((-1.9764704569e-6)*(r10*r10)*(x4701*x4701)))+(((0.015751)*cj2*npy*r11*(x4702*x4702)))+(((2.0)*px*py*r01*r11*(x4703*x4703)))+(((pz*pz)*(r20*r20)*(x4704*x4704)))+(((6.202350025e-5)*(r01*r01)*(x4705*x4705)))+(((-6.00470297931e-5)*(cj2*cj2)*(r10*r10)*(x4706*x4706)))+(((0.0001200940595862)*cj2*r01*r11*sj2))+(((-2.214385837e-5)*r00*r10*(x4707*x4707)))+(((-2.0)*px*py*r00*r10*(x4708*x4708)))+(((0.015751)*cj2*npx*r11*(IKcos(j8))*(IKsin(j8))))+(((-6.202350025e-5)*(r01*r01)))+(((-0.00281174)*npy*r11*sj2*(x4709*x4709)))+(((-1.0)*(px*px)*(r00*r00)*(x4710*x4710)))+(((-1.0)*(py*py)*(r10*r10)*(x4711*x4711)))+(((-0.0001200940595862)*cj2*r01*r11*sj2*(x4712*x4712)))+(((-6.00470297931e-5)*(cj2*cj2)*(r01*r01)*(x4713*x4713)))+(((-0.00281174)*cj2*npy*r00*(IKcos(j8))*(IKsin(j8))))+(((6.00470297931e-5)*(cj2*cj2)*(r01*r01)))+(((-2.0)*px*py*r01*r11))+(((4.428771674e-5)*r01*r11*(cj2*cj2)))+(((-0.015751)*cj2*npy*r11))+(((0.015751)*npx*r00*sj2*(x4714*x4714)))+(((4.428771674e-5)*cj2*r00*r01*sj2*(IKcos(j8))*(IKsin(j8))))+(((0.00281174)*cj2*npy*r01))+(((-1.9764704569e-6)*(r11*r11)))+(((2.214385837e-5)*r00*r11*(IKcos(j8))*(IKsin(j8))))+(((4.428771674e-5)*r00*r10*(cj2*cj2)*(x4715*x4715)))+(((0.015751)*cj2*npy*r10*(IKcos(j8))*(IKsin(j8))))+(((0.0001240470005)*r00*r01*(IKcos(j8))*(IKsin(j8))))+(((6.00470297931e-5)*(cj2*cj2)*(r00*r00)*(x4716*x4716)))+(((-0.00281174)*npy*r10*sj2*(IKcos(j8))*(IKsin(j8))))+(((-1.0)*(pz*pz)*(r21*r21)*(x4717*x4717)))+(((-4.428771674e-5)*r00*r11*(cj2*cj2)*(IKcos(j8))*(IKsin(j8))))+(((2.214385837e-5)*cj2*sj2*(r10*r10)*(x4718*x4718)))+(((2.214385837e-5)*r01*r10*(IKcos(j8))*(IKsin(j8))))+(((-2.0)*npy*pz*r21))+(((6.00470297931e-5)*(cj2*cj2)*(r11*r11)*(x4719*x4719)))+(((-6.202350025e-5)*(r00*r00)*(x4720*x4720)))+(((0.00281174)*npx*r10*sj2*(x4721*x4721)))+(((-2.0)*npx*pz*r20*(x4722*x4722)))+(((-2.214385837e-5)*r01*r11))+(((-0.015751)*cj2*npx*r10*(x4723*x4723)))+(((-0.015751)*npy*r00*sj2*(IKcos(j8))*(IKsin(j8))))+(((px*px)*(r01*r01)*(x4724*x4724)))+(((2.214385837e-5)*r01*r11*(x4725*x4725)))+(((-4.428771674e-5)*cj2*r10*r11*sj2*(IKcos(j8))*(IKsin(j8))))+(((0.00281174)*cj2*npx*r00*(x4726*x4726)))+(((-1.0)*(py*py)*(r11*r11)))+(((-4.428771674e-5)*r01*r10*(cj2*cj2)*(IKcos(j8))*(IKsin(j8))))+(((-0.015751)*npx*r01*sj2*(IKcos(j8))*(IKsin(j8))))+(((-0.015751)*npy*r01*sj2*(x4727*x4727)))+(((-0.0001200940595862)*cj2*r01*r10*sj2*(IKcos(j8))*(IKsin(j8))))+(((pz*pz)*(r21*r21)))+(((-0.00281174)*cj2*npy*r01*(x4728*x4728)))+(((0.0001200940595862)*r10*r11*(cj2*cj2)*(IKcos(j8))*(IKsin(j8))))+(((-0.00281174)*cj2*npx*r01*(IKcos(j8))*(IKsin(j8))))+(((-0.0001200940595862)*r00*r01*(cj2*cj2)*(IKcos(j8))*(IKsin(j8))))+(((-2.214385837e-5)*cj2*sj2*(r01*r01)))+(((-4.428771674e-5)*r01*r11*(cj2*cj2)*(x4729*x4729)))+(((0.0001200940595862)*cj2*r00*r10*sj2*(x4730*x4730)))+(((-2.214385837e-5)*cj2*sj2*(r00*r00)*(x4731*x4731)))+(((-2.214385837e-5)*cj2*sj2*(r11*r11)*(x4732*x4732)))+(((2.214385837e-5)*cj2*sj2*(r11*r11)))+(((2.214385837e-5)*cj2*sj2*(r01*r01)*(x4733*x4733)))+(((3.9529409138e-6)*r10*r11*(IKcos(j8))*(IKsin(j8))))+(((1.9764704569e-6)*(r11*r11)*(x4734*x4734)))+(((py*py)*(r11*r11)*(x4735*x4735)))+(((0.015751)*npy*r01*sj2))+(((2.0)*npy*pz*r21*(x4736*x4736)))+(((-1.0)*(px*px)*(r01*r01)))+(((-6.00470297931e-5)*(cj2*cj2)*(r11*r11))));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j7eval[1];
j7eval[0]=1.0;
if( IKabs(j7eval[0]) < 0.0000000100000000  )
{
continue; // no branches [j7]

} else
{
IkReal op[2+1], zeror[2];
int numroots;
op[0]=-1.0;
op[1]=0;
op[2]=1.0;
polyroots2(op,zeror,numroots);
IkReal j7array[2], cj7array[2], sj7array[2], tempj7array[1];
int numsolutions = 0;
for(int ij7 = 0; ij7 < numroots; ++ij7)
{
IkReal htj7 = zeror[ij7];
tempj7array[0]=((2.0)*(atan(htj7)));
for(int kj7 = 0; kj7 < 1; ++kj7)
{
j7array[numsolutions] = tempj7array[kj7];
if( j7array[numsolutions] > IKPI )
{
    j7array[numsolutions]-=IK2PI;
}
else if( j7array[numsolutions] < -IKPI )
{
    j7array[numsolutions]+=IK2PI;
}
sj7array[numsolutions] = IKsin(j7array[numsolutions]);
cj7array[numsolutions] = IKcos(j7array[numsolutions]);
numsolutions++;
}
}
bool j7valid[2]={true,true};
_nj7 = 2;
for(int ij7 = 0; ij7 < numsolutions; ++ij7)
    {
if( !j7valid[ij7] )
{
    continue;
}
    j7 = j7array[ij7]; cj7 = cj7array[ij7]; sj7 = sj7array[ij7];
htj7 = IKtan(j7/2);

_ij7[0] = ij7; _ij7[1] = -1;
for(int iij7 = ij7+1; iij7 < numsolutions; ++iij7)
{
if( j7valid[iij7] && IKabs(cj7array[ij7]-cj7array[iij7]) < IKFAST_SOLUTION_THRESH && IKabs(sj7array[ij7]-sj7array[iij7]) < IKFAST_SOLUTION_THRESH )
{
    j7valid[iij7]=false; _ij7[1] = iij7; break; 
}
}
rotationfunction0(solutions);
    }

}

}
}
}

}

}

} else
{
IkReal op[2+1], zeror[2];
int numroots;
op[0]=-1.0;
op[1]=0;
op[2]=1.0;
polyroots2(op,zeror,numroots);
IkReal j7array[2], cj7array[2], sj7array[2], tempj7array[1];
int numsolutions = 0;
for(int ij7 = 0; ij7 < numroots; ++ij7)
{
IkReal htj7 = zeror[ij7];
tempj7array[0]=((2.0)*(atan(htj7)));
for(int kj7 = 0; kj7 < 1; ++kj7)
{
j7array[numsolutions] = tempj7array[kj7];
if( j7array[numsolutions] > IKPI )
{
    j7array[numsolutions]-=IK2PI;
}
else if( j7array[numsolutions] < -IKPI )
{
    j7array[numsolutions]+=IK2PI;
}
sj7array[numsolutions] = IKsin(j7array[numsolutions]);
cj7array[numsolutions] = IKcos(j7array[numsolutions]);
numsolutions++;
}
}
bool j7valid[2]={true,true};
_nj7 = 2;
for(int ij7 = 0; ij7 < numsolutions; ++ij7)
    {
if( !j7valid[ij7] )
{
    continue;
}
    j7 = j7array[ij7]; cj7 = cj7array[ij7]; sj7 = sj7array[ij7];
htj7 = IKtan(j7/2);

_ij7[0] = ij7; _ij7[1] = -1;
for(int iij7 = ij7+1; iij7 < numsolutions; ++iij7)
{
if( j7valid[iij7] && IKabs(cj7array[ij7]-cj7array[iij7]) < IKFAST_SOLUTION_THRESH && IKabs(sj7array[ij7]-sj7array[iij7]) < IKFAST_SOLUTION_THRESH )
{
    j7valid[iij7]=false; _ij7[1] = iij7; break; 
}
}
{
IkReal j8eval[1];
IkReal x4737=((0.0078755)*cj2);
IkReal x4738=((0.0078755)*sj2);
IkReal x4739=((0.00140587)*sj2);
IkReal x4740=((0.00140587)*cj2);
j8eval[0]=((IKabs(((((-1.0)*r10*x4739))+(((-1.0)*r00*x4740))+npx+((r10*x4737))+(((-1.0)*r00*x4738)))))+(IKabs((((r11*x4739))+((r01*x4740))+(((-1.0)*npy))+(((-1.0)*r11*x4737))+((r01*x4738))))));
if( IKabs(j8eval[0]) < 0.0000010000000000  )
{
continue; // no branches [j8]

} else
{
{
IkReal j8array[2], cj8array[2], sj8array[2];
bool j8valid[2]={false};
_nj8 = 2;
IkReal x4741=((0.0078755)*cj2);
IkReal x4742=((0.0078755)*sj2);
IkReal x4743=((0.00140587)*sj2);
IkReal x4744=((0.00140587)*cj2);
CheckValue<IkReal> x4746 = IKatan2WithCheck(IkReal(((((-1.0)*r10*x4743))+(((-1.0)*r00*x4742))+(((-1.0)*r00*x4744))+npx+((r10*x4741)))),IkReal((((r11*x4743))+(((-1.0)*r11*x4741))+((r01*x4744))+((r01*x4742))+(((-1.0)*npy)))),IKFAST_ATAN2_MAGTHRESH);
if(!x4746.valid){
continue;
}
IkReal x4745=x4746.value;
j8array[0]=((-1.0)*x4745);
sj8array[0]=IKsin(j8array[0]);
cj8array[0]=IKcos(j8array[0]);
j8array[1]=((3.14159265358979)+(((-1.0)*x4745)));
sj8array[1]=IKsin(j8array[1]);
cj8array[1]=IKcos(j8array[1]);
if( j8array[0] > IKPI )
{
    j8array[0]-=IK2PI;
}
else if( j8array[0] < -IKPI )
{    j8array[0]+=IK2PI;
}
j8valid[0] = true;
if( j8array[1] > IKPI )
{
    j8array[1]-=IK2PI;
}
else if( j8array[1] < -IKPI )
{    j8array[1]+=IK2PI;
}
j8valid[1] = true;
for(int ij8 = 0; ij8 < 2; ++ij8)
{
if( !j8valid[ij8] )
{
    continue;
}
_ij8[0] = ij8; _ij8[1] = -1;
for(int iij8 = ij8+1; iij8 < 2; ++iij8)
{
if( j8valid[iij8] && IKabs(cj8array[ij8]-cj8array[iij8]) < IKFAST_SOLUTION_THRESH && IKabs(sj8array[ij8]-sj8array[iij8]) < IKFAST_SOLUTION_THRESH )
{
    j8valid[iij8]=false; _ij8[1] = iij8; break; 
}
}
j8 = j8array[ij8]; cj8 = cj8array[ij8]; sj8 = sj8array[ij8];
{
IkReal evalcond[1];
IkReal x4747=IKcos(j8);
IkReal x4748=IKcos(j8);
IkReal x4749=IKcos(j8);
IkReal x4750=IKcos(j8);
IkReal x4751=IKcos(j8);
IkReal x4752=IKcos(j8);
IkReal x4753=IKcos(j8);
IkReal x4754=IKcos(j8);
IkReal x4755=IKcos(j8);
IkReal x4756=IKcos(j8);
IkReal x4757=IKcos(j8);
IkReal x4758=IKcos(j8);
IkReal x4759=IKcos(j8);
IkReal x4760=IKcos(j8);
IkReal x4761=IKcos(j8);
IkReal x4762=IKcos(j8);
IkReal x4763=IKcos(j8);
IkReal x4764=IKcos(j8);
IkReal x4765=IKcos(j8);
IkReal x4766=IKcos(j8);
IkReal x4767=IKcos(j8);
IkReal x4768=IKcos(j8);
IkReal x4769=IKcos(j8);
IkReal x4770=IKcos(j8);
IkReal x4771=IKcos(j8);
IkReal x4772=IKcos(j8);
IkReal x4773=IKcos(j8);
IkReal x4774=IKcos(j8);
IkReal x4775=IKcos(j8);
IkReal x4776=IKcos(j8);
IkReal x4777=IKcos(j8);
IkReal x4778=IKcos(j8);
IkReal x4779=IKcos(j8);
IkReal x4780=IKcos(j8);
IkReal x4781=IKcos(j8);
IkReal x4782=IKcos(j8);
evalcond[0]=((0.0841)+(((-0.0001200940595862)*cj2*r00*r11*sj2*(IKcos(j8))*(IKsin(j8))))+(((-0.00281174)*npx*r11*sj2*(IKcos(j8))*(IKsin(j8))))+(((0.00281174)*npy*r11*sj2))+(((2.0)*npx*npy*(IKcos(j8))*(IKsin(j8))))+(((-1.9764704569e-6)*(r10*r10)*(x4747*x4747)))+(((0.015751)*cj2*npy*r11*(x4748*x4748)))+(((2.0)*px*py*r01*r11*(x4749*x4749)))+(((pz*pz)*(r20*r20)*(x4750*x4750)))+(((6.202350025e-5)*(r01*r01)*(x4751*x4751)))+(((-6.00470297931e-5)*(cj2*cj2)*(r10*r10)*(x4752*x4752)))+(((0.0001200940595862)*cj2*r01*r11*sj2))+(((-2.214385837e-5)*r00*r10*(x4753*x4753)))+(((-2.0)*px*py*r00*r10*(x4754*x4754)))+(((0.015751)*cj2*npx*r11*(IKcos(j8))*(IKsin(j8))))+(((-6.202350025e-5)*(r01*r01)))+(((-0.00281174)*npy*r11*sj2*(x4755*x4755)))+(((-1.0)*(px*px)*(r00*r00)*(x4756*x4756)))+(((-1.0)*(py*py)*(r10*r10)*(x4757*x4757)))+(((-0.0001200940595862)*cj2*r01*r11*sj2*(x4758*x4758)))+(((-6.00470297931e-5)*(cj2*cj2)*(r01*r01)*(x4759*x4759)))+(((-0.00281174)*cj2*npy*r00*(IKcos(j8))*(IKsin(j8))))+(((6.00470297931e-5)*(cj2*cj2)*(r01*r01)))+(((-2.0)*px*py*r01*r11))+(((4.428771674e-5)*r01*r11*(cj2*cj2)))+(((-0.015751)*cj2*npy*r11))+(((0.015751)*npx*r00*sj2*(x4760*x4760)))+(((4.428771674e-5)*cj2*r00*r01*sj2*(IKcos(j8))*(IKsin(j8))))+(((0.00281174)*cj2*npy*r01))+(((-1.9764704569e-6)*(r11*r11)))+(((2.214385837e-5)*r00*r11*(IKcos(j8))*(IKsin(j8))))+(((4.428771674e-5)*r00*r10*(cj2*cj2)*(x4761*x4761)))+(((0.015751)*cj2*npy*r10*(IKcos(j8))*(IKsin(j8))))+(((0.0001240470005)*r00*r01*(IKcos(j8))*(IKsin(j8))))+(((6.00470297931e-5)*(cj2*cj2)*(r00*r00)*(x4762*x4762)))+(((-0.00281174)*npy*r10*sj2*(IKcos(j8))*(IKsin(j8))))+(((-1.0)*(pz*pz)*(r21*r21)*(x4763*x4763)))+(((-4.428771674e-5)*r00*r11*(cj2*cj2)*(IKcos(j8))*(IKsin(j8))))+(((2.214385837e-5)*cj2*sj2*(r10*r10)*(x4764*x4764)))+(((2.214385837e-5)*r01*r10*(IKcos(j8))*(IKsin(j8))))+(((-2.0)*npy*pz*r21))+(((6.00470297931e-5)*(cj2*cj2)*(r11*r11)*(x4765*x4765)))+(((-6.202350025e-5)*(r00*r00)*(x4766*x4766)))+(((0.00281174)*npx*r10*sj2*(x4767*x4767)))+(((-2.0)*npx*pz*r20*(x4768*x4768)))+(((-2.214385837e-5)*r01*r11))+(((-0.015751)*cj2*npx*r10*(x4769*x4769)))+(((-0.015751)*npy*r00*sj2*(IKcos(j8))*(IKsin(j8))))+(((px*px)*(r01*r01)*(x4770*x4770)))+(((2.214385837e-5)*r01*r11*(x4771*x4771)))+(((-4.428771674e-5)*cj2*r10*r11*sj2*(IKcos(j8))*(IKsin(j8))))+(((0.00281174)*cj2*npx*r00*(x4772*x4772)))+(((-1.0)*(py*py)*(r11*r11)))+(((-4.428771674e-5)*r01*r10*(cj2*cj2)*(IKcos(j8))*(IKsin(j8))))+(((-0.015751)*npx*r01*sj2*(IKcos(j8))*(IKsin(j8))))+(((-0.015751)*npy*r01*sj2*(x4773*x4773)))+(((-0.0001200940595862)*cj2*r01*r10*sj2*(IKcos(j8))*(IKsin(j8))))+(((pz*pz)*(r21*r21)))+(((-0.00281174)*cj2*npy*r01*(x4774*x4774)))+(((0.0001200940595862)*r10*r11*(cj2*cj2)*(IKcos(j8))*(IKsin(j8))))+(((-0.00281174)*cj2*npx*r01*(IKcos(j8))*(IKsin(j8))))+(((-0.0001200940595862)*r00*r01*(cj2*cj2)*(IKcos(j8))*(IKsin(j8))))+(((-2.214385837e-5)*cj2*sj2*(r01*r01)))+(((-4.428771674e-5)*r01*r11*(cj2*cj2)*(x4775*x4775)))+(((0.0001200940595862)*cj2*r00*r10*sj2*(x4776*x4776)))+(((-2.214385837e-5)*cj2*sj2*(r00*r00)*(x4777*x4777)))+(((-2.214385837e-5)*cj2*sj2*(r11*r11)*(x4778*x4778)))+(((2.214385837e-5)*cj2*sj2*(r11*r11)))+(((2.214385837e-5)*cj2*sj2*(r01*r01)*(x4779*x4779)))+(((3.9529409138e-6)*r10*r11*(IKcos(j8))*(IKsin(j8))))+(((1.9764704569e-6)*(r11*r11)*(x4780*x4780)))+(((py*py)*(r11*r11)*(x4781*x4781)))+(((0.015751)*npy*r01*sj2))+(((2.0)*npy*pz*r21*(x4782*x4782)))+(((-1.0)*(px*px)*(r01*r01)))+(((-6.00470297931e-5)*(cj2*cj2)*(r11*r11))));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

rotationfunction0(solutions);
}
}

}

}
    }

}

}
}
}

}

}
}
return solutions.GetNumSolutions()>0;
}
inline void rotationfunction0(IkSolutionListBase<IkReal>& solutions) {
for(int rotationiter = 0; rotationiter < 1; ++rotationiter) {
IkReal x112=((0.980583922797878)*cj7);
IkReal x113=((0.196099898904425)*sj7);
IkReal x114=((0.980583922797878)*sj7);
IkReal x115=((0.175734152884373)*cj2);
IkReal x116=((0.175734152884373)*sj2);
IkReal x117=((0.196099898904425)*cj7);
IkReal x118=((0.984437660550434)*sj2);
IkReal x119=((0.984437660550434)*cj2);
IkReal x120=((((-1.0)*x112))+x113);
IkReal x121=((((-0.945998281949174)*sj6))+(((0.324171637484235)*cj6)));
IkReal x122=((-0.196099898904425)*sj7);
IkReal x123=((-1.0)*sj8);
IkReal x124=(x117+x114);
IkReal x125=((((-0.945998281949174)*cj6))+(((-0.324171637484235)*sj6)));
IkReal x126=((((0.945998281949174)*cj6))+(((0.324171637484235)*sj6)));
IkReal x127=(cj8*x120);
IkReal x128=(sj8*x120);
IkReal x129=(x112*x121);
IkReal x130=(x112*x125);
IkReal x131=((((-1.0)*x113*x121))+x129);
IkReal x132=(((x117*x121))+((x114*x121)));
IkReal x133=((((-1.0)*x113*x125))+x130);
IkReal x134=(cj8*x132);
IkReal x135=(((x117*x125))+((x114*x125)));
IkReal x136=(((r02*x124))+((r01*x127))+((r00*x128)));
IkReal x137=(((r12*x124))+((r11*x127))+((r10*x128)));
IkReal x138=(((cj8*x126))+((sj8*x132)));
IkReal x139=((((0.984437660550434)*r11*x127))+(((0.984437660550434)*r12*x124))+(((0.984437660550434)*r10*x128)));
IkReal x140=(((cj8*x121))+((sj8*x135)));
IkReal x141=(x134+((x123*x126)));
IkReal x142=(((cj8*x135))+((x121*x123)));
IkReal x143=(((r12*x131))+((r11*x141))+((r10*x138)));
IkReal x144=(((r01*x141))+((r02*x131))+((r00*x138)));
IkReal x145=(((r01*x142))+((r02*x133))+((r00*x140)));
IkReal x146=(((r12*x133))+((r11*x142))+((r10*x140)));
IkReal x147=((((0.175734152884373)*r01*x142))+(((0.175734152884373)*r00*x140))+(((0.175734152884373)*r02*x133)));
IkReal x148=(cj2*x145);
new_r00=(((r21*x127))+((r22*x124))+((r20*x128)));
new_r01=((((-1.0)*x115*x136))+(((-1.0)*x116*x137))+((x119*x137))+(((-1.0)*x118*x136)));
new_r02=((((-1.0)*x115*x137))+((x116*x136))+(((-1.0)*x118*x137))+(((-1.0)*x119*x136)));
new_r10=(((r20*x140))+((r21*x142))+((r22*((((x122*x125))+x130)))));
new_r11=((((-1.0)*x115*x145))+((x119*x146))+(((-1.0)*x116*x146))+(((-1.0)*x118*x145)));
new_r12=((((-1.0)*x115*x146))+((x116*x145))+(((-1.0)*x119*x145))+(((-1.0)*x118*x146)));
new_r20=(((r20*x138))+((r21*((x134+(((-1.0)*sj8*x126))))))+((r22*((((x121*x122))+x129)))));
new_r21=((((-1.0)*x115*x144))+((x119*x143))+(((-1.0)*x116*x143))+(((-1.0)*x118*x144)));
new_r22=((((-1.0)*x115*x143))+((x116*x144))+(((-1.0)*x119*x144))+(((-1.0)*x118*x143)));
{
IkReal j4array[2], cj4array[2], sj4array[2];
bool j4valid[2]={false};
_nj4 = 2;
if( (((1.00000000001427)*new_r22)) < -1-IKFAST_SINCOS_THRESH || (((1.00000000001427)*new_r22)) > 1+IKFAST_SINCOS_THRESH )
    continue;
IkReal x149=IKasin(((1.00000000001427)*new_r22));
j4array[0]=((-0.122795089698391)+(((-1.0)*x149)));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
j4array[1]=((3.0187975638914)+x149);
sj4array[1]=IKsin(j4array[1]);
cj4array[1]=IKcos(j4array[1]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
if( j4array[1] > IKPI )
{
    j4array[1]-=IK2PI;
}
else if( j4array[1] < -IKPI )
{    j4array[1]+=IK2PI;
}
j4valid[1] = true;
for(int ij4 = 0; ij4 < 2; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 2; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];

{
IkReal j5eval[3];
IkReal x150=cj4*cj4;
IkReal x151=(cj4*new_r02);
IkReal x152=((1.0)*new_r02);
IkReal x153=(new_r12*sj4);
IkReal x154=(cj4*new_r12);
j5eval[0]=((((1.57580374828584)*x153))+(((-1.0)*sj4*x152))+(((8.1032363594977)*x151))+(((-12.7678698223466)*x154)));
j5eval[1]=((IKabs(((-0.00430729821717179)+(new_r12*new_r12)+(((-0.278520410367222)*x150)))))+(IKabs(((0.00678745667560425)+(((0.438850212664446)*x150))+(((-1.0)*new_r12*x152))))));
j5eval[2]=IKsign(((((0.103420015812922)*x153))+(((0.531815483588428)*x151))+(((-0.0656300100348293)*new_r02*sj4))+(((-0.837955424564001)*x154))));
if( IKabs(j5eval[0]) < 0.0000010000000000  || IKabs(j5eval[1]) < 0.0000010000000000  || IKabs(j5eval[2]) < 0.0000010000000000  )
{
{
IkReal j5eval[4];
IkReal x155=((new_r12*new_r12)+(new_r02*new_r02));
j5eval[0]=x155;
j5eval[1]=IKsign(x155);
j5eval[2]=0.0150029978879168;
j5eval[3]=sj4;
if( IKabs(j5eval[0]) < 0.0000010000000000  || IKabs(j5eval[1]) < 0.0000010000000000  || IKabs(j5eval[2]) < 0.0000010000000000  || IKabs(j5eval[3]) < 0.0000010000000000  )
{
{
IkReal j5eval[3];
IkReal x156=cj4*cj4;
IkReal x157=(cj4*new_r12);
IkReal x158=(cj4*new_r02);
IkReal x159=(new_r02*sj4);
IkReal x160=(new_r12*sj4);
j5eval[0]=((((-8.1032363594977)*x157))+(((1.57580374828584)*x159))+x160+(((-12.7678698223466)*x158)));
j5eval[1]=IKsign(((((0.103420015812922)*x159))+(((0.0656300100348293)*x160))+(((-0.531815483588428)*x157))+(((-0.837955424564001)*x158))));
j5eval[2]=((IKabs(((0.00430729821717179)+(((0.278520410367222)*x156))+(((-1.0)*(new_r02*new_r02))))))+(IKabs(((0.00678745667560425)+(((0.438850212664446)*x156))+((new_r02*new_r12))))));
if( IKabs(j5eval[0]) < 0.0000010000000000  || IKabs(j5eval[1]) < 0.0000010000000000  || IKabs(j5eval[2]) < 0.0000010000000000  )
{
{
IkReal evalcond[1];
bool bgotonextstatement = true;
do
{
IkReal x161=((((1.57580374828584)*new_r02))+new_r12);
CheckValue<IkReal> x162 = IKatan2WithCheck(IkReal(((((-12.7678698223466)*new_r02))+(((-8.1032363594977)*new_r12)))),IkReal(x161),IKFAST_ATAN2_MAGTHRESH);
if(!x162.valid){
continue;
}
IkReal gconst0=((-1.0)*(x162.value));
IkReal gconst1=0;
IkReal x163 = x161*x161;
if(IKabs(x163)==0){
continue;
}
IkReal gconst2=(x161*(pow(x163,-0.5)));
IkReal x164=j4;
CheckValue<IkReal> x167 = IKatan2WithCheck(IkReal(((((-12.7678698223466)*new_r02))+(((-8.1032363594977)*new_r12)))),IkReal(((((1.57580374828584)*new_r02))+new_r12)),IKFAST_ATAN2_MAGTHRESH);
if(!x167.valid){
continue;
}
IkReal x165=x167.value;
IkReal x166=x165;
if(((((x164*x165))+((x165*x166))+((j4*x164))+((j4*x166)))) < -0.00001)
continue;
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKsqrt((((x164*x165))+((x165*x166))+((j4*x164))+((j4*x166)))))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j5eval[2];
IkReal x168=((((1.57580374828584)*new_r02))+new_r12);
sj4=gconst1;
cj4=gconst2;
j4=nan;
CheckValue<IkReal> x169 = IKatan2WithCheck(IkReal(((((-12.7678698223466)*new_r02))+(((-8.1032363594977)*new_r12)))),IkReal(x168),IKFAST_ATAN2_MAGTHRESH);
if(!x169.valid){
continue;
}
IkReal gconst0=((-1.0)*(x169.value));
IkReal gconst1=0;
IkReal x170 = x168*x168;
if(IKabs(x170)==0){
continue;
}
IkReal gconst2=(x168*(pow(x170,-0.5)));
IkReal x171=new_r12*new_r12;
IkReal x172=new_r02*new_r02;
j5eval[0]=((((-1.0)*x171))+(((-1.0)*x172)));
j5eval[1]=IKsign(((((-2.56196288697451e+56)*x171))+(((-2.56196288697451e+56)*x172))));
if( IKabs(j5eval[0]) < 0.0000010000000000  || IKabs(j5eval[1]) < 0.0000010000000000  )
{
{
IkReal j5eval[1];
IkReal x173=((((1.57580374828584)*new_r02))+new_r12);
sj4=gconst1;
cj4=gconst2;
j4=nan;
CheckValue<IkReal> x174 = IKatan2WithCheck(IkReal(((((-12.7678698223466)*new_r02))+(((-8.1032363594977)*new_r12)))),IkReal(x173),IKFAST_ATAN2_MAGTHRESH);
if(!x174.valid){
continue;
}
IkReal gconst0=((-1.0)*(x174.value));
IkReal gconst1=0;
IkReal x175 = x173*x173;
if(IKabs(x175)==0){
continue;
}
IkReal gconst2=(x173*(pow(x175,-0.5)));
IkReal x176=new_r02*new_r02;
j5eval[0]=((1.0)+(((1.44585006149089)*(x176*x176)))+(((1.44585006149089)*x176*(new_r12*new_r12)))+(((-1.28865050323593)*new_r02*new_r12))+(((-2.03046303253059)*x176)));
if( IKabs(j5eval[0]) < 0.0000010000000000  )
{
{
IkReal j3eval[2];
IkReal x177=((((1.57580374828584)*new_r02))+new_r12);
sj4=gconst1;
cj4=gconst2;
j4=nan;
CheckValue<IkReal> x178 = IKatan2WithCheck(IkReal(((((-12.7678698223466)*new_r02))+(((-8.1032363594977)*new_r12)))),IkReal(x177),IKFAST_ATAN2_MAGTHRESH);
if(!x178.valid){
continue;
}
IkReal gconst0=((-1.0)*(x178.value));
IkReal gconst1=0;
IkReal x179 = x177*x177;
if(IKabs(x179)==0){
continue;
}
IkReal gconst2=(x177*(pow(x179,-0.5)));
j3eval[0]=34506202940.0186;
j3eval[1]=1.0;
if( IKabs(j3eval[0]) < 0.0000010000000000  || IKabs(j3eval[1]) < 0.0000010000000000  )
{
continue; // no branches [j3, j5]

} else
{
{
IkReal j3array[1], cj3array[1], sj3array[1];
bool j3valid[1]={false};
_nj3 = 1;
IkReal x180=(gconst2*new_r20);
IkReal x181=(gconst2*new_r21);
CheckValue<IkReal> x182=IKPowWithIntegerCheck(IKsign(((2.85455053937064e-11)+(((0.984997002112083)*(gconst2*gconst2))))),-1);
if(!x182.valid){
continue;
}
CheckValue<IkReal> x183 = IKatan2WithCheck(IkReal(((((-5.13522966898714e-6)*new_r20))+(((-0.273949425080978)*x180))+(((-1.47476155376408e-6)*new_r21))+(((0.953912320189798)*x181)))),IkReal(((((5.13522966898714e-6)*new_r21))+(((-1.47476155376408e-6)*new_r20))+(((0.953912320189798)*x180))+(((0.273949425080978)*x181)))),IKFAST_ATAN2_MAGTHRESH);
if(!x183.valid){
continue;
}
j3array[0]=((-1.5707963267949)+(((1.5707963267949)*(x182.value)))+(x183.value));
sj3array[0]=IKsin(j3array[0]);
cj3array[0]=IKcos(j3array[0]);
if( j3array[0] > IKPI )
{
    j3array[0]-=IK2PI;
}
else if( j3array[0] < -IKPI )
{    j3array[0]+=IK2PI;
}
j3valid[0] = true;
for(int ij3 = 0; ij3 < 1; ++ij3)
{
if( !j3valid[ij3] )
{
    continue;
}
_ij3[0] = ij3; _ij3[1] = -1;
for(int iij3 = ij3+1; iij3 < 1; ++iij3)
{
if( j3valid[iij3] && IKabs(cj3array[ij3]-cj3array[iij3]) < IKFAST_SOLUTION_THRESH && IKabs(sj3array[ij3]-sj3array[iij3]) < IKFAST_SOLUTION_THRESH )
{
    j3valid[iij3]=false; _ij3[1] = iij3; break; 
}
}
j3 = j3array[ij3]; cj3 = cj3array[ij3]; sj3 = sj3array[ij3];
{
IkReal evalcond[2];
IkReal x184=IKsin(j3);
IkReal x185=IKcos(j3);
IkReal x186=(gconst2*x185);
IkReal x187=(gconst2*x184);
evalcond[0]=((((5.13522966898714e-6)*x184))+new_r20+(((-0.953912320189798)*x186))+(((0.273949425080978)*x187))+(((1.47476155376408e-6)*x185)));
evalcond[1]=((((-5.13522966898714e-6)*x185))+(((-0.273949425080978)*x186))+new_r21+(((-0.953912320189798)*x187))+(((1.47476155376408e-6)*x184)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j5eval[2];
IkReal x188=((((1.57580374828584)*new_r02))+new_r12);
sj4=gconst1;
cj4=gconst2;
j4=nan;
CheckValue<IkReal> x189 = IKatan2WithCheck(IkReal(((((-12.7678698223466)*new_r02))+(((-8.1032363594977)*new_r12)))),IkReal(x188),IKFAST_ATAN2_MAGTHRESH);
if(!x189.valid){
continue;
}
IkReal gconst0=((-1.0)*(x189.value));
IkReal gconst1=0;
IkReal x190 = x188*x188;
if(IKabs(x190)==0){
continue;
}
IkReal gconst2=(x188*(pow(x190,-0.5)));
IkReal x191=new_r12*new_r12;
IkReal x192=new_r02*new_r02;
j5eval[0]=((((-1.0)*x192))+(((-1.0)*x191)));
j5eval[1]=IKsign(((((-2.56196288697451e+56)*x191))+(((-2.56196288697451e+56)*x192))));
if( IKabs(j5eval[0]) < 0.0000010000000000  || IKabs(j5eval[1]) < 0.0000010000000000  )
{
{
IkReal j5eval[1];
IkReal x193=((((1.57580374828584)*new_r02))+new_r12);
sj4=gconst1;
cj4=gconst2;
j4=nan;
CheckValue<IkReal> x194 = IKatan2WithCheck(IkReal(((((-12.7678698223466)*new_r02))+(((-8.1032363594977)*new_r12)))),IkReal(x193),IKFAST_ATAN2_MAGTHRESH);
if(!x194.valid){
continue;
}
IkReal gconst0=((-1.0)*(x194.value));
IkReal gconst1=0;
IkReal x195 = x193*x193;
if(IKabs(x195)==0){
continue;
}
IkReal gconst2=(x193*(pow(x195,-0.5)));
IkReal x196=new_r02*new_r02;
j5eval[0]=((1.0)+(((1.44585006149089)*(x196*x196)))+(((-1.28865050323593)*new_r02*new_r12))+(((1.44585006149089)*x196*(new_r12*new_r12)))+(((-2.03046303253059)*x196)));
if( IKabs(j5eval[0]) < 0.0000010000000000  )
{
{
IkReal j5array[1], cj5array[1], sj5array[1];
bool j5valid[1]={false};
_nj5 = 1;
IkReal x197=gconst2*gconst2;
IkReal x198=(gconst2*new_r02);
IkReal x199=(gconst2*new_r12);
CheckValue<IkReal> x200=IKPowWithIntegerCheck(((((6.24024889090152e+76)*x199))+(((9.83245236388639e+76)*x198))),-1);
if(!x200.valid){
continue;
}
CheckValue<IkReal> x201=IKPowWithIntegerCheck(((((1.96649047277728e+77)*x198))+(((1.2480497781803e+77)*x199))),-1);
if(!x201.valid){
continue;
}
if( IKabs(((x200.value)*(((((-1.173386086617e+77)*new_r02*new_r12))+(((-5.22905040876042e+76)*x197)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((x201.value)*(((((2.346772173234e+77)*(new_r02*new_r02)))+(((-6.63732196325388e+76)*x197)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((x200.value)*(((((-1.173386086617e+77)*new_r02*new_r12))+(((-5.22905040876042e+76)*x197))))))+IKsqr(((x201.value)*(((((2.346772173234e+77)*(new_r02*new_r02)))+(((-6.63732196325388e+76)*x197))))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j5array[0]=IKatan2(((x200.value)*(((((-1.173386086617e+77)*new_r02*new_r12))+(((-5.22905040876042e+76)*x197))))), ((x201.value)*(((((2.346772173234e+77)*(new_r02*new_r02)))+(((-6.63732196325388e+76)*x197))))));
sj5array[0]=IKsin(j5array[0]);
cj5array[0]=IKcos(j5array[0]);
if( j5array[0] > IKPI )
{
    j5array[0]-=IK2PI;
}
else if( j5array[0] < -IKPI )
{    j5array[0]+=IK2PI;
}
j5valid[0] = true;
for(int ij5 = 0; ij5 < 1; ++ij5)
{
if( !j5valid[ij5] )
{
    continue;
}
_ij5[0] = ij5; _ij5[1] = -1;
for(int iij5 = ij5+1; iij5 < 1; ++iij5)
{
if( j5valid[iij5] && IKabs(cj5array[ij5]-cj5array[iij5]) < IKFAST_SOLUTION_THRESH && IKabs(sj5array[ij5]-sj5array[iij5]) < IKFAST_SOLUTION_THRESH )
{
    j5valid[iij5]=false; _ij5[1] = iij5; break; 
}
}
j5 = j5array[ij5]; cj5 = cj5array[ij5]; sj5 = sj5array[ij5];
{
IkReal evalcond[21];
IkReal x202=IKcos(j5);
IkReal x203=IKsin(j5);
IkReal x204=gconst2*gconst2;
IkReal x205=((0.276027873078388)*sj3);
IkReal x206=((0.961149631058464)*cj3);
IkReal x207=((0.961149631058464)*sj3);
IkReal x208=((0.276027873078388)*cj3);
IkReal x209=((0.992470151748698)*gconst2);
IkReal x210=(cj3*gconst2);
IkReal x211=((0.531815483588428)*gconst2);
IkReal x212=((0.0994021100426501)*sj3);
IkReal x213=((0.147909480226238)*sj3);
IkReal x214=((0.0656300100348293)*gconst2);
IkReal x215=((0.147909480226238)*cj3);
IkReal x216=(gconst2*sj3);
IkReal x217=((0.811511442202281)*sj3);
IkReal x218=((0.837955424564001)*gconst2);
IkReal x219=((0.811511442202281)*cj3);
IkReal x220=((0.103420015812922)*gconst2);
IkReal x221=((0.515031836328808)*cj3);
IkReal x222=((0.122486725237355)*gconst2);
IkReal x223=((0.515031836328808)*sj3);
IkReal x224=((0.028546806998574)*x203);
IkReal x225=((1.0)*x203);
IkReal x226=((0.0994021100426501)*x202);
IkReal x227=(new_r02*x203);
IkReal x228=(cj3*x202);
IkReal x229=(new_r01*x202);
IkReal x230=(new_r12*x202);
IkReal x231=(gconst2*x203);
IkReal x232=((0.233054011708033)*x203);
IkReal x233=((0.844313326436599)*x202);
IkReal x234=(new_r11*x202);
IkReal x235=(new_r02*x202);
IkReal x236=(new_r00*x202);
IkReal x237=(new_r10*x202);
IkReal x238=((0.0181157120800272)*x202);
IkReal x239=((0.844313326436599)*x203);
IkReal x240=((0.028546806998574)*x202);
IkReal x241=(new_r01*x203);
IkReal x242=(sj3*x202);
IkReal x243=(new_r00*x203);
IkReal x244=((0.535849798705775)*x203);
IkReal x245=((0.0630802599313394)*x202);
IkReal x246=(x207+x208);
evalcond[0]=(x211+x227+x230);
evalcond[1]=(x235+(((-1.0)*x218))+(((-1.0)*new_r12*x225)));
evalcond[2]=(((x203*x211))+new_r02+(((-1.0)*x202*x218)));
evalcond[3]=(((x202*x211))+((x203*x218))+new_r12);
evalcond[4]=((((0.0630802599313394)*x210))+(((-0.233054011708033)*cj3))+x237+x243+(((-0.0181157120800272)*x216))+(((-1.0)*x217)));
evalcond[5]=((((0.0630802599313394)*x216))+(((-0.233054011708033)*sj3))+(((0.0181157120800272)*x210))+x219+x234+x241);
evalcond[6]=((((0.028546806998574)*x216))+(((-1.0)*new_r10*x225))+(((-0.0994021100426501)*x210))+x236+(((-1.0)*x215))+(((-1.0)*x223)));
evalcond[7]=((((-1.0)*new_r11*x225))+(((-1.0)*gconst2*x212))+(((-0.028546806998574)*x210))+x229+x221+(((-1.0)*x213)));
evalcond[8]=(((new_r12*x244))+(((-0.535849798705775)*x235))+(((-6.54422001705664e-7)*gconst2))+(((-0.844313326436599)*x227))+(((-0.844313326436599)*x230)));
evalcond[9]=((1.0)+((x211*x230))+(((-0.0150029978593712)*x204))+(((-1.0)*x218*x235))+((new_r12*x203*x218))+((x211*x227)));
evalcond[10]=(((x211*x237))+((new_r20*x222))+((new_r10*x203*x218))+((x211*x243))+(((-1.0)*x218*x236)));
evalcond[11]=(((x211*x234))+((new_r21*x222))+(((-1.0)*x218*x229))+((new_r11*x203*x218))+((x211*x241)));
evalcond[12]=((((-1.0)*x214*x230))+(((-1.0)*x214*x227))+(((-0.121564418783519)*x204))+(((-1.0)*new_r12*x203*x220))+((x220*x235)));
evalcond[13]=((((-0.535849798705775)*x236))+(((5.34279939673075e-6)*new_r20))+x246+(((-1.0)*new_r10*x233))+(((-1.0)*new_r00*x239))+((new_r10*x244)));
evalcond[14]=((((5.34279939673075e-6)*new_r21))+(((-1.0)*x206))+x205+(((-0.535849798705775)*x229))+(((-1.0)*new_r01*x239))+((new_r11*x244))+(((-1.0)*new_r11*x233)));
evalcond[15]=((((-1.0)*x214*x237))+(((-1.0)*x206))+(((-1.0)*x214*x243))+(((-1.0)*new_r10*x203*x220))+x205+((x220*x236))+((new_r20*x209)));
evalcond[16]=((((-1.0)*x214*x234))+(((-1.0)*new_r11*x203*x220))+(((-1.0)*x214*x241))+((x220*x229))+((new_r21*x209))+(((-1.0)*x246)));
evalcond[17]=((((0.0630802599313394)*x203*x210))+((x216*x240))+(((-1.0)*x203*x217))+(((-1.0)*x202*x223))+(((-0.0181157120800272)*x203*x216))+(((-1.0)*cj3*x232))+new_r00+(((-1.0)*x202*x215))+(((-1.0)*x210*x226)));
evalcond[18]=(((x203*x219))+((x202*x221))+(((0.0630802599313394)*x203*x216))+(((-1.0)*gconst2*x202*x212))+(((0.0181157120800272)*x203*x210))+(((-1.0)*x210*x240))+(((-1.0)*sj3*x232))+new_r01+(((-1.0)*x202*x213)));
evalcond[19]=((((-1.0)*x216*x224))+((x203*x215))+(((-1.0)*x216*x238))+((x203*x223))+((x210*x245))+(((-0.233054011708033)*x228))+new_r10+(((-1.0)*x202*x217))+(((0.0994021100426501)*x203*x210)));
evalcond[20]=(((x210*x224))+((x202*x219))+((x203*x213))+((x216*x245))+(((-0.233054011708033)*x242))+(((-1.0)*x203*x221))+new_r11+((x212*x231))+((x210*x238)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[9]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[10]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[11]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[12]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[13]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[14]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[15]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[16]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[17]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[18]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[19]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[20]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j2;
vinfos[0].indices[0] = _ij2[0];
vinfos[0].indices[1] = _ij2[1];
vinfos[0].maxsolutions = _nj2;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j3;
vinfos[1].indices[0] = _ij3[0];
vinfos[1].indices[1] = _ij3[1];
vinfos[1].maxsolutions = _nj3;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j4;
vinfos[2].indices[0] = _ij4[0];
vinfos[2].indices[1] = _ij4[1];
vinfos[2].maxsolutions = _nj4;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j5;
vinfos[3].indices[0] = _ij5[0];
vinfos[3].indices[1] = _ij5[1];
vinfos[3].maxsolutions = _nj5;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j6;
vinfos[4].indices[0] = _ij6[0];
vinfos[4].indices[1] = _ij6[1];
vinfos[4].maxsolutions = _nj6;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j7;
vinfos[5].indices[0] = _ij7[0];
vinfos[5].indices[1] = _ij7[1];
vinfos[5].maxsolutions = _nj7;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j8;
vinfos[6].indices[0] = _ij8[0];
vinfos[6].indices[1] = _ij8[1];
vinfos[6].maxsolutions = _nj8;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

} else
{
{
IkReal j5array[1], cj5array[1], sj5array[1];
bool j5valid[1]={false};
_nj5 = 1;
IkReal x247=gconst2*gconst2;
CheckValue<IkReal> x248 = IKatan2WithCheck(IkReal(((((8.23915679508573e+76)*x247))+(((-1.173386086617e+77)*(new_r02*new_r02))))),IkReal(((((-1.173386086617e+77)*new_r02*new_r12))+(((5.22905040876042e+76)*x247)))),IKFAST_ATAN2_MAGTHRESH);
if(!x248.valid){
continue;
}
CheckValue<IkReal> x249=IKPowWithIntegerCheck(IKsign(((((6.24024889090152e+76)*gconst2*new_r02))+(((-9.83245236388639e+76)*gconst2*new_r12)))),-1);
if(!x249.valid){
continue;
}
j5array[0]=((-1.5707963267949)+(x248.value)+(((1.5707963267949)*(x249.value))));
sj5array[0]=IKsin(j5array[0]);
cj5array[0]=IKcos(j5array[0]);
if( j5array[0] > IKPI )
{
    j5array[0]-=IK2PI;
}
else if( j5array[0] < -IKPI )
{    j5array[0]+=IK2PI;
}
j5valid[0] = true;
for(int ij5 = 0; ij5 < 1; ++ij5)
{
if( !j5valid[ij5] )
{
    continue;
}
_ij5[0] = ij5; _ij5[1] = -1;
for(int iij5 = ij5+1; iij5 < 1; ++iij5)
{
if( j5valid[iij5] && IKabs(cj5array[ij5]-cj5array[iij5]) < IKFAST_SOLUTION_THRESH && IKabs(sj5array[ij5]-sj5array[iij5]) < IKFAST_SOLUTION_THRESH )
{
    j5valid[iij5]=false; _ij5[1] = iij5; break; 
}
}
j5 = j5array[ij5]; cj5 = cj5array[ij5]; sj5 = sj5array[ij5];
{
IkReal evalcond[21];
IkReal x250=IKcos(j5);
IkReal x251=IKsin(j5);
IkReal x252=gconst2*gconst2;
IkReal x253=((0.276027873078388)*sj3);
IkReal x254=((0.961149631058464)*cj3);
IkReal x255=((0.961149631058464)*sj3);
IkReal x256=((0.276027873078388)*cj3);
IkReal x257=((0.992470151748698)*gconst2);
IkReal x258=(cj3*gconst2);
IkReal x259=((0.531815483588428)*gconst2);
IkReal x260=((0.0994021100426501)*sj3);
IkReal x261=((0.147909480226238)*sj3);
IkReal x262=((0.0656300100348293)*gconst2);
IkReal x263=((0.147909480226238)*cj3);
IkReal x264=(gconst2*sj3);
IkReal x265=((0.811511442202281)*sj3);
IkReal x266=((0.837955424564001)*gconst2);
IkReal x267=((0.811511442202281)*cj3);
IkReal x268=((0.103420015812922)*gconst2);
IkReal x269=((0.515031836328808)*cj3);
IkReal x270=((0.122486725237355)*gconst2);
IkReal x271=((0.515031836328808)*sj3);
IkReal x272=((0.028546806998574)*x251);
IkReal x273=((1.0)*x251);
IkReal x274=((0.0994021100426501)*x250);
IkReal x275=(new_r02*x251);
IkReal x276=(cj3*x250);
IkReal x277=(new_r01*x250);
IkReal x278=(new_r12*x250);
IkReal x279=(gconst2*x251);
IkReal x280=((0.233054011708033)*x251);
IkReal x281=((0.844313326436599)*x250);
IkReal x282=(new_r11*x250);
IkReal x283=(new_r02*x250);
IkReal x284=(new_r00*x250);
IkReal x285=(new_r10*x250);
IkReal x286=((0.0181157120800272)*x250);
IkReal x287=((0.844313326436599)*x251);
IkReal x288=((0.028546806998574)*x250);
IkReal x289=(new_r01*x251);
IkReal x290=(sj3*x250);
IkReal x291=(new_r00*x251);
IkReal x292=((0.535849798705775)*x251);
IkReal x293=((0.0630802599313394)*x250);
IkReal x294=(x255+x256);
evalcond[0]=(x259+x275+x278);
evalcond[1]=(x283+(((-1.0)*new_r12*x273))+(((-1.0)*x266)));
evalcond[2]=(((x251*x259))+(((-1.0)*x250*x266))+new_r02);
evalcond[3]=(((x250*x259))+new_r12+((x251*x266)));
evalcond[4]=((((-0.0181157120800272)*x264))+(((-0.233054011708033)*cj3))+x291+x285+(((-1.0)*x265))+(((0.0630802599313394)*x258)));
evalcond[5]=((((-0.233054011708033)*sj3))+(((0.0630802599313394)*x264))+x267+x289+x282+(((0.0181157120800272)*x258)));
evalcond[6]=(x284+(((-1.0)*new_r10*x273))+(((-1.0)*x271))+(((-0.0994021100426501)*x258))+(((-1.0)*x263))+(((0.028546806998574)*x264)));
evalcond[7]=((((-1.0)*gconst2*x260))+x269+x277+(((-1.0)*new_r11*x273))+(((-1.0)*x261))+(((-0.028546806998574)*x258)));
evalcond[8]=((((-0.535849798705775)*x283))+(((-0.844313326436599)*x275))+(((-0.844313326436599)*x278))+((new_r12*x292))+(((-6.54422001705664e-7)*gconst2)));
evalcond[9]=((1.0)+((x259*x275))+((x259*x278))+(((-1.0)*x266*x283))+(((-0.0150029978593712)*x252))+((new_r12*x251*x266)));
evalcond[10]=(((x259*x285))+(((-1.0)*x266*x284))+((new_r10*x251*x266))+((x259*x291))+((new_r20*x270)));
evalcond[11]=(((new_r21*x270))+((x259*x282))+((x259*x289))+(((-1.0)*x266*x277))+((new_r11*x251*x266)));
evalcond[12]=(((x268*x283))+(((-1.0)*new_r12*x251*x268))+(((-1.0)*x262*x275))+(((-1.0)*x262*x278))+(((-0.121564418783519)*x252)));
evalcond[13]=((((-0.535849798705775)*x284))+((new_r10*x292))+(((5.34279939673075e-6)*new_r20))+(((-1.0)*new_r00*x287))+x294+(((-1.0)*new_r10*x281)));
evalcond[14]=((((-0.535849798705775)*x277))+((new_r11*x292))+(((5.34279939673075e-6)*new_r21))+x253+(((-1.0)*new_r01*x287))+(((-1.0)*new_r11*x281))+(((-1.0)*x254)));
evalcond[15]=(((x268*x284))+(((-1.0)*x262*x285))+((new_r20*x257))+x253+(((-1.0)*x262*x291))+(((-1.0)*new_r10*x251*x268))+(((-1.0)*x254)));
evalcond[16]=((((-1.0)*x262*x289))+(((-1.0)*x262*x282))+(((-1.0)*x294))+((new_r21*x257))+(((-1.0)*new_r11*x251*x268))+((x268*x277)));
evalcond[17]=((((-0.0181157120800272)*x251*x264))+(((-1.0)*cj3*x280))+((x264*x288))+(((-1.0)*x258*x274))+(((-1.0)*x250*x263))+(((-1.0)*x250*x271))+(((-1.0)*x251*x265))+(((0.0630802599313394)*x251*x258))+new_r00);
evalcond[18]=((((0.0630802599313394)*x251*x264))+(((-1.0)*sj3*x280))+(((-1.0)*x250*x261))+(((-1.0)*x258*x288))+(((0.0181157120800272)*x251*x258))+((x250*x269))+new_r01+((x251*x267))+(((-1.0)*gconst2*x250*x260)));
evalcond[19]=((((-1.0)*x250*x265))+(((-0.233054011708033)*x276))+(((0.0994021100426501)*x251*x258))+((x258*x293))+new_r10+(((-1.0)*x264*x286))+(((-1.0)*x264*x272))+((x251*x263))+((x251*x271)));
evalcond[20]=((((-0.233054011708033)*x290))+((x258*x286))+((x258*x272))+((x260*x279))+(((-1.0)*x251*x269))+((x250*x267))+new_r11+((x264*x293))+((x251*x261)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[9]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[10]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[11]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[12]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[13]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[14]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[15]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[16]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[17]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[18]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[19]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[20]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j2;
vinfos[0].indices[0] = _ij2[0];
vinfos[0].indices[1] = _ij2[1];
vinfos[0].maxsolutions = _nj2;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j3;
vinfos[1].indices[0] = _ij3[0];
vinfos[1].indices[1] = _ij3[1];
vinfos[1].maxsolutions = _nj3;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j4;
vinfos[2].indices[0] = _ij4[0];
vinfos[2].indices[1] = _ij4[1];
vinfos[2].maxsolutions = _nj4;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j5;
vinfos[3].indices[0] = _ij5[0];
vinfos[3].indices[1] = _ij5[1];
vinfos[3].maxsolutions = _nj5;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j6;
vinfos[4].indices[0] = _ij6[0];
vinfos[4].indices[1] = _ij6[1];
vinfos[4].maxsolutions = _nj6;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j7;
vinfos[5].indices[0] = _ij7[0];
vinfos[5].indices[1] = _ij7[1];
vinfos[5].maxsolutions = _nj7;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j8;
vinfos[6].indices[0] = _ij8[0];
vinfos[6].indices[1] = _ij8[1];
vinfos[6].maxsolutions = _nj8;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j5array[1], cj5array[1], sj5array[1];
bool j5valid[1]={false};
_nj5 = 1;
IkReal x295=(gconst2*new_r02);
IkReal x296=(gconst2*new_r12);
CheckValue<IkReal> x297=IKPowWithIntegerCheck(IKsign(((((-2.56196288697451e+56)*(new_r02*new_r02)))+(((-2.56196288697451e+56)*(new_r12*new_r12))))),-1);
if(!x297.valid){
continue;
}
CheckValue<IkReal> x298 = IKatan2WithCheck(IkReal(((((2.14681069867194e+56)*x296))+(((1.36249153167196e+56)*x295)))),IkReal(((((1.36249153167196e+56)*x296))+(((-2.14681069867194e+56)*x295)))),IKFAST_ATAN2_MAGTHRESH);
if(!x298.valid){
continue;
}
j5array[0]=((-1.5707963267949)+(((1.5707963267949)*(x297.value)))+(x298.value));
sj5array[0]=IKsin(j5array[0]);
cj5array[0]=IKcos(j5array[0]);
if( j5array[0] > IKPI )
{
    j5array[0]-=IK2PI;
}
else if( j5array[0] < -IKPI )
{    j5array[0]+=IK2PI;
}
j5valid[0] = true;
for(int ij5 = 0; ij5 < 1; ++ij5)
{
if( !j5valid[ij5] )
{
    continue;
}
_ij5[0] = ij5; _ij5[1] = -1;
for(int iij5 = ij5+1; iij5 < 1; ++iij5)
{
if( j5valid[iij5] && IKabs(cj5array[ij5]-cj5array[iij5]) < IKFAST_SOLUTION_THRESH && IKabs(sj5array[ij5]-sj5array[iij5]) < IKFAST_SOLUTION_THRESH )
{
    j5valid[iij5]=false; _ij5[1] = iij5; break; 
}
}
j5 = j5array[ij5]; cj5 = cj5array[ij5]; sj5 = sj5array[ij5];
{
IkReal evalcond[21];
IkReal x299=IKcos(j5);
IkReal x300=IKsin(j5);
IkReal x301=gconst2*gconst2;
IkReal x302=((0.276027873078388)*sj3);
IkReal x303=((0.961149631058464)*cj3);
IkReal x304=((0.961149631058464)*sj3);
IkReal x305=((0.276027873078388)*cj3);
IkReal x306=((0.992470151748698)*gconst2);
IkReal x307=(cj3*gconst2);
IkReal x308=((0.531815483588428)*gconst2);
IkReal x309=((0.0994021100426501)*sj3);
IkReal x310=((0.147909480226238)*sj3);
IkReal x311=((0.0656300100348293)*gconst2);
IkReal x312=((0.147909480226238)*cj3);
IkReal x313=(gconst2*sj3);
IkReal x314=((0.811511442202281)*sj3);
IkReal x315=((0.837955424564001)*gconst2);
IkReal x316=((0.811511442202281)*cj3);
IkReal x317=((0.103420015812922)*gconst2);
IkReal x318=((0.515031836328808)*cj3);
IkReal x319=((0.122486725237355)*gconst2);
IkReal x320=((0.515031836328808)*sj3);
IkReal x321=((0.028546806998574)*x300);
IkReal x322=((1.0)*x300);
IkReal x323=((0.0994021100426501)*x299);
IkReal x324=(new_r02*x300);
IkReal x325=(cj3*x299);
IkReal x326=(new_r01*x299);
IkReal x327=(new_r12*x299);
IkReal x328=(gconst2*x300);
IkReal x329=((0.233054011708033)*x300);
IkReal x330=((0.844313326436599)*x299);
IkReal x331=(new_r11*x299);
IkReal x332=(new_r02*x299);
IkReal x333=(new_r00*x299);
IkReal x334=(new_r10*x299);
IkReal x335=((0.0181157120800272)*x299);
IkReal x336=((0.844313326436599)*x300);
IkReal x337=((0.028546806998574)*x299);
IkReal x338=(new_r01*x300);
IkReal x339=(sj3*x299);
IkReal x340=(new_r00*x300);
IkReal x341=((0.535849798705775)*x300);
IkReal x342=((0.0630802599313394)*x299);
IkReal x343=(x304+x305);
evalcond[0]=(x308+x324+x327);
evalcond[1]=((((-1.0)*new_r12*x322))+x332+(((-1.0)*x315)));
evalcond[2]=((((-1.0)*x299*x315))+new_r02+((x300*x308)));
evalcond[3]=(((x300*x315))+((x299*x308))+new_r12);
evalcond[4]=((((0.0630802599313394)*x307))+(((-0.233054011708033)*cj3))+x334+x340+(((-1.0)*x314))+(((-0.0181157120800272)*x313)));
evalcond[5]=((((-0.233054011708033)*sj3))+(((0.0181157120800272)*x307))+(((0.0630802599313394)*x313))+x338+x331+x316);
evalcond[6]=((((0.028546806998574)*x313))+(((-1.0)*x320))+x333+(((-1.0)*x312))+(((-1.0)*new_r10*x322))+(((-0.0994021100426501)*x307)));
evalcond[7]=((((-1.0)*gconst2*x309))+x326+x318+(((-1.0)*x310))+(((-0.028546806998574)*x307))+(((-1.0)*new_r11*x322)));
evalcond[8]=(((new_r12*x341))+(((-6.54422001705664e-7)*gconst2))+(((-0.535849798705775)*x332))+(((-0.844313326436599)*x324))+(((-0.844313326436599)*x327)));
evalcond[9]=((1.0)+((x308*x324))+((x308*x327))+((new_r12*x300*x315))+(((-1.0)*x315*x332))+(((-0.0150029978593712)*x301)));
evalcond[10]=(((new_r20*x319))+((x308*x334))+(((-1.0)*x315*x333))+((new_r10*x300*x315))+((x308*x340)));
evalcond[11]=((((-1.0)*x315*x326))+((x308*x338))+((x308*x331))+((new_r11*x300*x315))+((new_r21*x319)));
evalcond[12]=(((x317*x332))+(((-0.121564418783519)*x301))+(((-1.0)*x311*x324))+(((-1.0)*x311*x327))+(((-1.0)*new_r12*x300*x317)));
evalcond[13]=((((-1.0)*new_r10*x330))+((new_r10*x341))+(((5.34279939673075e-6)*new_r20))+x343+(((-1.0)*new_r00*x336))+(((-0.535849798705775)*x333)));
evalcond[14]=((((-1.0)*new_r11*x330))+(((-0.535849798705775)*x326))+((new_r11*x341))+(((5.34279939673075e-6)*new_r21))+x302+(((-1.0)*new_r01*x336))+(((-1.0)*x303)));
evalcond[15]=((((-1.0)*new_r10*x300*x317))+(((-1.0)*x311*x334))+x302+((x317*x333))+(((-1.0)*x311*x340))+((new_r20*x306))+(((-1.0)*x303)));
evalcond[16]=(((new_r21*x306))+(((-1.0)*x311*x338))+(((-1.0)*x311*x331))+(((-1.0)*new_r11*x300*x317))+((x317*x326))+(((-1.0)*x343)));
evalcond[17]=((((-1.0)*cj3*x329))+(((-1.0)*x299*x320))+(((0.0630802599313394)*x300*x307))+(((-1.0)*x307*x323))+(((-1.0)*x299*x312))+(((-1.0)*x300*x314))+new_r00+(((-0.0181157120800272)*x300*x313))+((x313*x337)));
evalcond[18]=(((x300*x316))+(((0.0630802599313394)*x300*x313))+(((-1.0)*gconst2*x299*x309))+((x299*x318))+(((-1.0)*x299*x310))+(((-1.0)*x307*x337))+(((0.0181157120800272)*x300*x307))+new_r01+(((-1.0)*sj3*x329)));
evalcond[19]=((((-1.0)*x313*x335))+((x300*x312))+((x307*x342))+(((0.0994021100426501)*x300*x307))+(((-1.0)*x299*x314))+(((-0.233054011708033)*x325))+new_r10+(((-1.0)*x313*x321))+((x300*x320)));
evalcond[20]=(((x300*x310))+(((-0.233054011708033)*x339))+((x299*x316))+((x313*x342))+((x309*x328))+(((-1.0)*x300*x318))+((x307*x335))+new_r11+((x307*x321)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[9]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[10]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[11]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[12]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[13]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[14]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[15]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[16]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[17]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[18]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[19]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[20]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j2;
vinfos[0].indices[0] = _ij2[0];
vinfos[0].indices[1] = _ij2[1];
vinfos[0].maxsolutions = _nj2;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j3;
vinfos[1].indices[0] = _ij3[0];
vinfos[1].indices[1] = _ij3[1];
vinfos[1].maxsolutions = _nj3;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j4;
vinfos[2].indices[0] = _ij4[0];
vinfos[2].indices[1] = _ij4[1];
vinfos[2].maxsolutions = _nj4;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j5;
vinfos[3].indices[0] = _ij5[0];
vinfos[3].indices[1] = _ij5[1];
vinfos[3].maxsolutions = _nj5;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j6;
vinfos[4].indices[0] = _ij6[0];
vinfos[4].indices[1] = _ij6[1];
vinfos[4].maxsolutions = _nj6;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j7;
vinfos[5].indices[0] = _ij7[0];
vinfos[5].indices[1] = _ij7[1];
vinfos[5].maxsolutions = _nj7;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j8;
vinfos[6].indices[0] = _ij8[0];
vinfos[6].indices[1] = _ij8[1];
vinfos[6].maxsolutions = _nj8;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}
}
}

}

}

} else
{
{
IkReal j5array[1], cj5array[1], sj5array[1];
bool j5valid[1]={false};
_nj5 = 1;
IkReal x344=gconst2*gconst2;
CheckValue<IkReal> x345 = IKatan2WithCheck(IkReal(((((8.23915679508573e+76)*x344))+(((-1.173386086617e+77)*(new_r02*new_r02))))),IkReal(((((-1.173386086617e+77)*new_r02*new_r12))+(((5.22905040876042e+76)*x344)))),IKFAST_ATAN2_MAGTHRESH);
if(!x345.valid){
continue;
}
CheckValue<IkReal> x346=IKPowWithIntegerCheck(IKsign(((((6.24024889090152e+76)*gconst2*new_r02))+(((-9.83245236388639e+76)*gconst2*new_r12)))),-1);
if(!x346.valid){
continue;
}
j5array[0]=((-1.5707963267949)+(x345.value)+(((1.5707963267949)*(x346.value))));
sj5array[0]=IKsin(j5array[0]);
cj5array[0]=IKcos(j5array[0]);
if( j5array[0] > IKPI )
{
    j5array[0]-=IK2PI;
}
else if( j5array[0] < -IKPI )
{    j5array[0]+=IK2PI;
}
j5valid[0] = true;
for(int ij5 = 0; ij5 < 1; ++ij5)
{
if( !j5valid[ij5] )
{
    continue;
}
_ij5[0] = ij5; _ij5[1] = -1;
for(int iij5 = ij5+1; iij5 < 1; ++iij5)
{
if( j5valid[iij5] && IKabs(cj5array[ij5]-cj5array[iij5]) < IKFAST_SOLUTION_THRESH && IKabs(sj5array[ij5]-sj5array[iij5]) < IKFAST_SOLUTION_THRESH )
{
    j5valid[iij5]=false; _ij5[1] = iij5; break; 
}
}
j5 = j5array[ij5]; cj5 = cj5array[ij5]; sj5 = sj5array[ij5];
{
IkReal evalcond[9];
IkReal x347=IKcos(j5);
IkReal x348=IKsin(j5);
IkReal x349=gconst2*gconst2;
IkReal x350=((0.837955424564001)*gconst2);
IkReal x351=((0.531815483588428)*gconst2);
IkReal x352=((0.122486725237355)*gconst2);
IkReal x353=(gconst2*x348);
IkReal x354=(new_r02*x347);
IkReal x355=(new_r12*x348);
IkReal x356=(new_r12*x347);
IkReal x357=(new_r02*x348);
IkReal x358=(x347*x351);
evalcond[0]=(x351+x357+x356);
evalcond[1]=((((-1.0)*x350))+(((-1.0)*x355))+x354);
evalcond[2]=((((-1.0)*x347*x350))+((x348*x351))+new_r02);
evalcond[3]=(x358+((x348*x350))+new_r12);
evalcond[4]=((((-0.535849798705775)*x354))+(((0.535849798705775)*x355))+(((-6.54422001705664e-7)*gconst2))+(((-0.844313326436599)*x357))+(((-0.844313326436599)*x356)));
evalcond[5]=((1.0)+(((-0.0150029978593712)*x349))+((x351*x356))+((x351*x357))+((x350*x355))+(((-1.0)*x350*x354)));
evalcond[6]=(((new_r10*x348*x350))+(((-1.0)*new_r00*x347*x350))+((new_r20*x352))+((new_r00*x348*x351))+((new_r10*x358)));
evalcond[7]=((((-1.0)*new_r01*x347*x350))+((new_r21*x352))+((new_r11*x348*x350))+((new_r11*x358))+((new_r01*x348*x351)));
evalcond[8]=((((-0.103420015812922)*new_r12*x353))+(((-0.0656300100348293)*gconst2*x356))+(((0.103420015812922)*gconst2*x354))+(((-0.121564418783519)*x349))+(((-0.0656300100348293)*new_r02*x353)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j3eval[1];
IkReal x359=((((1.57580374828584)*new_r02))+new_r12);
sj4=gconst1;
cj4=gconst2;
j4=nan;
CheckValue<IkReal> x360 = IKatan2WithCheck(IkReal(((((-12.7678698223466)*new_r02))+(((-8.1032363594977)*new_r12)))),IkReal(x359),IKFAST_ATAN2_MAGTHRESH);
if(!x360.valid){
continue;
}
IkReal gconst0=((-1.0)*(x360.value));
IkReal gconst1=0;
IkReal x361 = x359*x359;
if(IKabs(x361)==0){
continue;
}
IkReal gconst2=(x359*(pow(x361,-0.5)));
j3eval[0]=((359792.520620029)+(IKabs(((-51663.5292815391)+(((-158028.266409035)*new_r00*sj5))+(((-100293.827058838)*cj5*new_r00))+new_r20+(((100293.827058838)*new_r10*sj5))+(((-158028.266409035)*cj5*new_r10))))));
if( IKabs(j3eval[0]) < 0.0000000100000000  )
{
{
IkReal j3eval[1];
IkReal x362=((((1.57580374828584)*new_r02))+new_r12);
sj4=gconst1;
cj4=gconst2;
j4=nan;
CheckValue<IkReal> x363 = IKatan2WithCheck(IkReal(((((-12.7678698223466)*new_r02))+(((-8.1032363594977)*new_r12)))),IkReal(x362),IKFAST_ATAN2_MAGTHRESH);
if(!x363.valid){
continue;
}
IkReal gconst0=((-1.0)*(x363.value));
IkReal gconst1=0;
IkReal x364 = x362*x362;
if(IKabs(x364)==0){
continue;
}
IkReal gconst2=(x362*(pow(x364,-0.5)));
j3eval[0]=((103327.058563078)+(IKabs(((179896.260310015)+(((100293.827058838)*new_r11*sj5))+(((-100293.827058838)*cj5*new_r01))+(((-158028.266409035)*new_r01*sj5))+new_r21+(((-158028.266409035)*cj5*new_r11))))));
if( IKabs(j3eval[0]) < 0.0000000100000000  )
{
{
IkReal j3eval[1];
IkReal x365=((((1.57580374828584)*new_r02))+new_r12);
sj4=gconst1;
cj4=gconst2;
j4=nan;
CheckValue<IkReal> x366 = IKatan2WithCheck(IkReal(((((-12.7678698223466)*new_r02))+(((-8.1032363594977)*new_r12)))),IkReal(x365),IKFAST_ATAN2_MAGTHRESH);
if(!x366.valid){
continue;
}
IkReal gconst0=((-1.0)*(x366.value));
IkReal gconst1=0;
IkReal x367 = x365*x365;
if(IKabs(x367)==0){
continue;
}
IkReal gconst2=(x365*(pow(x367,-0.5)));
IkReal x368=((((1.57580374828584)*new_r02))+new_r12);
IkReal x371 = x368*x368;
if(IKabs(x371)==0){
continue;
}
IkReal x369=pow(x371,-0.5);
IkReal x370=(x368*x369);
j3eval[0]=((IKabs(((-1.0)+(((646824.781779194)*x370))+(((678075.71837472)*new_r20)))))+(IKabs(((6.96414909363526)+(((371516.906420252)*x370))))));
if( IKabs(j3eval[0]) < 0.0000000100000000  )
{
continue; // no branches [j3]

} else
{
IkReal op[2+1], zeror[2];
int numroots;
IkReal x372=((678075.71837472)*new_r20);
IkReal x373=((646824.781779194)*gconst2);
op[0]=((-1.0)+x373+x372);
op[1]=((6.96414909363526)+(((371516.906420252)*gconst2)));
op[2]=((1.0)+(((-1.0)*x373))+x372);
polyroots2(op,zeror,numroots);
IkReal j3array[2], cj3array[2], sj3array[2], tempj3array[1];
int numsolutions = 0;
for(int ij3 = 0; ij3 < numroots; ++ij3)
{
IkReal htj3 = zeror[ij3];
tempj3array[0]=((2.0)*(atan(htj3)));
for(int kj3 = 0; kj3 < 1; ++kj3)
{
j3array[numsolutions] = tempj3array[kj3];
if( j3array[numsolutions] > IKPI )
{
    j3array[numsolutions]-=IK2PI;
}
else if( j3array[numsolutions] < -IKPI )
{
    j3array[numsolutions]+=IK2PI;
}
sj3array[numsolutions] = IKsin(j3array[numsolutions]);
cj3array[numsolutions] = IKcos(j3array[numsolutions]);
numsolutions++;
}
}
bool j3valid[2]={true,true};
_nj3 = 2;
for(int ij3 = 0; ij3 < numsolutions; ++ij3)
    {
if( !j3valid[ij3] )
{
    continue;
}
    j3 = j3array[ij3]; cj3 = cj3array[ij3]; sj3 = sj3array[ij3];
htj3 = IKtan(j3/2);

_ij3[0] = ij3; _ij3[1] = -1;
for(int iij3 = ij3+1; iij3 < numsolutions; ++iij3)
{
if( j3valid[iij3] && IKabs(cj3array[ij3]-cj3array[iij3]) < IKFAST_SOLUTION_THRESH && IKabs(sj3array[ij3]-sj3array[iij3]) < IKFAST_SOLUTION_THRESH )
{
    j3valid[iij3]=false; _ij3[1] = iij3; break; 
}
}
{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j2;
vinfos[0].indices[0] = _ij2[0];
vinfos[0].indices[1] = _ij2[1];
vinfos[0].maxsolutions = _nj2;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j3;
vinfos[1].indices[0] = _ij3[0];
vinfos[1].indices[1] = _ij3[1];
vinfos[1].maxsolutions = _nj3;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j4;
vinfos[2].indices[0] = _ij4[0];
vinfos[2].indices[1] = _ij4[1];
vinfos[2].maxsolutions = _nj4;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j5;
vinfos[3].indices[0] = _ij5[0];
vinfos[3].indices[1] = _ij5[1];
vinfos[3].maxsolutions = _nj5;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j6;
vinfos[4].indices[0] = _ij6[0];
vinfos[4].indices[1] = _ij6[1];
vinfos[4].maxsolutions = _nj6;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j7;
vinfos[5].indices[0] = _ij7[0];
vinfos[5].indices[1] = _ij7[1];
vinfos[5].maxsolutions = _nj7;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j8;
vinfos[6].indices[0] = _ij8[0];
vinfos[6].indices[1] = _ij8[1];
vinfos[6].maxsolutions = _nj8;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
    }

}

}

} else
{
IkReal op[2+1], zeror[2];
int numroots;
IkReal x374=((100293.827058838)*new_r11*sj5);
IkReal x375=(x374+new_r21);
IkReal x376=((((158028.266409035)*new_r01*sj5))+(((100293.827058838)*cj5*new_r01))+(((158028.266409035)*cj5*new_r11)));
op[0]=((179896.260310015)+(((-1.0)*x376))+x375);
op[1]=103327.058563078;
op[2]=((-179896.260310015)+(((-1.0)*x376))+x375);
polyroots2(op,zeror,numroots);
IkReal j3array[2], cj3array[2], sj3array[2], tempj3array[1];
int numsolutions = 0;
for(int ij3 = 0; ij3 < numroots; ++ij3)
{
IkReal htj3 = zeror[ij3];
tempj3array[0]=((2.0)*(atan(htj3)));
for(int kj3 = 0; kj3 < 1; ++kj3)
{
j3array[numsolutions] = tempj3array[kj3];
if( j3array[numsolutions] > IKPI )
{
    j3array[numsolutions]-=IK2PI;
}
else if( j3array[numsolutions] < -IKPI )
{
    j3array[numsolutions]+=IK2PI;
}
sj3array[numsolutions] = IKsin(j3array[numsolutions]);
cj3array[numsolutions] = IKcos(j3array[numsolutions]);
numsolutions++;
}
}
bool j3valid[2]={true,true};
_nj3 = 2;
for(int ij3 = 0; ij3 < numsolutions; ++ij3)
    {
if( !j3valid[ij3] )
{
    continue;
}
    j3 = j3array[ij3]; cj3 = cj3array[ij3]; sj3 = sj3array[ij3];
htj3 = IKtan(j3/2);

_ij3[0] = ij3; _ij3[1] = -1;
for(int iij3 = ij3+1; iij3 < numsolutions; ++iij3)
{
if( j3valid[iij3] && IKabs(cj3array[ij3]-cj3array[iij3]) < IKFAST_SOLUTION_THRESH && IKabs(sj3array[ij3]-sj3array[iij3]) < IKFAST_SOLUTION_THRESH )
{
    j3valid[iij3]=false; _ij3[1] = iij3; break; 
}
}
{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j2;
vinfos[0].indices[0] = _ij2[0];
vinfos[0].indices[1] = _ij2[1];
vinfos[0].maxsolutions = _nj2;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j3;
vinfos[1].indices[0] = _ij3[0];
vinfos[1].indices[1] = _ij3[1];
vinfos[1].maxsolutions = _nj3;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j4;
vinfos[2].indices[0] = _ij4[0];
vinfos[2].indices[1] = _ij4[1];
vinfos[2].maxsolutions = _nj4;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j5;
vinfos[3].indices[0] = _ij5[0];
vinfos[3].indices[1] = _ij5[1];
vinfos[3].maxsolutions = _nj5;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j6;
vinfos[4].indices[0] = _ij6[0];
vinfos[4].indices[1] = _ij6[1];
vinfos[4].maxsolutions = _nj6;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j7;
vinfos[5].indices[0] = _ij7[0];
vinfos[5].indices[1] = _ij7[1];
vinfos[5].maxsolutions = _nj7;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j8;
vinfos[6].indices[0] = _ij8[0];
vinfos[6].indices[1] = _ij8[1];
vinfos[6].maxsolutions = _nj8;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
    }

}

}

} else
{
IkReal op[2+1], zeror[2];
int numroots;
IkReal x377=((100293.827058838)*new_r10*sj5);
IkReal x378=(x377+new_r20);
IkReal x379=((((100293.827058838)*cj5*new_r00))+(((158028.266409035)*cj5*new_r10))+(((158028.266409035)*new_r00*sj5)));
op[0]=((-51663.5292815391)+(((-1.0)*x379))+x378);
op[1]=359792.520620029;
op[2]=((51663.5292815391)+(((-1.0)*x379))+x378);
polyroots2(op,zeror,numroots);
IkReal j3array[2], cj3array[2], sj3array[2], tempj3array[1];
int numsolutions = 0;
for(int ij3 = 0; ij3 < numroots; ++ij3)
{
IkReal htj3 = zeror[ij3];
tempj3array[0]=((2.0)*(atan(htj3)));
for(int kj3 = 0; kj3 < 1; ++kj3)
{
j3array[numsolutions] = tempj3array[kj3];
if( j3array[numsolutions] > IKPI )
{
    j3array[numsolutions]-=IK2PI;
}
else if( j3array[numsolutions] < -IKPI )
{
    j3array[numsolutions]+=IK2PI;
}
sj3array[numsolutions] = IKsin(j3array[numsolutions]);
cj3array[numsolutions] = IKcos(j3array[numsolutions]);
numsolutions++;
}
}
bool j3valid[2]={true,true};
_nj3 = 2;
for(int ij3 = 0; ij3 < numsolutions; ++ij3)
    {
if( !j3valid[ij3] )
{
    continue;
}
    j3 = j3array[ij3]; cj3 = cj3array[ij3]; sj3 = sj3array[ij3];
htj3 = IKtan(j3/2);

_ij3[0] = ij3; _ij3[1] = -1;
for(int iij3 = ij3+1; iij3 < numsolutions; ++iij3)
{
if( j3valid[iij3] && IKabs(cj3array[ij3]-cj3array[iij3]) < IKFAST_SOLUTION_THRESH && IKabs(sj3array[ij3]-sj3array[iij3]) < IKFAST_SOLUTION_THRESH )
{
    j3valid[iij3]=false; _ij3[1] = iij3; break; 
}
}
{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j2;
vinfos[0].indices[0] = _ij2[0];
vinfos[0].indices[1] = _ij2[1];
vinfos[0].maxsolutions = _nj2;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j3;
vinfos[1].indices[0] = _ij3[0];
vinfos[1].indices[1] = _ij3[1];
vinfos[1].maxsolutions = _nj3;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j4;
vinfos[2].indices[0] = _ij4[0];
vinfos[2].indices[1] = _ij4[1];
vinfos[2].maxsolutions = _nj4;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j5;
vinfos[3].indices[0] = _ij5[0];
vinfos[3].indices[1] = _ij5[1];
vinfos[3].maxsolutions = _nj5;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j6;
vinfos[4].indices[0] = _ij6[0];
vinfos[4].indices[1] = _ij6[1];
vinfos[4].maxsolutions = _nj6;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j7;
vinfos[5].indices[0] = _ij7[0];
vinfos[5].indices[1] = _ij7[1];
vinfos[5].maxsolutions = _nj7;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j8;
vinfos[6].indices[0] = _ij8[0];
vinfos[6].indices[1] = _ij8[1];
vinfos[6].maxsolutions = _nj8;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
    }

}

}
}
}

}

}

} else
{
{
IkReal j5array[1], cj5array[1], sj5array[1];
bool j5valid[1]={false};
_nj5 = 1;
IkReal x380=(gconst2*new_r02);
IkReal x381=(gconst2*new_r12);
CheckValue<IkReal> x382 = IKatan2WithCheck(IkReal(((((1.36249153167196e+56)*x380))+(((2.14681069867194e+56)*x381)))),IkReal(((((-2.14681069867194e+56)*x380))+(((1.36249153167196e+56)*x381)))),IKFAST_ATAN2_MAGTHRESH);
if(!x382.valid){
continue;
}
CheckValue<IkReal> x383=IKPowWithIntegerCheck(IKsign(((((-2.56196288697451e+56)*(new_r02*new_r02)))+(((-2.56196288697451e+56)*(new_r12*new_r12))))),-1);
if(!x383.valid){
continue;
}
j5array[0]=((-1.5707963267949)+(x382.value)+(((1.5707963267949)*(x383.value))));
sj5array[0]=IKsin(j5array[0]);
cj5array[0]=IKcos(j5array[0]);
if( j5array[0] > IKPI )
{
    j5array[0]-=IK2PI;
}
else if( j5array[0] < -IKPI )
{    j5array[0]+=IK2PI;
}
j5valid[0] = true;
for(int ij5 = 0; ij5 < 1; ++ij5)
{
if( !j5valid[ij5] )
{
    continue;
}
_ij5[0] = ij5; _ij5[1] = -1;
for(int iij5 = ij5+1; iij5 < 1; ++iij5)
{
if( j5valid[iij5] && IKabs(cj5array[ij5]-cj5array[iij5]) < IKFAST_SOLUTION_THRESH && IKabs(sj5array[ij5]-sj5array[iij5]) < IKFAST_SOLUTION_THRESH )
{
    j5valid[iij5]=false; _ij5[1] = iij5; break; 
}
}
j5 = j5array[ij5]; cj5 = cj5array[ij5]; sj5 = sj5array[ij5];
{
IkReal evalcond[9];
IkReal x384=IKcos(j5);
IkReal x385=IKsin(j5);
IkReal x386=gconst2*gconst2;
IkReal x387=((0.837955424564001)*gconst2);
IkReal x388=((0.531815483588428)*gconst2);
IkReal x389=((0.122486725237355)*gconst2);
IkReal x390=(gconst2*x385);
IkReal x391=(new_r02*x384);
IkReal x392=(new_r12*x385);
IkReal x393=(new_r12*x384);
IkReal x394=(new_r02*x385);
IkReal x395=(x384*x388);
evalcond[0]=(x388+x394+x393);
evalcond[1]=((((-1.0)*x392))+x391+(((-1.0)*x387)));
evalcond[2]=((((-1.0)*x384*x387))+((x385*x388))+new_r02);
evalcond[3]=(x395+((x385*x387))+new_r12);
evalcond[4]=((((-0.844313326436599)*x394))+(((-0.844313326436599)*x393))+(((0.535849798705775)*x392))+(((-0.535849798705775)*x391))+(((-6.54422001705664e-7)*gconst2)));
evalcond[5]=((1.0)+(((-1.0)*x387*x391))+(((-0.0150029978593712)*x386))+((x387*x392))+((x388*x393))+((x388*x394)));
evalcond[6]=(((new_r10*x385*x387))+(((-1.0)*new_r00*x384*x387))+((new_r20*x389))+((new_r00*x385*x388))+((new_r10*x395)));
evalcond[7]=(((new_r11*x385*x387))+((new_r11*x395))+((new_r01*x385*x388))+(((-1.0)*new_r01*x384*x387))+((new_r21*x389)));
evalcond[8]=((((0.103420015812922)*gconst2*x391))+(((-0.0656300100348293)*gconst2*x393))+(((-0.121564418783519)*x386))+(((-0.103420015812922)*new_r12*x390))+(((-0.0656300100348293)*new_r02*x390)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j3eval[1];
IkReal x396=((((1.57580374828584)*new_r02))+new_r12);
sj4=gconst1;
cj4=gconst2;
j4=nan;
CheckValue<IkReal> x397 = IKatan2WithCheck(IkReal(((((-12.7678698223466)*new_r02))+(((-8.1032363594977)*new_r12)))),IkReal(x396),IKFAST_ATAN2_MAGTHRESH);
if(!x397.valid){
continue;
}
IkReal gconst0=((-1.0)*(x397.value));
IkReal gconst1=0;
IkReal x398 = x396*x396;
if(IKabs(x398)==0){
continue;
}
IkReal gconst2=(x396*(pow(x398,-0.5)));
j3eval[0]=((359792.520620029)+(IKabs(((-51663.5292815391)+(((-158028.266409035)*new_r00*sj5))+(((-100293.827058838)*cj5*new_r00))+new_r20+(((100293.827058838)*new_r10*sj5))+(((-158028.266409035)*cj5*new_r10))))));
if( IKabs(j3eval[0]) < 0.0000000100000000  )
{
{
IkReal j3eval[1];
IkReal x399=((((1.57580374828584)*new_r02))+new_r12);
sj4=gconst1;
cj4=gconst2;
j4=nan;
CheckValue<IkReal> x400 = IKatan2WithCheck(IkReal(((((-12.7678698223466)*new_r02))+(((-8.1032363594977)*new_r12)))),IkReal(x399),IKFAST_ATAN2_MAGTHRESH);
if(!x400.valid){
continue;
}
IkReal gconst0=((-1.0)*(x400.value));
IkReal gconst1=0;
IkReal x401 = x399*x399;
if(IKabs(x401)==0){
continue;
}
IkReal gconst2=(x399*(pow(x401,-0.5)));
j3eval[0]=((103327.058563078)+(IKabs(((179896.260310015)+(((100293.827058838)*new_r11*sj5))+(((-100293.827058838)*cj5*new_r01))+(((-158028.266409035)*new_r01*sj5))+new_r21+(((-158028.266409035)*cj5*new_r11))))));
if( IKabs(j3eval[0]) < 0.0000000100000000  )
{
{
IkReal j3eval[1];
IkReal x402=((((1.57580374828584)*new_r02))+new_r12);
sj4=gconst1;
cj4=gconst2;
j4=nan;
CheckValue<IkReal> x403 = IKatan2WithCheck(IkReal(((((-12.7678698223466)*new_r02))+(((-8.1032363594977)*new_r12)))),IkReal(x402),IKFAST_ATAN2_MAGTHRESH);
if(!x403.valid){
continue;
}
IkReal gconst0=((-1.0)*(x403.value));
IkReal gconst1=0;
IkReal x404 = x402*x402;
if(IKabs(x404)==0){
continue;
}
IkReal gconst2=(x402*(pow(x404,-0.5)));
IkReal x405=((((1.57580374828584)*new_r02))+new_r12);
IkReal x408 = x405*x405;
if(IKabs(x408)==0){
continue;
}
IkReal x406=pow(x408,-0.5);
IkReal x407=(x405*x406);
j3eval[0]=((IKabs(((6.96414909363526)+(((371516.906420252)*x407)))))+(IKabs(((-1.0)+(((646824.781779194)*x407))+(((678075.71837472)*new_r20))))));
if( IKabs(j3eval[0]) < 0.0000000100000000  )
{
continue; // no branches [j3]

} else
{
IkReal op[2+1], zeror[2];
int numroots;
IkReal x409=((678075.71837472)*new_r20);
IkReal x410=((646824.781779194)*gconst2);
op[0]=((-1.0)+x409+x410);
op[1]=((6.96414909363526)+(((371516.906420252)*gconst2)));
op[2]=((1.0)+x409+(((-1.0)*x410)));
polyroots2(op,zeror,numroots);
IkReal j3array[2], cj3array[2], sj3array[2], tempj3array[1];
int numsolutions = 0;
for(int ij3 = 0; ij3 < numroots; ++ij3)
{
IkReal htj3 = zeror[ij3];
tempj3array[0]=((2.0)*(atan(htj3)));
for(int kj3 = 0; kj3 < 1; ++kj3)
{
j3array[numsolutions] = tempj3array[kj3];
if( j3array[numsolutions] > IKPI )
{
    j3array[numsolutions]-=IK2PI;
}
else if( j3array[numsolutions] < -IKPI )
{
    j3array[numsolutions]+=IK2PI;
}
sj3array[numsolutions] = IKsin(j3array[numsolutions]);
cj3array[numsolutions] = IKcos(j3array[numsolutions]);
numsolutions++;
}
}
bool j3valid[2]={true,true};
_nj3 = 2;
for(int ij3 = 0; ij3 < numsolutions; ++ij3)
    {
if( !j3valid[ij3] )
{
    continue;
}
    j3 = j3array[ij3]; cj3 = cj3array[ij3]; sj3 = sj3array[ij3];
htj3 = IKtan(j3/2);

_ij3[0] = ij3; _ij3[1] = -1;
for(int iij3 = ij3+1; iij3 < numsolutions; ++iij3)
{
if( j3valid[iij3] && IKabs(cj3array[ij3]-cj3array[iij3]) < IKFAST_SOLUTION_THRESH && IKabs(sj3array[ij3]-sj3array[iij3]) < IKFAST_SOLUTION_THRESH )
{
    j3valid[iij3]=false; _ij3[1] = iij3; break; 
}
}
{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j2;
vinfos[0].indices[0] = _ij2[0];
vinfos[0].indices[1] = _ij2[1];
vinfos[0].maxsolutions = _nj2;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j3;
vinfos[1].indices[0] = _ij3[0];
vinfos[1].indices[1] = _ij3[1];
vinfos[1].maxsolutions = _nj3;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j4;
vinfos[2].indices[0] = _ij4[0];
vinfos[2].indices[1] = _ij4[1];
vinfos[2].maxsolutions = _nj4;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j5;
vinfos[3].indices[0] = _ij5[0];
vinfos[3].indices[1] = _ij5[1];
vinfos[3].maxsolutions = _nj5;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j6;
vinfos[4].indices[0] = _ij6[0];
vinfos[4].indices[1] = _ij6[1];
vinfos[4].maxsolutions = _nj6;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j7;
vinfos[5].indices[0] = _ij7[0];
vinfos[5].indices[1] = _ij7[1];
vinfos[5].maxsolutions = _nj7;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j8;
vinfos[6].indices[0] = _ij8[0];
vinfos[6].indices[1] = _ij8[1];
vinfos[6].maxsolutions = _nj8;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
    }

}

}

} else
{
IkReal op[2+1], zeror[2];
int numroots;
IkReal x411=((100293.827058838)*new_r11*sj5);
IkReal x412=(x411+new_r21);
IkReal x413=((((158028.266409035)*new_r01*sj5))+(((100293.827058838)*cj5*new_r01))+(((158028.266409035)*cj5*new_r11)));
op[0]=((179896.260310015)+x412+(((-1.0)*x413)));
op[1]=103327.058563078;
op[2]=((-179896.260310015)+x412+(((-1.0)*x413)));
polyroots2(op,zeror,numroots);
IkReal j3array[2], cj3array[2], sj3array[2], tempj3array[1];
int numsolutions = 0;
for(int ij3 = 0; ij3 < numroots; ++ij3)
{
IkReal htj3 = zeror[ij3];
tempj3array[0]=((2.0)*(atan(htj3)));
for(int kj3 = 0; kj3 < 1; ++kj3)
{
j3array[numsolutions] = tempj3array[kj3];
if( j3array[numsolutions] > IKPI )
{
    j3array[numsolutions]-=IK2PI;
}
else if( j3array[numsolutions] < -IKPI )
{
    j3array[numsolutions]+=IK2PI;
}
sj3array[numsolutions] = IKsin(j3array[numsolutions]);
cj3array[numsolutions] = IKcos(j3array[numsolutions]);
numsolutions++;
}
}
bool j3valid[2]={true,true};
_nj3 = 2;
for(int ij3 = 0; ij3 < numsolutions; ++ij3)
    {
if( !j3valid[ij3] )
{
    continue;
}
    j3 = j3array[ij3]; cj3 = cj3array[ij3]; sj3 = sj3array[ij3];
htj3 = IKtan(j3/2);

_ij3[0] = ij3; _ij3[1] = -1;
for(int iij3 = ij3+1; iij3 < numsolutions; ++iij3)
{
if( j3valid[iij3] && IKabs(cj3array[ij3]-cj3array[iij3]) < IKFAST_SOLUTION_THRESH && IKabs(sj3array[ij3]-sj3array[iij3]) < IKFAST_SOLUTION_THRESH )
{
    j3valid[iij3]=false; _ij3[1] = iij3; break; 
}
}
{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j2;
vinfos[0].indices[0] = _ij2[0];
vinfos[0].indices[1] = _ij2[1];
vinfos[0].maxsolutions = _nj2;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j3;
vinfos[1].indices[0] = _ij3[0];
vinfos[1].indices[1] = _ij3[1];
vinfos[1].maxsolutions = _nj3;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j4;
vinfos[2].indices[0] = _ij4[0];
vinfos[2].indices[1] = _ij4[1];
vinfos[2].maxsolutions = _nj4;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j5;
vinfos[3].indices[0] = _ij5[0];
vinfos[3].indices[1] = _ij5[1];
vinfos[3].maxsolutions = _nj5;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j6;
vinfos[4].indices[0] = _ij6[0];
vinfos[4].indices[1] = _ij6[1];
vinfos[4].maxsolutions = _nj6;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j7;
vinfos[5].indices[0] = _ij7[0];
vinfos[5].indices[1] = _ij7[1];
vinfos[5].maxsolutions = _nj7;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j8;
vinfos[6].indices[0] = _ij8[0];
vinfos[6].indices[1] = _ij8[1];
vinfos[6].maxsolutions = _nj8;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
    }

}

}

} else
{
IkReal op[2+1], zeror[2];
int numroots;
IkReal x414=((100293.827058838)*new_r10*sj5);
IkReal x415=(x414+new_r20);
IkReal x416=((((100293.827058838)*cj5*new_r00))+(((158028.266409035)*cj5*new_r10))+(((158028.266409035)*new_r00*sj5)));
op[0]=((-51663.5292815391)+x415+(((-1.0)*x416)));
op[1]=359792.520620029;
op[2]=((51663.5292815391)+x415+(((-1.0)*x416)));
polyroots2(op,zeror,numroots);
IkReal j3array[2], cj3array[2], sj3array[2], tempj3array[1];
int numsolutions = 0;
for(int ij3 = 0; ij3 < numroots; ++ij3)
{
IkReal htj3 = zeror[ij3];
tempj3array[0]=((2.0)*(atan(htj3)));
for(int kj3 = 0; kj3 < 1; ++kj3)
{
j3array[numsolutions] = tempj3array[kj3];
if( j3array[numsolutions] > IKPI )
{
    j3array[numsolutions]-=IK2PI;
}
else if( j3array[numsolutions] < -IKPI )
{
    j3array[numsolutions]+=IK2PI;
}
sj3array[numsolutions] = IKsin(j3array[numsolutions]);
cj3array[numsolutions] = IKcos(j3array[numsolutions]);
numsolutions++;
}
}
bool j3valid[2]={true,true};
_nj3 = 2;
for(int ij3 = 0; ij3 < numsolutions; ++ij3)
    {
if( !j3valid[ij3] )
{
    continue;
}
    j3 = j3array[ij3]; cj3 = cj3array[ij3]; sj3 = sj3array[ij3];
htj3 = IKtan(j3/2);

_ij3[0] = ij3; _ij3[1] = -1;
for(int iij3 = ij3+1; iij3 < numsolutions; ++iij3)
{
if( j3valid[iij3] && IKabs(cj3array[ij3]-cj3array[iij3]) < IKFAST_SOLUTION_THRESH && IKabs(sj3array[ij3]-sj3array[iij3]) < IKFAST_SOLUTION_THRESH )
{
    j3valid[iij3]=false; _ij3[1] = iij3; break; 
}
}
{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j2;
vinfos[0].indices[0] = _ij2[0];
vinfos[0].indices[1] = _ij2[1];
vinfos[0].maxsolutions = _nj2;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j3;
vinfos[1].indices[0] = _ij3[0];
vinfos[1].indices[1] = _ij3[1];
vinfos[1].maxsolutions = _nj3;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j4;
vinfos[2].indices[0] = _ij4[0];
vinfos[2].indices[1] = _ij4[1];
vinfos[2].maxsolutions = _nj4;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j5;
vinfos[3].indices[0] = _ij5[0];
vinfos[3].indices[1] = _ij5[1];
vinfos[3].maxsolutions = _nj5;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j6;
vinfos[4].indices[0] = _ij6[0];
vinfos[4].indices[1] = _ij6[1];
vinfos[4].maxsolutions = _nj6;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j7;
vinfos[5].indices[0] = _ij7[0];
vinfos[5].indices[1] = _ij7[1];
vinfos[5].maxsolutions = _nj7;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j8;
vinfos[6].indices[0] = _ij8[0];
vinfos[6].indices[1] = _ij8[1];
vinfos[6].maxsolutions = _nj8;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
    }

}

}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
IkReal x417=((((1.57580374828584)*new_r02))+new_r12);
CheckValue<IkReal> x418 = IKatan2WithCheck(IkReal(((((-12.7678698223466)*new_r02))+(((-8.1032363594977)*new_r12)))),IkReal(x417),IKFAST_ATAN2_MAGTHRESH);
if(!x418.valid){
continue;
}
IkReal gconst3=((3.14159265358979)+(((-1.0)*(x418.value))));
IkReal gconst4=0;
IkReal x419 = x417*x417;
if(IKabs(x419)==0){
continue;
}
IkReal gconst5=((-1.0)*x417*(pow(x419,-0.5)));
IkReal x420=j4;
CheckValue<IkReal> x423 = IKatan2WithCheck(IkReal(((((-12.7678698223466)*new_r02))+(((-8.1032363594977)*new_r12)))),IkReal(((((1.57580374828584)*new_r02))+new_r12)),IKFAST_ATAN2_MAGTHRESH);
if(!x423.valid){
continue;
}
IkReal x421=x423.value;
IkReal x422=x421;
if((((9.86960440108936)+((x420*x421))+(((-3.14159265358979)*x422))+(((-3.14159265358979)*x420))+(((-3.14159265358979)*x421))+((j4*x420))+((j4*x422))+(((-3.14159265358979)*j4))+((x421*x422)))) < -0.00001)
continue;
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKsqrt(((9.86960440108936)+((x420*x421))+(((-3.14159265358979)*x422))+(((-3.14159265358979)*x420))+(((-3.14159265358979)*x421))+((j4*x420))+((j4*x422))+(((-3.14159265358979)*j4))+((x421*x422)))))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j5eval[2];
IkReal x424=((((1.57580374828584)*new_r02))+new_r12);
sj4=gconst4;
cj4=gconst5;
j4=nan;
CheckValue<IkReal> x425 = IKatan2WithCheck(IkReal(((((-12.7678698223466)*new_r02))+(((-8.1032363594977)*new_r12)))),IkReal(x424),IKFAST_ATAN2_MAGTHRESH);
if(!x425.valid){
continue;
}
IkReal gconst3=((3.14159265358979)+(((-1.0)*(x425.value))));
IkReal gconst4=0;
IkReal x426 = x424*x424;
if(IKabs(x426)==0){
continue;
}
IkReal gconst5=((-1.0)*x424*(pow(x426,-0.5)));
IkReal x427=new_r12*new_r12;
IkReal x428=new_r02*new_r02;
j5eval[0]=((((-1.0)*x427))+(((-1.0)*x428)));
j5eval[1]=IKsign(((((-2.56196288697451e+56)*x427))+(((-2.56196288697451e+56)*x428))));
if( IKabs(j5eval[0]) < 0.0000010000000000  || IKabs(j5eval[1]) < 0.0000010000000000  )
{
{
IkReal j5eval[1];
IkReal x429=((((1.57580374828584)*new_r02))+new_r12);
sj4=gconst4;
cj4=gconst5;
j4=nan;
CheckValue<IkReal> x430 = IKatan2WithCheck(IkReal(((((-12.7678698223466)*new_r02))+(((-8.1032363594977)*new_r12)))),IkReal(x429),IKFAST_ATAN2_MAGTHRESH);
if(!x430.valid){
continue;
}
IkReal gconst3=((3.14159265358979)+(((-1.0)*(x430.value))));
IkReal gconst4=0;
IkReal x431 = x429*x429;
if(IKabs(x431)==0){
continue;
}
IkReal gconst5=((-1.0)*x429*(pow(x431,-0.5)));
IkReal x432=new_r02*new_r02;
j5eval[0]=((1.0)+(((-2.03046303253059)*x432))+(((-1.28865050323593)*new_r02*new_r12))+(((1.44585006149089)*x432*(new_r12*new_r12)))+(((1.44585006149089)*(x432*x432))));
if( IKabs(j5eval[0]) < 0.0000010000000000  )
{
{
IkReal j3eval[2];
IkReal x433=((((1.57580374828584)*new_r02))+new_r12);
sj4=gconst4;
cj4=gconst5;
j4=nan;
CheckValue<IkReal> x434 = IKatan2WithCheck(IkReal(((((-12.7678698223466)*new_r02))+(((-8.1032363594977)*new_r12)))),IkReal(x433),IKFAST_ATAN2_MAGTHRESH);
if(!x434.valid){
continue;
}
IkReal gconst3=((3.14159265358979)+(((-1.0)*(x434.value))));
IkReal gconst4=0;
IkReal x435 = x433*x433;
if(IKabs(x435)==0){
continue;
}
IkReal gconst5=((-1.0)*x433*(pow(x435,-0.5)));
j3eval[0]=34506202940.0186;
j3eval[1]=1.0;
if( IKabs(j3eval[0]) < 0.0000010000000000  || IKabs(j3eval[1]) < 0.0000010000000000  )
{
continue; // no branches [j3, j5]

} else
{
{
IkReal j3array[1], cj3array[1], sj3array[1];
bool j3valid[1]={false};
_nj3 = 1;
IkReal x436=((0.273949425080978)*gconst5);
IkReal x437=((0.953912320189798)*gconst5);
CheckValue<IkReal> x438 = IKatan2WithCheck(IkReal(((((-5.13522966898714e-6)*new_r20))+((new_r21*x437))+(((-1.47476155376408e-6)*new_r21))+(((-1.0)*new_r20*x436)))),IkReal(((((5.13522966898714e-6)*new_r21))+((new_r21*x436))+((new_r20*x437))+(((-1.47476155376408e-6)*new_r20)))),IKFAST_ATAN2_MAGTHRESH);
if(!x438.valid){
continue;
}
CheckValue<IkReal> x439=IKPowWithIntegerCheck(IKsign(((2.85455053937064e-11)+(((0.984997002112083)*(gconst5*gconst5))))),-1);
if(!x439.valid){
continue;
}
j3array[0]=((-1.5707963267949)+(x438.value)+(((1.5707963267949)*(x439.value))));
sj3array[0]=IKsin(j3array[0]);
cj3array[0]=IKcos(j3array[0]);
if( j3array[0] > IKPI )
{
    j3array[0]-=IK2PI;
}
else if( j3array[0] < -IKPI )
{    j3array[0]+=IK2PI;
}
j3valid[0] = true;
for(int ij3 = 0; ij3 < 1; ++ij3)
{
if( !j3valid[ij3] )
{
    continue;
}
_ij3[0] = ij3; _ij3[1] = -1;
for(int iij3 = ij3+1; iij3 < 1; ++iij3)
{
if( j3valid[iij3] && IKabs(cj3array[ij3]-cj3array[iij3]) < IKFAST_SOLUTION_THRESH && IKabs(sj3array[ij3]-sj3array[iij3]) < IKFAST_SOLUTION_THRESH )
{
    j3valid[iij3]=false; _ij3[1] = iij3; break; 
}
}
j3 = j3array[ij3]; cj3 = cj3array[ij3]; sj3 = sj3array[ij3];
{
IkReal evalcond[2];
IkReal x440=IKsin(j3);
IkReal x441=IKcos(j3);
IkReal x442=(gconst5*x441);
IkReal x443=(gconst5*x440);
evalcond[0]=((((1.47476155376408e-6)*x441))+(((-0.953912320189798)*x442))+(((5.13522966898714e-6)*x440))+new_r20+(((0.273949425080978)*x443)));
evalcond[1]=((((1.47476155376408e-6)*x440))+(((-0.273949425080978)*x442))+(((-5.13522966898714e-6)*x441))+(((-0.953912320189798)*x443))+new_r21);
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j5eval[2];
IkReal x444=((((1.57580374828584)*new_r02))+new_r12);
sj4=gconst4;
cj4=gconst5;
j4=nan;
CheckValue<IkReal> x445 = IKatan2WithCheck(IkReal(((((-12.7678698223466)*new_r02))+(((-8.1032363594977)*new_r12)))),IkReal(x444),IKFAST_ATAN2_MAGTHRESH);
if(!x445.valid){
continue;
}
IkReal gconst3=((3.14159265358979)+(((-1.0)*(x445.value))));
IkReal gconst4=0;
IkReal x446 = x444*x444;
if(IKabs(x446)==0){
continue;
}
IkReal gconst5=((-1.0)*x444*(pow(x446,-0.5)));
IkReal x447=new_r12*new_r12;
IkReal x448=new_r02*new_r02;
j5eval[0]=((((-1.0)*x447))+(((-1.0)*x448)));
j5eval[1]=IKsign(((((-2.56196288697451e+56)*x448))+(((-2.56196288697451e+56)*x447))));
if( IKabs(j5eval[0]) < 0.0000010000000000  || IKabs(j5eval[1]) < 0.0000010000000000  )
{
{
IkReal j5eval[1];
IkReal x449=((((1.57580374828584)*new_r02))+new_r12);
sj4=gconst4;
cj4=gconst5;
j4=nan;
CheckValue<IkReal> x450 = IKatan2WithCheck(IkReal(((((-12.7678698223466)*new_r02))+(((-8.1032363594977)*new_r12)))),IkReal(x449),IKFAST_ATAN2_MAGTHRESH);
if(!x450.valid){
continue;
}
IkReal gconst3=((3.14159265358979)+(((-1.0)*(x450.value))));
IkReal gconst4=0;
IkReal x451 = x449*x449;
if(IKabs(x451)==0){
continue;
}
IkReal gconst5=((-1.0)*x449*(pow(x451,-0.5)));
IkReal x452=new_r02*new_r02;
j5eval[0]=((1.0)+(((1.44585006149089)*(x452*x452)))+(((-1.28865050323593)*new_r02*new_r12))+(((-2.03046303253059)*x452))+(((1.44585006149089)*x452*(new_r12*new_r12))));
if( IKabs(j5eval[0]) < 0.0000010000000000  )
{
{
IkReal j5array[1], cj5array[1], sj5array[1];
bool j5valid[1]={false};
_nj5 = 1;
IkReal x453=gconst5*gconst5;
IkReal x454=(gconst5*new_r12);
IkReal x455=(gconst5*new_r02);
CheckValue<IkReal> x456=IKPowWithIntegerCheck(((((9.83245236388639e+76)*x455))+(((6.24024889090152e+76)*x454))),-1);
if(!x456.valid){
continue;
}
CheckValue<IkReal> x457=IKPowWithIntegerCheck(((((1.2480497781803e+77)*x454))+(((1.96649047277728e+77)*x455))),-1);
if(!x457.valid){
continue;
}
if( IKabs(((x456.value)*(((((-1.173386086617e+77)*new_r02*new_r12))+(((-5.22905040876042e+76)*x453)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((x457.value)*(((((2.346772173234e+77)*(new_r02*new_r02)))+(((-6.63732196325388e+76)*x453)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((x456.value)*(((((-1.173386086617e+77)*new_r02*new_r12))+(((-5.22905040876042e+76)*x453))))))+IKsqr(((x457.value)*(((((2.346772173234e+77)*(new_r02*new_r02)))+(((-6.63732196325388e+76)*x453))))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j5array[0]=IKatan2(((x456.value)*(((((-1.173386086617e+77)*new_r02*new_r12))+(((-5.22905040876042e+76)*x453))))), ((x457.value)*(((((2.346772173234e+77)*(new_r02*new_r02)))+(((-6.63732196325388e+76)*x453))))));
sj5array[0]=IKsin(j5array[0]);
cj5array[0]=IKcos(j5array[0]);
if( j5array[0] > IKPI )
{
    j5array[0]-=IK2PI;
}
else if( j5array[0] < -IKPI )
{    j5array[0]+=IK2PI;
}
j5valid[0] = true;
for(int ij5 = 0; ij5 < 1; ++ij5)
{
if( !j5valid[ij5] )
{
    continue;
}
_ij5[0] = ij5; _ij5[1] = -1;
for(int iij5 = ij5+1; iij5 < 1; ++iij5)
{
if( j5valid[iij5] && IKabs(cj5array[ij5]-cj5array[iij5]) < IKFAST_SOLUTION_THRESH && IKabs(sj5array[ij5]-sj5array[iij5]) < IKFAST_SOLUTION_THRESH )
{
    j5valid[iij5]=false; _ij5[1] = iij5; break; 
}
}
j5 = j5array[ij5]; cj5 = cj5array[ij5]; sj5 = sj5array[ij5];
{
IkReal evalcond[21];
IkReal x458=IKcos(j5);
IkReal x459=IKsin(j5);
IkReal x460=gconst5*gconst5;
IkReal x461=((0.276027873078388)*sj3);
IkReal x462=((0.961149631058464)*cj3);
IkReal x463=((0.961149631058464)*sj3);
IkReal x464=((0.276027873078388)*cj3);
IkReal x465=((0.837955424564001)*gconst5);
IkReal x466=((0.0181157120800272)*sj3);
IkReal x467=((0.103420015812922)*gconst5);
IkReal x468=(cj3*gconst5);
IkReal x469=((0.147909480226238)*sj3);
IkReal x470=((0.531815483588428)*gconst5);
IkReal x471=((0.147909480226238)*cj3);
IkReal x472=(gconst5*sj3);
IkReal x473=((0.811511442202281)*sj3);
IkReal x474=((0.0656300100348293)*gconst5);
IkReal x475=((0.811511442202281)*cj3);
IkReal x476=((0.122486725237355)*gconst5);
IkReal x477=((0.515031836328808)*cj3);
IkReal x478=((0.515031836328808)*sj3);
IkReal x479=((0.992470151748698)*gconst5);
IkReal x480=((1.0)*x459);
IkReal x481=(gconst5*x459);
IkReal x482=(new_r01*x458);
IkReal x483=(cj3*x458);
IkReal x484=(new_r12*x458);
IkReal x485=(new_r02*x459);
IkReal x486=(new_r12*x459);
IkReal x487=(new_r11*x458);
IkReal x488=((0.233054011708033)*x459);
IkReal x489=(new_r10*x458);
IkReal x490=(new_r00*x458);
IkReal x491=(new_r10*x459);
IkReal x492=((0.844313326436599)*x459);
IkReal x493=(new_r02*x458);
IkReal x494=(sj3*x458);
IkReal x495=(new_r11*x459);
IkReal x496=(x463+x464);
evalcond[0]=(x485+x484+x470);
evalcond[1]=((((-1.0)*x465))+x493+(((-1.0)*new_r12*x480)));
evalcond[2]=(((x459*x470))+(((-1.0)*x458*x465))+new_r02);
evalcond[3]=(((x458*x470))+((x459*x465))+new_r12);
evalcond[4]=((((-1.0)*gconst5*x466))+((new_r00*x459))+(((-1.0)*x473))+(((-0.233054011708033)*cj3))+x489+(((0.0630802599313394)*x468)));
evalcond[5]=((((0.0630802599313394)*x472))+(((-0.233054011708033)*sj3))+((new_r01*x459))+x487+x475+(((0.0181157120800272)*x468)));
evalcond[6]=((((-1.0)*new_r10*x480))+(((-1.0)*x471))+(((-1.0)*x478))+(((0.028546806998574)*x472))+(((-0.0994021100426501)*x468))+x490);
evalcond[7]=((((-1.0)*new_r11*x480))+(((-0.0994021100426501)*x472))+(((-0.028546806998574)*x468))+(((-1.0)*x469))+x482+x477);
evalcond[8]=((((0.535849798705775)*x486))+(((-0.844313326436599)*x484))+(((-0.844313326436599)*x485))+(((-0.535849798705775)*x493))+(((-6.54422001705664e-7)*gconst5)));
evalcond[9]=((1.0)+(((-0.0150029978593712)*x460))+(((-1.0)*x465*x493))+((x470*x485))+((x470*x484))+((x465*x486)));
evalcond[10]=((((-1.0)*x465*x490))+((new_r20*x476))+((x470*x489))+((new_r00*x459*x470))+((x465*x491)));
evalcond[11]=((((-1.0)*x465*x482))+((x470*x487))+((new_r21*x476))+((new_r01*x459*x470))+((x465*x495)));
evalcond[12]=(((x467*x493))+(((-1.0)*x467*x486))+(((-1.0)*x474*x484))+(((-1.0)*x474*x485))+(((-0.121564418783519)*x460)));
evalcond[13]=((((-1.0)*new_r00*x492))+(((0.535849798705775)*x491))+(((5.34279939673075e-6)*new_r20))+x496+(((-0.844313326436599)*x489))+(((-0.535849798705775)*x490)));
evalcond[14]=((((0.535849798705775)*x495))+(((-1.0)*new_r01*x492))+(((-0.535849798705775)*x482))+(((-1.0)*x462))+(((5.34279939673075e-6)*new_r21))+x461+(((-0.844313326436599)*x487)));
evalcond[15]=(((x467*x490))+((new_r20*x479))+(((-1.0)*x467*x491))+(((-1.0)*x474*x489))+(((-1.0)*x462))+(((-1.0)*new_r00*x459*x474))+x461);
evalcond[16]=((((-1.0)*x496))+((x467*x482))+(((-1.0)*new_r01*x459*x474))+(((-1.0)*x467*x495))+(((-1.0)*x474*x487))+((new_r21*x479)));
evalcond[17]=((((-1.0)*x459*x473))+(((0.028546806998574)*x458*x472))+(((-1.0)*x466*x481))+(((0.0630802599313394)*x459*x468))+(((-1.0)*cj3*x488))+(((-1.0)*x458*x478))+(((-1.0)*x458*x471))+new_r00+(((-0.0994021100426501)*x458*x468)));
evalcond[18]=(((x459*x475))+(((0.0181157120800272)*x459*x468))+(((-0.028546806998574)*x458*x468))+(((-1.0)*sj3*x488))+(((0.0630802599313394)*x459*x472))+((x458*x477))+(((-1.0)*x458*x469))+new_r01+(((-0.0994021100426501)*x458*x472)));
evalcond[19]=(((x459*x471))+((x459*x478))+(((-1.0)*gconst5*x458*x466))+(((0.0994021100426501)*x459*x468))+(((-0.028546806998574)*x459*x472))+(((0.0630802599313394)*x458*x468))+(((-1.0)*x458*x473))+new_r10+(((-0.233054011708033)*x483)));
evalcond[20]=((((-1.0)*x459*x477))+(((0.0630802599313394)*x458*x472))+(((0.028546806998574)*x459*x468))+(((0.0181157120800272)*x458*x468))+((x458*x475))+(((-0.233054011708033)*x494))+((x459*x469))+new_r11+(((0.0994021100426501)*x459*x472)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[9]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[10]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[11]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[12]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[13]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[14]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[15]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[16]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[17]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[18]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[19]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[20]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j2;
vinfos[0].indices[0] = _ij2[0];
vinfos[0].indices[1] = _ij2[1];
vinfos[0].maxsolutions = _nj2;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j3;
vinfos[1].indices[0] = _ij3[0];
vinfos[1].indices[1] = _ij3[1];
vinfos[1].maxsolutions = _nj3;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j4;
vinfos[2].indices[0] = _ij4[0];
vinfos[2].indices[1] = _ij4[1];
vinfos[2].maxsolutions = _nj4;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j5;
vinfos[3].indices[0] = _ij5[0];
vinfos[3].indices[1] = _ij5[1];
vinfos[3].maxsolutions = _nj5;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j6;
vinfos[4].indices[0] = _ij6[0];
vinfos[4].indices[1] = _ij6[1];
vinfos[4].maxsolutions = _nj6;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j7;
vinfos[5].indices[0] = _ij7[0];
vinfos[5].indices[1] = _ij7[1];
vinfos[5].maxsolutions = _nj7;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j8;
vinfos[6].indices[0] = _ij8[0];
vinfos[6].indices[1] = _ij8[1];
vinfos[6].maxsolutions = _nj8;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

} else
{
{
IkReal j5array[1], cj5array[1], sj5array[1];
bool j5valid[1]={false};
_nj5 = 1;
IkReal x497=gconst5*gconst5;
CheckValue<IkReal> x498=IKPowWithIntegerCheck(IKsign(((((6.24024889090152e+76)*gconst5*new_r02))+(((-9.83245236388639e+76)*gconst5*new_r12)))),-1);
if(!x498.valid){
continue;
}
CheckValue<IkReal> x499 = IKatan2WithCheck(IkReal(((((8.23915679508573e+76)*x497))+(((-1.173386086617e+77)*(new_r02*new_r02))))),IkReal(((((5.22905040876042e+76)*x497))+(((-1.173386086617e+77)*new_r02*new_r12)))),IKFAST_ATAN2_MAGTHRESH);
if(!x499.valid){
continue;
}
j5array[0]=((-1.5707963267949)+(((1.5707963267949)*(x498.value)))+(x499.value));
sj5array[0]=IKsin(j5array[0]);
cj5array[0]=IKcos(j5array[0]);
if( j5array[0] > IKPI )
{
    j5array[0]-=IK2PI;
}
else if( j5array[0] < -IKPI )
{    j5array[0]+=IK2PI;
}
j5valid[0] = true;
for(int ij5 = 0; ij5 < 1; ++ij5)
{
if( !j5valid[ij5] )
{
    continue;
}
_ij5[0] = ij5; _ij5[1] = -1;
for(int iij5 = ij5+1; iij5 < 1; ++iij5)
{
if( j5valid[iij5] && IKabs(cj5array[ij5]-cj5array[iij5]) < IKFAST_SOLUTION_THRESH && IKabs(sj5array[ij5]-sj5array[iij5]) < IKFAST_SOLUTION_THRESH )
{
    j5valid[iij5]=false; _ij5[1] = iij5; break; 
}
}
j5 = j5array[ij5]; cj5 = cj5array[ij5]; sj5 = sj5array[ij5];
{
IkReal evalcond[21];
IkReal x500=IKcos(j5);
IkReal x501=IKsin(j5);
IkReal x502=gconst5*gconst5;
IkReal x503=((0.276027873078388)*sj3);
IkReal x504=((0.961149631058464)*cj3);
IkReal x505=((0.961149631058464)*sj3);
IkReal x506=((0.276027873078388)*cj3);
IkReal x507=((0.837955424564001)*gconst5);
IkReal x508=((0.0181157120800272)*sj3);
IkReal x509=((0.103420015812922)*gconst5);
IkReal x510=(cj3*gconst5);
IkReal x511=((0.147909480226238)*sj3);
IkReal x512=((0.531815483588428)*gconst5);
IkReal x513=((0.147909480226238)*cj3);
IkReal x514=(gconst5*sj3);
IkReal x515=((0.811511442202281)*sj3);
IkReal x516=((0.0656300100348293)*gconst5);
IkReal x517=((0.811511442202281)*cj3);
IkReal x518=((0.122486725237355)*gconst5);
IkReal x519=((0.515031836328808)*cj3);
IkReal x520=((0.515031836328808)*sj3);
IkReal x521=((0.992470151748698)*gconst5);
IkReal x522=((1.0)*x501);
IkReal x523=(gconst5*x501);
IkReal x524=(new_r01*x500);
IkReal x525=(cj3*x500);
IkReal x526=(new_r12*x500);
IkReal x527=(new_r02*x501);
IkReal x528=(new_r12*x501);
IkReal x529=(new_r11*x500);
IkReal x530=((0.233054011708033)*x501);
IkReal x531=(new_r10*x500);
IkReal x532=(new_r00*x500);
IkReal x533=(new_r10*x501);
IkReal x534=((0.844313326436599)*x501);
IkReal x535=(new_r02*x500);
IkReal x536=(sj3*x500);
IkReal x537=(new_r11*x501);
IkReal x538=(x505+x506);
evalcond[0]=(x526+x527+x512);
evalcond[1]=((((-1.0)*x507))+(((-1.0)*new_r12*x522))+x535);
evalcond[2]=(((x501*x512))+new_r02+(((-1.0)*x500*x507)));
evalcond[3]=(((x501*x507))+((x500*x512))+new_r12);
evalcond[4]=((((0.0630802599313394)*x510))+(((-0.233054011708033)*cj3))+((new_r00*x501))+x531+(((-1.0)*gconst5*x508))+(((-1.0)*x515)));
evalcond[5]=((((-0.233054011708033)*sj3))+(((0.0630802599313394)*x514))+x529+x517+((new_r01*x501))+(((0.0181157120800272)*x510)));
evalcond[6]=((((-1.0)*x520))+(((-1.0)*new_r10*x522))+x532+(((-1.0)*x513))+(((-0.0994021100426501)*x510))+(((0.028546806998574)*x514)));
evalcond[7]=((((-1.0)*new_r11*x522))+x524+x519+(((-1.0)*x511))+(((-0.028546806998574)*x510))+(((-0.0994021100426501)*x514)));
evalcond[8]=((((-6.54422001705664e-7)*gconst5))+(((-0.844313326436599)*x526))+(((-0.844313326436599)*x527))+(((0.535849798705775)*x528))+(((-0.535849798705775)*x535)));
evalcond[9]=((1.0)+(((-1.0)*x507*x535))+((x512*x526))+((x512*x527))+((x507*x528))+(((-0.0150029978593712)*x502)));
evalcond[10]=((((-1.0)*x507*x532))+((new_r20*x518))+((x512*x531))+((x507*x533))+((new_r00*x501*x512)));
evalcond[11]=((((-1.0)*x507*x524))+((new_r21*x518))+((new_r01*x501*x512))+((x507*x537))+((x512*x529)));
evalcond[12]=((((-0.121564418783519)*x502))+((x509*x535))+(((-1.0)*x509*x528))+(((-1.0)*x516*x527))+(((-1.0)*x516*x526)));
evalcond[13]=((((-1.0)*new_r00*x534))+(((5.34279939673075e-6)*new_r20))+x538+(((-0.844313326436599)*x531))+(((0.535849798705775)*x533))+(((-0.535849798705775)*x532)));
evalcond[14]=((((-1.0)*x504))+(((5.34279939673075e-6)*new_r21))+(((-1.0)*new_r01*x534))+x503+(((-0.844313326436599)*x529))+(((0.535849798705775)*x537))+(((-0.535849798705775)*x524)));
evalcond[15]=((((-1.0)*x504))+((x509*x532))+(((-1.0)*x516*x531))+x503+(((-1.0)*x509*x533))+((new_r20*x521))+(((-1.0)*new_r00*x501*x516)));
evalcond[16]=((((-1.0)*x538))+((x509*x524))+(((-1.0)*x516*x529))+(((-1.0)*new_r01*x501*x516))+(((-1.0)*x509*x537))+((new_r21*x521)));
evalcond[17]=((((-1.0)*x501*x515))+(((-1.0)*x500*x520))+(((0.0630802599313394)*x501*x510))+(((0.028546806998574)*x500*x514))+(((-1.0)*cj3*x530))+(((-1.0)*x500*x513))+(((-1.0)*x508*x523))+new_r00+(((-0.0994021100426501)*x500*x510)));
evalcond[18]=(((x501*x517))+(((0.0630802599313394)*x501*x514))+(((-1.0)*sj3*x530))+(((-1.0)*x500*x511))+((x500*x519))+new_r01+(((-0.0994021100426501)*x500*x514))+(((-0.028546806998574)*x500*x510))+(((0.0181157120800272)*x501*x510)));
evalcond[19]=((((-1.0)*gconst5*x500*x508))+((x501*x513))+(((0.0630802599313394)*x500*x510))+(((-0.028546806998574)*x501*x514))+(((-1.0)*x500*x515))+(((0.0994021100426501)*x501*x510))+((x501*x520))+(((-0.233054011708033)*x525))+new_r10);
evalcond[20]=((((-1.0)*x501*x519))+(((0.028546806998574)*x501*x510))+((x501*x511))+(((0.0630802599313394)*x500*x514))+(((0.0181157120800272)*x500*x510))+(((0.0994021100426501)*x501*x514))+((x500*x517))+(((-0.233054011708033)*x536))+new_r11);
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[9]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[10]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[11]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[12]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[13]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[14]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[15]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[16]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[17]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[18]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[19]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[20]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j2;
vinfos[0].indices[0] = _ij2[0];
vinfos[0].indices[1] = _ij2[1];
vinfos[0].maxsolutions = _nj2;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j3;
vinfos[1].indices[0] = _ij3[0];
vinfos[1].indices[1] = _ij3[1];
vinfos[1].maxsolutions = _nj3;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j4;
vinfos[2].indices[0] = _ij4[0];
vinfos[2].indices[1] = _ij4[1];
vinfos[2].maxsolutions = _nj4;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j5;
vinfos[3].indices[0] = _ij5[0];
vinfos[3].indices[1] = _ij5[1];
vinfos[3].maxsolutions = _nj5;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j6;
vinfos[4].indices[0] = _ij6[0];
vinfos[4].indices[1] = _ij6[1];
vinfos[4].maxsolutions = _nj6;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j7;
vinfos[5].indices[0] = _ij7[0];
vinfos[5].indices[1] = _ij7[1];
vinfos[5].maxsolutions = _nj7;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j8;
vinfos[6].indices[0] = _ij8[0];
vinfos[6].indices[1] = _ij8[1];
vinfos[6].maxsolutions = _nj8;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j5array[1], cj5array[1], sj5array[1];
bool j5valid[1]={false};
_nj5 = 1;
IkReal x539=(gconst5*new_r12);
IkReal x540=(gconst5*new_r02);
CheckValue<IkReal> x541 = IKatan2WithCheck(IkReal(((((2.14681069867194e+56)*x539))+(((1.36249153167196e+56)*x540)))),IkReal(((((-2.14681069867194e+56)*x540))+(((1.36249153167196e+56)*x539)))),IKFAST_ATAN2_MAGTHRESH);
if(!x541.valid){
continue;
}
CheckValue<IkReal> x542=IKPowWithIntegerCheck(IKsign(((((-2.56196288697451e+56)*(new_r02*new_r02)))+(((-2.56196288697451e+56)*(new_r12*new_r12))))),-1);
if(!x542.valid){
continue;
}
j5array[0]=((-1.5707963267949)+(x541.value)+(((1.5707963267949)*(x542.value))));
sj5array[0]=IKsin(j5array[0]);
cj5array[0]=IKcos(j5array[0]);
if( j5array[0] > IKPI )
{
    j5array[0]-=IK2PI;
}
else if( j5array[0] < -IKPI )
{    j5array[0]+=IK2PI;
}
j5valid[0] = true;
for(int ij5 = 0; ij5 < 1; ++ij5)
{
if( !j5valid[ij5] )
{
    continue;
}
_ij5[0] = ij5; _ij5[1] = -1;
for(int iij5 = ij5+1; iij5 < 1; ++iij5)
{
if( j5valid[iij5] && IKabs(cj5array[ij5]-cj5array[iij5]) < IKFAST_SOLUTION_THRESH && IKabs(sj5array[ij5]-sj5array[iij5]) < IKFAST_SOLUTION_THRESH )
{
    j5valid[iij5]=false; _ij5[1] = iij5; break; 
}
}
j5 = j5array[ij5]; cj5 = cj5array[ij5]; sj5 = sj5array[ij5];
{
IkReal evalcond[21];
IkReal x543=IKcos(j5);
IkReal x544=IKsin(j5);
IkReal x545=gconst5*gconst5;
IkReal x546=((0.276027873078388)*sj3);
IkReal x547=((0.961149631058464)*cj3);
IkReal x548=((0.961149631058464)*sj3);
IkReal x549=((0.276027873078388)*cj3);
IkReal x550=((0.837955424564001)*gconst5);
IkReal x551=((0.0181157120800272)*sj3);
IkReal x552=((0.103420015812922)*gconst5);
IkReal x553=(cj3*gconst5);
IkReal x554=((0.147909480226238)*sj3);
IkReal x555=((0.531815483588428)*gconst5);
IkReal x556=((0.147909480226238)*cj3);
IkReal x557=(gconst5*sj3);
IkReal x558=((0.811511442202281)*sj3);
IkReal x559=((0.0656300100348293)*gconst5);
IkReal x560=((0.811511442202281)*cj3);
IkReal x561=((0.122486725237355)*gconst5);
IkReal x562=((0.515031836328808)*cj3);
IkReal x563=((0.515031836328808)*sj3);
IkReal x564=((0.992470151748698)*gconst5);
IkReal x565=((1.0)*x544);
IkReal x566=(gconst5*x544);
IkReal x567=(new_r01*x543);
IkReal x568=(cj3*x543);
IkReal x569=(new_r12*x543);
IkReal x570=(new_r02*x544);
IkReal x571=(new_r12*x544);
IkReal x572=(new_r11*x543);
IkReal x573=((0.233054011708033)*x544);
IkReal x574=(new_r10*x543);
IkReal x575=(new_r00*x543);
IkReal x576=(new_r10*x544);
IkReal x577=((0.844313326436599)*x544);
IkReal x578=(new_r02*x543);
IkReal x579=(sj3*x543);
IkReal x580=(new_r11*x544);
IkReal x581=(x548+x549);
evalcond[0]=(x555+x570+x569);
evalcond[1]=((((-1.0)*x550))+x578+(((-1.0)*new_r12*x565)));
evalcond[2]=(((x544*x555))+(((-1.0)*x543*x550))+new_r02);
evalcond[3]=(((x544*x550))+((x543*x555))+new_r12);
evalcond[4]=(((new_r00*x544))+(((-0.233054011708033)*cj3))+(((0.0630802599313394)*x553))+(((-1.0)*x558))+x574+(((-1.0)*gconst5*x551)));
evalcond[5]=((((-0.233054011708033)*sj3))+(((0.0630802599313394)*x557))+x572+x560+(((0.0181157120800272)*x553))+((new_r01*x544)));
evalcond[6]=((((0.028546806998574)*x557))+(((-0.0994021100426501)*x553))+(((-1.0)*x556))+x575+(((-1.0)*new_r10*x565))+(((-1.0)*x563)));
evalcond[7]=((((-0.0994021100426501)*x557))+(((-1.0)*x554))+x567+x562+(((-0.028546806998574)*x553))+(((-1.0)*new_r11*x565)));
evalcond[8]=((((0.535849798705775)*x571))+(((-6.54422001705664e-7)*gconst5))+(((-0.535849798705775)*x578))+(((-0.844313326436599)*x570))+(((-0.844313326436599)*x569)));
evalcond[9]=((1.0)+((x550*x571))+((x555*x570))+(((-0.0150029978593712)*x545))+(((-1.0)*x550*x578))+((x555*x569)));
evalcond[10]=(((new_r20*x561))+((x550*x576))+((x555*x574))+((new_r00*x544*x555))+(((-1.0)*x550*x575)));
evalcond[11]=(((x555*x572))+((new_r01*x544*x555))+((new_r21*x561))+(((-1.0)*x550*x567))+((x550*x580)));
evalcond[12]=((((-1.0)*x559*x570))+(((-1.0)*x552*x571))+(((-1.0)*x559*x569))+((x552*x578))+(((-0.121564418783519)*x545)));
evalcond[13]=((((0.535849798705775)*x576))+(((5.34279939673075e-6)*new_r20))+x581+(((-1.0)*new_r00*x577))+(((-0.535849798705775)*x575))+(((-0.844313326436599)*x574)));
evalcond[14]=((((0.535849798705775)*x580))+(((-0.535849798705775)*x567))+(((5.34279939673075e-6)*new_r21))+(((-1.0)*x547))+x546+(((-1.0)*new_r01*x577))+(((-0.844313326436599)*x572)));
evalcond[15]=((((-1.0)*x559*x574))+((new_r20*x564))+(((-1.0)*x552*x576))+(((-1.0)*x547))+(((-1.0)*new_r00*x544*x559))+x546+((x552*x575)));
evalcond[16]=((((-1.0)*x559*x572))+((x552*x567))+((new_r21*x564))+(((-1.0)*new_r01*x544*x559))+(((-1.0)*x552*x580))+(((-1.0)*x581)));
evalcond[17]=((((-1.0)*x543*x563))+(((-1.0)*cj3*x573))+(((0.0630802599313394)*x544*x553))+(((-1.0)*x544*x558))+(((0.028546806998574)*x543*x557))+(((-0.0994021100426501)*x543*x553))+(((-1.0)*x543*x556))+new_r00+(((-1.0)*x551*x566)));
evalcond[18]=(((x543*x562))+(((0.0181157120800272)*x544*x553))+(((0.0630802599313394)*x544*x557))+(((-1.0)*sj3*x573))+(((-0.0994021100426501)*x543*x557))+(((-0.028546806998574)*x543*x553))+(((-1.0)*x543*x554))+((x544*x560))+new_r01);
evalcond[19]=((((0.0630802599313394)*x543*x553))+(((0.0994021100426501)*x544*x553))+(((-0.233054011708033)*x568))+((x544*x556))+(((-1.0)*gconst5*x543*x551))+(((-1.0)*x543*x558))+(((-0.028546806998574)*x544*x557))+((x544*x563))+new_r10);
evalcond[20]=((((0.0630802599313394)*x543*x557))+(((0.028546806998574)*x544*x553))+(((0.0994021100426501)*x544*x557))+((x543*x560))+((x544*x554))+(((0.0181157120800272)*x543*x553))+new_r11+(((-0.233054011708033)*x579))+(((-1.0)*x544*x562)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[9]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[10]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[11]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[12]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[13]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[14]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[15]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[16]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[17]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[18]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[19]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[20]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j2;
vinfos[0].indices[0] = _ij2[0];
vinfos[0].indices[1] = _ij2[1];
vinfos[0].maxsolutions = _nj2;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j3;
vinfos[1].indices[0] = _ij3[0];
vinfos[1].indices[1] = _ij3[1];
vinfos[1].maxsolutions = _nj3;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j4;
vinfos[2].indices[0] = _ij4[0];
vinfos[2].indices[1] = _ij4[1];
vinfos[2].maxsolutions = _nj4;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j5;
vinfos[3].indices[0] = _ij5[0];
vinfos[3].indices[1] = _ij5[1];
vinfos[3].maxsolutions = _nj5;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j6;
vinfos[4].indices[0] = _ij6[0];
vinfos[4].indices[1] = _ij6[1];
vinfos[4].maxsolutions = _nj6;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j7;
vinfos[5].indices[0] = _ij7[0];
vinfos[5].indices[1] = _ij7[1];
vinfos[5].maxsolutions = _nj7;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j8;
vinfos[6].indices[0] = _ij8[0];
vinfos[6].indices[1] = _ij8[1];
vinfos[6].maxsolutions = _nj8;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}
}
}

}

}

} else
{
{
IkReal j5array[1], cj5array[1], sj5array[1];
bool j5valid[1]={false};
_nj5 = 1;
IkReal x582=gconst5*gconst5;
CheckValue<IkReal> x583 = IKatan2WithCheck(IkReal(((((8.23915679508573e+76)*x582))+(((-1.173386086617e+77)*(new_r02*new_r02))))),IkReal(((((5.22905040876042e+76)*x582))+(((-1.173386086617e+77)*new_r02*new_r12)))),IKFAST_ATAN2_MAGTHRESH);
if(!x583.valid){
continue;
}
CheckValue<IkReal> x584=IKPowWithIntegerCheck(IKsign(((((6.24024889090152e+76)*gconst5*new_r02))+(((-9.83245236388639e+76)*gconst5*new_r12)))),-1);
if(!x584.valid){
continue;
}
j5array[0]=((-1.5707963267949)+(x583.value)+(((1.5707963267949)*(x584.value))));
sj5array[0]=IKsin(j5array[0]);
cj5array[0]=IKcos(j5array[0]);
if( j5array[0] > IKPI )
{
    j5array[0]-=IK2PI;
}
else if( j5array[0] < -IKPI )
{    j5array[0]+=IK2PI;
}
j5valid[0] = true;
for(int ij5 = 0; ij5 < 1; ++ij5)
{
if( !j5valid[ij5] )
{
    continue;
}
_ij5[0] = ij5; _ij5[1] = -1;
for(int iij5 = ij5+1; iij5 < 1; ++iij5)
{
if( j5valid[iij5] && IKabs(cj5array[ij5]-cj5array[iij5]) < IKFAST_SOLUTION_THRESH && IKabs(sj5array[ij5]-sj5array[iij5]) < IKFAST_SOLUTION_THRESH )
{
    j5valid[iij5]=false; _ij5[1] = iij5; break; 
}
}
j5 = j5array[ij5]; cj5 = cj5array[ij5]; sj5 = sj5array[ij5];
{
IkReal evalcond[9];
IkReal x585=IKcos(j5);
IkReal x586=IKsin(j5);
IkReal x587=gconst5*gconst5;
IkReal x588=((0.837955424564001)*gconst5);
IkReal x589=((0.103420015812922)*gconst5);
IkReal x590=((0.0656300100348293)*gconst5);
IkReal x591=((0.122486725237355)*gconst5);
IkReal x592=((0.531815483588428)*gconst5);
IkReal x593=(new_r02*x585);
IkReal x594=(new_r12*x586);
IkReal x595=(new_r12*x585);
IkReal x596=(new_r02*x586);
IkReal x597=(x586*x592);
IkReal x598=(x585*x592);
evalcond[0]=(x596+x595+x592);
evalcond[1]=((((-1.0)*x594))+x593+(((-1.0)*x588)));
evalcond[2]=((((-1.0)*x585*x588))+x597+new_r02);
evalcond[3]=(((x586*x588))+x598+new_r12);
evalcond[4]=((((0.535849798705775)*x594))+(((-6.54422001705664e-7)*gconst5))+(((-0.535849798705775)*x593))+(((-0.844313326436599)*x596))+(((-0.844313326436599)*x595)));
evalcond[5]=((1.0)+(((-1.0)*x588*x593))+(((-0.0150029978593712)*x587))+((x588*x594))+((x592*x596))+((x592*x595)));
evalcond[6]=(((new_r10*x598))+(((-1.0)*new_r00*x585*x588))+((new_r00*x597))+((new_r10*x586*x588))+((new_r20*x591)));
evalcond[7]=(((new_r11*x598))+((new_r01*x597))+((new_r11*x586*x588))+((new_r21*x591))+(((-1.0)*new_r01*x585*x588)));
evalcond[8]=((((-1.0)*x589*x594))+(((-1.0)*x590*x596))+(((-1.0)*x590*x595))+(((-0.121564418783519)*x587))+((x589*x593)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j3eval[2];
IkReal x599=((((1.57580374828584)*new_r02))+new_r12);
sj4=gconst4;
cj4=gconst5;
j4=nan;
CheckValue<IkReal> x600 = IKatan2WithCheck(IkReal(((((-12.7678698223466)*new_r02))+(((-8.1032363594977)*new_r12)))),IkReal(x599),IKFAST_ATAN2_MAGTHRESH);
if(!x600.valid){
continue;
}
IkReal gconst3=((3.14159265358979)+(((-1.0)*(x600.value))));
IkReal gconst4=0;
IkReal x601 = x599*x599;
if(IKabs(x601)==0){
continue;
}
IkReal gconst5=((-1.0)*x599*(pow(x601,-0.5)));
j3eval[0]=34506202940.0186;
j3eval[1]=1.0;
if( IKabs(j3eval[0]) < 0.0000010000000000  || IKabs(j3eval[1]) < 0.0000010000000000  )
{
{
IkReal j3array[1], cj3array[1], sj3array[1];
bool j3valid[1]={false};
_nj3 = 1;
IkReal x602=(cj5*new_r10);
IkReal x603=((0.953912320189798)*gconst5);
IkReal x604=((0.273949425080978)*gconst5);
IkReal x605=(new_r00*sj5);
IkReal x606=(gconst5*new_r20);
CheckValue<IkReal> x607 = IKatan2WithCheck(IkReal(((((0.0630802599313394)*x606))+((x603*x605))+((x602*x603))+(((-1.47476155376408e-6)*x605))+(((-1.47476155376408e-6)*x602))+(((-0.233054011708033)*new_r20)))),IkReal((((x604*x605))+(((5.13522966898714e-6)*x605))+(((5.13522966898714e-6)*x602))+(((0.0181157120800272)*x606))+(((0.811511442202281)*new_r20))+((x602*x604)))),IKFAST_ATAN2_MAGTHRESH);
if(!x607.valid){
continue;
}
CheckValue<IkReal> x608=IKPowWithIntegerCheck(IKsign(gconst5),-1);
if(!x608.valid){
continue;
}
j3array[0]=((-1.5707963267949)+(x607.value)+(((1.5707963267949)*(x608.value))));
sj3array[0]=IKsin(j3array[0]);
cj3array[0]=IKcos(j3array[0]);
if( j3array[0] > IKPI )
{
    j3array[0]-=IK2PI;
}
else if( j3array[0] < -IKPI )
{    j3array[0]+=IK2PI;
}
j3valid[0] = true;
for(int ij3 = 0; ij3 < 1; ++ij3)
{
if( !j3valid[ij3] )
{
    continue;
}
_ij3[0] = ij3; _ij3[1] = -1;
for(int iij3 = ij3+1; iij3 < 1; ++iij3)
{
if( j3valid[iij3] && IKabs(cj3array[ij3]-cj3array[iij3]) < IKFAST_SOLUTION_THRESH && IKabs(sj3array[ij3]-sj3array[iij3]) < IKFAST_SOLUTION_THRESH )
{
    j3valid[iij3]=false; _ij3[1] = iij3; break; 
}
}
j3 = j3array[ij3]; cj3 = cj3array[ij3]; sj3 = sj3array[ij3];
{
IkReal evalcond[14];
IkReal x609=IKsin(j3);
IkReal x610=IKcos(j3);
IkReal x611=(new_r10*sj5);
IkReal x612=(cj5*new_r01);
IkReal x613=((0.0994021100426501)*gconst5);
IkReal x614=((0.0656300100348293)*gconst5);
IkReal x615=(cj5*new_r11);
IkReal x616=(new_r01*sj5);
IkReal x617=(new_r00*sj5);
IkReal x618=(new_r11*sj5);
IkReal x619=(cj5*new_r00);
IkReal x620=((0.0630802599313394)*gconst5);
IkReal x621=((0.0181157120800272)*gconst5);
IkReal x622=((0.103420015812922)*gconst5);
IkReal x623=((0.992470151748698)*gconst5);
IkReal x624=(cj5*new_r10);
IkReal x625=((0.276027873078388)*x609);
IkReal x626=((0.961149631058464)*x610);
IkReal x627=((0.276027873078388)*x610);
IkReal x628=((0.961149631058464)*x609);
IkReal x629=((0.147909480226238)*x610);
IkReal x630=(cj5*x609);
IkReal x631=(gconst5*x609);
IkReal x632=(sj5*x610);
IkReal x633=(sj5*x609);
IkReal x634=(gconst5*x610);
IkReal x635=((0.811511442202281)*x610);
IkReal x636=(cj5*x610);
IkReal x637=((0.028546806998574)*x634);
IkReal x638=(x627+x628);
evalcond[0]=((((-0.953912320189798)*x634))+(((1.47476155376408e-6)*x610))+(((0.273949425080978)*x631))+(((5.13522966898714e-6)*x609))+new_r20);
evalcond[1]=((((-0.273949425080978)*x634))+(((-0.953912320189798)*x631))+(((-5.13522966898714e-6)*x610))+(((1.47476155376408e-6)*x609))+new_r21);
evalcond[2]=(x617+x624+(((-1.0)*x609*x621))+((x610*x620))+(((-0.233054011708033)*x610))+(((-0.811511442202281)*x609)));
evalcond[3]=(((x609*x620))+x615+x616+x635+((x610*x621))+(((-0.233054011708033)*x609)));
evalcond[4]=((((0.028546806998574)*x631))+(((-1.0)*x610*x613))+(((-1.0)*x629))+(((-1.0)*x611))+(((-0.515031836328808)*x609))+x619);
evalcond[5]=((((-1.0)*x609*x613))+(((-1.0)*x637))+(((-1.0)*x618))+(((0.515031836328808)*x610))+x612+(((-0.147909480226238)*x609)));
evalcond[6]=((((0.535849798705775)*x611))+(((-0.535849798705775)*x619))+(((5.34279939673075e-6)*new_r20))+(((-0.844313326436599)*x617))+x638+(((-0.844313326436599)*x624)));
evalcond[7]=((((0.535849798705775)*x618))+(((-0.535849798705775)*x612))+(((-1.0)*x626))+(((5.34279939673075e-6)*new_r21))+(((-0.844313326436599)*x616))+(((-0.844313326436599)*x615))+x625);
evalcond[8]=((((-1.0)*x614*x617))+((x619*x622))+(((-1.0)*x626))+(((-1.0)*x611*x622))+(((-1.0)*x614*x624))+x625+((new_r20*x623)));
evalcond[9]=((((-1.0)*x614*x615))+(((-1.0)*x614*x616))+(((-1.0)*x638))+((x612*x622))+((new_r21*x623))+(((-1.0)*x618*x622)));
evalcond[10]=((((-1.0)*x621*x633))+(((-0.515031836328808)*x630))+(((-0.811511442202281)*x633))+(((-1.0)*cj5*x629))+(((0.028546806998574)*gconst5*x630))+(((-0.233054011708033)*x632))+new_r00+((x620*x632))+(((-1.0)*x613*x636)));
evalcond[11]=((((0.811511442202281)*x632))+(((-0.147909480226238)*x630))+(((-1.0)*cj5*x637))+(((0.515031836328808)*x636))+(((-0.233054011708033)*x633))+new_r01+((x621*x632))+((x620*x633))+(((-1.0)*x613*x630)));
evalcond[12]=((((-1.0)*x621*x630))+(((-0.028546806998574)*sj5*x631))+((sj5*x629))+((x613*x632))+(((-0.811511442202281)*x630))+(((0.515031836328808)*x633))+(((-0.233054011708033)*x636))+new_r10+((x620*x636)));
evalcond[13]=(((cj5*x635))+((x613*x633))+(((-0.515031836328808)*x632))+(((0.028546806998574)*gconst5*x632))+(((0.147909480226238)*x633))+(((-0.233054011708033)*x630))+new_r11+((x621*x636))+((x620*x630)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[9]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[10]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[11]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[12]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[13]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j2;
vinfos[0].indices[0] = _ij2[0];
vinfos[0].indices[1] = _ij2[1];
vinfos[0].maxsolutions = _nj2;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j3;
vinfos[1].indices[0] = _ij3[0];
vinfos[1].indices[1] = _ij3[1];
vinfos[1].maxsolutions = _nj3;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j4;
vinfos[2].indices[0] = _ij4[0];
vinfos[2].indices[1] = _ij4[1];
vinfos[2].maxsolutions = _nj4;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j5;
vinfos[3].indices[0] = _ij5[0];
vinfos[3].indices[1] = _ij5[1];
vinfos[3].maxsolutions = _nj5;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j6;
vinfos[4].indices[0] = _ij6[0];
vinfos[4].indices[1] = _ij6[1];
vinfos[4].maxsolutions = _nj6;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j7;
vinfos[5].indices[0] = _ij7[0];
vinfos[5].indices[1] = _ij7[1];
vinfos[5].maxsolutions = _nj7;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j8;
vinfos[6].indices[0] = _ij8[0];
vinfos[6].indices[1] = _ij8[1];
vinfos[6].maxsolutions = _nj8;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

} else
{
{
IkReal j3array[1], cj3array[1], sj3array[1];
bool j3valid[1]={false};
_nj3 = 1;
IkReal x639=((0.273949425080978)*gconst5);
IkReal x640=((0.953912320189798)*gconst5);
CheckValue<IkReal> x641 = IKatan2WithCheck(IkReal(((((-5.13522966898714e-6)*new_r20))+(((-1.47476155376408e-6)*new_r21))+(((-1.0)*new_r20*x639))+((new_r21*x640)))),IkReal(((((5.13522966898714e-6)*new_r21))+((new_r20*x640))+(((-1.47476155376408e-6)*new_r20))+((new_r21*x639)))),IKFAST_ATAN2_MAGTHRESH);
if(!x641.valid){
continue;
}
CheckValue<IkReal> x642=IKPowWithIntegerCheck(IKsign(((2.85455053937064e-11)+(((0.984997002112083)*(gconst5*gconst5))))),-1);
if(!x642.valid){
continue;
}
j3array[0]=((-1.5707963267949)+(x641.value)+(((1.5707963267949)*(x642.value))));
sj3array[0]=IKsin(j3array[0]);
cj3array[0]=IKcos(j3array[0]);
if( j3array[0] > IKPI )
{
    j3array[0]-=IK2PI;
}
else if( j3array[0] < -IKPI )
{    j3array[0]+=IK2PI;
}
j3valid[0] = true;
for(int ij3 = 0; ij3 < 1; ++ij3)
{
if( !j3valid[ij3] )
{
    continue;
}
_ij3[0] = ij3; _ij3[1] = -1;
for(int iij3 = ij3+1; iij3 < 1; ++iij3)
{
if( j3valid[iij3] && IKabs(cj3array[ij3]-cj3array[iij3]) < IKFAST_SOLUTION_THRESH && IKabs(sj3array[ij3]-sj3array[iij3]) < IKFAST_SOLUTION_THRESH )
{
    j3valid[iij3]=false; _ij3[1] = iij3; break; 
}
}
j3 = j3array[ij3]; cj3 = cj3array[ij3]; sj3 = sj3array[ij3];
{
IkReal evalcond[14];
IkReal x643=IKsin(j3);
IkReal x644=IKcos(j3);
IkReal x645=(new_r10*sj5);
IkReal x646=(cj5*new_r01);
IkReal x647=((0.0994021100426501)*gconst5);
IkReal x648=((0.0656300100348293)*gconst5);
IkReal x649=(cj5*new_r11);
IkReal x650=(new_r01*sj5);
IkReal x651=(new_r00*sj5);
IkReal x652=(new_r11*sj5);
IkReal x653=(cj5*new_r00);
IkReal x654=((0.0630802599313394)*gconst5);
IkReal x655=((0.0181157120800272)*gconst5);
IkReal x656=((0.103420015812922)*gconst5);
IkReal x657=((0.992470151748698)*gconst5);
IkReal x658=(cj5*new_r10);
IkReal x659=((0.276027873078388)*x643);
IkReal x660=((0.961149631058464)*x644);
IkReal x661=((0.276027873078388)*x644);
IkReal x662=((0.961149631058464)*x643);
IkReal x663=((0.147909480226238)*x644);
IkReal x664=(cj5*x643);
IkReal x665=(gconst5*x643);
IkReal x666=(sj5*x644);
IkReal x667=(sj5*x643);
IkReal x668=(gconst5*x644);
IkReal x669=((0.811511442202281)*x644);
IkReal x670=(cj5*x644);
IkReal x671=((0.028546806998574)*x668);
IkReal x672=(x661+x662);
evalcond[0]=((((0.273949425080978)*x665))+(((5.13522966898714e-6)*x643))+new_r20+(((1.47476155376408e-6)*x644))+(((-0.953912320189798)*x668)));
evalcond[1]=((((-5.13522966898714e-6)*x644))+(((-0.273949425080978)*x668))+new_r21+(((1.47476155376408e-6)*x643))+(((-0.953912320189798)*x665)));
evalcond[2]=((((-0.811511442202281)*x643))+(((-0.233054011708033)*x644))+((x644*x654))+(((-1.0)*x643*x655))+x651+x658);
evalcond[3]=((((-0.233054011708033)*x643))+((x644*x655))+((x643*x654))+x649+x650+x669);
evalcond[4]=((((-1.0)*x645))+(((-1.0)*x644*x647))+(((-1.0)*x663))+x653+(((-0.515031836328808)*x643))+(((0.028546806998574)*x665)));
evalcond[5]=((((-1.0)*x652))+(((-0.147909480226238)*x643))+(((-1.0)*x643*x647))+x646+(((-1.0)*x671))+(((0.515031836328808)*x644)));
evalcond[6]=((((-0.535849798705775)*x653))+(((-0.844313326436599)*x651))+(((-0.844313326436599)*x658))+(((5.34279939673075e-6)*new_r20))+x672+(((0.535849798705775)*x645)));
evalcond[7]=((((-0.535849798705775)*x646))+(((-0.844313326436599)*x649))+(((-0.844313326436599)*x650))+(((5.34279939673075e-6)*new_r21))+(((-1.0)*x660))+x659+(((0.535849798705775)*x652)));
evalcond[8]=(((x653*x656))+(((-1.0)*x660))+((new_r20*x657))+x659+(((-1.0)*x645*x656))+(((-1.0)*x648*x658))+(((-1.0)*x648*x651)));
evalcond[9]=(((x646*x656))+(((-1.0)*x648*x649))+((new_r21*x657))+(((-1.0)*x648*x650))+(((-1.0)*x652*x656))+(((-1.0)*x672)));
evalcond[10]=((((-1.0)*cj5*x663))+((x654*x666))+(((-1.0)*x647*x670))+(((-1.0)*x655*x667))+new_r00+(((-0.811511442202281)*x667))+(((-0.515031836328808)*x664))+(((0.028546806998574)*gconst5*x664))+(((-0.233054011708033)*x666)));
evalcond[11]=((((-1.0)*x647*x664))+(((-1.0)*cj5*x671))+(((0.515031836328808)*x670))+((x654*x667))+new_r01+(((0.811511442202281)*x666))+((x655*x666))+(((-0.233054011708033)*x667))+(((-0.147909480226238)*x664)));
evalcond[12]=((((0.515031836328808)*x667))+(((-0.233054011708033)*x670))+(((-1.0)*x655*x664))+new_r10+((x647*x666))+(((-0.811511442202281)*x664))+((x654*x670))+((sj5*x663))+(((-0.028546806998574)*sj5*x665)));
evalcond[13]=(((x655*x670))+(((0.147909480226238)*x667))+((x654*x664))+new_r11+((x647*x667))+(((-0.515031836328808)*x666))+((cj5*x669))+(((0.028546806998574)*gconst5*x666))+(((-0.233054011708033)*x664)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[9]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[10]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[11]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[12]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[13]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j2;
vinfos[0].indices[0] = _ij2[0];
vinfos[0].indices[1] = _ij2[1];
vinfos[0].maxsolutions = _nj2;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j3;
vinfos[1].indices[0] = _ij3[0];
vinfos[1].indices[1] = _ij3[1];
vinfos[1].maxsolutions = _nj3;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j4;
vinfos[2].indices[0] = _ij4[0];
vinfos[2].indices[1] = _ij4[1];
vinfos[2].maxsolutions = _nj4;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j5;
vinfos[3].indices[0] = _ij5[0];
vinfos[3].indices[1] = _ij5[1];
vinfos[3].maxsolutions = _nj5;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j6;
vinfos[4].indices[0] = _ij6[0];
vinfos[4].indices[1] = _ij6[1];
vinfos[4].maxsolutions = _nj6;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j7;
vinfos[5].indices[0] = _ij7[0];
vinfos[5].indices[1] = _ij7[1];
vinfos[5].maxsolutions = _nj7;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j8;
vinfos[6].indices[0] = _ij8[0];
vinfos[6].indices[1] = _ij8[1];
vinfos[6].maxsolutions = _nj8;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}
}
}

}

}

} else
{
{
IkReal j5array[1], cj5array[1], sj5array[1];
bool j5valid[1]={false};
_nj5 = 1;
IkReal x673=(gconst5*new_r12);
IkReal x674=(gconst5*new_r02);
CheckValue<IkReal> x675=IKPowWithIntegerCheck(IKsign(((((-2.56196288697451e+56)*(new_r02*new_r02)))+(((-2.56196288697451e+56)*(new_r12*new_r12))))),-1);
if(!x675.valid){
continue;
}
CheckValue<IkReal> x676 = IKatan2WithCheck(IkReal(((((2.14681069867194e+56)*x673))+(((1.36249153167196e+56)*x674)))),IkReal(((((-2.14681069867194e+56)*x674))+(((1.36249153167196e+56)*x673)))),IKFAST_ATAN2_MAGTHRESH);
if(!x676.valid){
continue;
}
j5array[0]=((-1.5707963267949)+(((1.5707963267949)*(x675.value)))+(x676.value));
sj5array[0]=IKsin(j5array[0]);
cj5array[0]=IKcos(j5array[0]);
if( j5array[0] > IKPI )
{
    j5array[0]-=IK2PI;
}
else if( j5array[0] < -IKPI )
{    j5array[0]+=IK2PI;
}
j5valid[0] = true;
for(int ij5 = 0; ij5 < 1; ++ij5)
{
if( !j5valid[ij5] )
{
    continue;
}
_ij5[0] = ij5; _ij5[1] = -1;
for(int iij5 = ij5+1; iij5 < 1; ++iij5)
{
if( j5valid[iij5] && IKabs(cj5array[ij5]-cj5array[iij5]) < IKFAST_SOLUTION_THRESH && IKabs(sj5array[ij5]-sj5array[iij5]) < IKFAST_SOLUTION_THRESH )
{
    j5valid[iij5]=false; _ij5[1] = iij5; break; 
}
}
j5 = j5array[ij5]; cj5 = cj5array[ij5]; sj5 = sj5array[ij5];
{
IkReal evalcond[9];
IkReal x677=IKcos(j5);
IkReal x678=IKsin(j5);
IkReal x679=gconst5*gconst5;
IkReal x680=((0.837955424564001)*gconst5);
IkReal x681=((0.103420015812922)*gconst5);
IkReal x682=((0.0656300100348293)*gconst5);
IkReal x683=((0.122486725237355)*gconst5);
IkReal x684=((0.531815483588428)*gconst5);
IkReal x685=(new_r02*x677);
IkReal x686=(new_r12*x678);
IkReal x687=(new_r12*x677);
IkReal x688=(new_r02*x678);
IkReal x689=(x678*x684);
IkReal x690=(x677*x684);
evalcond[0]=(x688+x687+x684);
evalcond[1]=((((-1.0)*x680))+x685+(((-1.0)*x686)));
evalcond[2]=(x689+(((-1.0)*x677*x680))+new_r02);
evalcond[3]=(((x678*x680))+x690+new_r12);
evalcond[4]=((((0.535849798705775)*x686))+(((-0.535849798705775)*x685))+(((-6.54422001705664e-7)*gconst5))+(((-0.844313326436599)*x688))+(((-0.844313326436599)*x687)));
evalcond[5]=((1.0)+(((-1.0)*x680*x685))+(((-0.0150029978593712)*x679))+((x680*x686))+((x684*x688))+((x684*x687)));
evalcond[6]=(((new_r10*x678*x680))+(((-1.0)*new_r00*x677*x680))+((new_r10*x690))+((new_r00*x689))+((new_r20*x683)));
evalcond[7]=(((new_r11*x678*x680))+((new_r11*x690))+(((-1.0)*new_r01*x677*x680))+((new_r21*x683))+((new_r01*x689)));
evalcond[8]=((((-1.0)*x681*x686))+(((-0.121564418783519)*x679))+((x681*x685))+(((-1.0)*x682*x687))+(((-1.0)*x682*x688)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j3eval[2];
IkReal x691=((((1.57580374828584)*new_r02))+new_r12);
sj4=gconst4;
cj4=gconst5;
j4=nan;
CheckValue<IkReal> x692 = IKatan2WithCheck(IkReal(((((-12.7678698223466)*new_r02))+(((-8.1032363594977)*new_r12)))),IkReal(x691),IKFAST_ATAN2_MAGTHRESH);
if(!x692.valid){
continue;
}
IkReal gconst3=((3.14159265358979)+(((-1.0)*(x692.value))));
IkReal gconst4=0;
IkReal x693 = x691*x691;
if(IKabs(x693)==0){
continue;
}
IkReal gconst5=((-1.0)*x691*(pow(x693,-0.5)));
j3eval[0]=34506202940.0186;
j3eval[1]=1.0;
if( IKabs(j3eval[0]) < 0.0000010000000000  || IKabs(j3eval[1]) < 0.0000010000000000  )
{
{
IkReal j3array[1], cj3array[1], sj3array[1];
bool j3valid[1]={false};
_nj3 = 1;
IkReal x694=(cj5*new_r10);
IkReal x695=((0.953912320189798)*gconst5);
IkReal x696=((0.273949425080978)*gconst5);
IkReal x697=(new_r00*sj5);
IkReal x698=(gconst5*new_r20);
CheckValue<IkReal> x699 = IKatan2WithCheck(IkReal(((((-1.47476155376408e-6)*x697))+(((-1.47476155376408e-6)*x694))+((x695*x697))+((x694*x695))+(((0.0630802599313394)*x698))+(((-0.233054011708033)*new_r20)))),IkReal((((x694*x696))+((x696*x697))+(((5.13522966898714e-6)*x697))+(((5.13522966898714e-6)*x694))+(((0.811511442202281)*new_r20))+(((0.0181157120800272)*x698)))),IKFAST_ATAN2_MAGTHRESH);
if(!x699.valid){
continue;
}
CheckValue<IkReal> x700=IKPowWithIntegerCheck(IKsign(gconst5),-1);
if(!x700.valid){
continue;
}
j3array[0]=((-1.5707963267949)+(x699.value)+(((1.5707963267949)*(x700.value))));
sj3array[0]=IKsin(j3array[0]);
cj3array[0]=IKcos(j3array[0]);
if( j3array[0] > IKPI )
{
    j3array[0]-=IK2PI;
}
else if( j3array[0] < -IKPI )
{    j3array[0]+=IK2PI;
}
j3valid[0] = true;
for(int ij3 = 0; ij3 < 1; ++ij3)
{
if( !j3valid[ij3] )
{
    continue;
}
_ij3[0] = ij3; _ij3[1] = -1;
for(int iij3 = ij3+1; iij3 < 1; ++iij3)
{
if( j3valid[iij3] && IKabs(cj3array[ij3]-cj3array[iij3]) < IKFAST_SOLUTION_THRESH && IKabs(sj3array[ij3]-sj3array[iij3]) < IKFAST_SOLUTION_THRESH )
{
    j3valid[iij3]=false; _ij3[1] = iij3; break; 
}
}
j3 = j3array[ij3]; cj3 = cj3array[ij3]; sj3 = sj3array[ij3];
{
IkReal evalcond[14];
IkReal x701=IKsin(j3);
IkReal x702=IKcos(j3);
IkReal x703=(new_r10*sj5);
IkReal x704=(cj5*new_r01);
IkReal x705=((0.0994021100426501)*gconst5);
IkReal x706=((0.0656300100348293)*gconst5);
IkReal x707=(cj5*new_r11);
IkReal x708=(new_r01*sj5);
IkReal x709=(new_r00*sj5);
IkReal x710=(new_r11*sj5);
IkReal x711=(cj5*new_r00);
IkReal x712=((0.0630802599313394)*gconst5);
IkReal x713=((0.0181157120800272)*gconst5);
IkReal x714=((0.103420015812922)*gconst5);
IkReal x715=((0.992470151748698)*gconst5);
IkReal x716=(cj5*new_r10);
IkReal x717=((0.276027873078388)*x701);
IkReal x718=((0.961149631058464)*x702);
IkReal x719=((0.276027873078388)*x702);
IkReal x720=((0.961149631058464)*x701);
IkReal x721=((0.147909480226238)*x702);
IkReal x722=(cj5*x701);
IkReal x723=(gconst5*x701);
IkReal x724=(sj5*x702);
IkReal x725=(sj5*x701);
IkReal x726=(gconst5*x702);
IkReal x727=((0.811511442202281)*x702);
IkReal x728=(cj5*x702);
IkReal x729=((0.028546806998574)*x726);
IkReal x730=(x719+x720);
evalcond[0]=((((1.47476155376408e-6)*x702))+(((0.273949425080978)*x723))+(((-0.953912320189798)*x726))+new_r20+(((5.13522966898714e-6)*x701)));
evalcond[1]=((((1.47476155376408e-6)*x701))+(((-0.953912320189798)*x723))+(((-0.273949425080978)*x726))+new_r21+(((-5.13522966898714e-6)*x702)));
evalcond[2]=(((x702*x712))+(((-0.233054011708033)*x702))+(((-0.811511442202281)*x701))+x716+x709+(((-1.0)*x701*x713)));
evalcond[3]=(((x701*x712))+((x702*x713))+(((-0.233054011708033)*x701))+x708+x707+x727);
evalcond[4]=((((0.028546806998574)*x723))+(((-1.0)*x702*x705))+(((-1.0)*x703))+(((-1.0)*x721))+(((-0.515031836328808)*x701))+x711);
evalcond[5]=((((0.515031836328808)*x702))+(((-0.147909480226238)*x701))+(((-1.0)*x710))+(((-1.0)*x729))+x704+(((-1.0)*x701*x705)));
evalcond[6]=((((5.34279939673075e-6)*new_r20))+(((-0.535849798705775)*x711))+(((0.535849798705775)*x703))+(((-0.844313326436599)*x709))+(((-0.844313326436599)*x716))+x730);
evalcond[7]=((((5.34279939673075e-6)*new_r21))+(((-0.535849798705775)*x704))+(((-1.0)*x718))+(((0.535849798705775)*x710))+(((-0.844313326436599)*x708))+(((-0.844313326436599)*x707))+x717);
evalcond[8]=((((-1.0)*x706*x709))+(((-1.0)*x706*x716))+((x711*x714))+(((-1.0)*x703*x714))+(((-1.0)*x718))+x717+((new_r20*x715)));
evalcond[9]=((((-1.0)*x706*x707))+(((-1.0)*x706*x708))+(((-1.0)*x710*x714))+(((-1.0)*x730))+((new_r21*x715))+((x704*x714)));
evalcond[10]=((((-1.0)*x713*x725))+(((-0.515031836328808)*x722))+((x712*x724))+(((-0.233054011708033)*x724))+(((-0.811511442202281)*x725))+(((-1.0)*cj5*x721))+new_r00+(((-1.0)*x705*x728))+(((0.028546806998574)*gconst5*x722)));
evalcond[11]=(((x712*x725))+(((-0.233054011708033)*x725))+((x713*x724))+(((0.515031836328808)*x728))+(((-0.147909480226238)*x722))+(((0.811511442202281)*x724))+(((-1.0)*cj5*x729))+new_r01+(((-1.0)*x705*x722)));
evalcond[12]=((((-1.0)*x713*x722))+((x712*x728))+(((-0.233054011708033)*x728))+(((0.515031836328808)*x725))+((sj5*x721))+(((-0.811511442202281)*x722))+(((-0.028546806998574)*sj5*x723))+((x705*x724))+new_r10);
evalcond[13]=((((-0.515031836328808)*x724))+((x712*x722))+(((-0.233054011708033)*x722))+((x713*x728))+((cj5*x727))+(((0.147909480226238)*x725))+((x705*x725))+new_r11+(((0.028546806998574)*gconst5*x724)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[9]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[10]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[11]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[12]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[13]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j2;
vinfos[0].indices[0] = _ij2[0];
vinfos[0].indices[1] = _ij2[1];
vinfos[0].maxsolutions = _nj2;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j3;
vinfos[1].indices[0] = _ij3[0];
vinfos[1].indices[1] = _ij3[1];
vinfos[1].maxsolutions = _nj3;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j4;
vinfos[2].indices[0] = _ij4[0];
vinfos[2].indices[1] = _ij4[1];
vinfos[2].maxsolutions = _nj4;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j5;
vinfos[3].indices[0] = _ij5[0];
vinfos[3].indices[1] = _ij5[1];
vinfos[3].maxsolutions = _nj5;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j6;
vinfos[4].indices[0] = _ij6[0];
vinfos[4].indices[1] = _ij6[1];
vinfos[4].maxsolutions = _nj6;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j7;
vinfos[5].indices[0] = _ij7[0];
vinfos[5].indices[1] = _ij7[1];
vinfos[5].maxsolutions = _nj7;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j8;
vinfos[6].indices[0] = _ij8[0];
vinfos[6].indices[1] = _ij8[1];
vinfos[6].maxsolutions = _nj8;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

} else
{
{
IkReal j3array[1], cj3array[1], sj3array[1];
bool j3valid[1]={false};
_nj3 = 1;
IkReal x731=((0.273949425080978)*gconst5);
IkReal x732=((0.953912320189798)*gconst5);
CheckValue<IkReal> x733=IKPowWithIntegerCheck(IKsign(((2.85455053937064e-11)+(((0.984997002112083)*(gconst5*gconst5))))),-1);
if(!x733.valid){
continue;
}
CheckValue<IkReal> x734 = IKatan2WithCheck(IkReal(((((-1.0)*new_r20*x731))+(((-5.13522966898714e-6)*new_r20))+(((-1.47476155376408e-6)*new_r21))+((new_r21*x732)))),IkReal((((new_r20*x732))+(((5.13522966898714e-6)*new_r21))+(((-1.47476155376408e-6)*new_r20))+((new_r21*x731)))),IKFAST_ATAN2_MAGTHRESH);
if(!x734.valid){
continue;
}
j3array[0]=((-1.5707963267949)+(((1.5707963267949)*(x733.value)))+(x734.value));
sj3array[0]=IKsin(j3array[0]);
cj3array[0]=IKcos(j3array[0]);
if( j3array[0] > IKPI )
{
    j3array[0]-=IK2PI;
}
else if( j3array[0] < -IKPI )
{    j3array[0]+=IK2PI;
}
j3valid[0] = true;
for(int ij3 = 0; ij3 < 1; ++ij3)
{
if( !j3valid[ij3] )
{
    continue;
}
_ij3[0] = ij3; _ij3[1] = -1;
for(int iij3 = ij3+1; iij3 < 1; ++iij3)
{
if( j3valid[iij3] && IKabs(cj3array[ij3]-cj3array[iij3]) < IKFAST_SOLUTION_THRESH && IKabs(sj3array[ij3]-sj3array[iij3]) < IKFAST_SOLUTION_THRESH )
{
    j3valid[iij3]=false; _ij3[1] = iij3; break; 
}
}
j3 = j3array[ij3]; cj3 = cj3array[ij3]; sj3 = sj3array[ij3];
{
IkReal evalcond[14];
IkReal x735=IKsin(j3);
IkReal x736=IKcos(j3);
IkReal x737=(new_r10*sj5);
IkReal x738=(cj5*new_r01);
IkReal x739=((0.0994021100426501)*gconst5);
IkReal x740=((0.0656300100348293)*gconst5);
IkReal x741=(cj5*new_r11);
IkReal x742=(new_r01*sj5);
IkReal x743=(new_r00*sj5);
IkReal x744=(new_r11*sj5);
IkReal x745=(cj5*new_r00);
IkReal x746=((0.0630802599313394)*gconst5);
IkReal x747=((0.0181157120800272)*gconst5);
IkReal x748=((0.103420015812922)*gconst5);
IkReal x749=((0.992470151748698)*gconst5);
IkReal x750=(cj5*new_r10);
IkReal x751=((0.276027873078388)*x735);
IkReal x752=((0.961149631058464)*x736);
IkReal x753=((0.276027873078388)*x736);
IkReal x754=((0.961149631058464)*x735);
IkReal x755=((0.147909480226238)*x736);
IkReal x756=(cj5*x735);
IkReal x757=(gconst5*x735);
IkReal x758=(sj5*x736);
IkReal x759=(sj5*x735);
IkReal x760=(gconst5*x736);
IkReal x761=((0.811511442202281)*x736);
IkReal x762=(cj5*x736);
IkReal x763=((0.028546806998574)*x760);
IkReal x764=(x754+x753);
evalcond[0]=((((5.13522966898714e-6)*x735))+(((1.47476155376408e-6)*x736))+(((0.273949425080978)*x757))+new_r20+(((-0.953912320189798)*x760)));
evalcond[1]=((((1.47476155376408e-6)*x735))+(((-0.953912320189798)*x757))+(((-5.13522966898714e-6)*x736))+new_r21+(((-0.273949425080978)*x760)));
evalcond[2]=((((-0.233054011708033)*x736))+(((-0.811511442202281)*x735))+x750+x743+(((-1.0)*x735*x747))+((x736*x746)));
evalcond[3]=((((-0.233054011708033)*x735))+x742+x741+x761+((x735*x746))+((x736*x747)));
evalcond[4]=((((-1.0)*x736*x739))+(((-0.515031836328808)*x735))+(((-1.0)*x737))+(((0.028546806998574)*x757))+x745+(((-1.0)*x755)));
evalcond[5]=((((-1.0)*x735*x739))+(((-1.0)*x763))+(((-0.147909480226238)*x735))+(((-1.0)*x744))+x738+(((0.515031836328808)*x736)));
evalcond[6]=((((-0.844313326436599)*x743))+(((5.34279939673075e-6)*new_r20))+(((-0.535849798705775)*x745))+(((0.535849798705775)*x737))+x764+(((-0.844313326436599)*x750)));
evalcond[7]=((((0.535849798705775)*x744))+(((-0.844313326436599)*x742))+(((-0.844313326436599)*x741))+(((5.34279939673075e-6)*new_r21))+x751+(((-0.535849798705775)*x738))+(((-1.0)*x752)));
evalcond[8]=(((x745*x748))+(((-1.0)*x737*x748))+(((-1.0)*x740*x743))+x751+((new_r20*x749))+(((-1.0)*x752))+(((-1.0)*x740*x750)));
evalcond[9]=(((x738*x748))+(((-1.0)*x764))+(((-1.0)*x744*x748))+(((-1.0)*x740*x742))+(((-1.0)*x740*x741))+((new_r21*x749)));
evalcond[10]=((((-1.0)*x739*x762))+(((-0.811511442202281)*x759))+(((-0.233054011708033)*x758))+((x746*x758))+(((0.028546806998574)*gconst5*x756))+(((-1.0)*cj5*x755))+(((-1.0)*x747*x759))+new_r00+(((-0.515031836328808)*x756)));
evalcond[11]=((((0.811511442202281)*x758))+(((0.515031836328808)*x762))+((x747*x758))+(((-0.147909480226238)*x756))+(((-0.233054011708033)*x759))+((x746*x759))+(((-1.0)*x739*x756))+new_r01+(((-1.0)*cj5*x763)));
evalcond[12]=(((x739*x758))+(((-0.028546806998574)*sj5*x757))+((x746*x762))+(((-0.811511442202281)*x756))+((sj5*x755))+(((-1.0)*x747*x756))+(((0.515031836328808)*x759))+(((-0.233054011708033)*x762))+new_r10);
evalcond[13]=(((x739*x759))+(((-0.233054011708033)*x756))+((x746*x756))+(((0.028546806998574)*gconst5*x758))+((cj5*x761))+(((0.147909480226238)*x759))+((x747*x762))+new_r11+(((-0.515031836328808)*x758)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[9]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[10]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[11]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[12]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[13]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j2;
vinfos[0].indices[0] = _ij2[0];
vinfos[0].indices[1] = _ij2[1];
vinfos[0].maxsolutions = _nj2;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j3;
vinfos[1].indices[0] = _ij3[0];
vinfos[1].indices[1] = _ij3[1];
vinfos[1].maxsolutions = _nj3;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j4;
vinfos[2].indices[0] = _ij4[0];
vinfos[2].indices[1] = _ij4[1];
vinfos[2].maxsolutions = _nj4;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j5;
vinfos[3].indices[0] = _ij5[0];
vinfos[3].indices[1] = _ij5[1];
vinfos[3].maxsolutions = _nj5;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j6;
vinfos[4].indices[0] = _ij6[0];
vinfos[4].indices[1] = _ij6[1];
vinfos[4].maxsolutions = _nj6;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j7;
vinfos[5].indices[0] = _ij7[0];
vinfos[5].indices[1] = _ij7[1];
vinfos[5].maxsolutions = _nj7;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j8;
vinfos[6].indices[0] = _ij8[0];
vinfos[6].indices[1] = _ij8[1];
vinfos[6].maxsolutions = _nj8;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((new_r12*new_r12)+(new_r02*new_r02));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j3eval[5];
new_r12=0;
new_r02=0;
IkReal x765=cj4*cj4;
IkReal x766=(cj4*sj4);
j3eval[0]=((1.0)+(((-16.2053503828625)*x766))+(((64.6533453846537)*x765)));
j3eval[1]=0.984997002112083;
j3eval[2]=cj4;
j3eval[3]=((new_r21*new_r21)+(new_r20*new_r20));
j3eval[4]=IKsign(((0.0150029978879168)+(((0.969994004252712)*x765))+(((-0.243128837567037)*x766))));
if( IKabs(j3eval[0]) < 0.0000010000000000  || IKabs(j3eval[1]) < 0.0000010000000000  || IKabs(j3eval[2]) < 0.0000010000000000  || IKabs(j3eval[3]) < 0.0000010000000000  || IKabs(j3eval[4]) < 0.0000010000000000  )
{
{
IkReal evalcond[1];
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-1.5707963267949)+j4)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j3array[1], cj3array[1], sj3array[1];
bool j3valid[1]={false};
_nj3 = 1;
if( IKabs(((((2.25319068032136)*new_r20))+(((-7.84706806016515)*new_r21)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((((-2.25319068032136)*new_r21))+(((-7.84706806016515)*new_r20)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((((2.25319068032136)*new_r20))+(((-7.84706806016515)*new_r21))))+IKsqr(((((-2.25319068032136)*new_r21))+(((-7.84706806016515)*new_r20))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j3array[0]=IKatan2(((((2.25319068032136)*new_r20))+(((-7.84706806016515)*new_r21))), ((((-2.25319068032136)*new_r21))+(((-7.84706806016515)*new_r20))));
sj3array[0]=IKsin(j3array[0]);
cj3array[0]=IKcos(j3array[0]);
if( j3array[0] > IKPI )
{
    j3array[0]-=IK2PI;
}
else if( j3array[0] < -IKPI )
{    j3array[0]+=IK2PI;
}
j3valid[0] = true;
for(int ij3 = 0; ij3 < 1; ++ij3)
{
if( !j3valid[ij3] )
{
    continue;
}
_ij3[0] = ij3; _ij3[1] = -1;
for(int iij3 = ij3+1; iij3 < 1; ++iij3)
{
if( j3valid[iij3] && IKabs(cj3array[ij3]-cj3array[iij3]) < IKFAST_SOLUTION_THRESH && IKabs(sj3array[ij3]-sj3array[iij3]) < IKFAST_SOLUTION_THRESH )
{
    j3valid[iij3]=false; _ij3[1] = iij3; break; 
}
}
j3 = j3array[ij3]; cj3 = cj3array[ij3]; sj3 = sj3array[ij3];
{
IkReal evalcond[2];
IkReal x767=IKsin(j3);
IkReal x768=IKcos(j3);
evalcond[0]=((((-0.033804615017935)*x767))+new_r20+(((0.117729545532997)*x768)));
evalcond[1]=((((0.033804615017935)*x768))+new_r21+(((0.117729545532997)*x767)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j5eval[1];
new_r12=0;
new_r02=0;
sj4=1.0;
cj4=0;
j4=1.5707963267949;
j5eval[0]=((IKabs(((((200587.654117675)*new_r10))+(((-316056.53281807)*new_r00)))))+(IKabs(((((100293.827058838)*new_r00))+(((179896.260310015)*sj3))+(((51663.5292815391)*cj3))+(((158028.266409035)*new_r10))+new_r20))));
if( IKabs(j5eval[0]) < 0.0000000100000000  )
{
{
IkReal j5eval[1];
new_r12=0;
new_r02=0;
sj4=1.0;
cj4=0;
j4=1.5707963267949;
j5eval[0]=((IKabs(((((200587.654117675)*new_r11))+(((-316056.53281807)*new_r01)))))+(IKabs(((((51663.5292815391)*sj3))+(((100293.827058838)*new_r01))+(((158028.266409035)*new_r11))+(((-179896.260310015)*cj3))+new_r21))));
if( IKabs(j5eval[0]) < 0.0000000100000000  )
{
{
IkReal j5eval[1];
new_r12=0;
new_r02=0;
sj4=1.0;
cj4=0;
j4=1.5707963267949;
j5eval[0]=((IKabs(((2.02734260780584e+39)*new_r00)))+(((1.48802788121992e+38)*(IKabs(((((-6.81217950749611)*new_r10))+(((1.89446878412041)*cj3))+(((-6.528161616669)*sj3))))))));
if( IKabs(j5eval[0]) < 0.0000000100000000  )
{
continue; // 3 cases reached

} else
{
IkReal op[2+1], zeror[2];
int numroots;
IkReal x769=((1.89446878412041)*cj3);
IkReal x770=((6.81217950749611)*new_r10);
IkReal x771=((6.528161616669)*sj3);
op[0]=(x769+(((-1.0)*x770))+(((-1.0)*x771)));
op[1]=((13.6243590149922)*new_r00);
op[2]=(x770+x769+(((-1.0)*x771)));
polyroots2(op,zeror,numroots);
IkReal j5array[2], cj5array[2], sj5array[2], tempj5array[1];
int numsolutions = 0;
for(int ij5 = 0; ij5 < numroots; ++ij5)
{
IkReal htj5 = zeror[ij5];
tempj5array[0]=((2.0)*(atan(htj5)));
for(int kj5 = 0; kj5 < 1; ++kj5)
{
j5array[numsolutions] = tempj5array[kj5];
if( j5array[numsolutions] > IKPI )
{
    j5array[numsolutions]-=IK2PI;
}
else if( j5array[numsolutions] < -IKPI )
{
    j5array[numsolutions]+=IK2PI;
}
sj5array[numsolutions] = IKsin(j5array[numsolutions]);
cj5array[numsolutions] = IKcos(j5array[numsolutions]);
numsolutions++;
}
}
bool j5valid[2]={true,true};
_nj5 = 2;
for(int ij5 = 0; ij5 < numsolutions; ++ij5)
    {
if( !j5valid[ij5] )
{
    continue;
}
    j5 = j5array[ij5]; cj5 = cj5array[ij5]; sj5 = sj5array[ij5];
htj5 = IKtan(j5/2);

_ij5[0] = ij5; _ij5[1] = -1;
for(int iij5 = ij5+1; iij5 < numsolutions; ++iij5)
{
if( j5valid[iij5] && IKabs(cj5array[ij5]-cj5array[iij5]) < IKFAST_SOLUTION_THRESH && IKabs(sj5array[ij5]-sj5array[iij5]) < IKFAST_SOLUTION_THRESH )
{
    j5valid[iij5]=false; _ij5[1] = iij5; break; 
}
}
{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j2;
vinfos[0].indices[0] = _ij2[0];
vinfos[0].indices[1] = _ij2[1];
vinfos[0].maxsolutions = _nj2;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j3;
vinfos[1].indices[0] = _ij3[0];
vinfos[1].indices[1] = _ij3[1];
vinfos[1].maxsolutions = _nj3;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j4;
vinfos[2].indices[0] = _ij4[0];
vinfos[2].indices[1] = _ij4[1];
vinfos[2].maxsolutions = _nj4;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j5;
vinfos[3].indices[0] = _ij5[0];
vinfos[3].indices[1] = _ij5[1];
vinfos[3].maxsolutions = _nj5;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j6;
vinfos[4].indices[0] = _ij6[0];
vinfos[4].indices[1] = _ij6[1];
vinfos[4].maxsolutions = _nj6;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j7;
vinfos[5].indices[0] = _ij7[0];
vinfos[5].indices[1] = _ij7[1];
vinfos[5].maxsolutions = _nj7;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j8;
vinfos[6].indices[0] = _ij8[0];
vinfos[6].indices[1] = _ij8[1];
vinfos[6].maxsolutions = _nj8;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
    }

}

}

} else
{
IkReal op[2+1], zeror[2];
int numroots;
IkReal x772=((51663.5292815391)*sj3);
IkReal x773=((179896.260310015)*cj3);
IkReal x774=((100293.827058838)*new_r01);
IkReal x775=((158028.266409035)*new_r11);
IkReal x776=(x772+new_r21);
IkReal x777=(x775+x774);
op[0]=(x777+x776+(((-1.0)*x773)));
op[1]=((((200587.654117675)*new_r11))+(((-316056.53281807)*new_r01)));
op[2]=(x776+(((-1.0)*x777))+(((-1.0)*x773)));
polyroots2(op,zeror,numroots);
IkReal j5array[2], cj5array[2], sj5array[2], tempj5array[1];
int numsolutions = 0;
for(int ij5 = 0; ij5 < numroots; ++ij5)
{
IkReal htj5 = zeror[ij5];
tempj5array[0]=((2.0)*(atan(htj5)));
for(int kj5 = 0; kj5 < 1; ++kj5)
{
j5array[numsolutions] = tempj5array[kj5];
if( j5array[numsolutions] > IKPI )
{
    j5array[numsolutions]-=IK2PI;
}
else if( j5array[numsolutions] < -IKPI )
{
    j5array[numsolutions]+=IK2PI;
}
sj5array[numsolutions] = IKsin(j5array[numsolutions]);
cj5array[numsolutions] = IKcos(j5array[numsolutions]);
numsolutions++;
}
}
bool j5valid[2]={true,true};
_nj5 = 2;
for(int ij5 = 0; ij5 < numsolutions; ++ij5)
    {
if( !j5valid[ij5] )
{
    continue;
}
    j5 = j5array[ij5]; cj5 = cj5array[ij5]; sj5 = sj5array[ij5];
htj5 = IKtan(j5/2);

_ij5[0] = ij5; _ij5[1] = -1;
for(int iij5 = ij5+1; iij5 < numsolutions; ++iij5)
{
if( j5valid[iij5] && IKabs(cj5array[ij5]-cj5array[iij5]) < IKFAST_SOLUTION_THRESH && IKabs(sj5array[ij5]-sj5array[iij5]) < IKFAST_SOLUTION_THRESH )
{
    j5valid[iij5]=false; _ij5[1] = iij5; break; 
}
}
{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j2;
vinfos[0].indices[0] = _ij2[0];
vinfos[0].indices[1] = _ij2[1];
vinfos[0].maxsolutions = _nj2;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j3;
vinfos[1].indices[0] = _ij3[0];
vinfos[1].indices[1] = _ij3[1];
vinfos[1].maxsolutions = _nj3;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j4;
vinfos[2].indices[0] = _ij4[0];
vinfos[2].indices[1] = _ij4[1];
vinfos[2].maxsolutions = _nj4;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j5;
vinfos[3].indices[0] = _ij5[0];
vinfos[3].indices[1] = _ij5[1];
vinfos[3].maxsolutions = _nj5;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j6;
vinfos[4].indices[0] = _ij6[0];
vinfos[4].indices[1] = _ij6[1];
vinfos[4].maxsolutions = _nj6;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j7;
vinfos[5].indices[0] = _ij7[0];
vinfos[5].indices[1] = _ij7[1];
vinfos[5].maxsolutions = _nj7;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j8;
vinfos[6].indices[0] = _ij8[0];
vinfos[6].indices[1] = _ij8[1];
vinfos[6].maxsolutions = _nj8;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
    }

}

}

} else
{
IkReal op[2+1], zeror[2];
int numroots;
IkReal x778=((179896.260310015)*sj3);
IkReal x779=((51663.5292815391)*cj3);
IkReal x780=((100293.827058838)*new_r00);
IkReal x781=((158028.266409035)*new_r10);
IkReal x782=(x780+x781);
IkReal x783=(x779+x778+new_r20);
op[0]=(x782+x783);
op[1]=((((200587.654117675)*new_r10))+(((-316056.53281807)*new_r00)));
op[2]=((((-1.0)*x782))+x783);
polyroots2(op,zeror,numroots);
IkReal j5array[2], cj5array[2], sj5array[2], tempj5array[1];
int numsolutions = 0;
for(int ij5 = 0; ij5 < numroots; ++ij5)
{
IkReal htj5 = zeror[ij5];
tempj5array[0]=((2.0)*(atan(htj5)));
for(int kj5 = 0; kj5 < 1; ++kj5)
{
j5array[numsolutions] = tempj5array[kj5];
if( j5array[numsolutions] > IKPI )
{
    j5array[numsolutions]-=IK2PI;
}
else if( j5array[numsolutions] < -IKPI )
{
    j5array[numsolutions]+=IK2PI;
}
sj5array[numsolutions] = IKsin(j5array[numsolutions]);
cj5array[numsolutions] = IKcos(j5array[numsolutions]);
numsolutions++;
}
}
bool j5valid[2]={true,true};
_nj5 = 2;
for(int ij5 = 0; ij5 < numsolutions; ++ij5)
    {
if( !j5valid[ij5] )
{
    continue;
}
    j5 = j5array[ij5]; cj5 = cj5array[ij5]; sj5 = sj5array[ij5];
htj5 = IKtan(j5/2);

_ij5[0] = ij5; _ij5[1] = -1;
for(int iij5 = ij5+1; iij5 < numsolutions; ++iij5)
{
if( j5valid[iij5] && IKabs(cj5array[ij5]-cj5array[iij5]) < IKFAST_SOLUTION_THRESH && IKabs(sj5array[ij5]-sj5array[iij5]) < IKFAST_SOLUTION_THRESH )
{
    j5valid[iij5]=false; _ij5[1] = iij5; break; 
}
}
{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j2;
vinfos[0].indices[0] = _ij2[0];
vinfos[0].indices[1] = _ij2[1];
vinfos[0].maxsolutions = _nj2;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j3;
vinfos[1].indices[0] = _ij3[0];
vinfos[1].indices[1] = _ij3[1];
vinfos[1].maxsolutions = _nj3;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j4;
vinfos[2].indices[0] = _ij4[0];
vinfos[2].indices[1] = _ij4[1];
vinfos[2].maxsolutions = _nj4;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j5;
vinfos[3].indices[0] = _ij5[0];
vinfos[3].indices[1] = _ij5[1];
vinfos[3].maxsolutions = _nj5;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j6;
vinfos[4].indices[0] = _ij6[0];
vinfos[4].indices[1] = _ij6[1];
vinfos[4].maxsolutions = _nj6;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j7;
vinfos[5].indices[0] = _ij7[0];
vinfos[5].indices[1] = _ij7[1];
vinfos[5].maxsolutions = _nj7;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j8;
vinfos[6].indices[0] = _ij8[0];
vinfos[6].indices[1] = _ij8[1];
vinfos[6].maxsolutions = _nj8;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
    }

}

}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((1.5707963267949)+j4)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j3array[1], cj3array[1], sj3array[1];
bool j3valid[1]={false};
_nj3 = 1;
if( IKabs(((((-2.25387524079485)*new_r20))+(((7.84687146458275)*new_r21)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((((2.25387524079485)*new_r21))+(((7.84687146458275)*new_r20)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((((-2.25387524079485)*new_r20))+(((7.84687146458275)*new_r21))))+IKsqr(((((2.25387524079485)*new_r21))+(((7.84687146458275)*new_r20))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j3array[0]=IKatan2(((((-2.25387524079485)*new_r20))+(((7.84687146458275)*new_r21))), ((((2.25387524079485)*new_r21))+(((7.84687146458275)*new_r20))));
sj3array[0]=IKsin(j3array[0]);
cj3array[0]=IKcos(j3array[0]);
if( j3array[0] > IKPI )
{
    j3array[0]-=IK2PI;
}
else if( j3array[0] < -IKPI )
{    j3array[0]+=IK2PI;
}
j3valid[0] = true;
for(int ij3 = 0; ij3 < 1; ++ij3)
{
if( !j3valid[ij3] )
{
    continue;
}
_ij3[0] = ij3; _ij3[1] = -1;
for(int iij3 = ij3+1; iij3 < 1; ++iij3)
{
if( j3valid[iij3] && IKabs(cj3array[ij3]-cj3array[iij3]) < IKFAST_SOLUTION_THRESH && IKabs(sj3array[ij3]-sj3array[iij3]) < IKFAST_SOLUTION_THRESH )
{
    j3valid[iij3]=false; _ij3[1] = iij3; break; 
}
}
j3 = j3array[ij3]; cj3 = cj3array[ij3]; sj3 = sj3array[ij3];
{
IkReal evalcond[2];
IkReal x784=IKcos(j3);
IkReal x785=IKsin(j3);
evalcond[0]=((((0.033814885477273)*x785))+(((-0.117726596009889)*x784))+new_r20);
evalcond[1]=((((-0.033814885477273)*x784))+(((-0.117726596009889)*x785))+new_r21);
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j5eval[1];
new_r12=0;
new_r02=0;
sj4=-1.0;
cj4=0;
j4=-1.5707963267949;
j5eval[0]=((IKabs(((((200587.654117675)*new_r10))+(((-316056.53281807)*new_r00)))))+(IKabs(((((100293.827058838)*new_r00))+(((179896.260310015)*sj3))+(((51663.5292815391)*cj3))+(((158028.266409035)*new_r10))+new_r20))));
if( IKabs(j5eval[0]) < 0.0000000100000000  )
{
{
IkReal j5eval[1];
new_r12=0;
new_r02=0;
sj4=-1.0;
cj4=0;
j4=-1.5707963267949;
j5eval[0]=((IKabs(((((200587.654117675)*new_r11))+(((-316056.53281807)*new_r01)))))+(IKabs(((((51663.5292815391)*sj3))+(((100293.827058838)*new_r01))+(((158028.266409035)*new_r11))+(((-179896.260310015)*cj3))+new_r21))));
if( IKabs(j5eval[0]) < 0.0000000100000000  )
{
{
IkReal j5eval[1];
new_r12=0;
new_r02=0;
sj4=-1.0;
cj4=0;
j4=-1.5707963267949;
j5eval[0]=((IKabs(((2.02734260780584e+39)*new_r00)))+(((1.48802788121992e+38)*(IKabs(((((-5.06968030951485)*cj3))+(((-6.81217950749611)*new_r10))+(((-4.528161616669)*sj3))))))));
if( IKabs(j5eval[0]) < 0.0000000100000000  )
{
continue; // 3 cases reached

} else
{
IkReal op[2+1], zeror[2];
int numroots;
IkReal x786=((6.81217950749611)*new_r10);
IkReal x787=((4.528161616669)*sj3);
IkReal x788=((5.06968030951485)*cj3);
IkReal x789=(x787+x788);
op[0]=((((-1.0)*x786))+(((-1.0)*x789)));
op[1]=((13.6243590149922)*new_r00);
op[2]=((((-1.0)*x789))+x786);
polyroots2(op,zeror,numroots);
IkReal j5array[2], cj5array[2], sj5array[2], tempj5array[1];
int numsolutions = 0;
for(int ij5 = 0; ij5 < numroots; ++ij5)
{
IkReal htj5 = zeror[ij5];
tempj5array[0]=((2.0)*(atan(htj5)));
for(int kj5 = 0; kj5 < 1; ++kj5)
{
j5array[numsolutions] = tempj5array[kj5];
if( j5array[numsolutions] > IKPI )
{
    j5array[numsolutions]-=IK2PI;
}
else if( j5array[numsolutions] < -IKPI )
{
    j5array[numsolutions]+=IK2PI;
}
sj5array[numsolutions] = IKsin(j5array[numsolutions]);
cj5array[numsolutions] = IKcos(j5array[numsolutions]);
numsolutions++;
}
}
bool j5valid[2]={true,true};
_nj5 = 2;
for(int ij5 = 0; ij5 < numsolutions; ++ij5)
    {
if( !j5valid[ij5] )
{
    continue;
}
    j5 = j5array[ij5]; cj5 = cj5array[ij5]; sj5 = sj5array[ij5];
htj5 = IKtan(j5/2);

_ij5[0] = ij5; _ij5[1] = -1;
for(int iij5 = ij5+1; iij5 < numsolutions; ++iij5)
{
if( j5valid[iij5] && IKabs(cj5array[ij5]-cj5array[iij5]) < IKFAST_SOLUTION_THRESH && IKabs(sj5array[ij5]-sj5array[iij5]) < IKFAST_SOLUTION_THRESH )
{
    j5valid[iij5]=false; _ij5[1] = iij5; break; 
}
}
{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j2;
vinfos[0].indices[0] = _ij2[0];
vinfos[0].indices[1] = _ij2[1];
vinfos[0].maxsolutions = _nj2;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j3;
vinfos[1].indices[0] = _ij3[0];
vinfos[1].indices[1] = _ij3[1];
vinfos[1].maxsolutions = _nj3;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j4;
vinfos[2].indices[0] = _ij4[0];
vinfos[2].indices[1] = _ij4[1];
vinfos[2].maxsolutions = _nj4;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j5;
vinfos[3].indices[0] = _ij5[0];
vinfos[3].indices[1] = _ij5[1];
vinfos[3].maxsolutions = _nj5;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j6;
vinfos[4].indices[0] = _ij6[0];
vinfos[4].indices[1] = _ij6[1];
vinfos[4].maxsolutions = _nj6;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j7;
vinfos[5].indices[0] = _ij7[0];
vinfos[5].indices[1] = _ij7[1];
vinfos[5].maxsolutions = _nj7;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j8;
vinfos[6].indices[0] = _ij8[0];
vinfos[6].indices[1] = _ij8[1];
vinfos[6].maxsolutions = _nj8;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
    }

}

}

} else
{
IkReal op[2+1], zeror[2];
int numroots;
IkReal x790=((51663.5292815391)*sj3);
IkReal x791=((179896.260310015)*cj3);
IkReal x792=((100293.827058838)*new_r01);
IkReal x793=((158028.266409035)*new_r11);
IkReal x794=(x790+new_r21);
IkReal x795=(x793+x792);
op[0]=((((-1.0)*x791))+x795+x794);
op[1]=((((200587.654117675)*new_r11))+(((-316056.53281807)*new_r01)));
op[2]=((((-1.0)*x795))+(((-1.0)*x791))+x794);
polyroots2(op,zeror,numroots);
IkReal j5array[2], cj5array[2], sj5array[2], tempj5array[1];
int numsolutions = 0;
for(int ij5 = 0; ij5 < numroots; ++ij5)
{
IkReal htj5 = zeror[ij5];
tempj5array[0]=((2.0)*(atan(htj5)));
for(int kj5 = 0; kj5 < 1; ++kj5)
{
j5array[numsolutions] = tempj5array[kj5];
if( j5array[numsolutions] > IKPI )
{
    j5array[numsolutions]-=IK2PI;
}
else if( j5array[numsolutions] < -IKPI )
{
    j5array[numsolutions]+=IK2PI;
}
sj5array[numsolutions] = IKsin(j5array[numsolutions]);
cj5array[numsolutions] = IKcos(j5array[numsolutions]);
numsolutions++;
}
}
bool j5valid[2]={true,true};
_nj5 = 2;
for(int ij5 = 0; ij5 < numsolutions; ++ij5)
    {
if( !j5valid[ij5] )
{
    continue;
}
    j5 = j5array[ij5]; cj5 = cj5array[ij5]; sj5 = sj5array[ij5];
htj5 = IKtan(j5/2);

_ij5[0] = ij5; _ij5[1] = -1;
for(int iij5 = ij5+1; iij5 < numsolutions; ++iij5)
{
if( j5valid[iij5] && IKabs(cj5array[ij5]-cj5array[iij5]) < IKFAST_SOLUTION_THRESH && IKabs(sj5array[ij5]-sj5array[iij5]) < IKFAST_SOLUTION_THRESH )
{
    j5valid[iij5]=false; _ij5[1] = iij5; break; 
}
}
{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j2;
vinfos[0].indices[0] = _ij2[0];
vinfos[0].indices[1] = _ij2[1];
vinfos[0].maxsolutions = _nj2;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j3;
vinfos[1].indices[0] = _ij3[0];
vinfos[1].indices[1] = _ij3[1];
vinfos[1].maxsolutions = _nj3;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j4;
vinfos[2].indices[0] = _ij4[0];
vinfos[2].indices[1] = _ij4[1];
vinfos[2].maxsolutions = _nj4;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j5;
vinfos[3].indices[0] = _ij5[0];
vinfos[3].indices[1] = _ij5[1];
vinfos[3].maxsolutions = _nj5;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j6;
vinfos[4].indices[0] = _ij6[0];
vinfos[4].indices[1] = _ij6[1];
vinfos[4].maxsolutions = _nj6;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j7;
vinfos[5].indices[0] = _ij7[0];
vinfos[5].indices[1] = _ij7[1];
vinfos[5].maxsolutions = _nj7;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j8;
vinfos[6].indices[0] = _ij8[0];
vinfos[6].indices[1] = _ij8[1];
vinfos[6].maxsolutions = _nj8;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
    }

}

}

} else
{
IkReal op[2+1], zeror[2];
int numroots;
IkReal x796=((179896.260310015)*sj3);
IkReal x797=((51663.5292815391)*cj3);
IkReal x798=((100293.827058838)*new_r00);
IkReal x799=((158028.266409035)*new_r10);
IkReal x800=(x799+x798);
IkReal x801=(x797+x796+new_r20);
op[0]=(x801+x800);
op[1]=((((200587.654117675)*new_r10))+(((-316056.53281807)*new_r00)));
op[2]=(x801+(((-1.0)*x800)));
polyroots2(op,zeror,numroots);
IkReal j5array[2], cj5array[2], sj5array[2], tempj5array[1];
int numsolutions = 0;
for(int ij5 = 0; ij5 < numroots; ++ij5)
{
IkReal htj5 = zeror[ij5];
tempj5array[0]=((2.0)*(atan(htj5)));
for(int kj5 = 0; kj5 < 1; ++kj5)
{
j5array[numsolutions] = tempj5array[kj5];
if( j5array[numsolutions] > IKPI )
{
    j5array[numsolutions]-=IK2PI;
}
else if( j5array[numsolutions] < -IKPI )
{
    j5array[numsolutions]+=IK2PI;
}
sj5array[numsolutions] = IKsin(j5array[numsolutions]);
cj5array[numsolutions] = IKcos(j5array[numsolutions]);
numsolutions++;
}
}
bool j5valid[2]={true,true};
_nj5 = 2;
for(int ij5 = 0; ij5 < numsolutions; ++ij5)
    {
if( !j5valid[ij5] )
{
    continue;
}
    j5 = j5array[ij5]; cj5 = cj5array[ij5]; sj5 = sj5array[ij5];
htj5 = IKtan(j5/2);

_ij5[0] = ij5; _ij5[1] = -1;
for(int iij5 = ij5+1; iij5 < numsolutions; ++iij5)
{
if( j5valid[iij5] && IKabs(cj5array[ij5]-cj5array[iij5]) < IKFAST_SOLUTION_THRESH && IKabs(sj5array[ij5]-sj5array[iij5]) < IKFAST_SOLUTION_THRESH )
{
    j5valid[iij5]=false; _ij5[1] = iij5; break; 
}
}
{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j2;
vinfos[0].indices[0] = _ij2[0];
vinfos[0].indices[1] = _ij2[1];
vinfos[0].maxsolutions = _nj2;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j3;
vinfos[1].indices[0] = _ij3[0];
vinfos[1].indices[1] = _ij3[1];
vinfos[1].maxsolutions = _nj3;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j4;
vinfos[2].indices[0] = _ij4[0];
vinfos[2].indices[1] = _ij4[1];
vinfos[2].maxsolutions = _nj4;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j5;
vinfos[3].indices[0] = _ij5[0];
vinfos[3].indices[1] = _ij5[1];
vinfos[3].maxsolutions = _nj5;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j6;
vinfos[4].indices[0] = _ij6[0];
vinfos[4].indices[1] = _ij6[1];
vinfos[4].maxsolutions = _nj6;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j7;
vinfos[5].indices[0] = _ij7[0];
vinfos[5].indices[1] = _ij7[1];
vinfos[5].maxsolutions = _nj7;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j8;
vinfos[6].indices[0] = _ij8[0];
vinfos[6].indices[1] = _ij8[1];
vinfos[6].maxsolutions = _nj8;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
    }

}

}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((new_r21*new_r21)+(new_r20*new_r20));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j5eval[2];
new_r12=0;
new_r02=0;
new_r21=0;
new_r20=0;
j5eval[0]=0.0150029978879168;
j5eval[1]=sj4;
if( IKabs(j5eval[0]) < 0.0000010000000000  || IKabs(j5eval[1]) < 0.0000010000000000  )
{
{
IkReal j3eval[2];
new_r12=0;
new_r02=0;
new_r21=0;
new_r20=0;
j3eval[0]=0.984997002112083;
j3eval[1]=cj4;
if( IKabs(j3eval[0]) < 0.0000010000000000  || IKabs(j3eval[1]) < 0.0000010000000000  )
{
{
IkReal j5eval[3];
new_r12=0;
new_r02=0;
new_r21=0;
new_r20=0;
j5eval[0]=0.0150029978879168;
j5eval[1]=sj4;
j5eval[2]=((new_r10*new_r10)+(new_r00*new_r00));
if( IKabs(j5eval[0]) < 0.0000010000000000  || IKabs(j5eval[1]) < 0.0000010000000000  || IKabs(j5eval[2]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j5array[2], cj5array[2], sj5array[2];
bool j5valid[2]={false};
_nj5 = 2;
IkReal x802=((0.531815483588428)*cj4);
IkReal x803=((0.0656300100348293)*sj4);
IkReal x804=((0.837955424564001)*cj4);
IkReal x805=((0.103420015812922)*sj4);
CheckValue<IkReal> x807 = IKatan2WithCheck(IkReal(((((-1.0)*new_r00*x804))+((new_r00*x805))+((new_r10*x802))+(((-1.0)*new_r10*x803)))),IkReal(((((-1.0)*new_r00*x803))+((new_r00*x802))+((new_r10*x804))+(((-1.0)*new_r10*x805)))),IKFAST_ATAN2_MAGTHRESH);
if(!x807.valid){
continue;
}
IkReal x806=x807.value;
j5array[0]=((-1.0)*x806);
sj5array[0]=IKsin(j5array[0]);
cj5array[0]=IKcos(j5array[0]);
j5array[1]=((3.14159265358979)+(((-1.0)*x806)));
sj5array[1]=IKsin(j5array[1]);
cj5array[1]=IKcos(j5array[1]);
if( j5array[0] > IKPI )
{
    j5array[0]-=IK2PI;
}
else if( j5array[0] < -IKPI )
{    j5array[0]+=IK2PI;
}
j5valid[0] = true;
if( j5array[1] > IKPI )
{
    j5array[1]-=IK2PI;
}
else if( j5array[1] < -IKPI )
{    j5array[1]+=IK2PI;
}
j5valid[1] = true;
for(int ij5 = 0; ij5 < 2; ++ij5)
{
if( !j5valid[ij5] )
{
    continue;
}
_ij5[0] = ij5; _ij5[1] = -1;
for(int iij5 = ij5+1; iij5 < 2; ++iij5)
{
if( j5valid[iij5] && IKabs(cj5array[ij5]-cj5array[iij5]) < IKFAST_SOLUTION_THRESH && IKabs(sj5array[ij5]-sj5array[iij5]) < IKFAST_SOLUTION_THRESH )
{
    j5valid[iij5]=false; _ij5[1] = iij5; break; 
}
}
j5 = j5array[ij5]; cj5 = cj5array[ij5]; sj5 = sj5array[ij5];
{
IkReal evalcond[3];
IkReal x808=IKsin(j5);
IkReal x809=IKcos(j5);
IkReal x810=((0.103420015812922)*sj4);
IkReal x811=((0.837955424564001)*cj4);
IkReal x812=(new_r01*x809);
IkReal x813=(new_r11*x808);
IkReal x814=((0.0656300100348293)*sj4*x809);
IkReal x815=((0.531815483588428)*cj4*x808);
IkReal x816=((0.531815483588428)*cj4*x809);
IkReal x817=((0.0656300100348293)*sj4*x808);
evalcond[0]=(((x809*x810))+(((-1.0)*x809*x811))+(((-1.0)*x817))+x815);
evalcond[1]=((((-1.0)*x808*x810))+(((-1.0)*x814))+((x808*x811))+x816);
evalcond[2]=(((new_r11*x816))+((new_r01*x815))+(((-1.0)*new_r11*x814))+((x810*x812))+(((-1.0)*x811*x812))+(((-1.0)*new_r01*x817))+(((-1.0)*x810*x813))+((x811*x813)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j3array[1], cj3array[1], sj3array[1];
bool j3valid[1]={false};
_nj3 = 1;
IkReal x818=((0.515031836328808)*cj5);
IkReal x819=(new_r11*sj5);
IkReal x820=(new_r10*sj5);
IkReal x821=(cj5*new_r10);
IkReal x822=((0.147909480226238)*cj5);
IkReal x823=(new_r00*sj5);
IkReal x824=(cj5*new_r11);
IkReal x825=(new_r01*sj5);
if( IKabs((((new_r00*x818))+((new_r01*x822))+(((-0.515031836328808)*x820))+(((0.233054011708033)*x824))+(((0.233054011708033)*x825))+(((-0.147909480226238)*x819))+(((0.811511442202281)*x821))+(((0.811511442202281)*x823)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((((-0.147909480226238)*x820))+(((-0.811511442202281)*x824))+(((-0.811511442202281)*x825))+((new_r00*x822))+(((-1.0)*new_r01*x818))+(((0.233054011708033)*x823))+(((0.233054011708033)*x821))+(((0.515031836328808)*x819)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr((((new_r00*x818))+((new_r01*x822))+(((-0.515031836328808)*x820))+(((0.233054011708033)*x824))+(((0.233054011708033)*x825))+(((-0.147909480226238)*x819))+(((0.811511442202281)*x821))+(((0.811511442202281)*x823))))+IKsqr(((((-0.147909480226238)*x820))+(((-0.811511442202281)*x824))+(((-0.811511442202281)*x825))+((new_r00*x822))+(((-1.0)*new_r01*x818))+(((0.233054011708033)*x823))+(((0.233054011708033)*x821))+(((0.515031836328808)*x819))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j3array[0]=IKatan2((((new_r00*x818))+((new_r01*x822))+(((-0.515031836328808)*x820))+(((0.233054011708033)*x824))+(((0.233054011708033)*x825))+(((-0.147909480226238)*x819))+(((0.811511442202281)*x821))+(((0.811511442202281)*x823))), ((((-0.147909480226238)*x820))+(((-0.811511442202281)*x824))+(((-0.811511442202281)*x825))+((new_r00*x822))+(((-1.0)*new_r01*x818))+(((0.233054011708033)*x823))+(((0.233054011708033)*x821))+(((0.515031836328808)*x819))));
sj3array[0]=IKsin(j3array[0]);
cj3array[0]=IKcos(j3array[0]);
if( j3array[0] > IKPI )
{
    j3array[0]-=IK2PI;
}
else if( j3array[0] < -IKPI )
{    j3array[0]+=IK2PI;
}
j3valid[0] = true;
for(int ij3 = 0; ij3 < 1; ++ij3)
{
if( !j3valid[ij3] )
{
    continue;
}
_ij3[0] = ij3; _ij3[1] = -1;
for(int iij3 = ij3+1; iij3 < 1; ++iij3)
{
if( j3valid[iij3] && IKabs(cj3array[ij3]-cj3array[iij3]) < IKFAST_SOLUTION_THRESH && IKabs(sj3array[ij3]-sj3array[iij3]) < IKFAST_SOLUTION_THRESH )
{
    j3valid[iij3]=false; _ij3[1] = iij3; break; 
}
}
j3 = j3array[ij3]; cj3 = cj3array[ij3]; sj3 = sj3array[ij3];
{
IkReal evalcond[14];
IkReal x826=IKsin(j3);
IkReal x827=IKcos(j3);
IkReal x828=(cj5*sj4);
IkReal x829=(new_r01*sj5);
IkReal x830=((0.531815483588428)*sj4);
IkReal x831=(new_r10*sj5);
IkReal x832=(cj5*new_r01);
IkReal x833=((0.0181157120800272)*sj5);
IkReal x834=((0.515031836328808)*sj5);
IkReal x835=(new_r00*sj5);
IkReal x836=(new_r11*sj5);
IkReal x837=((0.0630802599313394)*sj5);
IkReal x838=((0.0656300100348293)*cj4);
IkReal x839=(cj5*new_r00);
IkReal x840=((0.028546806998574)*sj5);
IkReal x841=(sj4*sj5);
IkReal x842=((0.837955424564001)*sj4);
IkReal x843=((0.0994021100426501)*sj5);
IkReal x844=(cj5*new_r10);
IkReal x845=((0.103420015812922)*cj4);
IkReal x846=(cj5*new_r11);
IkReal x847=((0.276027873078388)*x826);
IkReal x848=((0.961149631058464)*x827);
IkReal x849=((0.276027873078388)*x827);
IkReal x850=((0.961149631058464)*x826);
IkReal x851=((0.805400547163128)*x826);
IkReal x852=(sj4*x827);
IkReal x853=((0.147909480226238)*x827);
IkReal x854=(cj5*x826);
IkReal x855=(cj4*x827);
IkReal x856=((0.511154255842196)*x826);
IkReal x857=(cj4*x826);
IkReal x858=((0.146795896805068)*x826);
IkReal x859=((0.231299053576899)*x826);
IkReal x860=((0.147909480226238)*x826);
IkReal x861=(sj5*x826);
IkReal x862=((0.811511442202281)*x827);
IkReal x863=(cj5*x827);
IkReal x864=(sj4*x826);
IkReal x865=(x850+x849);
evalcond[0]=((((-0.535849798705775)*x839))+(((0.535849798705775)*x831))+(((-0.844313326436599)*x844))+(((-0.844313326436599)*x835))+x865);
evalcond[1]=((((-0.535849798705775)*x832))+(((0.535849798705775)*x836))+(((-1.0)*x848))+(((-0.844313326436599)*x829))+(((-0.844313326436599)*x846))+x847);
evalcond[2]=((((1.47476155376408e-6)*x827))+(((5.13522966898714e-6)*x826))+(((0.273949425080978)*x857))+(((-0.033809750247604)*x864))+(((-0.953912320189798)*x855))+(((0.117728070771443)*x852)));
evalcond[3]=((((0.033809750247604)*x852))+(((1.47476155376408e-6)*x826))+(((-0.953912320189798)*x857))+(((0.117728070771443)*x864))+(((-5.13522966898714e-6)*x827))+(((-0.273949425080978)*x855)));
evalcond[4]=((((-1.0)*sj4*x858))+(((-0.811511442202281)*x826))+(((0.511154255842196)*x852))+(((0.0630802599313394)*x855))+x835+x844+(((-0.0181157120800272)*x857))+(((-0.233054011708033)*x827)));
evalcond[5]=((((0.146795896805068)*x852))+(((0.0181157120800272)*x855))+(((0.0630802599313394)*x857))+x862+x829+x846+(((-0.233054011708033)*x826))+((sj4*x856)));
evalcond[6]=((((-1.0)*x853))+(((-0.515031836328808)*x826))+(((-0.0994021100426501)*x855))+(((-0.805400547163128)*x852))+(((0.028546806998574)*x857))+(((-1.0)*x831))+x839+((sj4*x859)));
evalcond[7]=((((-1.0)*x860))+(((-1.0)*sj4*x851))+(((0.515031836328808)*x827))+(((-0.028546806998574)*x855))+(((-0.0994021100426501)*x857))+(((-0.231299053576899)*x852))+(((-1.0)*x836))+x832);
evalcond[8]=((((-1.0)*x831*x842))+(((-1.0)*x831*x845))+(((-1.0)*x835*x838))+((x839*x845))+(((-1.0)*x830*x835))+(((-1.0)*x848))+(((-0.531815483588428)*new_r10*x828))+(((-1.0)*x838*x844))+x847+(((0.837955424564001)*new_r00*x828)));
evalcond[9]=((((0.837955424564001)*new_r01*x828))+(((-1.0)*x865))+(((-1.0)*x836*x845))+(((-1.0)*x836*x842))+((x832*x845))+(((-0.531815483588428)*new_r11*x828))+(((-1.0)*x838*x846))+(((-1.0)*x829*x838))+(((-1.0)*x829*x830)));
evalcond[10]=((((0.028546806998574)*cj4*x854))+(((-0.0994021100426501)*cj5*x855))+((x828*x859))+(((-0.805400547163128)*x827*x828))+(((-0.811511442202281)*x861))+(((-1.0)*x841*x858))+(((-0.515031836328808)*x854))+(((-1.0)*x833*x857))+new_r00+(((-0.233054011708033)*sj5*x827))+((x837*x855))+(((0.511154255842196)*x827*x841))+(((-1.0)*cj5*x853)));
evalcond[11]=((((0.515031836328808)*x863))+((sj5*x862))+(((-0.0994021100426501)*cj4*x854))+(((0.146795896805068)*x827*x841))+(((-0.028546806998574)*cj5*x855))+((x841*x856))+(((-0.233054011708033)*x861))+(((-1.0)*x828*x851))+(((-0.147909480226238)*x854))+((x833*x855))+new_r01+(((-0.231299053576899)*x827*x828))+((x837*x857)));
evalcond[12]=(((sj5*x853))+(((0.511154255842196)*x827*x828))+(((0.805400547163128)*x827*x841))+((x826*x834))+(((-0.0181157120800272)*cj4*x854))+(((0.0630802599313394)*cj5*x855))+(((-1.0)*x841*x859))+(((-0.811511442202281)*x854))+(((-0.233054011708033)*x863))+(((-1.0)*x828*x858))+(((-1.0)*x840*x857))+new_r10+((x843*x855)));
evalcond[13]=((((0.0181157120800272)*cj5*x855))+(((-1.0)*x827*x834))+((sj5*x860))+((x828*x856))+(((0.0630802599313394)*cj4*x854))+(((0.146795896805068)*x827*x828))+((x841*x851))+((x840*x855))+(((0.231299053576899)*x827*x841))+((cj5*x862))+new_r11+(((-0.233054011708033)*x854))+((x843*x857)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[9]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[10]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[11]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[12]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[13]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j2;
vinfos[0].indices[0] = _ij2[0];
vinfos[0].indices[1] = _ij2[1];
vinfos[0].maxsolutions = _nj2;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j3;
vinfos[1].indices[0] = _ij3[0];
vinfos[1].indices[1] = _ij3[1];
vinfos[1].maxsolutions = _nj3;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j4;
vinfos[2].indices[0] = _ij4[0];
vinfos[2].indices[1] = _ij4[1];
vinfos[2].maxsolutions = _nj4;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j5;
vinfos[3].indices[0] = _ij5[0];
vinfos[3].indices[1] = _ij5[1];
vinfos[3].maxsolutions = _nj5;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j6;
vinfos[4].indices[0] = _ij6[0];
vinfos[4].indices[1] = _ij6[1];
vinfos[4].maxsolutions = _nj6;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j7;
vinfos[5].indices[0] = _ij7[0];
vinfos[5].indices[1] = _ij7[1];
vinfos[5].maxsolutions = _nj7;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j8;
vinfos[6].indices[0] = _ij8[0];
vinfos[6].indices[1] = _ij8[1];
vinfos[6].maxsolutions = _nj8;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}
}
}

}

}

} else
{
{
IkReal j3array[2], cj3array[2], sj3array[2];
bool j3valid[2]={false};
_nj3 = 2;
CheckValue<IkReal> x867 = IKatan2WithCheck(IkReal(((1.47476155376408e-6)+(((0.117728070771443)*sj4))+(((-0.953912320189798)*cj4)))),IkReal(((5.13522966898714e-6)+(((-0.033809750247604)*sj4))+(((0.273949425080978)*cj4)))),IKFAST_ATAN2_MAGTHRESH);
if(!x867.valid){
continue;
}
IkReal x866=x867.value;
j3array[0]=((-1.0)*x866);
sj3array[0]=IKsin(j3array[0]);
cj3array[0]=IKcos(j3array[0]);
j3array[1]=((3.14159265358979)+(((-1.0)*x866)));
sj3array[1]=IKsin(j3array[1]);
cj3array[1]=IKcos(j3array[1]);
if( j3array[0] > IKPI )
{
    j3array[0]-=IK2PI;
}
else if( j3array[0] < -IKPI )
{    j3array[0]+=IK2PI;
}
j3valid[0] = true;
if( j3array[1] > IKPI )
{
    j3array[1]-=IK2PI;
}
else if( j3array[1] < -IKPI )
{    j3array[1]+=IK2PI;
}
j3valid[1] = true;
for(int ij3 = 0; ij3 < 2; ++ij3)
{
if( !j3valid[ij3] )
{
    continue;
}
_ij3[0] = ij3; _ij3[1] = -1;
for(int iij3 = ij3+1; iij3 < 2; ++iij3)
{
if( j3valid[iij3] && IKabs(cj3array[ij3]-cj3array[iij3]) < IKFAST_SOLUTION_THRESH && IKabs(sj3array[ij3]-sj3array[iij3]) < IKFAST_SOLUTION_THRESH )
{
    j3valid[iij3]=false; _ij3[1] = iij3; break; 
}
}
j3 = j3array[ij3]; cj3 = cj3array[ij3]; sj3 = sj3array[ij3];
{
IkReal evalcond[1];
IkReal x868=IKsin(j3);
IkReal x869=IKcos(j3);
evalcond[0]=((((0.117728070771443)*sj4*x868))+(((-0.953912320189798)*cj4*x868))+(((-5.13522966898714e-6)*x869))+(((0.033809750247604)*sj4*x869))+(((1.47476155376408e-6)*x868))+(((-0.273949425080978)*cj4*x869)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j5eval[1];
new_r12=0;
new_r02=0;
new_r21=0;
new_r20=0;
j5eval[0]=((IKabs(((((1.94128872830752)*new_r00))+cj3+(((3.48207454681763)*sj3))+(((3.05879734905186)*new_r10)))))+(IKabs(((((-6.11759469810373)*new_r00))+(((3.88257745661505)*new_r10))))));
if( IKabs(j5eval[0]) < 0.0000000100000000  )
{
{
IkReal j5eval[1];
new_r12=0;
new_r02=0;
new_r21=0;
new_r20=0;
j5eval[0]=((IKabs(((((-6.11759469810373)*new_r01))+(((3.88257745661505)*new_r11)))))+(IKabs(((((-3.48207454681763)*cj3))+(((1.94128872830752)*new_r01))+sj3+(((3.05879734905186)*new_r11))))));
if( IKabs(j5eval[0]) < 0.0000000100000000  )
{
{
IkReal j5eval[1];
new_r12=0;
new_r02=0;
new_r21=0;
new_r20=0;
j5eval[0]=((IKabs(((724857009.573076)*new_r00)))+(((6565650.44230769)*(IKabs(((((-8.1032363594977)*sj3*sj4))+(((-1.0)*cj4*sj3))+(((-12.8647447408362)*cj3))+(((-55.2007006725676)*new_r10))+(((28.2160730742541)*cj3*sj4))+(((3.48207454681763)*cj3*cj4))+(((-44.7960002133718)*sj3))))))));
if( IKabs(j5eval[0]) < 0.0000000100000000  )
{
continue; // 3 cases reached

} else
{
IkReal op[2+1], zeror[2];
int numroots;
IkReal x870=((55.2007006725676)*new_r10);
IkReal x871=((44.7960002133718)*sj3);
IkReal x872=((12.8647447408362)*cj3);
IkReal x873=((28.2160730742541)*cj3*sj4);
IkReal x874=((3.48207454681763)*cj3*cj4);
IkReal x875=((8.1032363594977)*sj3*sj4);
IkReal x876=((1.0)*cj4*sj3);
IkReal x877=(x873+x874);
IkReal x878=(x871+x872+x875+x876);
op[0]=(x877+(((-1.0)*x878))+(((-1.0)*x870)));
op[1]=((110.401401345135)*new_r00);
op[2]=(x870+x877+(((-1.0)*x878)));
polyroots2(op,zeror,numroots);
IkReal j5array[2], cj5array[2], sj5array[2], tempj5array[1];
int numsolutions = 0;
for(int ij5 = 0; ij5 < numroots; ++ij5)
{
IkReal htj5 = zeror[ij5];
tempj5array[0]=((2.0)*(atan(htj5)));
for(int kj5 = 0; kj5 < 1; ++kj5)
{
j5array[numsolutions] = tempj5array[kj5];
if( j5array[numsolutions] > IKPI )
{
    j5array[numsolutions]-=IK2PI;
}
else if( j5array[numsolutions] < -IKPI )
{
    j5array[numsolutions]+=IK2PI;
}
sj5array[numsolutions] = IKsin(j5array[numsolutions]);
cj5array[numsolutions] = IKcos(j5array[numsolutions]);
numsolutions++;
}
}
bool j5valid[2]={true,true};
_nj5 = 2;
for(int ij5 = 0; ij5 < numsolutions; ++ij5)
    {
if( !j5valid[ij5] )
{
    continue;
}
    j5 = j5array[ij5]; cj5 = cj5array[ij5]; sj5 = sj5array[ij5];
htj5 = IKtan(j5/2);

_ij5[0] = ij5; _ij5[1] = -1;
for(int iij5 = ij5+1; iij5 < numsolutions; ++iij5)
{
if( j5valid[iij5] && IKabs(cj5array[ij5]-cj5array[iij5]) < IKFAST_SOLUTION_THRESH && IKabs(sj5array[ij5]-sj5array[iij5]) < IKFAST_SOLUTION_THRESH )
{
    j5valid[iij5]=false; _ij5[1] = iij5; break; 
}
}
{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j2;
vinfos[0].indices[0] = _ij2[0];
vinfos[0].indices[1] = _ij2[1];
vinfos[0].maxsolutions = _nj2;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j3;
vinfos[1].indices[0] = _ij3[0];
vinfos[1].indices[1] = _ij3[1];
vinfos[1].maxsolutions = _nj3;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j4;
vinfos[2].indices[0] = _ij4[0];
vinfos[2].indices[1] = _ij4[1];
vinfos[2].maxsolutions = _nj4;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j5;
vinfos[3].indices[0] = _ij5[0];
vinfos[3].indices[1] = _ij5[1];
vinfos[3].maxsolutions = _nj5;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j6;
vinfos[4].indices[0] = _ij6[0];
vinfos[4].indices[1] = _ij6[1];
vinfos[4].maxsolutions = _nj6;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j7;
vinfos[5].indices[0] = _ij7[0];
vinfos[5].indices[1] = _ij7[1];
vinfos[5].maxsolutions = _nj7;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j8;
vinfos[6].indices[0] = _ij8[0];
vinfos[6].indices[1] = _ij8[1];
vinfos[6].maxsolutions = _nj8;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
    }

}

}

} else
{
IkReal op[2+1], zeror[2];
int numroots;
IkReal x879=((1.94128872830752)*new_r01);
IkReal x880=((3.05879734905186)*new_r11);
IkReal x881=((3.48207454681763)*cj3);
IkReal x882=(x879+x880);
op[0]=(sj3+(((-1.0)*x881))+x882);
op[1]=((((-6.11759469810373)*new_r01))+(((3.88257745661505)*new_r11)));
op[2]=(sj3+(((-1.0)*x882))+(((-1.0)*x881)));
polyroots2(op,zeror,numroots);
IkReal j5array[2], cj5array[2], sj5array[2], tempj5array[1];
int numsolutions = 0;
for(int ij5 = 0; ij5 < numroots; ++ij5)
{
IkReal htj5 = zeror[ij5];
tempj5array[0]=((2.0)*(atan(htj5)));
for(int kj5 = 0; kj5 < 1; ++kj5)
{
j5array[numsolutions] = tempj5array[kj5];
if( j5array[numsolutions] > IKPI )
{
    j5array[numsolutions]-=IK2PI;
}
else if( j5array[numsolutions] < -IKPI )
{
    j5array[numsolutions]+=IK2PI;
}
sj5array[numsolutions] = IKsin(j5array[numsolutions]);
cj5array[numsolutions] = IKcos(j5array[numsolutions]);
numsolutions++;
}
}
bool j5valid[2]={true,true};
_nj5 = 2;
for(int ij5 = 0; ij5 < numsolutions; ++ij5)
    {
if( !j5valid[ij5] )
{
    continue;
}
    j5 = j5array[ij5]; cj5 = cj5array[ij5]; sj5 = sj5array[ij5];
htj5 = IKtan(j5/2);

_ij5[0] = ij5; _ij5[1] = -1;
for(int iij5 = ij5+1; iij5 < numsolutions; ++iij5)
{
if( j5valid[iij5] && IKabs(cj5array[ij5]-cj5array[iij5]) < IKFAST_SOLUTION_THRESH && IKabs(sj5array[ij5]-sj5array[iij5]) < IKFAST_SOLUTION_THRESH )
{
    j5valid[iij5]=false; _ij5[1] = iij5; break; 
}
}
{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j2;
vinfos[0].indices[0] = _ij2[0];
vinfos[0].indices[1] = _ij2[1];
vinfos[0].maxsolutions = _nj2;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j3;
vinfos[1].indices[0] = _ij3[0];
vinfos[1].indices[1] = _ij3[1];
vinfos[1].maxsolutions = _nj3;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j4;
vinfos[2].indices[0] = _ij4[0];
vinfos[2].indices[1] = _ij4[1];
vinfos[2].maxsolutions = _nj4;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j5;
vinfos[3].indices[0] = _ij5[0];
vinfos[3].indices[1] = _ij5[1];
vinfos[3].maxsolutions = _nj5;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j6;
vinfos[4].indices[0] = _ij6[0];
vinfos[4].indices[1] = _ij6[1];
vinfos[4].maxsolutions = _nj6;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j7;
vinfos[5].indices[0] = _ij7[0];
vinfos[5].indices[1] = _ij7[1];
vinfos[5].maxsolutions = _nj7;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j8;
vinfos[6].indices[0] = _ij8[0];
vinfos[6].indices[1] = _ij8[1];
vinfos[6].maxsolutions = _nj8;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
    }

}

}

} else
{
IkReal op[2+1], zeror[2];
int numroots;
IkReal x883=((3.48207454681763)*sj3);
IkReal x884=((1.94128872830752)*new_r00);
IkReal x885=((3.05879734905186)*new_r10);
IkReal x886=(cj3+x883);
IkReal x887=(x885+x884);
op[0]=(x887+x886);
op[1]=((((-6.11759469810373)*new_r00))+(((3.88257745661505)*new_r10)));
op[2]=((((-1.0)*x887))+x886);
polyroots2(op,zeror,numroots);
IkReal j5array[2], cj5array[2], sj5array[2], tempj5array[1];
int numsolutions = 0;
for(int ij5 = 0; ij5 < numroots; ++ij5)
{
IkReal htj5 = zeror[ij5];
tempj5array[0]=((2.0)*(atan(htj5)));
for(int kj5 = 0; kj5 < 1; ++kj5)
{
j5array[numsolutions] = tempj5array[kj5];
if( j5array[numsolutions] > IKPI )
{
    j5array[numsolutions]-=IK2PI;
}
else if( j5array[numsolutions] < -IKPI )
{
    j5array[numsolutions]+=IK2PI;
}
sj5array[numsolutions] = IKsin(j5array[numsolutions]);
cj5array[numsolutions] = IKcos(j5array[numsolutions]);
numsolutions++;
}
}
bool j5valid[2]={true,true};
_nj5 = 2;
for(int ij5 = 0; ij5 < numsolutions; ++ij5)
    {
if( !j5valid[ij5] )
{
    continue;
}
    j5 = j5array[ij5]; cj5 = cj5array[ij5]; sj5 = sj5array[ij5];
htj5 = IKtan(j5/2);

_ij5[0] = ij5; _ij5[1] = -1;
for(int iij5 = ij5+1; iij5 < numsolutions; ++iij5)
{
if( j5valid[iij5] && IKabs(cj5array[ij5]-cj5array[iij5]) < IKFAST_SOLUTION_THRESH && IKabs(sj5array[ij5]-sj5array[iij5]) < IKFAST_SOLUTION_THRESH )
{
    j5valid[iij5]=false; _ij5[1] = iij5; break; 
}
}
{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j2;
vinfos[0].indices[0] = _ij2[0];
vinfos[0].indices[1] = _ij2[1];
vinfos[0].maxsolutions = _nj2;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j3;
vinfos[1].indices[0] = _ij3[0];
vinfos[1].indices[1] = _ij3[1];
vinfos[1].maxsolutions = _nj3;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j4;
vinfos[2].indices[0] = _ij4[0];
vinfos[2].indices[1] = _ij4[1];
vinfos[2].maxsolutions = _nj4;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j5;
vinfos[3].indices[0] = _ij5[0];
vinfos[3].indices[1] = _ij5[1];
vinfos[3].maxsolutions = _nj5;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j6;
vinfos[4].indices[0] = _ij6[0];
vinfos[4].indices[1] = _ij6[1];
vinfos[4].maxsolutions = _nj6;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j7;
vinfos[5].indices[0] = _ij7[0];
vinfos[5].indices[1] = _ij7[1];
vinfos[5].maxsolutions = _nj7;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j8;
vinfos[6].indices[0] = _ij8[0];
vinfos[6].indices[1] = _ij8[1];
vinfos[6].maxsolutions = _nj8;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
    }

}

}
}
}

}

}

} else
{
{
IkReal j5array[2], cj5array[2], sj5array[2];
bool j5valid[2]={false};
_nj5 = 2;
CheckValue<IkReal> x889 = IKatan2WithCheck(IkReal(((((0.103420015812922)*sj4))+(((-0.837955424564001)*cj4)))),IkReal(((((-0.0656300100348293)*sj4))+(((0.531815483588428)*cj4)))),IKFAST_ATAN2_MAGTHRESH);
if(!x889.valid){
continue;
}
IkReal x888=x889.value;
j5array[0]=((-1.0)*x888);
sj5array[0]=IKsin(j5array[0]);
cj5array[0]=IKcos(j5array[0]);
j5array[1]=((3.14159265358979)+(((-1.0)*x888)));
sj5array[1]=IKsin(j5array[1]);
cj5array[1]=IKcos(j5array[1]);
if( j5array[0] > IKPI )
{
    j5array[0]-=IK2PI;
}
else if( j5array[0] < -IKPI )
{    j5array[0]+=IK2PI;
}
j5valid[0] = true;
if( j5array[1] > IKPI )
{
    j5array[1]-=IK2PI;
}
else if( j5array[1] < -IKPI )
{    j5array[1]+=IK2PI;
}
j5valid[1] = true;
for(int ij5 = 0; ij5 < 2; ++ij5)
{
if( !j5valid[ij5] )
{
    continue;
}
_ij5[0] = ij5; _ij5[1] = -1;
for(int iij5 = ij5+1; iij5 < 2; ++iij5)
{
if( j5valid[iij5] && IKabs(cj5array[ij5]-cj5array[iij5]) < IKFAST_SOLUTION_THRESH && IKabs(sj5array[ij5]-sj5array[iij5]) < IKFAST_SOLUTION_THRESH )
{
    j5valid[iij5]=false; _ij5[1] = iij5; break; 
}
}
j5 = j5array[ij5]; cj5 = cj5array[ij5]; sj5 = sj5array[ij5];
{
IkReal evalcond[3];
IkReal x890=IKsin(j5);
IkReal x891=IKcos(j5);
IkReal x892=(sj4*x891);
IkReal x893=(cj4*x891);
IkReal x894=(cj4*x890);
IkReal x895=((0.103420015812922)*sj4*x890);
IkReal x896=((0.0656300100348293)*sj4*x890);
evalcond[0]=((((-0.0656300100348293)*x892))+(((0.837955424564001)*x894))+(((-1.0)*x895))+(((0.531815483588428)*x893)));
evalcond[1]=((((-0.0656300100348293)*new_r10*x892))+(((-1.0)*new_r10*x895))+(((-0.837955424564001)*new_r00*x893))+(((0.531815483588428)*new_r10*x893))+(((0.103420015812922)*new_r00*x892))+(((-1.0)*new_r00*x896))+(((0.837955424564001)*new_r10*x894))+(((0.531815483588428)*new_r00*x894)));
evalcond[2]=((((-1.0)*new_r11*x895))+(((-0.0656300100348293)*new_r11*x892))+(((0.103420015812922)*new_r01*x892))+(((-0.837955424564001)*new_r01*x893))+(((-1.0)*new_r01*x896))+(((0.531815483588428)*new_r11*x893))+(((0.531815483588428)*new_r01*x894))+(((0.837955424564001)*new_r11*x894)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j3array[1], cj3array[1], sj3array[1];
bool j3valid[1]={false};
_nj3 = 1;
IkReal x897=((0.515031836328808)*cj5);
IkReal x898=(new_r11*sj5);
IkReal x899=(new_r10*sj5);
IkReal x900=(cj5*new_r10);
IkReal x901=((0.147909480226238)*cj5);
IkReal x902=(new_r00*sj5);
IkReal x903=(cj5*new_r11);
IkReal x904=(new_r01*sj5);
if( IKabs((((new_r00*x897))+(((-0.515031836328808)*x899))+(((0.811511442202281)*x902))+(((0.811511442202281)*x900))+((new_r01*x901))+(((0.233054011708033)*x903))+(((0.233054011708033)*x904))+(((-0.147909480226238)*x898)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((((-0.811511442202281)*x903))+(((-0.811511442202281)*x904))+(((-1.0)*new_r01*x897))+(((0.515031836328808)*x898))+(((0.233054011708033)*x900))+(((0.233054011708033)*x902))+((new_r00*x901))+(((-0.147909480226238)*x899)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr((((new_r00*x897))+(((-0.515031836328808)*x899))+(((0.811511442202281)*x902))+(((0.811511442202281)*x900))+((new_r01*x901))+(((0.233054011708033)*x903))+(((0.233054011708033)*x904))+(((-0.147909480226238)*x898))))+IKsqr(((((-0.811511442202281)*x903))+(((-0.811511442202281)*x904))+(((-1.0)*new_r01*x897))+(((0.515031836328808)*x898))+(((0.233054011708033)*x900))+(((0.233054011708033)*x902))+((new_r00*x901))+(((-0.147909480226238)*x899))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j3array[0]=IKatan2((((new_r00*x897))+(((-0.515031836328808)*x899))+(((0.811511442202281)*x902))+(((0.811511442202281)*x900))+((new_r01*x901))+(((0.233054011708033)*x903))+(((0.233054011708033)*x904))+(((-0.147909480226238)*x898))), ((((-0.811511442202281)*x903))+(((-0.811511442202281)*x904))+(((-1.0)*new_r01*x897))+(((0.515031836328808)*x898))+(((0.233054011708033)*x900))+(((0.233054011708033)*x902))+((new_r00*x901))+(((-0.147909480226238)*x899))));
sj3array[0]=IKsin(j3array[0]);
cj3array[0]=IKcos(j3array[0]);
if( j3array[0] > IKPI )
{
    j3array[0]-=IK2PI;
}
else if( j3array[0] < -IKPI )
{    j3array[0]+=IK2PI;
}
j3valid[0] = true;
for(int ij3 = 0; ij3 < 1; ++ij3)
{
if( !j3valid[ij3] )
{
    continue;
}
_ij3[0] = ij3; _ij3[1] = -1;
for(int iij3 = ij3+1; iij3 < 1; ++iij3)
{
if( j3valid[iij3] && IKabs(cj3array[ij3]-cj3array[iij3]) < IKFAST_SOLUTION_THRESH && IKabs(sj3array[ij3]-sj3array[iij3]) < IKFAST_SOLUTION_THRESH )
{
    j3valid[iij3]=false; _ij3[1] = iij3; break; 
}
}
j3 = j3array[ij3]; cj3 = cj3array[ij3]; sj3 = sj3array[ij3];
{
IkReal evalcond[14];
IkReal x905=IKsin(j3);
IkReal x906=IKcos(j3);
IkReal x907=(cj5*sj4);
IkReal x908=(new_r01*sj5);
IkReal x909=((0.531815483588428)*sj4);
IkReal x910=(new_r10*sj5);
IkReal x911=(cj5*new_r01);
IkReal x912=((0.0181157120800272)*sj5);
IkReal x913=((0.515031836328808)*sj5);
IkReal x914=(new_r00*sj5);
IkReal x915=(new_r11*sj5);
IkReal x916=((0.0630802599313394)*sj5);
IkReal x917=((0.0656300100348293)*cj4);
IkReal x918=(cj5*new_r00);
IkReal x919=((0.028546806998574)*sj5);
IkReal x920=(sj4*sj5);
IkReal x921=((0.837955424564001)*sj4);
IkReal x922=((0.0994021100426501)*sj5);
IkReal x923=(cj5*new_r10);
IkReal x924=((0.103420015812922)*cj4);
IkReal x925=(cj5*new_r11);
IkReal x926=((0.276027873078388)*x905);
IkReal x927=((0.961149631058464)*x906);
IkReal x928=((0.276027873078388)*x906);
IkReal x929=((0.961149631058464)*x905);
IkReal x930=((0.805400547163128)*x905);
IkReal x931=(sj4*x906);
IkReal x932=((0.147909480226238)*x906);
IkReal x933=(cj5*x905);
IkReal x934=(cj4*x906);
IkReal x935=((0.511154255842196)*x905);
IkReal x936=(cj4*x905);
IkReal x937=((0.146795896805068)*x905);
IkReal x938=((0.231299053576899)*x905);
IkReal x939=((0.147909480226238)*x905);
IkReal x940=(sj5*x905);
IkReal x941=((0.811511442202281)*x906);
IkReal x942=(cj5*x906);
IkReal x943=(sj4*x905);
IkReal x944=(x928+x929);
evalcond[0]=((((-0.535849798705775)*x918))+(((-0.844313326436599)*x923))+(((0.535849798705775)*x910))+(((-0.844313326436599)*x914))+x944);
evalcond[1]=((((-0.844313326436599)*x908))+(((-1.0)*x927))+(((-0.535849798705775)*x911))+(((-0.844313326436599)*x925))+(((0.535849798705775)*x915))+x926);
evalcond[2]=((((-0.033809750247604)*x943))+(((0.117728070771443)*x931))+(((0.273949425080978)*x936))+(((5.13522966898714e-6)*x905))+(((1.47476155376408e-6)*x906))+(((-0.953912320189798)*x934)));
evalcond[3]=((((-0.273949425080978)*x934))+(((-5.13522966898714e-6)*x906))+(((1.47476155376408e-6)*x905))+(((-0.953912320189798)*x936))+(((0.033809750247604)*x931))+(((0.117728070771443)*x943)));
evalcond[4]=((((0.511154255842196)*x931))+(((0.0630802599313394)*x934))+(((-1.0)*sj4*x937))+(((-0.811511442202281)*x905))+(((-0.233054011708033)*x906))+(((-0.0181157120800272)*x936))+x923+x914);
evalcond[5]=((((0.0181157120800272)*x934))+(((0.0630802599313394)*x936))+(((0.146795896805068)*x931))+((sj4*x935))+(((-0.233054011708033)*x905))+x925+x908+x941);
evalcond[6]=((((-0.0994021100426501)*x934))+((sj4*x938))+(((0.028546806998574)*x936))+(((-1.0)*x910))+(((-0.515031836328808)*x905))+x918+(((-0.805400547163128)*x931))+(((-1.0)*x932)));
evalcond[7]=((((-0.0994021100426501)*x936))+(((-0.028546806998574)*x934))+(((-1.0)*sj4*x930))+(((0.515031836328808)*x906))+(((-0.231299053576899)*x931))+(((-1.0)*x915))+x911+(((-1.0)*x939)));
evalcond[8]=(((x918*x924))+(((-1.0)*x927))+(((-1.0)*x914*x917))+(((-0.531815483588428)*new_r10*x907))+(((-1.0)*x910*x921))+(((-1.0)*x910*x924))+(((0.837955424564001)*new_r00*x907))+x926+(((-1.0)*x917*x923))+(((-1.0)*x909*x914)));
evalcond[9]=((((-1.0)*x908*x909))+(((-1.0)*x944))+(((-1.0)*x908*x917))+((x911*x924))+(((-1.0)*x915*x924))+(((-1.0)*x915*x921))+(((0.837955424564001)*new_r01*x907))+(((-0.531815483588428)*new_r11*x907))+(((-1.0)*x917*x925)));
evalcond[10]=(((x916*x934))+(((-1.0)*x912*x936))+((x907*x938))+(((-1.0)*x920*x937))+(((-0.0994021100426501)*cj5*x934))+(((0.511154255842196)*x906*x920))+(((0.028546806998574)*cj4*x933))+(((-0.233054011708033)*sj5*x906))+(((-0.811511442202281)*x940))+new_r00+(((-1.0)*cj5*x932))+(((-0.515031836328808)*x933))+(((-0.805400547163128)*x906*x907)));
evalcond[11]=(((x916*x936))+((x920*x935))+(((0.515031836328808)*x942))+(((-0.028546806998574)*cj5*x934))+(((0.146795896805068)*x906*x920))+(((-0.233054011708033)*x940))+(((-0.231299053576899)*x906*x907))+(((-1.0)*x907*x930))+(((-0.0994021100426501)*cj4*x933))+new_r01+(((-0.147909480226238)*x933))+((x912*x934))+((sj5*x941)));
evalcond[12]=((((0.0630802599313394)*cj5*x934))+(((0.511154255842196)*x906*x907))+(((-0.0181157120800272)*cj4*x933))+(((-1.0)*x920*x938))+(((-0.233054011708033)*x942))+(((-0.811511442202281)*x933))+(((-1.0)*x919*x936))+(((-1.0)*x907*x937))+((x922*x934))+(((0.805400547163128)*x906*x920))+new_r10+((x905*x913))+((sj5*x932)));
evalcond[13]=((((-1.0)*x906*x913))+((x919*x934))+(((0.146795896805068)*x906*x907))+((x920*x930))+((x907*x935))+(((0.0181157120800272)*cj5*x934))+(((0.231299053576899)*x906*x920))+(((-0.233054011708033)*x933))+((x922*x936))+new_r11+((cj5*x941))+((sj5*x939))+(((0.0630802599313394)*cj4*x933)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[9]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[10]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[11]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[12]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[13]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j2;
vinfos[0].indices[0] = _ij2[0];
vinfos[0].indices[1] = _ij2[1];
vinfos[0].maxsolutions = _nj2;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j3;
vinfos[1].indices[0] = _ij3[0];
vinfos[1].indices[1] = _ij3[1];
vinfos[1].maxsolutions = _nj3;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j4;
vinfos[2].indices[0] = _ij4[0];
vinfos[2].indices[1] = _ij4[1];
vinfos[2].maxsolutions = _nj4;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j5;
vinfos[3].indices[0] = _ij5[0];
vinfos[3].indices[1] = _ij5[1];
vinfos[3].maxsolutions = _nj5;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j6;
vinfos[4].indices[0] = _ij6[0];
vinfos[4].indices[1] = _ij6[1];
vinfos[4].maxsolutions = _nj6;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j7;
vinfos[5].indices[0] = _ij7[0];
vinfos[5].indices[1] = _ij7[1];
vinfos[5].maxsolutions = _nj7;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j8;
vinfos[6].indices[0] = _ij8[0];
vinfos[6].indices[1] = _ij8[1];
vinfos[6].maxsolutions = _nj8;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
if( 1 )
{
bgotonextstatement=false;
continue; // branch miss [j3, j5]

}
} while(0);
if( bgotonextstatement )
{
}
}
}
}
}

} else
{
{
IkReal j3array[1], cj3array[1], sj3array[1];
bool j3valid[1]={false};
_nj3 = 1;
IkReal x945=(new_r20*sj4);
IkReal x946=(new_r21*sj4);
IkReal x947=(cj4*new_r21);
IkReal x948=(cj4*new_r20);
CheckValue<IkReal> x949 = IKatan2WithCheck(IkReal(((((0.033809750247604)*x945))+(((-5.13522966898714e-6)*new_r20))+(((-0.117728070771443)*x946))+(((-0.273949425080978)*x948))+(((-1.47476155376408e-6)*new_r21))+(((0.953912320189798)*x947)))),IkReal(((((5.13522966898714e-6)*new_r21))+(((-0.033809750247604)*x946))+(((-0.117728070771443)*x945))+(((-1.47476155376408e-6)*new_r20))+(((0.953912320189798)*x948))+(((0.273949425080978)*x947)))),IKFAST_ATAN2_MAGTHRESH);
if(!x949.valid){
continue;
}
CheckValue<IkReal> x950=IKPowWithIntegerCheck(IKsign(((0.0150029978879168)+(((0.969994004252712)*(cj4*cj4)))+(((-0.243128837567037)*cj4*sj4)))),-1);
if(!x950.valid){
continue;
}
j3array[0]=((-1.5707963267949)+(x949.value)+(((1.5707963267949)*(x950.value))));
sj3array[0]=IKsin(j3array[0]);
cj3array[0]=IKcos(j3array[0]);
if( j3array[0] > IKPI )
{
    j3array[0]-=IK2PI;
}
else if( j3array[0] < -IKPI )
{    j3array[0]+=IK2PI;
}
j3valid[0] = true;
for(int ij3 = 0; ij3 < 1; ++ij3)
{
if( !j3valid[ij3] )
{
    continue;
}
_ij3[0] = ij3; _ij3[1] = -1;
for(int iij3 = ij3+1; iij3 < 1; ++iij3)
{
if( j3valid[iij3] && IKabs(cj3array[ij3]-cj3array[iij3]) < IKFAST_SOLUTION_THRESH && IKabs(sj3array[ij3]-sj3array[iij3]) < IKFAST_SOLUTION_THRESH )
{
    j3valid[iij3]=false; _ij3[1] = iij3; break; 
}
}
j3 = j3array[ij3]; cj3 = cj3array[ij3]; sj3 = sj3array[ij3];
{
IkReal evalcond[2];
IkReal x951=IKsin(j3);
IkReal x952=IKcos(j3);
IkReal x953=(sj4*x952);
IkReal x954=(cj4*x951);
IkReal x955=(sj4*x951);
IkReal x956=(cj4*x952);
evalcond[0]=((((1.47476155376408e-6)*x952))+(((0.117728070771443)*x953))+(((-0.953912320189798)*x956))+new_r20+(((-0.033809750247604)*x955))+(((0.273949425080978)*x954))+(((5.13522966898714e-6)*x951)));
evalcond[1]=((((-5.13522966898714e-6)*x952))+(((1.47476155376408e-6)*x951))+(((0.117728070771443)*x955))+(((-0.273949425080978)*x956))+(((-0.953912320189798)*x954))+new_r21+(((0.033809750247604)*x953)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j5eval[4];
new_r12=0;
new_r02=0;
IkReal x957=(cj4*new_r10);
IkReal x958=(cj4*new_r00);
IkReal x959=(new_r10*sj4);
IkReal x960=(new_r00*sj4);
j5eval[0]=((((-1.57580374828584)*x960))+(((8.1032363594977)*x957))+(((-1.0)*x959))+(((12.7678698223466)*x958)));
j5eval[1]=2.22745159602622e-15;
j5eval[2]=((1858607432672.9)*cj3*cj4*sj4);
j5eval[3]=IKsign(((((0.837955424564001)*x958))+(((-0.103420015812922)*x960))+(((0.531815483588428)*x957))+(((-0.0656300100348293)*x959))));
if( IKabs(j5eval[0]) < 0.0000010000000000  || IKabs(j5eval[1]) < 0.0000010000000000  || IKabs(j5eval[2]) < 0.0000010000000000  || IKabs(j5eval[3]) < 0.0000010000000000  )
{
{
IkReal j5eval[4];
new_r12=0;
new_r02=0;
IkReal x961=(new_r11*sj4);
IkReal x962=(cj4*new_r11);
IkReal x963=(new_r01*sj4);
IkReal x964=(cj4*new_r01);
j5eval[0]=((((-1.57580374828584)*x963))+(((8.1032363594977)*x962))+(((-1.0)*x961))+(((12.7678698223466)*x964)));
j5eval[1]=IKsign(((((0.837955424564001)*x964))+(((-0.103420015812922)*x963))+(((0.531815483588428)*x962))+(((-0.0656300100348293)*x961))));
j5eval[2]=2.22745159602622e-15;
j5eval[3]=((1858607432672.9)*cj4*sj3*sj4);
if( IKabs(j5eval[0]) < 0.0000010000000000  || IKabs(j5eval[1]) < 0.0000010000000000  || IKabs(j5eval[2]) < 0.0000010000000000  || IKabs(j5eval[3]) < 0.0000010000000000  )
{
{
IkReal j5eval[4];
new_r12=0;
new_r02=0;
IkReal x965=(cj4*new_r00);
IkReal x966=(new_r10*sj4);
IkReal x967=(cj4*new_r10);
IkReal x968=(new_r00*sj4);
j5eval[0]=((((-1.57580374828584)*x966))+(((12.7678698223466)*x967))+(((-8.1032363594977)*x965))+x968);
j5eval[1]=2.22745159602622e-15;
j5eval[2]=((1858607432672.9)*cj3*cj4*sj4);
j5eval[3]=IKsign(((((0.837955424564001)*x967))+(((-0.103420015812922)*x966))+(((-0.531815483588428)*x965))+(((0.0656300100348293)*x968))));
if( IKabs(j5eval[0]) < 0.0000010000000000  || IKabs(j5eval[1]) < 0.0000010000000000  || IKabs(j5eval[2]) < 0.0000010000000000  || IKabs(j5eval[3]) < 0.0000010000000000  )
{
{
IkReal evalcond[1];
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(j4))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j5eval[4];
new_r12=0;
new_r02=0;
sj4=0;
cj4=1.0;
j4=0;
j5eval[0]=((((-1.5756506728798)*new_r00))+(((-1.0)*new_r10)));
j5eval[1]=602796.058909135;
j5eval[2]=((((-1.0)*sj3))+(((3.48207454681763)*cj3)));
j5eval[3]=IKsign(((((-7.67571803157366e+20)*new_r00))+(((-4.87145924137159e+20)*new_r10))));
if( IKabs(j5eval[0]) < 0.0000010000000000  || IKabs(j5eval[1]) < 0.0000010000000000  || IKabs(j5eval[2]) < 0.0000010000000000  || IKabs(j5eval[3]) < 0.0000010000000000  )
{
{
IkReal j5eval[4];
new_r12=0;
new_r02=0;
sj4=0;
cj4=1.0;
j4=0;
j5eval[0]=((((-1.5756506728798)*new_r01))+(((-1.0)*new_r11)));
j5eval[1]=IKsign(((((-7.67571803157366e+20)*new_r01))+(((-4.87145924137159e+20)*new_r11))));
j5eval[2]=602796.058909135;
j5eval[3]=(cj3+(((3.48207454681763)*sj3)));
if( IKabs(j5eval[0]) < 0.0000010000000000  || IKabs(j5eval[1]) < 0.0000010000000000  || IKabs(j5eval[2]) < 0.0000010000000000  || IKabs(j5eval[3]) < 0.0000010000000000  )
{
{
IkReal j5eval[3];
new_r12=0;
new_r02=0;
sj4=0;
cj4=1.0;
j4=0;
j5eval[0]=((((1.5756506728798)*new_r10))+(((-1.0)*new_r00)));
j5eval[1]=IKsign(((((7.67571803157366e+20)*new_r10))+(((-4.87145924137159e+20)*new_r00))));
j5eval[2]=((sj3*sj3)+(((12.1248431495952)*(cj3*cj3)))+(((-6.96414909363526)*cj3*sj3)));
if( IKabs(j5eval[0]) < 0.0000010000000000  || IKabs(j5eval[1]) < 0.0000010000000000  || IKabs(j5eval[2]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j5array[1], cj5array[1], sj5array[1];
bool j5valid[1]={false};
_nj5 = 1;
CheckValue<IkReal> x969 = IKatan2WithCheck(IkReal(((((-4.04149486762137e+20)*sj3))+(((-8.28020203883177e+19)*cj3)))),IkReal(((((6.36798410760785e+20)*sj3))+(((1.30467059140659e+20)*cj3)))),IKFAST_ATAN2_MAGTHRESH);
if(!x969.valid){
continue;
}
CheckValue<IkReal> x970=IKPowWithIntegerCheck(IKsign(((((7.67571803157366e+20)*new_r10))+(((-4.87145924137159e+20)*new_r00)))),-1);
if(!x970.valid){
continue;
}
j5array[0]=((-1.5707963267949)+(x969.value)+(((1.5707963267949)*(x970.value))));
sj5array[0]=IKsin(j5array[0]);
cj5array[0]=IKcos(j5array[0]);
if( j5array[0] > IKPI )
{
    j5array[0]-=IK2PI;
}
else if( j5array[0] < -IKPI )
{    j5array[0]+=IK2PI;
}
j5valid[0] = true;
for(int ij5 = 0; ij5 < 1; ++ij5)
{
if( !j5valid[ij5] )
{
    continue;
}
_ij5[0] = ij5; _ij5[1] = -1;
for(int iij5 = ij5+1; iij5 < 1; ++iij5)
{
if( j5valid[iij5] && IKabs(cj5array[ij5]-cj5array[iij5]) < IKFAST_SOLUTION_THRESH && IKabs(sj5array[ij5]-sj5array[iij5]) < IKFAST_SOLUTION_THRESH )
{
    j5valid[iij5]=false; _ij5[1] = iij5; break; 
}
}
j5 = j5array[ij5]; cj5 = cj5array[ij5]; sj5 = sj5array[ij5];
{
IkReal evalcond[16];
IkReal x971=IKsin(j5);
IkReal x972=IKcos(j5);
IkReal x973=((0.276027873078388)*sj3);
IkReal x974=((0.961149631058464)*cj3);
IkReal x975=((0.961149631058464)*sj3);
IkReal x976=((0.276027873078388)*cj3);
IkReal x977=((0.169973751776694)*sj3);
IkReal x978=((0.531815483588428)*x971);
IkReal x979=(new_r01*x971);
IkReal x980=(new_r01*x972);
IkReal x981=(new_r00*x971);
IkReal x982=(new_r11*x971);
IkReal x983=(sj3*x971);
IkReal x984=(new_r11*x972);
IkReal x985=(new_r10*x972);
IkReal x986=(new_r00*x972);
IkReal x987=(cj3*x972);
IkReal x988=(cj3*x971);
IkReal x989=(sj3*x972);
IkReal x990=(new_r10*x971);
IkReal x991=(x975+x976);
evalcond[0]=((((-0.837955424564001)*x972))+x978);
evalcond[1]=((((0.837955424564001)*x971))+(((0.531815483588428)*x972)));
evalcond[2]=((((-0.829627154282309)*sj3))+(((-0.169973751776694)*cj3))+x985+x981);
evalcond[3]=((((0.829627154282309)*cj3))+x984+x979+(((-1.0)*x977)));
evalcond[4]=((((-1.0)*x990))+x986+(((-0.486485029330234)*sj3))+(((-0.247311590268888)*cj3)));
evalcond[5]=((((-1.0)*x982))+(((0.486485029330234)*cj3))+(((-0.247311590268888)*sj3))+x980);
evalcond[6]=((((-0.837955424564001)*x986))+(((0.531815483588428)*x985))+(((0.837955424564001)*x990))+((new_r00*x978))+(((0.122486725237355)*new_r20)));
evalcond[7]=((((0.837955424564001)*x982))+((new_r01*x978))+(((-0.837955424564001)*x980))+(((0.531815483588428)*x984))+(((0.122486725237355)*new_r21)));
evalcond[8]=((((0.535849798705775)*x990))+(((5.34279939673075e-6)*new_r20))+(((-0.844313326436599)*x985))+(((-0.844313326436599)*x981))+(((-0.535849798705775)*x986))+x991);
evalcond[9]=((((0.535849798705775)*x982))+(((5.34279939673075e-6)*new_r21))+(((-0.844313326436599)*x979))+(((-0.844313326436599)*x984))+(((-0.535849798705775)*x980))+x973+(((-1.0)*x974)));
evalcond[10]=((((0.992470151748698)*new_r20))+(((-0.103420015812922)*x990))+(((0.103420015812922)*x986))+(((-0.0656300100348293)*x985))+(((-0.0656300100348293)*x981))+x973+(((-1.0)*x974)));
evalcond[11]=((((0.992470151748698)*new_r21))+(((-0.103420015812922)*x982))+(((0.103420015812922)*x980))+(((-1.0)*x991))+(((-0.0656300100348293)*x984))+(((-0.0656300100348293)*x979)));
evalcond[12]=((((-0.169973751776694)*x988))+(((-0.486485029330234)*x989))+(((-0.247311590268888)*x987))+new_r00+(((-0.829627154282309)*x983)));
evalcond[13]=((((0.829627154282309)*x988))+(((-1.0)*x971*x977))+(((0.486485029330234)*x987))+(((-0.247311590268888)*x989))+new_r01);
evalcond[14]=((((-0.169973751776694)*x987))+(((0.486485029330234)*x983))+(((0.247311590268888)*x988))+new_r10+(((-0.829627154282309)*x989)));
evalcond[15]=((((0.829627154282309)*x987))+(((0.247311590268888)*x983))+(((-0.486485029330234)*x988))+(((-1.0)*x972*x977))+new_r11);
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[9]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[10]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[11]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[12]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[13]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[14]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[15]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j2;
vinfos[0].indices[0] = _ij2[0];
vinfos[0].indices[1] = _ij2[1];
vinfos[0].maxsolutions = _nj2;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j3;
vinfos[1].indices[0] = _ij3[0];
vinfos[1].indices[1] = _ij3[1];
vinfos[1].maxsolutions = _nj3;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j4;
vinfos[2].indices[0] = _ij4[0];
vinfos[2].indices[1] = _ij4[1];
vinfos[2].maxsolutions = _nj4;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j5;
vinfos[3].indices[0] = _ij5[0];
vinfos[3].indices[1] = _ij5[1];
vinfos[3].maxsolutions = _nj5;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j6;
vinfos[4].indices[0] = _ij6[0];
vinfos[4].indices[1] = _ij6[1];
vinfos[4].maxsolutions = _nj6;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j7;
vinfos[5].indices[0] = _ij7[0];
vinfos[5].indices[1] = _ij7[1];
vinfos[5].maxsolutions = _nj7;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j8;
vinfos[6].indices[0] = _ij8[0];
vinfos[6].indices[1] = _ij8[1];
vinfos[6].maxsolutions = _nj8;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j5array[1], cj5array[1], sj5array[1];
bool j5valid[1]={false};
_nj5 = 1;
CheckValue<IkReal> x992 = IKatan2WithCheck(IkReal(((((6.36798410760785e+20)*cj3))+(((-1.30467059140659e+20)*sj3)))),IkReal(((((-8.28020203883177e+19)*sj3))+(((4.04149486762137e+20)*cj3)))),IKFAST_ATAN2_MAGTHRESH);
if(!x992.valid){
continue;
}
CheckValue<IkReal> x993=IKPowWithIntegerCheck(IKsign(((((-7.67571803157366e+20)*new_r01))+(((-4.87145924137159e+20)*new_r11)))),-1);
if(!x993.valid){
continue;
}
j5array[0]=((-1.5707963267949)+(x992.value)+(((1.5707963267949)*(x993.value))));
sj5array[0]=IKsin(j5array[0]);
cj5array[0]=IKcos(j5array[0]);
if( j5array[0] > IKPI )
{
    j5array[0]-=IK2PI;
}
else if( j5array[0] < -IKPI )
{    j5array[0]+=IK2PI;
}
j5valid[0] = true;
for(int ij5 = 0; ij5 < 1; ++ij5)
{
if( !j5valid[ij5] )
{
    continue;
}
_ij5[0] = ij5; _ij5[1] = -1;
for(int iij5 = ij5+1; iij5 < 1; ++iij5)
{
if( j5valid[iij5] && IKabs(cj5array[ij5]-cj5array[iij5]) < IKFAST_SOLUTION_THRESH && IKabs(sj5array[ij5]-sj5array[iij5]) < IKFAST_SOLUTION_THRESH )
{
    j5valid[iij5]=false; _ij5[1] = iij5; break; 
}
}
j5 = j5array[ij5]; cj5 = cj5array[ij5]; sj5 = sj5array[ij5];
{
IkReal evalcond[16];
IkReal x994=IKsin(j5);
IkReal x995=IKcos(j5);
IkReal x996=((0.276027873078388)*sj3);
IkReal x997=((0.961149631058464)*cj3);
IkReal x998=((0.961149631058464)*sj3);
IkReal x999=((0.276027873078388)*cj3);
IkReal x1000=((0.169973751776694)*sj3);
IkReal x1001=((0.531815483588428)*x994);
IkReal x1002=(new_r01*x994);
IkReal x1003=(new_r01*x995);
IkReal x1004=(new_r00*x994);
IkReal x1005=(new_r11*x994);
IkReal x1006=(sj3*x994);
IkReal x1007=(new_r11*x995);
IkReal x1008=(new_r10*x995);
IkReal x1009=(new_r00*x995);
IkReal x1010=(cj3*x995);
IkReal x1011=(cj3*x994);
IkReal x1012=(sj3*x995);
IkReal x1013=(new_r10*x994);
IkReal x1014=(x999+x998);
evalcond[0]=(x1001+(((-0.837955424564001)*x995)));
evalcond[1]=((((0.531815483588428)*x995))+(((0.837955424564001)*x994)));
evalcond[2]=(x1008+x1004+(((-0.829627154282309)*sj3))+(((-0.169973751776694)*cj3)));
evalcond[3]=(x1007+x1002+(((-1.0)*x1000))+(((0.829627154282309)*cj3)));
evalcond[4]=(x1009+(((-0.486485029330234)*sj3))+(((-0.247311590268888)*cj3))+(((-1.0)*x1013)));
evalcond[5]=((((-1.0)*x1005))+x1003+(((0.486485029330234)*cj3))+(((-0.247311590268888)*sj3)));
evalcond[6]=((((0.531815483588428)*x1008))+(((0.837955424564001)*x1013))+((new_r00*x1001))+(((-0.837955424564001)*x1009))+(((0.122486725237355)*new_r20)));
evalcond[7]=((((0.531815483588428)*x1007))+(((0.837955424564001)*x1005))+((new_r01*x1001))+(((-0.837955424564001)*x1003))+(((0.122486725237355)*new_r21)));
evalcond[8]=(x1014+(((-0.844313326436599)*x1008))+(((-0.844313326436599)*x1004))+(((-0.535849798705775)*x1009))+(((5.34279939673075e-6)*new_r20))+(((0.535849798705775)*x1013)));
evalcond[9]=((((0.535849798705775)*x1005))+(((-0.844313326436599)*x1007))+(((-0.844313326436599)*x1002))+(((-0.535849798705775)*x1003))+(((5.34279939673075e-6)*new_r21))+(((-1.0)*x997))+x996);
evalcond[10]=((((0.992470151748698)*new_r20))+(((-0.0656300100348293)*x1004))+(((-0.0656300100348293)*x1008))+(((0.103420015812922)*x1009))+(((-1.0)*x997))+(((-0.103420015812922)*x1013))+x996);
evalcond[11]=((((0.992470151748698)*new_r21))+(((-0.0656300100348293)*x1002))+(((-0.0656300100348293)*x1007))+(((0.103420015812922)*x1003))+(((-1.0)*x1014))+(((-0.103420015812922)*x1005)));
evalcond[12]=((((-0.486485029330234)*x1012))+(((-0.169973751776694)*x1011))+new_r00+(((-0.247311590268888)*x1010))+(((-0.829627154282309)*x1006)));
evalcond[13]=((((0.829627154282309)*x1011))+(((-1.0)*x1000*x994))+new_r01+(((0.486485029330234)*x1010))+(((-0.247311590268888)*x1012)));
evalcond[14]=((((-0.829627154282309)*x1012))+(((-0.169973751776694)*x1010))+(((0.247311590268888)*x1011))+(((0.486485029330234)*x1006))+new_r10);
evalcond[15]=((((-0.486485029330234)*x1011))+(((0.247311590268888)*x1006))+(((0.829627154282309)*x1010))+(((-1.0)*x1000*x995))+new_r11);
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[9]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[10]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[11]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[12]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[13]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[14]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[15]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j2;
vinfos[0].indices[0] = _ij2[0];
vinfos[0].indices[1] = _ij2[1];
vinfos[0].maxsolutions = _nj2;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j3;
vinfos[1].indices[0] = _ij3[0];
vinfos[1].indices[1] = _ij3[1];
vinfos[1].maxsolutions = _nj3;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j4;
vinfos[2].indices[0] = _ij4[0];
vinfos[2].indices[1] = _ij4[1];
vinfos[2].maxsolutions = _nj4;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j5;
vinfos[3].indices[0] = _ij5[0];
vinfos[3].indices[1] = _ij5[1];
vinfos[3].maxsolutions = _nj5;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j6;
vinfos[4].indices[0] = _ij6[0];
vinfos[4].indices[1] = _ij6[1];
vinfos[4].maxsolutions = _nj6;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j7;
vinfos[5].indices[0] = _ij7[0];
vinfos[5].indices[1] = _ij7[1];
vinfos[5].maxsolutions = _nj7;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j8;
vinfos[6].indices[0] = _ij8[0];
vinfos[6].indices[1] = _ij8[1];
vinfos[6].maxsolutions = _nj8;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j5array[1], cj5array[1], sj5array[1];
bool j5valid[1]={false};
_nj5 = 1;
CheckValue<IkReal> x1015 = IKatan2WithCheck(IkReal(((((-1.30467059140659e+20)*cj3))+(((-6.36798410760785e+20)*sj3)))),IkReal(((((-4.04149486762137e+20)*sj3))+(((-8.28020203883177e+19)*cj3)))),IKFAST_ATAN2_MAGTHRESH);
if(!x1015.valid){
continue;
}
CheckValue<IkReal> x1016=IKPowWithIntegerCheck(IKsign(((((-7.67571803157366e+20)*new_r00))+(((-4.87145924137159e+20)*new_r10)))),-1);
if(!x1016.valid){
continue;
}
j5array[0]=((-1.5707963267949)+(x1015.value)+(((1.5707963267949)*(x1016.value))));
sj5array[0]=IKsin(j5array[0]);
cj5array[0]=IKcos(j5array[0]);
if( j5array[0] > IKPI )
{
    j5array[0]-=IK2PI;
}
else if( j5array[0] < -IKPI )
{    j5array[0]+=IK2PI;
}
j5valid[0] = true;
for(int ij5 = 0; ij5 < 1; ++ij5)
{
if( !j5valid[ij5] )
{
    continue;
}
_ij5[0] = ij5; _ij5[1] = -1;
for(int iij5 = ij5+1; iij5 < 1; ++iij5)
{
if( j5valid[iij5] && IKabs(cj5array[ij5]-cj5array[iij5]) < IKFAST_SOLUTION_THRESH && IKabs(sj5array[ij5]-sj5array[iij5]) < IKFAST_SOLUTION_THRESH )
{
    j5valid[iij5]=false; _ij5[1] = iij5; break; 
}
}
j5 = j5array[ij5]; cj5 = cj5array[ij5]; sj5 = sj5array[ij5];
{
IkReal evalcond[16];
IkReal x1017=IKsin(j5);
IkReal x1018=IKcos(j5);
IkReal x1019=((0.276027873078388)*sj3);
IkReal x1020=((0.961149631058464)*cj3);
IkReal x1021=((0.961149631058464)*sj3);
IkReal x1022=((0.276027873078388)*cj3);
IkReal x1023=((0.169973751776694)*sj3);
IkReal x1024=((0.531815483588428)*x1017);
IkReal x1025=(new_r01*x1017);
IkReal x1026=(new_r01*x1018);
IkReal x1027=(new_r00*x1017);
IkReal x1028=(new_r11*x1017);
IkReal x1029=(sj3*x1017);
IkReal x1030=(new_r11*x1018);
IkReal x1031=(new_r10*x1018);
IkReal x1032=(new_r00*x1018);
IkReal x1033=(cj3*x1018);
IkReal x1034=(cj3*x1017);
IkReal x1035=(sj3*x1018);
IkReal x1036=(new_r10*x1017);
IkReal x1037=(x1021+x1022);
evalcond[0]=(x1024+(((-0.837955424564001)*x1018)));
evalcond[1]=((((0.531815483588428)*x1018))+(((0.837955424564001)*x1017)));
evalcond[2]=(x1031+x1027+(((-0.829627154282309)*sj3))+(((-0.169973751776694)*cj3)));
evalcond[3]=(x1030+x1025+(((0.829627154282309)*cj3))+(((-1.0)*x1023)));
evalcond[4]=(x1032+(((-1.0)*x1036))+(((-0.486485029330234)*sj3))+(((-0.247311590268888)*cj3)));
evalcond[5]=(x1026+(((-1.0)*x1028))+(((0.486485029330234)*cj3))+(((-0.247311590268888)*sj3)));
evalcond[6]=((((-0.837955424564001)*x1032))+(((0.531815483588428)*x1031))+(((0.837955424564001)*x1036))+((new_r00*x1024))+(((0.122486725237355)*new_r20)));
evalcond[7]=((((0.837955424564001)*x1028))+(((0.531815483588428)*x1030))+(((-0.837955424564001)*x1026))+((new_r01*x1024))+(((0.122486725237355)*new_r21)));
evalcond[8]=((((0.535849798705775)*x1036))+x1037+(((-0.844313326436599)*x1031))+(((-0.535849798705775)*x1032))+(((-0.844313326436599)*x1027))+(((5.34279939673075e-6)*new_r20)));
evalcond[9]=((((0.535849798705775)*x1028))+x1019+(((-0.844313326436599)*x1030))+(((-0.844313326436599)*x1025))+(((-1.0)*x1020))+(((5.34279939673075e-6)*new_r21))+(((-0.535849798705775)*x1026)));
evalcond[10]=((((0.992470151748698)*new_r20))+x1019+(((-0.0656300100348293)*x1031))+(((0.103420015812922)*x1032))+(((-0.0656300100348293)*x1027))+(((-1.0)*x1020))+(((-0.103420015812922)*x1036)));
evalcond[11]=((((0.992470151748698)*new_r21))+(((-1.0)*x1037))+(((-0.0656300100348293)*x1030))+(((-0.0656300100348293)*x1025))+(((-0.103420015812922)*x1028))+(((0.103420015812922)*x1026)));
evalcond[12]=((((-0.486485029330234)*x1035))+(((-0.169973751776694)*x1034))+(((-0.247311590268888)*x1033))+new_r00+(((-0.829627154282309)*x1029)));
evalcond[13]=((((0.486485029330234)*x1033))+(((0.829627154282309)*x1034))+(((-0.247311590268888)*x1035))+new_r01+(((-1.0)*x1017*x1023)));
evalcond[14]=((((-0.829627154282309)*x1035))+(((0.486485029330234)*x1029))+(((-0.169973751776694)*x1033))+(((0.247311590268888)*x1034))+new_r10);
evalcond[15]=((((-1.0)*x1018*x1023))+(((-0.486485029330234)*x1034))+(((0.829627154282309)*x1033))+(((0.247311590268888)*x1029))+new_r11);
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[9]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[10]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[11]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[12]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[13]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[14]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[15]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j2;
vinfos[0].indices[0] = _ij2[0];
vinfos[0].indices[1] = _ij2[1];
vinfos[0].maxsolutions = _nj2;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j3;
vinfos[1].indices[0] = _ij3[0];
vinfos[1].indices[1] = _ij3[1];
vinfos[1].maxsolutions = _nj3;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j4;
vinfos[2].indices[0] = _ij4[0];
vinfos[2].indices[1] = _ij4[1];
vinfos[2].maxsolutions = _nj4;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j5;
vinfos[3].indices[0] = _ij5[0];
vinfos[3].indices[1] = _ij5[1];
vinfos[3].maxsolutions = _nj5;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j6;
vinfos[4].indices[0] = _ij6[0];
vinfos[4].indices[1] = _ij6[1];
vinfos[4].maxsolutions = _nj6;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j7;
vinfos[5].indices[0] = _ij7[0];
vinfos[5].indices[1] = _ij7[1];
vinfos[5].maxsolutions = _nj7;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j8;
vinfos[6].indices[0] = _ij8[0];
vinfos[6].indices[1] = _ij8[1];
vinfos[6].maxsolutions = _nj8;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-1.5707963267949)+j4)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j5eval[1];
new_r12=0;
new_r02=0;
sj4=1.0;
cj4=0;
j4=1.5707963267949;
j5eval[0]=((IKabs(((((200587.654117675)*new_r10))+(((-316056.53281807)*new_r00)))))+(IKabs(((((100293.827058838)*new_r00))+(((179896.260310015)*sj3))+(((51663.5292815391)*cj3))+(((158028.266409035)*new_r10))+new_r20))));
if( IKabs(j5eval[0]) < 0.0000000100000000  )
{
{
IkReal j5eval[1];
new_r12=0;
new_r02=0;
sj4=1.0;
cj4=0;
j4=1.5707963267949;
j5eval[0]=((IKabs(((((200587.654117675)*new_r11))+(((-316056.53281807)*new_r01)))))+(IKabs(((((51663.5292815391)*sj3))+(((100293.827058838)*new_r01))+(((158028.266409035)*new_r11))+(((-179896.260310015)*cj3))+new_r21))));
if( IKabs(j5eval[0]) < 0.0000000100000000  )
{
{
IkReal j5eval[1];
new_r12=0;
new_r02=0;
sj4=1.0;
cj4=0;
j4=1.5707963267949;
j5eval[0]=((IKabs(((2.02734260780584e+39)*new_r00)))+(((1.48802788121992e+38)*(IKabs(((((-6.81217950749611)*new_r10))+(((1.89446878412041)*cj3))+(((-6.528161616669)*sj3))))))));
if( IKabs(j5eval[0]) < 0.0000000100000000  )
{
continue; // 3 cases reached

} else
{
IkReal op[2+1], zeror[2];
int numroots;
IkReal x1038=((1.89446878412041)*cj3);
IkReal x1039=((6.81217950749611)*new_r10);
IkReal x1040=((6.528161616669)*sj3);
op[0]=((((-1.0)*x1039))+x1038+(((-1.0)*x1040)));
op[1]=((13.6243590149922)*new_r00);
op[2]=(x1038+x1039+(((-1.0)*x1040)));
polyroots2(op,zeror,numroots);
IkReal j5array[2], cj5array[2], sj5array[2], tempj5array[1];
int numsolutions = 0;
for(int ij5 = 0; ij5 < numroots; ++ij5)
{
IkReal htj5 = zeror[ij5];
tempj5array[0]=((2.0)*(atan(htj5)));
for(int kj5 = 0; kj5 < 1; ++kj5)
{
j5array[numsolutions] = tempj5array[kj5];
if( j5array[numsolutions] > IKPI )
{
    j5array[numsolutions]-=IK2PI;
}
else if( j5array[numsolutions] < -IKPI )
{
    j5array[numsolutions]+=IK2PI;
}
sj5array[numsolutions] = IKsin(j5array[numsolutions]);
cj5array[numsolutions] = IKcos(j5array[numsolutions]);
numsolutions++;
}
}
bool j5valid[2]={true,true};
_nj5 = 2;
for(int ij5 = 0; ij5 < numsolutions; ++ij5)
    {
if( !j5valid[ij5] )
{
    continue;
}
    j5 = j5array[ij5]; cj5 = cj5array[ij5]; sj5 = sj5array[ij5];
htj5 = IKtan(j5/2);

_ij5[0] = ij5; _ij5[1] = -1;
for(int iij5 = ij5+1; iij5 < numsolutions; ++iij5)
{
if( j5valid[iij5] && IKabs(cj5array[ij5]-cj5array[iij5]) < IKFAST_SOLUTION_THRESH && IKabs(sj5array[ij5]-sj5array[iij5]) < IKFAST_SOLUTION_THRESH )
{
    j5valid[iij5]=false; _ij5[1] = iij5; break; 
}
}
{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j2;
vinfos[0].indices[0] = _ij2[0];
vinfos[0].indices[1] = _ij2[1];
vinfos[0].maxsolutions = _nj2;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j3;
vinfos[1].indices[0] = _ij3[0];
vinfos[1].indices[1] = _ij3[1];
vinfos[1].maxsolutions = _nj3;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j4;
vinfos[2].indices[0] = _ij4[0];
vinfos[2].indices[1] = _ij4[1];
vinfos[2].maxsolutions = _nj4;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j5;
vinfos[3].indices[0] = _ij5[0];
vinfos[3].indices[1] = _ij5[1];
vinfos[3].maxsolutions = _nj5;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j6;
vinfos[4].indices[0] = _ij6[0];
vinfos[4].indices[1] = _ij6[1];
vinfos[4].maxsolutions = _nj6;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j7;
vinfos[5].indices[0] = _ij7[0];
vinfos[5].indices[1] = _ij7[1];
vinfos[5].maxsolutions = _nj7;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j8;
vinfos[6].indices[0] = _ij8[0];
vinfos[6].indices[1] = _ij8[1];
vinfos[6].maxsolutions = _nj8;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
    }

}

}

} else
{
IkReal op[2+1], zeror[2];
int numroots;
IkReal x1041=((51663.5292815391)*sj3);
IkReal x1042=((179896.260310015)*cj3);
IkReal x1043=((100293.827058838)*new_r01);
IkReal x1044=((158028.266409035)*new_r11);
IkReal x1045=(x1041+new_r21);
IkReal x1046=(x1043+x1044);
op[0]=(x1046+x1045+(((-1.0)*x1042)));
op[1]=((((200587.654117675)*new_r11))+(((-316056.53281807)*new_r01)));
op[2]=(x1045+(((-1.0)*x1046))+(((-1.0)*x1042)));
polyroots2(op,zeror,numroots);
IkReal j5array[2], cj5array[2], sj5array[2], tempj5array[1];
int numsolutions = 0;
for(int ij5 = 0; ij5 < numroots; ++ij5)
{
IkReal htj5 = zeror[ij5];
tempj5array[0]=((2.0)*(atan(htj5)));
for(int kj5 = 0; kj5 < 1; ++kj5)
{
j5array[numsolutions] = tempj5array[kj5];
if( j5array[numsolutions] > IKPI )
{
    j5array[numsolutions]-=IK2PI;
}
else if( j5array[numsolutions] < -IKPI )
{
    j5array[numsolutions]+=IK2PI;
}
sj5array[numsolutions] = IKsin(j5array[numsolutions]);
cj5array[numsolutions] = IKcos(j5array[numsolutions]);
numsolutions++;
}
}
bool j5valid[2]={true,true};
_nj5 = 2;
for(int ij5 = 0; ij5 < numsolutions; ++ij5)
    {
if( !j5valid[ij5] )
{
    continue;
}
    j5 = j5array[ij5]; cj5 = cj5array[ij5]; sj5 = sj5array[ij5];
htj5 = IKtan(j5/2);

_ij5[0] = ij5; _ij5[1] = -1;
for(int iij5 = ij5+1; iij5 < numsolutions; ++iij5)
{
if( j5valid[iij5] && IKabs(cj5array[ij5]-cj5array[iij5]) < IKFAST_SOLUTION_THRESH && IKabs(sj5array[ij5]-sj5array[iij5]) < IKFAST_SOLUTION_THRESH )
{
    j5valid[iij5]=false; _ij5[1] = iij5; break; 
}
}
{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j2;
vinfos[0].indices[0] = _ij2[0];
vinfos[0].indices[1] = _ij2[1];
vinfos[0].maxsolutions = _nj2;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j3;
vinfos[1].indices[0] = _ij3[0];
vinfos[1].indices[1] = _ij3[1];
vinfos[1].maxsolutions = _nj3;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j4;
vinfos[2].indices[0] = _ij4[0];
vinfos[2].indices[1] = _ij4[1];
vinfos[2].maxsolutions = _nj4;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j5;
vinfos[3].indices[0] = _ij5[0];
vinfos[3].indices[1] = _ij5[1];
vinfos[3].maxsolutions = _nj5;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j6;
vinfos[4].indices[0] = _ij6[0];
vinfos[4].indices[1] = _ij6[1];
vinfos[4].maxsolutions = _nj6;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j7;
vinfos[5].indices[0] = _ij7[0];
vinfos[5].indices[1] = _ij7[1];
vinfos[5].maxsolutions = _nj7;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j8;
vinfos[6].indices[0] = _ij8[0];
vinfos[6].indices[1] = _ij8[1];
vinfos[6].maxsolutions = _nj8;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
    }

}

}

} else
{
IkReal op[2+1], zeror[2];
int numroots;
IkReal x1047=((179896.260310015)*sj3);
IkReal x1048=((51663.5292815391)*cj3);
IkReal x1049=((100293.827058838)*new_r00);
IkReal x1050=((158028.266409035)*new_r10);
IkReal x1051=(x1050+x1049);
IkReal x1052=(x1047+x1048+new_r20);
op[0]=(x1051+x1052);
op[1]=((((200587.654117675)*new_r10))+(((-316056.53281807)*new_r00)));
op[2]=((((-1.0)*x1051))+x1052);
polyroots2(op,zeror,numroots);
IkReal j5array[2], cj5array[2], sj5array[2], tempj5array[1];
int numsolutions = 0;
for(int ij5 = 0; ij5 < numroots; ++ij5)
{
IkReal htj5 = zeror[ij5];
tempj5array[0]=((2.0)*(atan(htj5)));
for(int kj5 = 0; kj5 < 1; ++kj5)
{
j5array[numsolutions] = tempj5array[kj5];
if( j5array[numsolutions] > IKPI )
{
    j5array[numsolutions]-=IK2PI;
}
else if( j5array[numsolutions] < -IKPI )
{
    j5array[numsolutions]+=IK2PI;
}
sj5array[numsolutions] = IKsin(j5array[numsolutions]);
cj5array[numsolutions] = IKcos(j5array[numsolutions]);
numsolutions++;
}
}
bool j5valid[2]={true,true};
_nj5 = 2;
for(int ij5 = 0; ij5 < numsolutions; ++ij5)
    {
if( !j5valid[ij5] )
{
    continue;
}
    j5 = j5array[ij5]; cj5 = cj5array[ij5]; sj5 = sj5array[ij5];
htj5 = IKtan(j5/2);

_ij5[0] = ij5; _ij5[1] = -1;
for(int iij5 = ij5+1; iij5 < numsolutions; ++iij5)
{
if( j5valid[iij5] && IKabs(cj5array[ij5]-cj5array[iij5]) < IKFAST_SOLUTION_THRESH && IKabs(sj5array[ij5]-sj5array[iij5]) < IKFAST_SOLUTION_THRESH )
{
    j5valid[iij5]=false; _ij5[1] = iij5; break; 
}
}
{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j2;
vinfos[0].indices[0] = _ij2[0];
vinfos[0].indices[1] = _ij2[1];
vinfos[0].maxsolutions = _nj2;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j3;
vinfos[1].indices[0] = _ij3[0];
vinfos[1].indices[1] = _ij3[1];
vinfos[1].maxsolutions = _nj3;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j4;
vinfos[2].indices[0] = _ij4[0];
vinfos[2].indices[1] = _ij4[1];
vinfos[2].maxsolutions = _nj4;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j5;
vinfos[3].indices[0] = _ij5[0];
vinfos[3].indices[1] = _ij5[1];
vinfos[3].maxsolutions = _nj5;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j6;
vinfos[4].indices[0] = _ij6[0];
vinfos[4].indices[1] = _ij6[1];
vinfos[4].maxsolutions = _nj6;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j7;
vinfos[5].indices[0] = _ij7[0];
vinfos[5].indices[1] = _ij7[1];
vinfos[5].maxsolutions = _nj7;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j8;
vinfos[6].indices[0] = _ij8[0];
vinfos[6].indices[1] = _ij8[1];
vinfos[6].maxsolutions = _nj8;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
    }

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-3.14159265358979)+j4)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j5eval[4];
new_r12=0;
new_r02=0;
sj4=0;
cj4=-1.0;
j4=3.14159265358979;
j5eval[0]=((((-1.5756506728798)*new_r00))+(((-1.0)*new_r10)));
j5eval[1]=IKsign(((((-7.67571803157366e+20)*new_r00))+(((-4.87145924137159e+20)*new_r10))));
j5eval[2]=602796.058909135;
j5eval[3]=((((-3.48207454681763)*cj3))+sj3);
if( IKabs(j5eval[0]) < 0.0000010000000000  || IKabs(j5eval[1]) < 0.0000010000000000  || IKabs(j5eval[2]) < 0.0000010000000000  || IKabs(j5eval[3]) < 0.0000010000000000  )
{
{
IkReal j5eval[4];
new_r12=0;
new_r02=0;
sj4=0;
cj4=-1.0;
j4=3.14159265358979;
j5eval[0]=((((-1.5756506728798)*new_r01))+(((-1.0)*new_r11)));
j5eval[1]=IKsign(((((-7.67571803157366e+20)*new_r01))+(((-4.87145924137159e+20)*new_r11))));
j5eval[2]=602796.058909135;
j5eval[3]=((((-3.48207454681763)*sj3))+(((-1.0)*cj3)));
if( IKabs(j5eval[0]) < 0.0000010000000000  || IKabs(j5eval[1]) < 0.0000010000000000  || IKabs(j5eval[2]) < 0.0000010000000000  || IKabs(j5eval[3]) < 0.0000010000000000  )
{
{
IkReal j5eval[3];
new_r12=0;
new_r02=0;
sj4=0;
cj4=-1.0;
j4=3.14159265358979;
j5eval[0]=((((1.5756506728798)*new_r10))+(((-1.0)*new_r00)));
j5eval[1]=IKsign(((((7.67571803157366e+20)*new_r10))+(((-4.87145924137159e+20)*new_r00))));
j5eval[2]=((sj3*sj3)+(((12.1248431495952)*(cj3*cj3)))+(((-6.96414909363526)*cj3*sj3)));
if( IKabs(j5eval[0]) < 0.0000010000000000  || IKabs(j5eval[1]) < 0.0000010000000000  || IKabs(j5eval[2]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j5array[1], cj5array[1], sj5array[1];
bool j5valid[1]={false};
_nj5 = 1;
CheckValue<IkReal> x1053 = IKatan2WithCheck(IkReal(((((-1.44260603426447e+20)*cj3))+(((-3.86499496156882e+20)*sj3)))),IkReal(((((2.27304316858926e+20)*cj3))+(((6.08988191187293e+20)*sj3)))),IKFAST_ATAN2_MAGTHRESH);
if(!x1053.valid){
continue;
}
CheckValue<IkReal> x1054=IKPowWithIntegerCheck(IKsign(((((7.67571803157366e+20)*new_r10))+(((-4.87145924137159e+20)*new_r00)))),-1);
if(!x1054.valid){
continue;
}
j5array[0]=((-1.5707963267949)+(x1053.value)+(((1.5707963267949)*(x1054.value))));
sj5array[0]=IKsin(j5array[0]);
cj5array[0]=IKcos(j5array[0]);
if( j5array[0] > IKPI )
{
    j5array[0]-=IK2PI;
}
else if( j5array[0] < -IKPI )
{    j5array[0]+=IK2PI;
}
j5valid[0] = true;
for(int ij5 = 0; ij5 < 1; ++ij5)
{
if( !j5valid[ij5] )
{
    continue;
}
_ij5[0] = ij5; _ij5[1] = -1;
for(int iij5 = ij5+1; iij5 < 1; ++iij5)
{
if( j5valid[iij5] && IKabs(cj5array[ij5]-cj5array[iij5]) < IKFAST_SOLUTION_THRESH && IKabs(sj5array[ij5]-sj5array[iij5]) < IKFAST_SOLUTION_THRESH )
{
    j5valid[iij5]=false; _ij5[1] = iij5; break; 
}
}
j5 = j5array[ij5]; cj5 = cj5array[ij5]; sj5 = sj5array[ij5];
{
IkReal evalcond[16];
IkReal x1055=IKsin(j5);
IkReal x1056=IKcos(j5);
IkReal x1057=((0.276027873078388)*sj3);
IkReal x1058=((0.961149631058464)*cj3);
IkReal x1059=((0.961149631058464)*sj3);
IkReal x1060=((0.276027873078388)*cj3);
IkReal x1061=((0.0485073701835875)*sj3);
IkReal x1062=((0.793395730122254)*cj3);
IkReal x1063=((0.543578643327382)*sj3);
IkReal x1064=((0.793395730122254)*sj3);
IkReal x1065=((0.296134271639373)*sj3);
IkReal x1066=((0.0485073701835875)*cj3);
IkReal x1067=((0.543578643327382)*cj3);
IkReal x1068=((0.296134271639373)*cj3);
IkReal x1069=((0.531815483588428)*x1055);
IkReal x1070=(new_r01*x1055);
IkReal x1071=(new_r00*x1056);
IkReal x1072=(new_r11*x1055);
IkReal x1073=(new_r11*x1056);
IkReal x1074=(new_r01*x1056);
IkReal x1075=(new_r10*x1056);
IkReal x1076=(cj3*x1056);
IkReal x1077=(new_r10*x1055);
IkReal x1078=(new_r00*x1055);
IkReal x1079=(x1059+x1060);
evalcond[0]=((((0.837955424564001)*x1056))+(((-1.0)*x1069)));
evalcond[1]=((((-0.531815483588428)*x1056))+(((-0.837955424564001)*x1055)));
evalcond[2]=(x1078+x1075+(((-1.0)*x1068))+(((-1.0)*x1064)));
evalcond[3]=(x1073+x1070+x1062+(((-1.0)*x1065)));
evalcond[4]=(x1071+(((-1.0)*x1077))+(((-1.0)*x1066))+(((-1.0)*x1063)));
evalcond[5]=(x1074+x1067+(((-1.0)*x1072))+(((-1.0)*x1061)));
evalcond[6]=((((-0.531815483588428)*x1075))+(((-0.837955424564001)*x1077))+(((-1.0)*new_r00*x1069))+(((-0.122486725237355)*new_r20))+(((0.837955424564001)*x1071)));
evalcond[7]=((((-0.531815483588428)*x1073))+(((-0.837955424564001)*x1072))+(((-1.0)*new_r01*x1069))+(((-0.122486725237355)*new_r21))+(((0.837955424564001)*x1074)));
evalcond[8]=(x1079+(((5.34279939673075e-6)*new_r20))+(((-0.535849798705775)*x1071))+(((0.535849798705775)*x1077))+(((-0.844313326436599)*x1078))+(((-0.844313326436599)*x1075)));
evalcond[9]=((((-1.0)*x1058))+x1057+(((5.34279939673075e-6)*new_r21))+(((-0.535849798705775)*x1074))+(((0.535849798705775)*x1072))+(((-0.844313326436599)*x1073))+(((-0.844313326436599)*x1070)));
evalcond[10]=((((-1.0)*x1058))+(((-0.103420015812922)*x1071))+x1057+(((-0.992470151748698)*new_r20))+(((0.0656300100348293)*x1075))+(((0.0656300100348293)*x1078))+(((0.103420015812922)*x1077)));
evalcond[11]=((((-0.103420015812922)*x1074))+(((-0.992470151748698)*new_r21))+(((0.0656300100348293)*x1070))+(((0.0656300100348293)*x1073))+(((0.103420015812922)*x1072))+(((-1.0)*x1079)));
evalcond[12]=((((-1.0)*x1056*x1063))+(((-1.0)*x1056*x1066))+(((-1.0)*x1055*x1064))+(((-1.0)*x1055*x1068))+new_r00);
evalcond[13]=(((x1056*x1067))+((x1055*x1062))+(((-1.0)*x1056*x1061))+(((-1.0)*x1055*x1065))+new_r01);
evalcond[14]=(((x1055*x1066))+((x1055*x1063))+(((-1.0)*x1056*x1064))+(((-1.0)*x1056*x1068))+new_r10);
evalcond[15]=(((x1056*x1062))+((x1055*x1061))+(((-1.0)*x1056*x1065))+(((-1.0)*x1055*x1067))+new_r11);
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[9]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[10]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[11]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[12]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[13]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[14]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[15]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j2;
vinfos[0].indices[0] = _ij2[0];
vinfos[0].indices[1] = _ij2[1];
vinfos[0].maxsolutions = _nj2;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j3;
vinfos[1].indices[0] = _ij3[0];
vinfos[1].indices[1] = _ij3[1];
vinfos[1].maxsolutions = _nj3;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j4;
vinfos[2].indices[0] = _ij4[0];
vinfos[2].indices[1] = _ij4[1];
vinfos[2].maxsolutions = _nj4;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j5;
vinfos[3].indices[0] = _ij5[0];
vinfos[3].indices[1] = _ij5[1];
vinfos[3].maxsolutions = _nj5;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j6;
vinfos[4].indices[0] = _ij6[0];
vinfos[4].indices[1] = _ij6[1];
vinfos[4].maxsolutions = _nj6;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j7;
vinfos[5].indices[0] = _ij7[0];
vinfos[5].indices[1] = _ij7[1];
vinfos[5].maxsolutions = _nj7;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j8;
vinfos[6].indices[0] = _ij8[0];
vinfos[6].indices[1] = _ij8[1];
vinfos[6].maxsolutions = _nj8;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j5array[1], cj5array[1], sj5array[1];
bool j5valid[1]={false};
_nj5 = 1;
CheckValue<IkReal> x1080 = IKatan2WithCheck(IkReal(((((6.08988191187293e+20)*cj3))+(((-2.27304316858926e+20)*sj3)))),IkReal(((((-1.44260603426447e+20)*sj3))+(((3.86499496156882e+20)*cj3)))),IKFAST_ATAN2_MAGTHRESH);
if(!x1080.valid){
continue;
}
CheckValue<IkReal> x1081=IKPowWithIntegerCheck(IKsign(((((-7.67571803157366e+20)*new_r01))+(((-4.87145924137159e+20)*new_r11)))),-1);
if(!x1081.valid){
continue;
}
j5array[0]=((-1.5707963267949)+(x1080.value)+(((1.5707963267949)*(x1081.value))));
sj5array[0]=IKsin(j5array[0]);
cj5array[0]=IKcos(j5array[0]);
if( j5array[0] > IKPI )
{
    j5array[0]-=IK2PI;
}
else if( j5array[0] < -IKPI )
{    j5array[0]+=IK2PI;
}
j5valid[0] = true;
for(int ij5 = 0; ij5 < 1; ++ij5)
{
if( !j5valid[ij5] )
{
    continue;
}
_ij5[0] = ij5; _ij5[1] = -1;
for(int iij5 = ij5+1; iij5 < 1; ++iij5)
{
if( j5valid[iij5] && IKabs(cj5array[ij5]-cj5array[iij5]) < IKFAST_SOLUTION_THRESH && IKabs(sj5array[ij5]-sj5array[iij5]) < IKFAST_SOLUTION_THRESH )
{
    j5valid[iij5]=false; _ij5[1] = iij5; break; 
}
}
j5 = j5array[ij5]; cj5 = cj5array[ij5]; sj5 = sj5array[ij5];
{
IkReal evalcond[16];
IkReal x1082=IKsin(j5);
IkReal x1083=IKcos(j5);
IkReal x1084=((0.276027873078388)*sj3);
IkReal x1085=((0.961149631058464)*cj3);
IkReal x1086=((0.961149631058464)*sj3);
IkReal x1087=((0.276027873078388)*cj3);
IkReal x1088=((0.0485073701835875)*sj3);
IkReal x1089=((0.793395730122254)*cj3);
IkReal x1090=((0.543578643327382)*sj3);
IkReal x1091=((0.793395730122254)*sj3);
IkReal x1092=((0.296134271639373)*sj3);
IkReal x1093=((0.0485073701835875)*cj3);
IkReal x1094=((0.543578643327382)*cj3);
IkReal x1095=((0.296134271639373)*cj3);
IkReal x1096=((0.531815483588428)*x1082);
IkReal x1097=(new_r01*x1082);
IkReal x1098=(new_r00*x1083);
IkReal x1099=(new_r11*x1082);
IkReal x1100=(new_r11*x1083);
IkReal x1101=(new_r01*x1083);
IkReal x1102=(new_r10*x1083);
IkReal x1103=(cj3*x1083);
IkReal x1104=(new_r10*x1082);
IkReal x1105=(new_r00*x1082);
IkReal x1106=(x1087+x1086);
evalcond[0]=((((-1.0)*x1096))+(((0.837955424564001)*x1083)));
evalcond[1]=((((-0.531815483588428)*x1083))+(((-0.837955424564001)*x1082)));
evalcond[2]=(x1105+x1102+(((-1.0)*x1091))+(((-1.0)*x1095)));
evalcond[3]=(x1100+x1097+x1089+(((-1.0)*x1092)));
evalcond[4]=(x1098+(((-1.0)*x1090))+(((-1.0)*x1093))+(((-1.0)*x1104)));
evalcond[5]=(x1101+x1094+(((-1.0)*x1099))+(((-1.0)*x1088)));
evalcond[6]=((((-0.837955424564001)*x1104))+(((-1.0)*new_r00*x1096))+(((0.837955424564001)*x1098))+(((-0.122486725237355)*new_r20))+(((-0.531815483588428)*x1102)));
evalcond[7]=((((-1.0)*new_r01*x1096))+(((-0.122486725237355)*new_r21))+(((0.837955424564001)*x1101))+(((-0.837955424564001)*x1099))+(((-0.531815483588428)*x1100)));
evalcond[8]=((((0.535849798705775)*x1104))+(((-0.844313326436599)*x1105))+(((-0.844313326436599)*x1102))+(((-0.535849798705775)*x1098))+x1106+(((5.34279939673075e-6)*new_r20)));
evalcond[9]=((((-0.844313326436599)*x1100))+x1084+(((0.535849798705775)*x1099))+(((-0.844313326436599)*x1097))+(((5.34279939673075e-6)*new_r21))+(((-0.535849798705775)*x1101))+(((-1.0)*x1085)));
evalcond[10]=(x1084+(((0.0656300100348293)*x1105))+(((0.0656300100348293)*x1102))+(((-0.992470151748698)*new_r20))+(((0.103420015812922)*x1104))+(((-0.103420015812922)*x1098))+(((-1.0)*x1085)));
evalcond[11]=((((0.0656300100348293)*x1100))+(((-0.103420015812922)*x1101))+(((-0.992470151748698)*new_r21))+(((0.0656300100348293)*x1097))+(((-1.0)*x1106))+(((0.103420015812922)*x1099)));
evalcond[12]=((((-1.0)*x1083*x1090))+(((-1.0)*x1083*x1093))+new_r00+(((-1.0)*x1082*x1095))+(((-1.0)*x1082*x1091)));
evalcond[13]=(((x1082*x1089))+((x1083*x1094))+new_r01+(((-1.0)*x1083*x1088))+(((-1.0)*x1082*x1092)));
evalcond[14]=((((-1.0)*x1083*x1095))+(((-1.0)*x1083*x1091))+((x1082*x1090))+((x1082*x1093))+new_r10);
evalcond[15]=(((x1082*x1088))+(((-1.0)*x1083*x1092))+new_r11+(((-1.0)*x1082*x1094))+((x1083*x1089)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[9]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[10]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[11]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[12]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[13]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[14]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[15]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j2;
vinfos[0].indices[0] = _ij2[0];
vinfos[0].indices[1] = _ij2[1];
vinfos[0].maxsolutions = _nj2;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j3;
vinfos[1].indices[0] = _ij3[0];
vinfos[1].indices[1] = _ij3[1];
vinfos[1].maxsolutions = _nj3;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j4;
vinfos[2].indices[0] = _ij4[0];
vinfos[2].indices[1] = _ij4[1];
vinfos[2].maxsolutions = _nj4;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j5;
vinfos[3].indices[0] = _ij5[0];
vinfos[3].indices[1] = _ij5[1];
vinfos[3].maxsolutions = _nj5;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j6;
vinfos[4].indices[0] = _ij6[0];
vinfos[4].indices[1] = _ij6[1];
vinfos[4].maxsolutions = _nj6;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j7;
vinfos[5].indices[0] = _ij7[0];
vinfos[5].indices[1] = _ij7[1];
vinfos[5].maxsolutions = _nj7;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j8;
vinfos[6].indices[0] = _ij8[0];
vinfos[6].indices[1] = _ij8[1];
vinfos[6].maxsolutions = _nj8;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j5array[1], cj5array[1], sj5array[1];
bool j5valid[1]={false};
_nj5 = 1;
CheckValue<IkReal> x1107 = IKatan2WithCheck(IkReal(((((-6.08988191187293e+20)*sj3))+(((-2.27304316858926e+20)*cj3)))),IkReal(((((-1.44260603426447e+20)*cj3))+(((-3.86499496156882e+20)*sj3)))),IKFAST_ATAN2_MAGTHRESH);
if(!x1107.valid){
continue;
}
CheckValue<IkReal> x1108=IKPowWithIntegerCheck(IKsign(((((-7.67571803157366e+20)*new_r00))+(((-4.87145924137159e+20)*new_r10)))),-1);
if(!x1108.valid){
continue;
}
j5array[0]=((-1.5707963267949)+(x1107.value)+(((1.5707963267949)*(x1108.value))));
sj5array[0]=IKsin(j5array[0]);
cj5array[0]=IKcos(j5array[0]);
if( j5array[0] > IKPI )
{
    j5array[0]-=IK2PI;
}
else if( j5array[0] < -IKPI )
{    j5array[0]+=IK2PI;
}
j5valid[0] = true;
for(int ij5 = 0; ij5 < 1; ++ij5)
{
if( !j5valid[ij5] )
{
    continue;
}
_ij5[0] = ij5; _ij5[1] = -1;
for(int iij5 = ij5+1; iij5 < 1; ++iij5)
{
if( j5valid[iij5] && IKabs(cj5array[ij5]-cj5array[iij5]) < IKFAST_SOLUTION_THRESH && IKabs(sj5array[ij5]-sj5array[iij5]) < IKFAST_SOLUTION_THRESH )
{
    j5valid[iij5]=false; _ij5[1] = iij5; break; 
}
}
j5 = j5array[ij5]; cj5 = cj5array[ij5]; sj5 = sj5array[ij5];
{
IkReal evalcond[16];
IkReal x1109=IKsin(j5);
IkReal x1110=IKcos(j5);
IkReal x1111=((0.276027873078388)*sj3);
IkReal x1112=((0.961149631058464)*cj3);
IkReal x1113=((0.961149631058464)*sj3);
IkReal x1114=((0.276027873078388)*cj3);
IkReal x1115=((0.0485073701835875)*sj3);
IkReal x1116=((0.793395730122254)*cj3);
IkReal x1117=((0.543578643327382)*sj3);
IkReal x1118=((0.793395730122254)*sj3);
IkReal x1119=((0.296134271639373)*sj3);
IkReal x1120=((0.0485073701835875)*cj3);
IkReal x1121=((0.543578643327382)*cj3);
IkReal x1122=((0.296134271639373)*cj3);
IkReal x1123=((0.531815483588428)*x1109);
IkReal x1124=(new_r01*x1109);
IkReal x1125=(new_r00*x1110);
IkReal x1126=(new_r11*x1109);
IkReal x1127=(new_r11*x1110);
IkReal x1128=(new_r01*x1110);
IkReal x1129=(new_r10*x1110);
IkReal x1130=(cj3*x1110);
IkReal x1131=(new_r10*x1109);
IkReal x1132=(new_r00*x1109);
IkReal x1133=(x1113+x1114);
evalcond[0]=((((0.837955424564001)*x1110))+(((-1.0)*x1123)));
evalcond[1]=((((-0.837955424564001)*x1109))+(((-0.531815483588428)*x1110)));
evalcond[2]=(x1129+x1132+(((-1.0)*x1122))+(((-1.0)*x1118)));
evalcond[3]=(x1116+x1124+x1127+(((-1.0)*x1119)));
evalcond[4]=(x1125+(((-1.0)*x1120))+(((-1.0)*x1131))+(((-1.0)*x1117)));
evalcond[5]=(x1128+x1121+(((-1.0)*x1126))+(((-1.0)*x1115)));
evalcond[6]=((((-1.0)*new_r00*x1123))+(((-0.837955424564001)*x1131))+(((-0.122486725237355)*new_r20))+(((-0.531815483588428)*x1129))+(((0.837955424564001)*x1125)));
evalcond[7]=((((-1.0)*new_r01*x1123))+(((-0.837955424564001)*x1126))+(((-0.122486725237355)*new_r21))+(((-0.531815483588428)*x1127))+(((0.837955424564001)*x1128)));
evalcond[8]=(x1133+(((0.535849798705775)*x1131))+(((5.34279939673075e-6)*new_r20))+(((-0.535849798705775)*x1125))+(((-0.844313326436599)*x1132))+(((-0.844313326436599)*x1129)));
evalcond[9]=(x1111+(((0.535849798705775)*x1126))+(((5.34279939673075e-6)*new_r21))+(((-0.535849798705775)*x1128))+(((-1.0)*x1112))+(((-0.844313326436599)*x1127))+(((-0.844313326436599)*x1124)));
evalcond[10]=(x1111+(((0.0656300100348293)*x1132))+(((0.0656300100348293)*x1129))+(((-0.992470151748698)*new_r20))+(((0.103420015812922)*x1131))+(((-0.103420015812922)*x1125))+(((-1.0)*x1112)));
evalcond[11]=((((0.0656300100348293)*x1127))+(((0.0656300100348293)*x1124))+(((0.103420015812922)*x1126))+(((-0.992470151748698)*new_r21))+(((-0.103420015812922)*x1128))+(((-1.0)*x1133)));
evalcond[12]=((((-1.0)*x1109*x1118))+(((-1.0)*x1109*x1122))+(((-1.0)*x1110*x1120))+new_r00+(((-1.0)*x1110*x1117)));
evalcond[13]=(((x1109*x1116))+(((-1.0)*x1109*x1119))+((x1110*x1121))+new_r01+(((-1.0)*x1110*x1115)));
evalcond[14]=(((x1109*x1117))+((x1109*x1120))+(((-1.0)*x1110*x1122))+new_r10+(((-1.0)*x1110*x1118)));
evalcond[15]=(((x1109*x1115))+(((-1.0)*x1109*x1121))+((x1110*x1116))+new_r11+(((-1.0)*x1110*x1119)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[9]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[10]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[11]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[12]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[13]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[14]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[15]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j2;
vinfos[0].indices[0] = _ij2[0];
vinfos[0].indices[1] = _ij2[1];
vinfos[0].maxsolutions = _nj2;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j3;
vinfos[1].indices[0] = _ij3[0];
vinfos[1].indices[1] = _ij3[1];
vinfos[1].maxsolutions = _nj3;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j4;
vinfos[2].indices[0] = _ij4[0];
vinfos[2].indices[1] = _ij4[1];
vinfos[2].maxsolutions = _nj4;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j5;
vinfos[3].indices[0] = _ij5[0];
vinfos[3].indices[1] = _ij5[1];
vinfos[3].maxsolutions = _nj5;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j6;
vinfos[4].indices[0] = _ij6[0];
vinfos[4].indices[1] = _ij6[1];
vinfos[4].maxsolutions = _nj6;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j7;
vinfos[5].indices[0] = _ij7[0];
vinfos[5].indices[1] = _ij7[1];
vinfos[5].maxsolutions = _nj7;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j8;
vinfos[6].indices[0] = _ij8[0];
vinfos[6].indices[1] = _ij8[1];
vinfos[6].maxsolutions = _nj8;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((1.5707963267949)+j4)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j5eval[1];
new_r12=0;
new_r02=0;
sj4=-1.0;
cj4=0;
j4=-1.5707963267949;
j5eval[0]=((IKabs(((((200587.654117675)*new_r10))+(((-316056.53281807)*new_r00)))))+(IKabs(((((100293.827058838)*new_r00))+(((179896.260310015)*sj3))+(((51663.5292815391)*cj3))+(((158028.266409035)*new_r10))+new_r20))));
if( IKabs(j5eval[0]) < 0.0000000100000000  )
{
{
IkReal j5eval[1];
new_r12=0;
new_r02=0;
sj4=-1.0;
cj4=0;
j4=-1.5707963267949;
j5eval[0]=((IKabs(((((200587.654117675)*new_r11))+(((-316056.53281807)*new_r01)))))+(IKabs(((((51663.5292815391)*sj3))+(((100293.827058838)*new_r01))+(((158028.266409035)*new_r11))+(((-179896.260310015)*cj3))+new_r21))));
if( IKabs(j5eval[0]) < 0.0000000100000000  )
{
{
IkReal j5eval[1];
new_r12=0;
new_r02=0;
sj4=-1.0;
cj4=0;
j4=-1.5707963267949;
j5eval[0]=((IKabs(((2.02734260780584e+39)*new_r00)))+(((1.48802788121992e+38)*(IKabs(((((-5.06968030951485)*cj3))+(((-6.81217950749611)*new_r10))+(((-4.528161616669)*sj3))))))));
if( IKabs(j5eval[0]) < 0.0000000100000000  )
{
continue; // 3 cases reached

} else
{
IkReal op[2+1], zeror[2];
int numroots;
IkReal x1134=((6.81217950749611)*new_r10);
IkReal x1135=((4.528161616669)*sj3);
IkReal x1136=((5.06968030951485)*cj3);
IkReal x1137=(x1136+x1135);
op[0]=((((-1.0)*x1134))+(((-1.0)*x1137)));
op[1]=((13.6243590149922)*new_r00);
op[2]=(x1134+(((-1.0)*x1137)));
polyroots2(op,zeror,numroots);
IkReal j5array[2], cj5array[2], sj5array[2], tempj5array[1];
int numsolutions = 0;
for(int ij5 = 0; ij5 < numroots; ++ij5)
{
IkReal htj5 = zeror[ij5];
tempj5array[0]=((2.0)*(atan(htj5)));
for(int kj5 = 0; kj5 < 1; ++kj5)
{
j5array[numsolutions] = tempj5array[kj5];
if( j5array[numsolutions] > IKPI )
{
    j5array[numsolutions]-=IK2PI;
}
else if( j5array[numsolutions] < -IKPI )
{
    j5array[numsolutions]+=IK2PI;
}
sj5array[numsolutions] = IKsin(j5array[numsolutions]);
cj5array[numsolutions] = IKcos(j5array[numsolutions]);
numsolutions++;
}
}
bool j5valid[2]={true,true};
_nj5 = 2;
for(int ij5 = 0; ij5 < numsolutions; ++ij5)
    {
if( !j5valid[ij5] )
{
    continue;
}
    j5 = j5array[ij5]; cj5 = cj5array[ij5]; sj5 = sj5array[ij5];
htj5 = IKtan(j5/2);

_ij5[0] = ij5; _ij5[1] = -1;
for(int iij5 = ij5+1; iij5 < numsolutions; ++iij5)
{
if( j5valid[iij5] && IKabs(cj5array[ij5]-cj5array[iij5]) < IKFAST_SOLUTION_THRESH && IKabs(sj5array[ij5]-sj5array[iij5]) < IKFAST_SOLUTION_THRESH )
{
    j5valid[iij5]=false; _ij5[1] = iij5; break; 
}
}
{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j2;
vinfos[0].indices[0] = _ij2[0];
vinfos[0].indices[1] = _ij2[1];
vinfos[0].maxsolutions = _nj2;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j3;
vinfos[1].indices[0] = _ij3[0];
vinfos[1].indices[1] = _ij3[1];
vinfos[1].maxsolutions = _nj3;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j4;
vinfos[2].indices[0] = _ij4[0];
vinfos[2].indices[1] = _ij4[1];
vinfos[2].maxsolutions = _nj4;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j5;
vinfos[3].indices[0] = _ij5[0];
vinfos[3].indices[1] = _ij5[1];
vinfos[3].maxsolutions = _nj5;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j6;
vinfos[4].indices[0] = _ij6[0];
vinfos[4].indices[1] = _ij6[1];
vinfos[4].maxsolutions = _nj6;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j7;
vinfos[5].indices[0] = _ij7[0];
vinfos[5].indices[1] = _ij7[1];
vinfos[5].maxsolutions = _nj7;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j8;
vinfos[6].indices[0] = _ij8[0];
vinfos[6].indices[1] = _ij8[1];
vinfos[6].maxsolutions = _nj8;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
    }

}

}

} else
{
IkReal op[2+1], zeror[2];
int numroots;
IkReal x1138=((51663.5292815391)*sj3);
IkReal x1139=((179896.260310015)*cj3);
IkReal x1140=((100293.827058838)*new_r01);
IkReal x1141=((158028.266409035)*new_r11);
IkReal x1142=(x1138+new_r21);
IkReal x1143=(x1140+x1141);
op[0]=(x1142+x1143+(((-1.0)*x1139)));
op[1]=((((200587.654117675)*new_r11))+(((-316056.53281807)*new_r01)));
op[2]=(x1142+(((-1.0)*x1143))+(((-1.0)*x1139)));
polyroots2(op,zeror,numroots);
IkReal j5array[2], cj5array[2], sj5array[2], tempj5array[1];
int numsolutions = 0;
for(int ij5 = 0; ij5 < numroots; ++ij5)
{
IkReal htj5 = zeror[ij5];
tempj5array[0]=((2.0)*(atan(htj5)));
for(int kj5 = 0; kj5 < 1; ++kj5)
{
j5array[numsolutions] = tempj5array[kj5];
if( j5array[numsolutions] > IKPI )
{
    j5array[numsolutions]-=IK2PI;
}
else if( j5array[numsolutions] < -IKPI )
{
    j5array[numsolutions]+=IK2PI;
}
sj5array[numsolutions] = IKsin(j5array[numsolutions]);
cj5array[numsolutions] = IKcos(j5array[numsolutions]);
numsolutions++;
}
}
bool j5valid[2]={true,true};
_nj5 = 2;
for(int ij5 = 0; ij5 < numsolutions; ++ij5)
    {
if( !j5valid[ij5] )
{
    continue;
}
    j5 = j5array[ij5]; cj5 = cj5array[ij5]; sj5 = sj5array[ij5];
htj5 = IKtan(j5/2);

_ij5[0] = ij5; _ij5[1] = -1;
for(int iij5 = ij5+1; iij5 < numsolutions; ++iij5)
{
if( j5valid[iij5] && IKabs(cj5array[ij5]-cj5array[iij5]) < IKFAST_SOLUTION_THRESH && IKabs(sj5array[ij5]-sj5array[iij5]) < IKFAST_SOLUTION_THRESH )
{
    j5valid[iij5]=false; _ij5[1] = iij5; break; 
}
}
{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j2;
vinfos[0].indices[0] = _ij2[0];
vinfos[0].indices[1] = _ij2[1];
vinfos[0].maxsolutions = _nj2;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j3;
vinfos[1].indices[0] = _ij3[0];
vinfos[1].indices[1] = _ij3[1];
vinfos[1].maxsolutions = _nj3;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j4;
vinfos[2].indices[0] = _ij4[0];
vinfos[2].indices[1] = _ij4[1];
vinfos[2].maxsolutions = _nj4;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j5;
vinfos[3].indices[0] = _ij5[0];
vinfos[3].indices[1] = _ij5[1];
vinfos[3].maxsolutions = _nj5;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j6;
vinfos[4].indices[0] = _ij6[0];
vinfos[4].indices[1] = _ij6[1];
vinfos[4].maxsolutions = _nj6;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j7;
vinfos[5].indices[0] = _ij7[0];
vinfos[5].indices[1] = _ij7[1];
vinfos[5].maxsolutions = _nj7;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j8;
vinfos[6].indices[0] = _ij8[0];
vinfos[6].indices[1] = _ij8[1];
vinfos[6].maxsolutions = _nj8;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
    }

}

}

} else
{
IkReal op[2+1], zeror[2];
int numroots;
IkReal x1144=((179896.260310015)*sj3);
IkReal x1145=((51663.5292815391)*cj3);
IkReal x1146=((100293.827058838)*new_r00);
IkReal x1147=((158028.266409035)*new_r10);
IkReal x1148=(x1146+x1147);
IkReal x1149=(x1144+x1145+new_r20);
op[0]=(x1148+x1149);
op[1]=((((200587.654117675)*new_r10))+(((-316056.53281807)*new_r00)));
op[2]=(x1149+(((-1.0)*x1148)));
polyroots2(op,zeror,numroots);
IkReal j5array[2], cj5array[2], sj5array[2], tempj5array[1];
int numsolutions = 0;
for(int ij5 = 0; ij5 < numroots; ++ij5)
{
IkReal htj5 = zeror[ij5];
tempj5array[0]=((2.0)*(atan(htj5)));
for(int kj5 = 0; kj5 < 1; ++kj5)
{
j5array[numsolutions] = tempj5array[kj5];
if( j5array[numsolutions] > IKPI )
{
    j5array[numsolutions]-=IK2PI;
}
else if( j5array[numsolutions] < -IKPI )
{
    j5array[numsolutions]+=IK2PI;
}
sj5array[numsolutions] = IKsin(j5array[numsolutions]);
cj5array[numsolutions] = IKcos(j5array[numsolutions]);
numsolutions++;
}
}
bool j5valid[2]={true,true};
_nj5 = 2;
for(int ij5 = 0; ij5 < numsolutions; ++ij5)
    {
if( !j5valid[ij5] )
{
    continue;
}
    j5 = j5array[ij5]; cj5 = cj5array[ij5]; sj5 = sj5array[ij5];
htj5 = IKtan(j5/2);

_ij5[0] = ij5; _ij5[1] = -1;
for(int iij5 = ij5+1; iij5 < numsolutions; ++iij5)
{
if( j5valid[iij5] && IKabs(cj5array[ij5]-cj5array[iij5]) < IKFAST_SOLUTION_THRESH && IKabs(sj5array[ij5]-sj5array[iij5]) < IKFAST_SOLUTION_THRESH )
{
    j5valid[iij5]=false; _ij5[1] = iij5; break; 
}
}
{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j2;
vinfos[0].indices[0] = _ij2[0];
vinfos[0].indices[1] = _ij2[1];
vinfos[0].maxsolutions = _nj2;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j3;
vinfos[1].indices[0] = _ij3[0];
vinfos[1].indices[1] = _ij3[1];
vinfos[1].maxsolutions = _nj3;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j4;
vinfos[2].indices[0] = _ij4[0];
vinfos[2].indices[1] = _ij4[1];
vinfos[2].maxsolutions = _nj4;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j5;
vinfos[3].indices[0] = _ij5[0];
vinfos[3].indices[1] = _ij5[1];
vinfos[3].maxsolutions = _nj5;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j6;
vinfos[4].indices[0] = _ij6[0];
vinfos[4].indices[1] = _ij6[1];
vinfos[4].maxsolutions = _nj6;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j7;
vinfos[5].indices[0] = _ij7[0];
vinfos[5].indices[1] = _ij7[1];
vinfos[5].maxsolutions = _nj7;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j8;
vinfos[6].indices[0] = _ij8[0];
vinfos[6].indices[1] = _ij8[1];
vinfos[6].maxsolutions = _nj8;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
    }

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-1.5707963267949)+j3)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j5eval[1];
new_r12=0;
new_r02=0;
sj3=1.0;
cj3=0;
j3=1.5707963267949;
j5eval[0]=((IKabs(((179896.260310015)+(((100293.827058838)*new_r00))+(((158028.266409035)*new_r10))+new_r20)))+(IKabs(((((200587.654117675)*new_r10))+(((-316056.53281807)*new_r00))))));
if( IKabs(j5eval[0]) < 0.0000000100000000  )
{
{
IkReal j5eval[1];
new_r12=0;
new_r02=0;
sj3=1.0;
cj3=0;
j3=1.5707963267949;
j5eval[0]=((IKabs(((51663.5292815391)+(((100293.827058838)*new_r01))+(((158028.266409035)*new_r11))+new_r21)))+(IKabs(((((200587.654117675)*new_r11))+(((-316056.53281807)*new_r01))))));
if( IKabs(j5eval[0]) < 0.0000000100000000  )
{
{
IkReal j5eval[1];
new_r12=0;
new_r02=0;
sj3=1.0;
cj3=0;
j3=1.5707963267949;
j5eval[0]=((IKabs(((724857009.573076)*new_r00)))+(((6565650.44230769)*(IKabs(((-44.7960002133718)+(((-55.2007006725676)*new_r10))+(((-8.1032363594977)*sj4))+(((-1.0)*cj4))))))));
if( IKabs(j5eval[0]) < 0.0000000100000000  )
{
continue; // 3 cases reached

} else
{
IkReal op[2+1], zeror[2];
int numroots;
IkReal x1150=((55.2007006725676)*new_r10);
IkReal x1151=((8.1032363594977)*sj4);
IkReal x1152=((1.0)*cj4);
IkReal x1153=(x1151+x1152);
op[0]=((-44.7960002133718)+(((-1.0)*x1153))+(((-1.0)*x1150)));
op[1]=((110.401401345135)*new_r00);
op[2]=((-44.7960002133718)+x1150+(((-1.0)*x1153)));
polyroots2(op,zeror,numroots);
IkReal j5array[2], cj5array[2], sj5array[2], tempj5array[1];
int numsolutions = 0;
for(int ij5 = 0; ij5 < numroots; ++ij5)
{
IkReal htj5 = zeror[ij5];
tempj5array[0]=((2.0)*(atan(htj5)));
for(int kj5 = 0; kj5 < 1; ++kj5)
{
j5array[numsolutions] = tempj5array[kj5];
if( j5array[numsolutions] > IKPI )
{
    j5array[numsolutions]-=IK2PI;
}
else if( j5array[numsolutions] < -IKPI )
{
    j5array[numsolutions]+=IK2PI;
}
sj5array[numsolutions] = IKsin(j5array[numsolutions]);
cj5array[numsolutions] = IKcos(j5array[numsolutions]);
numsolutions++;
}
}
bool j5valid[2]={true,true};
_nj5 = 2;
for(int ij5 = 0; ij5 < numsolutions; ++ij5)
    {
if( !j5valid[ij5] )
{
    continue;
}
    j5 = j5array[ij5]; cj5 = cj5array[ij5]; sj5 = sj5array[ij5];
htj5 = IKtan(j5/2);

_ij5[0] = ij5; _ij5[1] = -1;
for(int iij5 = ij5+1; iij5 < numsolutions; ++iij5)
{
if( j5valid[iij5] && IKabs(cj5array[ij5]-cj5array[iij5]) < IKFAST_SOLUTION_THRESH && IKabs(sj5array[ij5]-sj5array[iij5]) < IKFAST_SOLUTION_THRESH )
{
    j5valid[iij5]=false; _ij5[1] = iij5; break; 
}
}
{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j2;
vinfos[0].indices[0] = _ij2[0];
vinfos[0].indices[1] = _ij2[1];
vinfos[0].maxsolutions = _nj2;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j3;
vinfos[1].indices[0] = _ij3[0];
vinfos[1].indices[1] = _ij3[1];
vinfos[1].maxsolutions = _nj3;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j4;
vinfos[2].indices[0] = _ij4[0];
vinfos[2].indices[1] = _ij4[1];
vinfos[2].maxsolutions = _nj4;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j5;
vinfos[3].indices[0] = _ij5[0];
vinfos[3].indices[1] = _ij5[1];
vinfos[3].maxsolutions = _nj5;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j6;
vinfos[4].indices[0] = _ij6[0];
vinfos[4].indices[1] = _ij6[1];
vinfos[4].maxsolutions = _nj6;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j7;
vinfos[5].indices[0] = _ij7[0];
vinfos[5].indices[1] = _ij7[1];
vinfos[5].maxsolutions = _nj7;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j8;
vinfos[6].indices[0] = _ij8[0];
vinfos[6].indices[1] = _ij8[1];
vinfos[6].maxsolutions = _nj8;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
    }

}

}

} else
{
IkReal op[2+1], zeror[2];
int numroots;
IkReal x1154=((100293.827058838)*new_r01);
IkReal x1155=((158028.266409035)*new_r11);
IkReal x1156=((51663.5292815391)+new_r21);
IkReal x1157=(x1155+x1154);
op[0]=(x1157+x1156);
op[1]=((((200587.654117675)*new_r11))+(((-316056.53281807)*new_r01)));
op[2]=(x1156+(((-1.0)*x1157)));
polyroots2(op,zeror,numroots);
IkReal j5array[2], cj5array[2], sj5array[2], tempj5array[1];
int numsolutions = 0;
for(int ij5 = 0; ij5 < numroots; ++ij5)
{
IkReal htj5 = zeror[ij5];
tempj5array[0]=((2.0)*(atan(htj5)));
for(int kj5 = 0; kj5 < 1; ++kj5)
{
j5array[numsolutions] = tempj5array[kj5];
if( j5array[numsolutions] > IKPI )
{
    j5array[numsolutions]-=IK2PI;
}
else if( j5array[numsolutions] < -IKPI )
{
    j5array[numsolutions]+=IK2PI;
}
sj5array[numsolutions] = IKsin(j5array[numsolutions]);
cj5array[numsolutions] = IKcos(j5array[numsolutions]);
numsolutions++;
}
}
bool j5valid[2]={true,true};
_nj5 = 2;
for(int ij5 = 0; ij5 < numsolutions; ++ij5)
    {
if( !j5valid[ij5] )
{
    continue;
}
    j5 = j5array[ij5]; cj5 = cj5array[ij5]; sj5 = sj5array[ij5];
htj5 = IKtan(j5/2);

_ij5[0] = ij5; _ij5[1] = -1;
for(int iij5 = ij5+1; iij5 < numsolutions; ++iij5)
{
if( j5valid[iij5] && IKabs(cj5array[ij5]-cj5array[iij5]) < IKFAST_SOLUTION_THRESH && IKabs(sj5array[ij5]-sj5array[iij5]) < IKFAST_SOLUTION_THRESH )
{
    j5valid[iij5]=false; _ij5[1] = iij5; break; 
}
}
{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j2;
vinfos[0].indices[0] = _ij2[0];
vinfos[0].indices[1] = _ij2[1];
vinfos[0].maxsolutions = _nj2;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j3;
vinfos[1].indices[0] = _ij3[0];
vinfos[1].indices[1] = _ij3[1];
vinfos[1].maxsolutions = _nj3;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j4;
vinfos[2].indices[0] = _ij4[0];
vinfos[2].indices[1] = _ij4[1];
vinfos[2].maxsolutions = _nj4;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j5;
vinfos[3].indices[0] = _ij5[0];
vinfos[3].indices[1] = _ij5[1];
vinfos[3].maxsolutions = _nj5;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j6;
vinfos[4].indices[0] = _ij6[0];
vinfos[4].indices[1] = _ij6[1];
vinfos[4].maxsolutions = _nj6;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j7;
vinfos[5].indices[0] = _ij7[0];
vinfos[5].indices[1] = _ij7[1];
vinfos[5].maxsolutions = _nj7;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j8;
vinfos[6].indices[0] = _ij8[0];
vinfos[6].indices[1] = _ij8[1];
vinfos[6].maxsolutions = _nj8;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
    }

}

}

} else
{
IkReal op[2+1], zeror[2];
int numroots;
IkReal x1158=((100293.827058838)*new_r00);
IkReal x1159=((158028.266409035)*new_r10);
IkReal x1160=((179896.260310015)+new_r20);
IkReal x1161=(x1159+x1158);
op[0]=(x1160+x1161);
op[1]=((((200587.654117675)*new_r10))+(((-316056.53281807)*new_r00)));
op[2]=(x1160+(((-1.0)*x1161)));
polyroots2(op,zeror,numroots);
IkReal j5array[2], cj5array[2], sj5array[2], tempj5array[1];
int numsolutions = 0;
for(int ij5 = 0; ij5 < numroots; ++ij5)
{
IkReal htj5 = zeror[ij5];
tempj5array[0]=((2.0)*(atan(htj5)));
for(int kj5 = 0; kj5 < 1; ++kj5)
{
j5array[numsolutions] = tempj5array[kj5];
if( j5array[numsolutions] > IKPI )
{
    j5array[numsolutions]-=IK2PI;
}
else if( j5array[numsolutions] < -IKPI )
{
    j5array[numsolutions]+=IK2PI;
}
sj5array[numsolutions] = IKsin(j5array[numsolutions]);
cj5array[numsolutions] = IKcos(j5array[numsolutions]);
numsolutions++;
}
}
bool j5valid[2]={true,true};
_nj5 = 2;
for(int ij5 = 0; ij5 < numsolutions; ++ij5)
    {
if( !j5valid[ij5] )
{
    continue;
}
    j5 = j5array[ij5]; cj5 = cj5array[ij5]; sj5 = sj5array[ij5];
htj5 = IKtan(j5/2);

_ij5[0] = ij5; _ij5[1] = -1;
for(int iij5 = ij5+1; iij5 < numsolutions; ++iij5)
{
if( j5valid[iij5] && IKabs(cj5array[ij5]-cj5array[iij5]) < IKFAST_SOLUTION_THRESH && IKabs(sj5array[ij5]-sj5array[iij5]) < IKFAST_SOLUTION_THRESH )
{
    j5valid[iij5]=false; _ij5[1] = iij5; break; 
}
}
{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j2;
vinfos[0].indices[0] = _ij2[0];
vinfos[0].indices[1] = _ij2[1];
vinfos[0].maxsolutions = _nj2;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j3;
vinfos[1].indices[0] = _ij3[0];
vinfos[1].indices[1] = _ij3[1];
vinfos[1].maxsolutions = _nj3;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j4;
vinfos[2].indices[0] = _ij4[0];
vinfos[2].indices[1] = _ij4[1];
vinfos[2].maxsolutions = _nj4;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j5;
vinfos[3].indices[0] = _ij5[0];
vinfos[3].indices[1] = _ij5[1];
vinfos[3].maxsolutions = _nj5;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j6;
vinfos[4].indices[0] = _ij6[0];
vinfos[4].indices[1] = _ij6[1];
vinfos[4].maxsolutions = _nj6;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j7;
vinfos[5].indices[0] = _ij7[0];
vinfos[5].indices[1] = _ij7[1];
vinfos[5].maxsolutions = _nj7;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j8;
vinfos[6].indices[0] = _ij8[0];
vinfos[6].indices[1] = _ij8[1];
vinfos[6].maxsolutions = _nj8;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
    }

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((1.5707963267949)+j3)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j5eval[1];
new_r12=0;
new_r02=0;
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
j5eval[0]=((IKabs(((((200587.654117675)*new_r10))+(((-316056.53281807)*new_r00)))))+(IKabs(((-179896.260310015)+(((100293.827058838)*new_r00))+(((158028.266409035)*new_r10))+new_r20))));
if( IKabs(j5eval[0]) < 0.0000000100000000  )
{
{
IkReal j5eval[1];
new_r12=0;
new_r02=0;
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
j5eval[0]=((IKabs(((-51663.5292815391)+(((100293.827058838)*new_r01))+(((158028.266409035)*new_r11))+new_r21)))+(IKabs(((((200587.654117675)*new_r11))+(((-316056.53281807)*new_r01))))));
if( IKabs(j5eval[0]) < 0.0000000100000000  )
{
{
IkReal j5eval[1];
new_r12=0;
new_r02=0;
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
j5eval[0]=((IKabs(((724857009.573076)*new_r00)))+(((6565650.44230769)*(IKabs(((44.7960002133718)+(((8.1032363594977)*sj4))+(((-55.2007006725676)*new_r10))+cj4))))));
if( IKabs(j5eval[0]) < 0.0000000100000000  )
{
continue; // 3 cases reached

} else
{
IkReal op[2+1], zeror[2];
int numroots;
IkReal x1162=((8.1032363594977)*sj4);
IkReal x1163=((55.2007006725676)*new_r10);
IkReal x1164=((44.7960002133718)+x1162+cj4);
op[0]=(x1164+(((-1.0)*x1163)));
op[1]=((110.401401345135)*new_r00);
op[2]=(x1164+x1163);
polyroots2(op,zeror,numroots);
IkReal j5array[2], cj5array[2], sj5array[2], tempj5array[1];
int numsolutions = 0;
for(int ij5 = 0; ij5 < numroots; ++ij5)
{
IkReal htj5 = zeror[ij5];
tempj5array[0]=((2.0)*(atan(htj5)));
for(int kj5 = 0; kj5 < 1; ++kj5)
{
j5array[numsolutions] = tempj5array[kj5];
if( j5array[numsolutions] > IKPI )
{
    j5array[numsolutions]-=IK2PI;
}
else if( j5array[numsolutions] < -IKPI )
{
    j5array[numsolutions]+=IK2PI;
}
sj5array[numsolutions] = IKsin(j5array[numsolutions]);
cj5array[numsolutions] = IKcos(j5array[numsolutions]);
numsolutions++;
}
}
bool j5valid[2]={true,true};
_nj5 = 2;
for(int ij5 = 0; ij5 < numsolutions; ++ij5)
    {
if( !j5valid[ij5] )
{
    continue;
}
    j5 = j5array[ij5]; cj5 = cj5array[ij5]; sj5 = sj5array[ij5];
htj5 = IKtan(j5/2);

_ij5[0] = ij5; _ij5[1] = -1;
for(int iij5 = ij5+1; iij5 < numsolutions; ++iij5)
{
if( j5valid[iij5] && IKabs(cj5array[ij5]-cj5array[iij5]) < IKFAST_SOLUTION_THRESH && IKabs(sj5array[ij5]-sj5array[iij5]) < IKFAST_SOLUTION_THRESH )
{
    j5valid[iij5]=false; _ij5[1] = iij5; break; 
}
}
{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j2;
vinfos[0].indices[0] = _ij2[0];
vinfos[0].indices[1] = _ij2[1];
vinfos[0].maxsolutions = _nj2;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j3;
vinfos[1].indices[0] = _ij3[0];
vinfos[1].indices[1] = _ij3[1];
vinfos[1].maxsolutions = _nj3;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j4;
vinfos[2].indices[0] = _ij4[0];
vinfos[2].indices[1] = _ij4[1];
vinfos[2].maxsolutions = _nj4;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j5;
vinfos[3].indices[0] = _ij5[0];
vinfos[3].indices[1] = _ij5[1];
vinfos[3].maxsolutions = _nj5;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j6;
vinfos[4].indices[0] = _ij6[0];
vinfos[4].indices[1] = _ij6[1];
vinfos[4].maxsolutions = _nj6;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j7;
vinfos[5].indices[0] = _ij7[0];
vinfos[5].indices[1] = _ij7[1];
vinfos[5].maxsolutions = _nj7;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j8;
vinfos[6].indices[0] = _ij8[0];
vinfos[6].indices[1] = _ij8[1];
vinfos[6].maxsolutions = _nj8;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
    }

}

}

} else
{
IkReal op[2+1], zeror[2];
int numroots;
IkReal x1165=((100293.827058838)*new_r01);
IkReal x1166=((158028.266409035)*new_r11);
IkReal x1167=((-51663.5292815391)+new_r21);
IkReal x1168=(x1165+x1166);
op[0]=(x1167+x1168);
op[1]=((((200587.654117675)*new_r11))+(((-316056.53281807)*new_r01)));
op[2]=(x1167+(((-1.0)*x1168)));
polyroots2(op,zeror,numroots);
IkReal j5array[2], cj5array[2], sj5array[2], tempj5array[1];
int numsolutions = 0;
for(int ij5 = 0; ij5 < numroots; ++ij5)
{
IkReal htj5 = zeror[ij5];
tempj5array[0]=((2.0)*(atan(htj5)));
for(int kj5 = 0; kj5 < 1; ++kj5)
{
j5array[numsolutions] = tempj5array[kj5];
if( j5array[numsolutions] > IKPI )
{
    j5array[numsolutions]-=IK2PI;
}
else if( j5array[numsolutions] < -IKPI )
{
    j5array[numsolutions]+=IK2PI;
}
sj5array[numsolutions] = IKsin(j5array[numsolutions]);
cj5array[numsolutions] = IKcos(j5array[numsolutions]);
numsolutions++;
}
}
bool j5valid[2]={true,true};
_nj5 = 2;
for(int ij5 = 0; ij5 < numsolutions; ++ij5)
    {
if( !j5valid[ij5] )
{
    continue;
}
    j5 = j5array[ij5]; cj5 = cj5array[ij5]; sj5 = sj5array[ij5];
htj5 = IKtan(j5/2);

_ij5[0] = ij5; _ij5[1] = -1;
for(int iij5 = ij5+1; iij5 < numsolutions; ++iij5)
{
if( j5valid[iij5] && IKabs(cj5array[ij5]-cj5array[iij5]) < IKFAST_SOLUTION_THRESH && IKabs(sj5array[ij5]-sj5array[iij5]) < IKFAST_SOLUTION_THRESH )
{
    j5valid[iij5]=false; _ij5[1] = iij5; break; 
}
}
{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j2;
vinfos[0].indices[0] = _ij2[0];
vinfos[0].indices[1] = _ij2[1];
vinfos[0].maxsolutions = _nj2;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j3;
vinfos[1].indices[0] = _ij3[0];
vinfos[1].indices[1] = _ij3[1];
vinfos[1].maxsolutions = _nj3;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j4;
vinfos[2].indices[0] = _ij4[0];
vinfos[2].indices[1] = _ij4[1];
vinfos[2].maxsolutions = _nj4;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j5;
vinfos[3].indices[0] = _ij5[0];
vinfos[3].indices[1] = _ij5[1];
vinfos[3].maxsolutions = _nj5;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j6;
vinfos[4].indices[0] = _ij6[0];
vinfos[4].indices[1] = _ij6[1];
vinfos[4].maxsolutions = _nj6;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j7;
vinfos[5].indices[0] = _ij7[0];
vinfos[5].indices[1] = _ij7[1];
vinfos[5].maxsolutions = _nj7;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j8;
vinfos[6].indices[0] = _ij8[0];
vinfos[6].indices[1] = _ij8[1];
vinfos[6].maxsolutions = _nj8;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
    }

}

}

} else
{
IkReal op[2+1], zeror[2];
int numroots;
IkReal x1169=((100293.827058838)*new_r00);
IkReal x1170=((158028.266409035)*new_r10);
IkReal x1171=((-179896.260310015)+new_r20);
IkReal x1172=(x1169+x1170);
op[0]=(x1172+x1171);
op[1]=((((200587.654117675)*new_r10))+(((-316056.53281807)*new_r00)));
op[2]=(x1171+(((-1.0)*x1172)));
polyroots2(op,zeror,numroots);
IkReal j5array[2], cj5array[2], sj5array[2], tempj5array[1];
int numsolutions = 0;
for(int ij5 = 0; ij5 < numroots; ++ij5)
{
IkReal htj5 = zeror[ij5];
tempj5array[0]=((2.0)*(atan(htj5)));
for(int kj5 = 0; kj5 < 1; ++kj5)
{
j5array[numsolutions] = tempj5array[kj5];
if( j5array[numsolutions] > IKPI )
{
    j5array[numsolutions]-=IK2PI;
}
else if( j5array[numsolutions] < -IKPI )
{
    j5array[numsolutions]+=IK2PI;
}
sj5array[numsolutions] = IKsin(j5array[numsolutions]);
cj5array[numsolutions] = IKcos(j5array[numsolutions]);
numsolutions++;
}
}
bool j5valid[2]={true,true};
_nj5 = 2;
for(int ij5 = 0; ij5 < numsolutions; ++ij5)
    {
if( !j5valid[ij5] )
{
    continue;
}
    j5 = j5array[ij5]; cj5 = cj5array[ij5]; sj5 = sj5array[ij5];
htj5 = IKtan(j5/2);

_ij5[0] = ij5; _ij5[1] = -1;
for(int iij5 = ij5+1; iij5 < numsolutions; ++iij5)
{
if( j5valid[iij5] && IKabs(cj5array[ij5]-cj5array[iij5]) < IKFAST_SOLUTION_THRESH && IKabs(sj5array[ij5]-sj5array[iij5]) < IKFAST_SOLUTION_THRESH )
{
    j5valid[iij5]=false; _ij5[1] = iij5; break; 
}
}
{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j2;
vinfos[0].indices[0] = _ij2[0];
vinfos[0].indices[1] = _ij2[1];
vinfos[0].maxsolutions = _nj2;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j3;
vinfos[1].indices[0] = _ij3[0];
vinfos[1].indices[1] = _ij3[1];
vinfos[1].maxsolutions = _nj3;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j4;
vinfos[2].indices[0] = _ij4[0];
vinfos[2].indices[1] = _ij4[1];
vinfos[2].maxsolutions = _nj4;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j5;
vinfos[3].indices[0] = _ij5[0];
vinfos[3].indices[1] = _ij5[1];
vinfos[3].maxsolutions = _nj5;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j6;
vinfos[4].indices[0] = _ij6[0];
vinfos[4].indices[1] = _ij6[1];
vinfos[4].maxsolutions = _nj6;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j7;
vinfos[5].indices[0] = _ij7[0];
vinfos[5].indices[1] = _ij7[1];
vinfos[5].maxsolutions = _nj7;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j8;
vinfos[6].indices[0] = _ij8[0];
vinfos[6].indices[1] = _ij8[1];
vinfos[6].maxsolutions = _nj8;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
    }

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(j3))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j5eval[1];
new_r12=0;
new_r02=0;
sj3=0;
cj3=1.0;
j3=0;
j5eval[0]=((IKabs(((((200587.654117675)*new_r10))+(((-316056.53281807)*new_r00)))))+(IKabs(((51663.5292815391)+(((100293.827058838)*new_r00))+(((158028.266409035)*new_r10))+new_r20))));
if( IKabs(j5eval[0]) < 0.0000000100000000  )
{
{
IkReal j5eval[1];
new_r12=0;
new_r02=0;
sj3=0;
cj3=1.0;
j3=0;
j5eval[0]=((IKabs(((-179896.260310015)+(((100293.827058838)*new_r01))+(((158028.266409035)*new_r11))+new_r21)))+(IKabs(((((200587.654117675)*new_r11))+(((-316056.53281807)*new_r01))))));
if( IKabs(j5eval[0]) < 0.0000000100000000  )
{
{
IkReal j5eval[1];
new_r12=0;
new_r02=0;
sj3=0;
cj3=1.0;
j3=0;
j5eval[0]=((IKabs(((724857009.573076)*new_r00)))+(((22862084.2884615)*(IKabs(((-3.69456327481377)+(((8.1032363594977)*sj4))+cj4+(((-15.8528199010033)*new_r10))))))));
if( IKabs(j5eval[0]) < 0.0000000100000000  )
{
continue; // 3 cases reached

} else
{
IkReal op[2+1], zeror[2];
int numroots;
IkReal x1173=((8.1032363594977)*sj4);
IkReal x1174=((15.8528199010033)*new_r10);
IkReal x1175=((-3.69456327481377)+x1173+cj4);
op[0]=(x1175+(((-1.0)*x1174)));
op[1]=((31.7056398020066)*new_r00);
op[2]=(x1175+x1174);
polyroots2(op,zeror,numroots);
IkReal j5array[2], cj5array[2], sj5array[2], tempj5array[1];
int numsolutions = 0;
for(int ij5 = 0; ij5 < numroots; ++ij5)
{
IkReal htj5 = zeror[ij5];
tempj5array[0]=((2.0)*(atan(htj5)));
for(int kj5 = 0; kj5 < 1; ++kj5)
{
j5array[numsolutions] = tempj5array[kj5];
if( j5array[numsolutions] > IKPI )
{
    j5array[numsolutions]-=IK2PI;
}
else if( j5array[numsolutions] < -IKPI )
{
    j5array[numsolutions]+=IK2PI;
}
sj5array[numsolutions] = IKsin(j5array[numsolutions]);
cj5array[numsolutions] = IKcos(j5array[numsolutions]);
numsolutions++;
}
}
bool j5valid[2]={true,true};
_nj5 = 2;
for(int ij5 = 0; ij5 < numsolutions; ++ij5)
    {
if( !j5valid[ij5] )
{
    continue;
}
    j5 = j5array[ij5]; cj5 = cj5array[ij5]; sj5 = sj5array[ij5];
htj5 = IKtan(j5/2);

_ij5[0] = ij5; _ij5[1] = -1;
for(int iij5 = ij5+1; iij5 < numsolutions; ++iij5)
{
if( j5valid[iij5] && IKabs(cj5array[ij5]-cj5array[iij5]) < IKFAST_SOLUTION_THRESH && IKabs(sj5array[ij5]-sj5array[iij5]) < IKFAST_SOLUTION_THRESH )
{
    j5valid[iij5]=false; _ij5[1] = iij5; break; 
}
}
{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j2;
vinfos[0].indices[0] = _ij2[0];
vinfos[0].indices[1] = _ij2[1];
vinfos[0].maxsolutions = _nj2;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j3;
vinfos[1].indices[0] = _ij3[0];
vinfos[1].indices[1] = _ij3[1];
vinfos[1].maxsolutions = _nj3;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j4;
vinfos[2].indices[0] = _ij4[0];
vinfos[2].indices[1] = _ij4[1];
vinfos[2].maxsolutions = _nj4;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j5;
vinfos[3].indices[0] = _ij5[0];
vinfos[3].indices[1] = _ij5[1];
vinfos[3].maxsolutions = _nj5;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j6;
vinfos[4].indices[0] = _ij6[0];
vinfos[4].indices[1] = _ij6[1];
vinfos[4].maxsolutions = _nj6;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j7;
vinfos[5].indices[0] = _ij7[0];
vinfos[5].indices[1] = _ij7[1];
vinfos[5].maxsolutions = _nj7;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j8;
vinfos[6].indices[0] = _ij8[0];
vinfos[6].indices[1] = _ij8[1];
vinfos[6].maxsolutions = _nj8;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
    }

}

}

} else
{
IkReal op[2+1], zeror[2];
int numroots;
IkReal x1176=((100293.827058838)*new_r01);
IkReal x1177=((158028.266409035)*new_r11);
IkReal x1178=((-179896.260310015)+new_r21);
IkReal x1179=(x1177+x1176);
op[0]=(x1179+x1178);
op[1]=((((200587.654117675)*new_r11))+(((-316056.53281807)*new_r01)));
op[2]=(x1178+(((-1.0)*x1179)));
polyroots2(op,zeror,numroots);
IkReal j5array[2], cj5array[2], sj5array[2], tempj5array[1];
int numsolutions = 0;
for(int ij5 = 0; ij5 < numroots; ++ij5)
{
IkReal htj5 = zeror[ij5];
tempj5array[0]=((2.0)*(atan(htj5)));
for(int kj5 = 0; kj5 < 1; ++kj5)
{
j5array[numsolutions] = tempj5array[kj5];
if( j5array[numsolutions] > IKPI )
{
    j5array[numsolutions]-=IK2PI;
}
else if( j5array[numsolutions] < -IKPI )
{
    j5array[numsolutions]+=IK2PI;
}
sj5array[numsolutions] = IKsin(j5array[numsolutions]);
cj5array[numsolutions] = IKcos(j5array[numsolutions]);
numsolutions++;
}
}
bool j5valid[2]={true,true};
_nj5 = 2;
for(int ij5 = 0; ij5 < numsolutions; ++ij5)
    {
if( !j5valid[ij5] )
{
    continue;
}
    j5 = j5array[ij5]; cj5 = cj5array[ij5]; sj5 = sj5array[ij5];
htj5 = IKtan(j5/2);

_ij5[0] = ij5; _ij5[1] = -1;
for(int iij5 = ij5+1; iij5 < numsolutions; ++iij5)
{
if( j5valid[iij5] && IKabs(cj5array[ij5]-cj5array[iij5]) < IKFAST_SOLUTION_THRESH && IKabs(sj5array[ij5]-sj5array[iij5]) < IKFAST_SOLUTION_THRESH )
{
    j5valid[iij5]=false; _ij5[1] = iij5; break; 
}
}
{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j2;
vinfos[0].indices[0] = _ij2[0];
vinfos[0].indices[1] = _ij2[1];
vinfos[0].maxsolutions = _nj2;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j3;
vinfos[1].indices[0] = _ij3[0];
vinfos[1].indices[1] = _ij3[1];
vinfos[1].maxsolutions = _nj3;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j4;
vinfos[2].indices[0] = _ij4[0];
vinfos[2].indices[1] = _ij4[1];
vinfos[2].maxsolutions = _nj4;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j5;
vinfos[3].indices[0] = _ij5[0];
vinfos[3].indices[1] = _ij5[1];
vinfos[3].maxsolutions = _nj5;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j6;
vinfos[4].indices[0] = _ij6[0];
vinfos[4].indices[1] = _ij6[1];
vinfos[4].maxsolutions = _nj6;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j7;
vinfos[5].indices[0] = _ij7[0];
vinfos[5].indices[1] = _ij7[1];
vinfos[5].maxsolutions = _nj7;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j8;
vinfos[6].indices[0] = _ij8[0];
vinfos[6].indices[1] = _ij8[1];
vinfos[6].maxsolutions = _nj8;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
    }

}

}

} else
{
IkReal op[2+1], zeror[2];
int numroots;
IkReal x1180=((100293.827058838)*new_r00);
IkReal x1181=((158028.266409035)*new_r10);
IkReal x1182=((51663.5292815391)+new_r20);
IkReal x1183=(x1180+x1181);
op[0]=(x1182+x1183);
op[1]=((((200587.654117675)*new_r10))+(((-316056.53281807)*new_r00)));
op[2]=(x1182+(((-1.0)*x1183)));
polyroots2(op,zeror,numroots);
IkReal j5array[2], cj5array[2], sj5array[2], tempj5array[1];
int numsolutions = 0;
for(int ij5 = 0; ij5 < numroots; ++ij5)
{
IkReal htj5 = zeror[ij5];
tempj5array[0]=((2.0)*(atan(htj5)));
for(int kj5 = 0; kj5 < 1; ++kj5)
{
j5array[numsolutions] = tempj5array[kj5];
if( j5array[numsolutions] > IKPI )
{
    j5array[numsolutions]-=IK2PI;
}
else if( j5array[numsolutions] < -IKPI )
{
    j5array[numsolutions]+=IK2PI;
}
sj5array[numsolutions] = IKsin(j5array[numsolutions]);
cj5array[numsolutions] = IKcos(j5array[numsolutions]);
numsolutions++;
}
}
bool j5valid[2]={true,true};
_nj5 = 2;
for(int ij5 = 0; ij5 < numsolutions; ++ij5)
    {
if( !j5valid[ij5] )
{
    continue;
}
    j5 = j5array[ij5]; cj5 = cj5array[ij5]; sj5 = sj5array[ij5];
htj5 = IKtan(j5/2);

_ij5[0] = ij5; _ij5[1] = -1;
for(int iij5 = ij5+1; iij5 < numsolutions; ++iij5)
{
if( j5valid[iij5] && IKabs(cj5array[ij5]-cj5array[iij5]) < IKFAST_SOLUTION_THRESH && IKabs(sj5array[ij5]-sj5array[iij5]) < IKFAST_SOLUTION_THRESH )
{
    j5valid[iij5]=false; _ij5[1] = iij5; break; 
}
}
{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j2;
vinfos[0].indices[0] = _ij2[0];
vinfos[0].indices[1] = _ij2[1];
vinfos[0].maxsolutions = _nj2;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j3;
vinfos[1].indices[0] = _ij3[0];
vinfos[1].indices[1] = _ij3[1];
vinfos[1].maxsolutions = _nj3;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j4;
vinfos[2].indices[0] = _ij4[0];
vinfos[2].indices[1] = _ij4[1];
vinfos[2].maxsolutions = _nj4;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j5;
vinfos[3].indices[0] = _ij5[0];
vinfos[3].indices[1] = _ij5[1];
vinfos[3].maxsolutions = _nj5;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j6;
vinfos[4].indices[0] = _ij6[0];
vinfos[4].indices[1] = _ij6[1];
vinfos[4].maxsolutions = _nj6;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j7;
vinfos[5].indices[0] = _ij7[0];
vinfos[5].indices[1] = _ij7[1];
vinfos[5].maxsolutions = _nj7;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j8;
vinfos[6].indices[0] = _ij8[0];
vinfos[6].indices[1] = _ij8[1];
vinfos[6].maxsolutions = _nj8;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
    }

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-3.14159265358979)+j3)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j5eval[1];
new_r12=0;
new_r02=0;
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
j5eval[0]=((IKabs(((((200587.654117675)*new_r10))+(((-316056.53281807)*new_r00)))))+(IKabs(((-51663.5292815391)+(((100293.827058838)*new_r00))+(((158028.266409035)*new_r10))+new_r20))));
if( IKabs(j5eval[0]) < 0.0000000100000000  )
{
{
IkReal j5eval[1];
new_r12=0;
new_r02=0;
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
j5eval[0]=((IKabs(((179896.260310015)+(((100293.827058838)*new_r01))+(((158028.266409035)*new_r11))+new_r21)))+(IKabs(((((200587.654117675)*new_r11))+(((-316056.53281807)*new_r01))))));
if( IKabs(j5eval[0]) < 0.0000000100000000  )
{
{
IkReal j5eval[1];
new_r12=0;
new_r02=0;
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
j5eval[0]=((IKabs(((724857009.573076)*new_r00)))+(((22862084.2884615)*(IKabs(((3.69456327481377)+(((-8.1032363594977)*sj4))+(((-15.8528199010033)*new_r10))+(((-1.0)*cj4))))))));
if( IKabs(j5eval[0]) < 0.0000000100000000  )
{
continue; // 3 cases reached

} else
{
IkReal op[2+1], zeror[2];
int numroots;
IkReal x1184=((15.8528199010033)*new_r10);
IkReal x1185=((8.1032363594977)*sj4);
IkReal x1186=((1.0)*cj4);
IkReal x1187=(x1186+x1185);
op[0]=((3.69456327481377)+(((-1.0)*x1184))+(((-1.0)*x1187)));
op[1]=((31.7056398020066)*new_r00);
op[2]=((3.69456327481377)+x1184+(((-1.0)*x1187)));
polyroots2(op,zeror,numroots);
IkReal j5array[2], cj5array[2], sj5array[2], tempj5array[1];
int numsolutions = 0;
for(int ij5 = 0; ij5 < numroots; ++ij5)
{
IkReal htj5 = zeror[ij5];
tempj5array[0]=((2.0)*(atan(htj5)));
for(int kj5 = 0; kj5 < 1; ++kj5)
{
j5array[numsolutions] = tempj5array[kj5];
if( j5array[numsolutions] > IKPI )
{
    j5array[numsolutions]-=IK2PI;
}
else if( j5array[numsolutions] < -IKPI )
{
    j5array[numsolutions]+=IK2PI;
}
sj5array[numsolutions] = IKsin(j5array[numsolutions]);
cj5array[numsolutions] = IKcos(j5array[numsolutions]);
numsolutions++;
}
}
bool j5valid[2]={true,true};
_nj5 = 2;
for(int ij5 = 0; ij5 < numsolutions; ++ij5)
    {
if( !j5valid[ij5] )
{
    continue;
}
    j5 = j5array[ij5]; cj5 = cj5array[ij5]; sj5 = sj5array[ij5];
htj5 = IKtan(j5/2);

_ij5[0] = ij5; _ij5[1] = -1;
for(int iij5 = ij5+1; iij5 < numsolutions; ++iij5)
{
if( j5valid[iij5] && IKabs(cj5array[ij5]-cj5array[iij5]) < IKFAST_SOLUTION_THRESH && IKabs(sj5array[ij5]-sj5array[iij5]) < IKFAST_SOLUTION_THRESH )
{
    j5valid[iij5]=false; _ij5[1] = iij5; break; 
}
}
{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j2;
vinfos[0].indices[0] = _ij2[0];
vinfos[0].indices[1] = _ij2[1];
vinfos[0].maxsolutions = _nj2;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j3;
vinfos[1].indices[0] = _ij3[0];
vinfos[1].indices[1] = _ij3[1];
vinfos[1].maxsolutions = _nj3;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j4;
vinfos[2].indices[0] = _ij4[0];
vinfos[2].indices[1] = _ij4[1];
vinfos[2].maxsolutions = _nj4;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j5;
vinfos[3].indices[0] = _ij5[0];
vinfos[3].indices[1] = _ij5[1];
vinfos[3].maxsolutions = _nj5;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j6;
vinfos[4].indices[0] = _ij6[0];
vinfos[4].indices[1] = _ij6[1];
vinfos[4].maxsolutions = _nj6;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j7;
vinfos[5].indices[0] = _ij7[0];
vinfos[5].indices[1] = _ij7[1];
vinfos[5].maxsolutions = _nj7;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j8;
vinfos[6].indices[0] = _ij8[0];
vinfos[6].indices[1] = _ij8[1];
vinfos[6].maxsolutions = _nj8;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
    }

}

}

} else
{
IkReal op[2+1], zeror[2];
int numroots;
IkReal x1188=((100293.827058838)*new_r01);
IkReal x1189=((158028.266409035)*new_r11);
IkReal x1190=((179896.260310015)+new_r21);
IkReal x1191=(x1188+x1189);
op[0]=(x1191+x1190);
op[1]=((((200587.654117675)*new_r11))+(((-316056.53281807)*new_r01)));
op[2]=(x1190+(((-1.0)*x1191)));
polyroots2(op,zeror,numroots);
IkReal j5array[2], cj5array[2], sj5array[2], tempj5array[1];
int numsolutions = 0;
for(int ij5 = 0; ij5 < numroots; ++ij5)
{
IkReal htj5 = zeror[ij5];
tempj5array[0]=((2.0)*(atan(htj5)));
for(int kj5 = 0; kj5 < 1; ++kj5)
{
j5array[numsolutions] = tempj5array[kj5];
if( j5array[numsolutions] > IKPI )
{
    j5array[numsolutions]-=IK2PI;
}
else if( j5array[numsolutions] < -IKPI )
{
    j5array[numsolutions]+=IK2PI;
}
sj5array[numsolutions] = IKsin(j5array[numsolutions]);
cj5array[numsolutions] = IKcos(j5array[numsolutions]);
numsolutions++;
}
}
bool j5valid[2]={true,true};
_nj5 = 2;
for(int ij5 = 0; ij5 < numsolutions; ++ij5)
    {
if( !j5valid[ij5] )
{
    continue;
}
    j5 = j5array[ij5]; cj5 = cj5array[ij5]; sj5 = sj5array[ij5];
htj5 = IKtan(j5/2);

_ij5[0] = ij5; _ij5[1] = -1;
for(int iij5 = ij5+1; iij5 < numsolutions; ++iij5)
{
if( j5valid[iij5] && IKabs(cj5array[ij5]-cj5array[iij5]) < IKFAST_SOLUTION_THRESH && IKabs(sj5array[ij5]-sj5array[iij5]) < IKFAST_SOLUTION_THRESH )
{
    j5valid[iij5]=false; _ij5[1] = iij5; break; 
}
}
{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j2;
vinfos[0].indices[0] = _ij2[0];
vinfos[0].indices[1] = _ij2[1];
vinfos[0].maxsolutions = _nj2;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j3;
vinfos[1].indices[0] = _ij3[0];
vinfos[1].indices[1] = _ij3[1];
vinfos[1].maxsolutions = _nj3;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j4;
vinfos[2].indices[0] = _ij4[0];
vinfos[2].indices[1] = _ij4[1];
vinfos[2].maxsolutions = _nj4;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j5;
vinfos[3].indices[0] = _ij5[0];
vinfos[3].indices[1] = _ij5[1];
vinfos[3].maxsolutions = _nj5;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j6;
vinfos[4].indices[0] = _ij6[0];
vinfos[4].indices[1] = _ij6[1];
vinfos[4].maxsolutions = _nj6;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j7;
vinfos[5].indices[0] = _ij7[0];
vinfos[5].indices[1] = _ij7[1];
vinfos[5].maxsolutions = _nj7;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j8;
vinfos[6].indices[0] = _ij8[0];
vinfos[6].indices[1] = _ij8[1];
vinfos[6].maxsolutions = _nj8;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
    }

}

}

} else
{
IkReal op[2+1], zeror[2];
int numroots;
IkReal x1192=((100293.827058838)*new_r00);
IkReal x1193=((158028.266409035)*new_r10);
IkReal x1194=((-51663.5292815391)+new_r20);
IkReal x1195=(x1193+x1192);
op[0]=(x1195+x1194);
op[1]=((((200587.654117675)*new_r10))+(((-316056.53281807)*new_r00)));
op[2]=(x1194+(((-1.0)*x1195)));
polyroots2(op,zeror,numroots);
IkReal j5array[2], cj5array[2], sj5array[2], tempj5array[1];
int numsolutions = 0;
for(int ij5 = 0; ij5 < numroots; ++ij5)
{
IkReal htj5 = zeror[ij5];
tempj5array[0]=((2.0)*(atan(htj5)));
for(int kj5 = 0; kj5 < 1; ++kj5)
{
j5array[numsolutions] = tempj5array[kj5];
if( j5array[numsolutions] > IKPI )
{
    j5array[numsolutions]-=IK2PI;
}
else if( j5array[numsolutions] < -IKPI )
{
    j5array[numsolutions]+=IK2PI;
}
sj5array[numsolutions] = IKsin(j5array[numsolutions]);
cj5array[numsolutions] = IKcos(j5array[numsolutions]);
numsolutions++;
}
}
bool j5valid[2]={true,true};
_nj5 = 2;
for(int ij5 = 0; ij5 < numsolutions; ++ij5)
    {
if( !j5valid[ij5] )
{
    continue;
}
    j5 = j5array[ij5]; cj5 = cj5array[ij5]; sj5 = sj5array[ij5];
htj5 = IKtan(j5/2);

_ij5[0] = ij5; _ij5[1] = -1;
for(int iij5 = ij5+1; iij5 < numsolutions; ++iij5)
{
if( j5valid[iij5] && IKabs(cj5array[ij5]-cj5array[iij5]) < IKFAST_SOLUTION_THRESH && IKabs(sj5array[ij5]-sj5array[iij5]) < IKFAST_SOLUTION_THRESH )
{
    j5valid[iij5]=false; _ij5[1] = iij5; break; 
}
}
{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j2;
vinfos[0].indices[0] = _ij2[0];
vinfos[0].indices[1] = _ij2[1];
vinfos[0].maxsolutions = _nj2;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j3;
vinfos[1].indices[0] = _ij3[0];
vinfos[1].indices[1] = _ij3[1];
vinfos[1].maxsolutions = _nj3;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j4;
vinfos[2].indices[0] = _ij4[0];
vinfos[2].indices[1] = _ij4[1];
vinfos[2].maxsolutions = _nj4;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j5;
vinfos[3].indices[0] = _ij5[0];
vinfos[3].indices[1] = _ij5[1];
vinfos[3].maxsolutions = _nj5;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j6;
vinfos[4].indices[0] = _ij6[0];
vinfos[4].indices[1] = _ij6[1];
vinfos[4].maxsolutions = _nj6;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j7;
vinfos[5].indices[0] = _ij7[0];
vinfos[5].indices[1] = _ij7[1];
vinfos[5].maxsolutions = _nj7;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j8;
vinfos[6].indices[0] = _ij8[0];
vinfos[6].indices[1] = _ij8[1];
vinfos[6].maxsolutions = _nj8;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
    }

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
if( 1 )
{
bgotonextstatement=false;
continue; // branch miss [j5]

}
} while(0);
if( bgotonextstatement )
{
}
}
}
}
}
}
}
}
}
}

} else
{
{
IkReal j5array[1], cj5array[1], sj5array[1];
bool j5valid[1]={false};
_nj5 = 1;
IkReal x1196=cj4*cj4;
IkReal x1197=(cj3*sj4);
IkReal x1198=(cj4*sj3);
IkReal x1199=(sj3*sj4);
IkReal x1200=(cj3*cj4);
IkReal x1201=(cj3*x1196);
IkReal x1202=(sj3*x1196);
CheckValue<IkReal> x1203 = IKatan2WithCheck(IkReal(((((0.0532595040951145)*x1199))+(((0.0152953371270555)*x1197))+(((-0.123941731938731)*x1200))+(((0.267699789666707)*cj4*x1197))+(((-0.033547058940269)*cj3))+(((-0.0192684323607768)*x1202))+(((-0.0768793964825841)*sj4*x1198))+(((0.0096342161803884)*sj3))+(((0.067094117880538)*x1201))+(((-0.431574350072349)*x1198)))),IkReal(((((-0.0839265261849268)*x1199))+(((0.121134890801766)*sj4*x1198))+(((-0.105722027214415)*x1201))+(((-0.0241024495761096)*x1197))+(((0.680010415089157)*x1198))+(((-0.421800719992361)*cj4*x1197))+(((0.195288873327149)*x1200))+(((-0.0151816339688522)*sj3))+(((0.0528635812220421)*cj3))+(((0.0303617931761506)*x1202)))),IKFAST_ATAN2_MAGTHRESH);
if(!x1203.valid){
continue;
}
CheckValue<IkReal> x1204=IKPowWithIntegerCheck(IKsign(((((0.837955424564001)*cj4*new_r10))+(((0.0656300100348293)*new_r00*sj4))+(((-0.531815483588428)*cj4*new_r00))+(((-0.103420015812922)*new_r10*sj4)))),-1);
if(!x1204.valid){
continue;
}
j5array[0]=((-1.5707963267949)+(x1203.value)+(((1.5707963267949)*(x1204.value))));
sj5array[0]=IKsin(j5array[0]);
cj5array[0]=IKcos(j5array[0]);
if( j5array[0] > IKPI )
{
    j5array[0]-=IK2PI;
}
else if( j5array[0] < -IKPI )
{    j5array[0]+=IK2PI;
}
j5valid[0] = true;
for(int ij5 = 0; ij5 < 1; ++ij5)
{
if( !j5valid[ij5] )
{
    continue;
}
_ij5[0] = ij5; _ij5[1] = -1;
for(int iij5 = ij5+1; iij5 < 1; ++iij5)
{
if( j5valid[iij5] && IKabs(cj5array[ij5]-cj5array[iij5]) < IKFAST_SOLUTION_THRESH && IKabs(sj5array[ij5]-sj5array[iij5]) < IKFAST_SOLUTION_THRESH )
{
    j5valid[iij5]=false; _ij5[1] = iij5; break; 
}
}
j5 = j5array[ij5]; cj5 = cj5array[ij5]; sj5 = sj5array[ij5];
{
IkReal evalcond[16];
IkReal x1205=IKsin(j5);
IkReal x1206=IKcos(j5);
IkReal x1207=((0.276027873078388)*sj3);
IkReal x1208=((0.961149631058464)*cj3);
IkReal x1209=((0.961149631058464)*sj3);
IkReal x1210=((0.276027873078388)*cj3);
IkReal x1211=((0.0630802599313394)*cj3);
IkReal x1212=((0.146795896805068)*sj4);
IkReal x1213=((0.531815483588428)*new_r10);
IkReal x1214=((0.837955424564001)*cj4);
IkReal x1215=((0.103420015812922)*new_r10);
IkReal x1216=((0.028546806998574)*cj3);
IkReal x1217=(new_r21*sj4);
IkReal x1218=((0.0181157120800272)*sj3);
IkReal x1219=((0.0994021100426501)*sj3);
IkReal x1220=((0.147909480226238)*sj3);
IkReal x1221=((0.0630802599313394)*sj3);
IkReal x1222=((0.147909480226238)*cj3);
IkReal x1223=((0.0181157120800272)*cj3);
IkReal x1224=((0.103420015812922)*sj4);
IkReal x1225=((0.805400547163128)*sj4);
IkReal x1226=((0.531815483588428)*new_r00);
IkReal x1227=((0.028546806998574)*sj3);
IkReal x1228=(cj3*sj4);
IkReal x1229=(new_r20*sj4);
IkReal x1230=((0.0994021100426501)*cj3);
IkReal x1231=((0.231299053576899)*sj4);
IkReal x1232=((0.837955424564001)*sj4);
IkReal x1233=((0.531815483588428)*new_r11);
IkReal x1234=((0.0656300100348293)*new_r11);
IkReal x1235=((0.122486725237355)*cj4);
IkReal x1236=((0.511154255842196)*sj4);
IkReal x1237=((0.0656300100348293)*new_r10);
IkReal x1238=((0.992470151748698)*cj4);
IkReal x1239=((0.531815483588428)*new_r01);
IkReal x1240=(cj4*x1206);
IkReal x1241=(sj3*x1206);
IkReal x1242=(new_r11*x1205);
IkReal x1243=(cj4*x1205);
IkReal x1244=(new_r01*x1206);
IkReal x1245=(cj3*x1206);
IkReal x1246=((0.844313326436599)*x1206);
IkReal x1247=(new_r10*x1205);
IkReal x1248=(cj3*x1205);
IkReal x1249=(sj3*x1205);
IkReal x1250=(new_r00*x1206);
IkReal x1251=((0.844313326436599)*x1205);
IkReal x1252=(sj4*x1205);
IkReal x1253=(sj4*x1206);
IkReal x1254=(x1209+x1210);
IkReal x1255=((0.0656300100348293)*x1252);
IkReal x1256=(x1205*x1228);
evalcond[0]=((((-1.0)*x1255))+(((-1.0)*x1206*x1214))+((x1206*x1224))+(((0.531815483588428)*x1243)));
evalcond[1]=((((-0.0656300100348293)*x1253))+(((0.531815483588428)*x1240))+((x1205*x1214))+(((-1.0)*x1205*x1224)));
evalcond[2]=(((new_r00*x1205))+((new_r10*x1206))+((cj4*x1211))+(((-0.233054011708033)*cj3))+(((-1.0)*sj3*x1212))+(((0.511154255842196)*x1228))+(((-0.811511442202281)*sj3))+(((-1.0)*cj4*x1218)));
evalcond[3]=(((new_r11*x1206))+(((-0.233054011708033)*sj3))+((sj3*x1236))+((new_r01*x1205))+((cj4*x1223))+((cj4*x1221))+(((0.811511442202281)*cj3))+((cj3*x1212)));
evalcond[4]=(x1250+((sj3*x1231))+(((-1.0)*x1222))+(((-1.0)*x1247))+(((-1.0)*cj4*x1230))+((cj4*x1227))+(((-0.515031836328808)*sj3))+(((-1.0)*cj3*x1225)));
evalcond[5]=(x1244+(((0.515031836328808)*cj3))+(((-1.0)*x1220))+(((-1.0)*x1242))+(((-1.0)*sj3*x1225))+(((-1.0)*cj4*x1219))+(((-1.0)*cj4*x1216))+(((-0.231299053576899)*x1228)));
evalcond[6]=((((-1.0)*new_r00*x1251))+x1254+(((5.34279939673075e-6)*new_r20))+(((0.535849798705775)*x1247))+(((-1.0)*new_r10*x1246))+(((-0.535849798705775)*x1250)));
evalcond[7]=(x1207+(((-1.0)*new_r01*x1251))+(((-0.535849798705775)*x1244))+(((5.34279939673075e-6)*new_r21))+(((0.535849798705775)*x1242))+(((-1.0)*new_r11*x1246))+(((-1.0)*x1208)));
evalcond[8]=((((-1.0)*new_r00*x1255))+(((0.992470151748698)*x1229))+(((-1.0)*x1237*x1253))+(((-1.0)*x1215*x1252))+((x1226*x1243))+((x1213*x1240))+((x1224*x1250))+((new_r20*x1235))+(((-1.0)*x1214*x1250))+((x1214*x1247)));
evalcond[9]=(((new_r21*x1235))+((x1224*x1244))+(((-1.0)*new_r01*x1255))+((x1239*x1243))+(((0.992470151748698)*x1217))+(((-1.0)*x1214*x1244))+((x1233*x1240))+(((-1.0)*x1234*x1253))+((x1214*x1242))+(((-1.0)*x1224*x1242)));
evalcond[10]=((((-1.0)*x1226*x1252))+((x1232*x1250))+x1207+(((-0.122486725237355)*x1229))+(((0.103420015812922)*new_r00*x1240))+(((-1.0)*x1208))+(((-1.0)*x1213*x1253))+(((-1.0)*x1237*x1240))+(((-1.0)*x1215*x1243))+((new_r20*x1238))+(((-0.0656300100348293)*new_r00*x1243))+(((-1.0)*x1232*x1247)));
evalcond[11]=((((-1.0)*x1254))+((new_r21*x1238))+(((0.103420015812922)*new_r01*x1240))+(((-1.0)*x1233*x1253))+(((-0.103420015812922)*cj4*x1242))+(((-1.0)*x1239*x1252))+(((-0.122486725237355)*x1217))+((x1232*x1244))+(((-0.0656300100348293)*new_r01*x1243))+(((-1.0)*x1234*x1240))+(((-1.0)*x1232*x1242)));
evalcond[12]=((((0.511154255842196)*x1256))+(((-1.0)*x1225*x1245))+(((-1.0)*x1218*x1243))+(((-1.0)*x1212*x1249))+(((-1.0)*x1206*x1222))+(((-0.811511442202281)*x1249))+((x1211*x1243))+(((-0.515031836328808)*x1241))+((x1227*x1240))+(((-1.0)*x1230*x1240))+((x1231*x1241))+new_r00+(((-0.233054011708033)*x1248)));
evalcond[13]=((((-1.0)*x1225*x1241))+((x1236*x1249))+(((0.515031836328808)*x1245))+(((-1.0)*x1206*x1220))+(((0.811511442202281)*x1248))+(((-0.231299053576899)*x1206*x1228))+(((-1.0)*x1219*x1240))+(((-1.0)*x1216*x1240))+((x1221*x1243))+new_r01+((x1212*x1248))+(((-0.233054011708033)*x1249))+((x1223*x1243)));
evalcond[14]=(((x1205*x1222))+(((-1.0)*x1231*x1249))+((x1225*x1248))+(((-1.0)*x1218*x1240))+(((0.515031836328808)*x1249))+(((-1.0)*x1212*x1241))+(((0.511154255842196)*x1206*x1228))+(((-0.811511442202281)*x1241))+((x1211*x1240))+(((-1.0)*x1227*x1243))+new_r10+(((-0.233054011708033)*x1245))+((x1230*x1243)));
evalcond[15]=((((0.231299053576899)*x1256))+((x1205*x1220))+((x1225*x1249))+((x1236*x1241))+(((0.811511442202281)*x1245))+((x1219*x1243))+((x1216*x1243))+(((-0.515031836328808)*x1248))+((x1221*x1240))+new_r11+((x1212*x1245))+(((-0.233054011708033)*x1241))+((x1223*x1240)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[9]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[10]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[11]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[12]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[13]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[14]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[15]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j2;
vinfos[0].indices[0] = _ij2[0];
vinfos[0].indices[1] = _ij2[1];
vinfos[0].maxsolutions = _nj2;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j3;
vinfos[1].indices[0] = _ij3[0];
vinfos[1].indices[1] = _ij3[1];
vinfos[1].maxsolutions = _nj3;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j4;
vinfos[2].indices[0] = _ij4[0];
vinfos[2].indices[1] = _ij4[1];
vinfos[2].maxsolutions = _nj4;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j5;
vinfos[3].indices[0] = _ij5[0];
vinfos[3].indices[1] = _ij5[1];
vinfos[3].maxsolutions = _nj5;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j6;
vinfos[4].indices[0] = _ij6[0];
vinfos[4].indices[1] = _ij6[1];
vinfos[4].maxsolutions = _nj6;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j7;
vinfos[5].indices[0] = _ij7[0];
vinfos[5].indices[1] = _ij7[1];
vinfos[5].maxsolutions = _nj7;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j8;
vinfos[6].indices[0] = _ij8[0];
vinfos[6].indices[1] = _ij8[1];
vinfos[6].maxsolutions = _nj8;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j5array[1], cj5array[1], sj5array[1];
bool j5valid[1]={false};
_nj5 = 1;
IkReal x1257=cj4*cj4;
IkReal x1258=(sj3*sj4);
IkReal x1259=(cj3*sj4);
IkReal x1260=(cj4*sj3);
IkReal x1261=(cj3*cj4);
IkReal x1262=(cj4*x1259);
IkReal x1263=(sj3*x1257);
IkReal x1264=(cj3*x1257);
CheckValue<IkReal> x1265 = IKatan2WithCheck(IkReal(((((-0.0303617931761506)*x1264))+(((-0.0241024495761096)*x1258))+(((-0.105722027214415)*x1263))+(((0.0528635812220421)*sj3))+(((0.0151816339688522)*cj3))+(((0.0839265261849268)*x1259))+(((-0.121134890801766)*x1262))+(((-0.680010415089157)*x1261))+(((0.195288873327149)*x1260))+(((-0.421800719992361)*cj4*x1258)))),IkReal(((((-0.0152953371270555)*x1258))+(((0.0096342161803884)*cj3))+(((0.033547058940269)*sj3))+(((-0.267699789666707)*cj4*x1258))+(((-0.067094117880538)*x1263))+(((-0.431574350072349)*x1261))+(((0.0532595040951145)*x1259))+(((0.123941731938731)*x1260))+(((-0.0768793964825841)*x1262))+(((-0.0192684323607768)*x1264)))),IKFAST_ATAN2_MAGTHRESH);
if(!x1265.valid){
continue;
}
CheckValue<IkReal> x1266=IKPowWithIntegerCheck(IKsign(((((0.531815483588428)*cj4*new_r11))+(((-0.103420015812922)*new_r01*sj4))+(((0.837955424564001)*cj4*new_r01))+(((-0.0656300100348293)*new_r11*sj4)))),-1);
if(!x1266.valid){
continue;
}
j5array[0]=((-1.5707963267949)+(x1265.value)+(((1.5707963267949)*(x1266.value))));
sj5array[0]=IKsin(j5array[0]);
cj5array[0]=IKcos(j5array[0]);
if( j5array[0] > IKPI )
{
    j5array[0]-=IK2PI;
}
else if( j5array[0] < -IKPI )
{    j5array[0]+=IK2PI;
}
j5valid[0] = true;
for(int ij5 = 0; ij5 < 1; ++ij5)
{
if( !j5valid[ij5] )
{
    continue;
}
_ij5[0] = ij5; _ij5[1] = -1;
for(int iij5 = ij5+1; iij5 < 1; ++iij5)
{
if( j5valid[iij5] && IKabs(cj5array[ij5]-cj5array[iij5]) < IKFAST_SOLUTION_THRESH && IKabs(sj5array[ij5]-sj5array[iij5]) < IKFAST_SOLUTION_THRESH )
{
    j5valid[iij5]=false; _ij5[1] = iij5; break; 
}
}
j5 = j5array[ij5]; cj5 = cj5array[ij5]; sj5 = sj5array[ij5];
{
IkReal evalcond[16];
IkReal x1267=IKsin(j5);
IkReal x1268=IKcos(j5);
IkReal x1269=((0.276027873078388)*sj3);
IkReal x1270=((0.961149631058464)*cj3);
IkReal x1271=((0.961149631058464)*sj3);
IkReal x1272=((0.276027873078388)*cj3);
IkReal x1273=((0.0630802599313394)*cj3);
IkReal x1274=((0.146795896805068)*sj4);
IkReal x1275=((0.531815483588428)*new_r10);
IkReal x1276=((0.837955424564001)*cj4);
IkReal x1277=((0.103420015812922)*new_r10);
IkReal x1278=((0.028546806998574)*cj3);
IkReal x1279=(new_r21*sj4);
IkReal x1280=((0.0181157120800272)*sj3);
IkReal x1281=((0.0994021100426501)*sj3);
IkReal x1282=((0.147909480226238)*sj3);
IkReal x1283=((0.0630802599313394)*sj3);
IkReal x1284=((0.147909480226238)*cj3);
IkReal x1285=((0.0181157120800272)*cj3);
IkReal x1286=((0.103420015812922)*sj4);
IkReal x1287=((0.805400547163128)*sj4);
IkReal x1288=((0.531815483588428)*new_r00);
IkReal x1289=((0.028546806998574)*sj3);
IkReal x1290=(cj3*sj4);
IkReal x1291=(new_r20*sj4);
IkReal x1292=((0.0994021100426501)*cj3);
IkReal x1293=((0.231299053576899)*sj4);
IkReal x1294=((0.837955424564001)*sj4);
IkReal x1295=((0.531815483588428)*new_r11);
IkReal x1296=((0.0656300100348293)*new_r11);
IkReal x1297=((0.122486725237355)*cj4);
IkReal x1298=((0.511154255842196)*sj4);
IkReal x1299=((0.0656300100348293)*new_r10);
IkReal x1300=((0.992470151748698)*cj4);
IkReal x1301=((0.531815483588428)*new_r01);
IkReal x1302=(cj4*x1268);
IkReal x1303=(sj3*x1268);
IkReal x1304=(new_r11*x1267);
IkReal x1305=(cj4*x1267);
IkReal x1306=(new_r01*x1268);
IkReal x1307=(cj3*x1268);
IkReal x1308=((0.844313326436599)*x1268);
IkReal x1309=(new_r10*x1267);
IkReal x1310=(cj3*x1267);
IkReal x1311=(sj3*x1267);
IkReal x1312=(new_r00*x1268);
IkReal x1313=((0.844313326436599)*x1267);
IkReal x1314=(sj4*x1267);
IkReal x1315=(sj4*x1268);
IkReal x1316=(x1271+x1272);
IkReal x1317=((0.0656300100348293)*x1314);
IkReal x1318=(x1267*x1290);
evalcond[0]=((((-1.0)*x1268*x1276))+(((-1.0)*x1317))+((x1268*x1286))+(((0.531815483588428)*x1305)));
evalcond[1]=((((-0.0656300100348293)*x1315))+(((-1.0)*x1267*x1286))+((x1267*x1276))+(((0.531815483588428)*x1302)));
evalcond[2]=((((0.511154255842196)*x1290))+(((-0.233054011708033)*cj3))+((new_r00*x1267))+(((-1.0)*sj3*x1274))+(((-1.0)*cj4*x1280))+(((-0.811511442202281)*sj3))+((new_r10*x1268))+((cj4*x1273)));
evalcond[3]=((((-0.233054011708033)*sj3))+((sj3*x1298))+((cj4*x1283))+((cj4*x1285))+((new_r01*x1267))+((cj3*x1274))+(((0.811511442202281)*cj3))+((new_r11*x1268)));
evalcond[4]=(x1312+((sj3*x1293))+((cj4*x1289))+(((-1.0)*cj4*x1292))+(((-1.0)*x1309))+(((-1.0)*cj3*x1287))+(((-1.0)*x1284))+(((-0.515031836328808)*sj3)));
evalcond[5]=(x1306+(((0.515031836328808)*cj3))+(((-0.231299053576899)*x1290))+(((-1.0)*x1304))+(((-1.0)*x1282))+(((-1.0)*sj3*x1287))+(((-1.0)*cj4*x1278))+(((-1.0)*cj4*x1281)));
evalcond[6]=((((-1.0)*new_r10*x1308))+x1316+(((-0.535849798705775)*x1312))+(((-1.0)*new_r00*x1313))+(((5.34279939673075e-6)*new_r20))+(((0.535849798705775)*x1309)));
evalcond[7]=((((-0.535849798705775)*x1306))+x1269+(((-1.0)*x1270))+(((-1.0)*new_r01*x1313))+(((5.34279939673075e-6)*new_r21))+(((0.535849798705775)*x1304))+(((-1.0)*new_r11*x1308)));
evalcond[8]=(((new_r20*x1297))+((x1288*x1305))+(((-1.0)*x1277*x1314))+((x1276*x1309))+(((-1.0)*new_r00*x1317))+(((-1.0)*x1299*x1315))+(((-1.0)*x1276*x1312))+((x1275*x1302))+((x1286*x1312))+(((0.992470151748698)*x1291)));
evalcond[9]=((((-1.0)*x1276*x1306))+((x1276*x1304))+(((-1.0)*x1286*x1304))+((x1295*x1302))+(((-1.0)*new_r01*x1317))+((x1286*x1306))+(((0.992470151748698)*x1279))+(((-1.0)*x1296*x1315))+((x1301*x1305))+((new_r21*x1297)));
evalcond[10]=((((-0.0656300100348293)*new_r00*x1305))+x1269+(((-1.0)*x1270))+(((-1.0)*x1299*x1302))+(((-1.0)*x1275*x1315))+(((-1.0)*x1277*x1305))+((x1294*x1312))+(((-1.0)*x1294*x1309))+(((-1.0)*x1288*x1314))+(((0.103420015812922)*new_r00*x1302))+((new_r20*x1300))+(((-0.122486725237355)*x1291)));
evalcond[11]=((((-0.103420015812922)*cj4*x1304))+((new_r21*x1300))+(((0.103420015812922)*new_r01*x1302))+(((-1.0)*x1316))+((x1294*x1306))+(((-1.0)*x1296*x1302))+(((-1.0)*x1294*x1304))+(((-1.0)*x1295*x1315))+(((-0.122486725237355)*x1279))+(((-1.0)*x1301*x1314))+(((-0.0656300100348293)*new_r01*x1305)));
evalcond[12]=((((-1.0)*x1287*x1307))+(((0.511154255842196)*x1318))+((x1289*x1302))+((x1293*x1303))+(((-1.0)*x1292*x1302))+(((-0.811511442202281)*x1311))+new_r00+((x1273*x1305))+(((-1.0)*x1274*x1311))+(((-0.233054011708033)*x1310))+(((-1.0)*x1268*x1284))+(((-1.0)*x1280*x1305))+(((-0.515031836328808)*x1303)));
evalcond[13]=(((x1298*x1311))+((x1274*x1310))+(((-1.0)*x1278*x1302))+((x1285*x1305))+(((-1.0)*x1287*x1303))+((x1283*x1305))+(((0.811511442202281)*x1310))+(((0.515031836328808)*x1307))+(((-0.231299053576899)*x1268*x1290))+new_r01+(((-0.233054011708033)*x1311))+(((-1.0)*x1268*x1282))+(((-1.0)*x1281*x1302)));
evalcond[14]=((((0.511154255842196)*x1268*x1290))+(((-0.233054011708033)*x1307))+(((-1.0)*x1274*x1303))+((x1292*x1305))+(((0.515031836328808)*x1311))+((x1287*x1310))+(((-0.811511442202281)*x1303))+((x1267*x1284))+new_r10+(((-1.0)*x1293*x1311))+((x1273*x1302))+(((-1.0)*x1280*x1302))+(((-1.0)*x1289*x1305)));
evalcond[15]=((((-0.233054011708033)*x1303))+((x1285*x1302))+((x1283*x1302))+(((0.811511442202281)*x1307))+((x1281*x1305))+((x1287*x1311))+(((0.231299053576899)*x1318))+((x1278*x1305))+((x1267*x1282))+new_r11+((x1298*x1303))+((x1274*x1307))+(((-0.515031836328808)*x1310)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[9]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[10]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[11]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[12]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[13]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[14]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[15]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j2;
vinfos[0].indices[0] = _ij2[0];
vinfos[0].indices[1] = _ij2[1];
vinfos[0].maxsolutions = _nj2;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j3;
vinfos[1].indices[0] = _ij3[0];
vinfos[1].indices[1] = _ij3[1];
vinfos[1].maxsolutions = _nj3;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j4;
vinfos[2].indices[0] = _ij4[0];
vinfos[2].indices[1] = _ij4[1];
vinfos[2].maxsolutions = _nj4;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j5;
vinfos[3].indices[0] = _ij5[0];
vinfos[3].indices[1] = _ij5[1];
vinfos[3].maxsolutions = _nj5;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j6;
vinfos[4].indices[0] = _ij6[0];
vinfos[4].indices[1] = _ij6[1];
vinfos[4].maxsolutions = _nj6;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j7;
vinfos[5].indices[0] = _ij7[0];
vinfos[5].indices[1] = _ij7[1];
vinfos[5].maxsolutions = _nj7;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j8;
vinfos[6].indices[0] = _ij8[0];
vinfos[6].indices[1] = _ij8[1];
vinfos[6].maxsolutions = _nj8;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j5array[1], cj5array[1], sj5array[1];
bool j5valid[1]={false};
_nj5 = 1;
IkReal x1319=cj4*cj4;
IkReal x1320=(cj4*sj4);
IkReal x1321=(cj3*sj4);
IkReal x1322=(cj4*sj3);
IkReal x1323=(sj3*sj4);
IkReal x1324=(cj3*cj4);
IkReal x1325=(cj3*x1319);
IkReal x1326=(sj3*x1319);
CheckValue<IkReal> x1327 = IKatan2WithCheck(IkReal(((((-0.0839265261849268)*x1323))+(((0.680010415089157)*x1322))+(((0.121134890801766)*sj3*x1320))+(((0.0303617931761506)*x1326))+(((0.195288873327149)*x1324))+(((-0.0151816339688522)*sj3))+(((0.0528635812220421)*cj3))+(((-0.0241024495761096)*x1321))+(((-0.421800719992361)*cj3*x1320))+(((-0.105722027214415)*x1325)))),IkReal(((((-0.267699789666707)*cj3*x1320))+(((-0.067094117880538)*x1325))+(((0.0768793964825841)*sj3*x1320))+(((0.431574350072349)*x1322))+(((-0.0096342161803884)*sj3))+(((0.0192684323607768)*x1326))+(((-0.0532595040951145)*x1323))+(((0.033547058940269)*cj3))+(((0.123941731938731)*x1324))+(((-0.0152953371270555)*x1321)))),IKFAST_ATAN2_MAGTHRESH);
if(!x1327.valid){
continue;
}
CheckValue<IkReal> x1328=IKPowWithIntegerCheck(IKsign(((((0.531815483588428)*cj4*new_r10))+(((0.837955424564001)*cj4*new_r00))+(((-0.0656300100348293)*new_r10*sj4))+(((-0.103420015812922)*new_r00*sj4)))),-1);
if(!x1328.valid){
continue;
}
j5array[0]=((-1.5707963267949)+(x1327.value)+(((1.5707963267949)*(x1328.value))));
sj5array[0]=IKsin(j5array[0]);
cj5array[0]=IKcos(j5array[0]);
if( j5array[0] > IKPI )
{
    j5array[0]-=IK2PI;
}
else if( j5array[0] < -IKPI )
{    j5array[0]+=IK2PI;
}
j5valid[0] = true;
for(int ij5 = 0; ij5 < 1; ++ij5)
{
if( !j5valid[ij5] )
{
    continue;
}
_ij5[0] = ij5; _ij5[1] = -1;
for(int iij5 = ij5+1; iij5 < 1; ++iij5)
{
if( j5valid[iij5] && IKabs(cj5array[ij5]-cj5array[iij5]) < IKFAST_SOLUTION_THRESH && IKabs(sj5array[ij5]-sj5array[iij5]) < IKFAST_SOLUTION_THRESH )
{
    j5valid[iij5]=false; _ij5[1] = iij5; break; 
}
}
j5 = j5array[ij5]; cj5 = cj5array[ij5]; sj5 = sj5array[ij5];
{
IkReal evalcond[16];
IkReal x1329=IKsin(j5);
IkReal x1330=IKcos(j5);
IkReal x1331=((0.276027873078388)*sj3);
IkReal x1332=((0.961149631058464)*cj3);
IkReal x1333=((0.961149631058464)*sj3);
IkReal x1334=((0.276027873078388)*cj3);
IkReal x1335=((0.0630802599313394)*cj3);
IkReal x1336=((0.146795896805068)*sj4);
IkReal x1337=((0.531815483588428)*new_r10);
IkReal x1338=((0.837955424564001)*cj4);
IkReal x1339=((0.103420015812922)*new_r10);
IkReal x1340=((0.028546806998574)*cj3);
IkReal x1341=(new_r21*sj4);
IkReal x1342=((0.0181157120800272)*sj3);
IkReal x1343=((0.0994021100426501)*sj3);
IkReal x1344=((0.147909480226238)*sj3);
IkReal x1345=((0.0630802599313394)*sj3);
IkReal x1346=((0.147909480226238)*cj3);
IkReal x1347=((0.0181157120800272)*cj3);
IkReal x1348=((0.103420015812922)*sj4);
IkReal x1349=((0.805400547163128)*sj4);
IkReal x1350=((0.531815483588428)*new_r00);
IkReal x1351=((0.028546806998574)*sj3);
IkReal x1352=(cj3*sj4);
IkReal x1353=(new_r20*sj4);
IkReal x1354=((0.0994021100426501)*cj3);
IkReal x1355=((0.231299053576899)*sj4);
IkReal x1356=((0.837955424564001)*sj4);
IkReal x1357=((0.531815483588428)*new_r11);
IkReal x1358=((0.0656300100348293)*new_r11);
IkReal x1359=((0.122486725237355)*cj4);
IkReal x1360=((0.511154255842196)*sj4);
IkReal x1361=((0.0656300100348293)*new_r10);
IkReal x1362=((0.992470151748698)*cj4);
IkReal x1363=((0.531815483588428)*new_r01);
IkReal x1364=(cj4*x1330);
IkReal x1365=(sj3*x1330);
IkReal x1366=(new_r11*x1329);
IkReal x1367=(cj4*x1329);
IkReal x1368=(new_r01*x1330);
IkReal x1369=(cj3*x1330);
IkReal x1370=((0.844313326436599)*x1330);
IkReal x1371=(new_r10*x1329);
IkReal x1372=(cj3*x1329);
IkReal x1373=(sj3*x1329);
IkReal x1374=(new_r00*x1330);
IkReal x1375=((0.844313326436599)*x1329);
IkReal x1376=(sj4*x1329);
IkReal x1377=(sj4*x1330);
IkReal x1378=(x1334+x1333);
IkReal x1379=((0.0656300100348293)*x1376);
IkReal x1380=(x1329*x1352);
evalcond[0]=(((x1330*x1348))+(((-1.0)*x1330*x1338))+(((-1.0)*x1379))+(((0.531815483588428)*x1367)));
evalcond[1]=((((-0.0656300100348293)*x1377))+((x1329*x1338))+(((-1.0)*x1329*x1348))+(((0.531815483588428)*x1364)));
evalcond[2]=(((cj4*x1335))+((new_r00*x1329))+((new_r10*x1330))+(((-0.233054011708033)*cj3))+(((0.511154255842196)*x1352))+(((-1.0)*sj3*x1336))+(((-0.811511442202281)*sj3))+(((-1.0)*cj4*x1342)));
evalcond[3]=(((new_r01*x1329))+(((-0.233054011708033)*sj3))+((new_r11*x1330))+((cj3*x1336))+(((0.811511442202281)*cj3))+((cj4*x1347))+((cj4*x1345))+((sj3*x1360)));
evalcond[4]=(x1374+(((-1.0)*x1346))+(((-1.0)*x1371))+(((-1.0)*cj3*x1349))+((cj4*x1351))+((sj3*x1355))+(((-1.0)*cj4*x1354))+(((-0.515031836328808)*sj3)));
evalcond[5]=(x1368+(((-1.0)*x1366))+(((0.515031836328808)*cj3))+(((-1.0)*x1344))+(((-1.0)*sj3*x1349))+(((-0.231299053576899)*x1352))+(((-1.0)*cj4*x1343))+(((-1.0)*cj4*x1340)));
evalcond[6]=(x1378+(((-0.535849798705775)*x1374))+(((5.34279939673075e-6)*new_r20))+(((-1.0)*new_r00*x1375))+(((0.535849798705775)*x1371))+(((-1.0)*new_r10*x1370)));
evalcond[7]=((((-1.0)*new_r11*x1370))+x1331+(((-1.0)*new_r01*x1375))+(((5.34279939673075e-6)*new_r21))+(((-0.535849798705775)*x1368))+(((0.535849798705775)*x1366))+(((-1.0)*x1332)));
evalcond[8]=((((0.992470151748698)*x1353))+(((-1.0)*x1339*x1376))+((new_r20*x1359))+(((-1.0)*x1338*x1374))+(((-1.0)*new_r00*x1379))+((x1350*x1367))+(((-1.0)*x1361*x1377))+((x1338*x1371))+((x1337*x1364))+((x1348*x1374)));
evalcond[9]=(((x1357*x1364))+(((-1.0)*x1338*x1368))+((x1363*x1367))+(((-1.0)*new_r01*x1379))+(((-1.0)*x1358*x1377))+(((0.992470151748698)*x1341))+((x1348*x1368))+((x1338*x1366))+(((-1.0)*x1348*x1366))+((new_r21*x1359)));
evalcond[10]=(x1331+(((0.103420015812922)*new_r00*x1364))+((new_r20*x1362))+(((-1.0)*x1339*x1367))+(((-1.0)*x1356*x1371))+(((-1.0)*x1337*x1377))+(((-0.0656300100348293)*new_r00*x1367))+((x1356*x1374))+(((-1.0)*x1350*x1376))+(((-1.0)*x1361*x1364))+(((-0.122486725237355)*x1353))+(((-1.0)*x1332)));
evalcond[11]=(((x1356*x1368))+(((-1.0)*x1357*x1377))+(((-1.0)*x1378))+(((0.103420015812922)*new_r01*x1364))+(((-0.0656300100348293)*new_r01*x1367))+(((-1.0)*x1356*x1366))+(((-1.0)*x1363*x1376))+(((-0.122486725237355)*x1341))+(((-0.103420015812922)*cj4*x1366))+((new_r21*x1362))+(((-1.0)*x1358*x1364)));
evalcond[12]=(((x1355*x1365))+(((-0.515031836328808)*x1365))+(((-1.0)*x1354*x1364))+(((-1.0)*x1336*x1373))+((x1335*x1367))+(((-1.0)*x1330*x1346))+(((-1.0)*x1349*x1369))+((x1351*x1364))+new_r00+(((0.511154255842196)*x1380))+(((-0.811511442202281)*x1373))+(((-1.0)*x1342*x1367))+(((-0.233054011708033)*x1372)));
evalcond[13]=((((-1.0)*x1340*x1364))+(((0.515031836328808)*x1369))+((x1345*x1367))+(((0.811511442202281)*x1372))+((x1336*x1372))+(((-0.231299053576899)*x1330*x1352))+((x1347*x1367))+(((-1.0)*x1330*x1344))+(((-1.0)*x1349*x1365))+new_r01+(((-1.0)*x1343*x1364))+((x1360*x1373))+(((-0.233054011708033)*x1373)));
evalcond[14]=((((-1.0)*x1336*x1365))+((x1354*x1367))+(((0.515031836328808)*x1373))+(((-1.0)*x1355*x1373))+((x1329*x1346))+((x1335*x1364))+(((-0.233054011708033)*x1369))+new_r10+(((-0.811511442202281)*x1365))+(((-1.0)*x1351*x1367))+(((-1.0)*x1342*x1364))+((x1349*x1372))+(((0.511154255842196)*x1330*x1352)));
evalcond[15]=((((-0.515031836328808)*x1372))+(((0.231299053576899)*x1380))+((x1340*x1367))+((x1345*x1364))+((x1360*x1365))+((x1347*x1364))+((x1329*x1344))+(((-0.233054011708033)*x1365))+((x1336*x1369))+new_r11+(((0.811511442202281)*x1369))+((x1343*x1367))+((x1349*x1373)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[9]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[10]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[11]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[12]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[13]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[14]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[15]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j2;
vinfos[0].indices[0] = _ij2[0];
vinfos[0].indices[1] = _ij2[1];
vinfos[0].maxsolutions = _nj2;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j3;
vinfos[1].indices[0] = _ij3[0];
vinfos[1].indices[1] = _ij3[1];
vinfos[1].maxsolutions = _nj3;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j4;
vinfos[2].indices[0] = _ij4[0];
vinfos[2].indices[1] = _ij4[1];
vinfos[2].maxsolutions = _nj4;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j5;
vinfos[3].indices[0] = _ij5[0];
vinfos[3].indices[1] = _ij5[1];
vinfos[3].maxsolutions = _nj5;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j6;
vinfos[4].indices[0] = _ij6[0];
vinfos[4].indices[1] = _ij6[1];
vinfos[4].maxsolutions = _nj6;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j7;
vinfos[5].indices[0] = _ij7[0];
vinfos[5].indices[1] = _ij7[1];
vinfos[5].maxsolutions = _nj7;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j8;
vinfos[6].indices[0] = _ij8[0];
vinfos[6].indices[1] = _ij8[1];
vinfos[6].maxsolutions = _nj8;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(j4))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j3array[1], cj3array[1], sj3array[1];
bool j3valid[1]={false};
_nj3 = 1;
if( IKabs(((((-0.278127303651971)*new_r20))+(((0.968440353986026)*new_r21)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((((0.968440353986026)*new_r20))+(((0.278127303651971)*new_r21)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((((-0.278127303651971)*new_r20))+(((0.968440353986026)*new_r21))))+IKsqr(((((0.968440353986026)*new_r20))+(((0.278127303651971)*new_r21))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j3array[0]=IKatan2(((((-0.278127303651971)*new_r20))+(((0.968440353986026)*new_r21))), ((((0.968440353986026)*new_r20))+(((0.278127303651971)*new_r21))));
sj3array[0]=IKsin(j3array[0]);
cj3array[0]=IKcos(j3array[0]);
if( j3array[0] > IKPI )
{
    j3array[0]-=IK2PI;
}
else if( j3array[0] < -IKPI )
{    j3array[0]+=IK2PI;
}
j3valid[0] = true;
for(int ij3 = 0; ij3 < 1; ++ij3)
{
if( !j3valid[ij3] )
{
    continue;
}
_ij3[0] = ij3; _ij3[1] = -1;
for(int iij3 = ij3+1; iij3 < 1; ++iij3)
{
if( j3valid[iij3] && IKabs(cj3array[ij3]-cj3array[iij3]) < IKFAST_SOLUTION_THRESH && IKabs(sj3array[ij3]-sj3array[iij3]) < IKFAST_SOLUTION_THRESH )
{
    j3valid[iij3]=false; _ij3[1] = iij3; break; 
}
}
j3 = j3array[ij3]; cj3 = cj3array[ij3]; sj3 = sj3array[ij3];
{
IkReal evalcond[2];
IkReal x1381=IKsin(j3);
IkReal x1382=IKcos(j3);
evalcond[0]=((((-0.953910845428245)*x1382))+(((0.273954560310647)*x1381))+new_r20);
evalcond[1]=((((-0.953910845428245)*x1381))+(((-0.273954560310647)*x1382))+new_r21);
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j5eval[3];
sj4=0;
cj4=1.0;
j4=0;
IkReal x1383=new_r02*new_r02;
j5eval[0]=((((-1.5756506728798)*new_r12))+new_r02);
j5eval[1]=IKsign(((((6.24024889090152e+76)*new_r02))+(((-9.83245236388639e+76)*new_r12))));
j5eval[2]=((1.0)+(((1.44585006149089)*(x1383*x1383)))+(((-2.03046303253059)*x1383))+(((-1.28865050323593)*new_r02*new_r12))+(((1.44585006149089)*x1383*(new_r12*new_r12))));
if( IKabs(j5eval[0]) < 0.0000010000000000  || IKabs(j5eval[1]) < 0.0000010000000000  || IKabs(j5eval[2]) < 0.0000010000000000  )
{
{
IkReal j5eval[2];
sj4=0;
cj4=1.0;
j4=0;
IkReal x1384=new_r12*new_r12;
IkReal x1385=new_r02*new_r02;
j5eval[0]=((((-1.0)*x1384))+(((-1.0)*x1385)));
j5eval[1]=IKsign(((((-2.56196288697451e+56)*x1385))+(((-2.56196288697451e+56)*x1384))));
if( IKabs(j5eval[0]) < 0.0000010000000000  || IKabs(j5eval[1]) < 0.0000010000000000  )
{
{
IkReal j5eval[1];
sj4=0;
cj4=1.0;
j4=0;
j5eval[0]=((((-1.5756506728798)*new_r02))+(((-1.0)*new_r12)));
if( IKabs(j5eval[0]) < 0.0000010000000000  )
{
{
IkReal evalcond[1];
bool bgotonextstatement = true;
do
{
evalcond[0]=((IKabs(new_r12))+(IKabs(new_r02)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j5eval[4];
sj4=0;
cj4=1.0;
j4=0;
new_r02=0;
new_r12=0;
new_r20=0;
new_r21=0;
j5eval[0]=((((-1.5756506728798)*new_r00))+(((-1.0)*new_r10)));
j5eval[1]=602796.058909135;
j5eval[2]=((((-1.0)*sj3))+(((3.48207454681763)*cj3)));
j5eval[3]=IKsign(((((-7.67571803157366e+20)*new_r00))+(((-4.87145924137159e+20)*new_r10))));
if( IKabs(j5eval[0]) < 0.0000010000000000  || IKabs(j5eval[1]) < 0.0000010000000000  || IKabs(j5eval[2]) < 0.0000010000000000  || IKabs(j5eval[3]) < 0.0000010000000000  )
{
{
IkReal j5eval[4];
sj4=0;
cj4=1.0;
j4=0;
new_r02=0;
new_r12=0;
new_r20=0;
new_r21=0;
j5eval[0]=((((-1.5756506728798)*new_r01))+(((-1.0)*new_r11)));
j5eval[1]=IKsign(((((-7.67571803157366e+20)*new_r01))+(((-4.87145924137159e+20)*new_r11))));
j5eval[2]=602796.058909135;
j5eval[3]=(cj3+(((3.48207454681763)*sj3)));
if( IKabs(j5eval[0]) < 0.0000010000000000  || IKabs(j5eval[1]) < 0.0000010000000000  || IKabs(j5eval[2]) < 0.0000010000000000  || IKabs(j5eval[3]) < 0.0000010000000000  )
{
{
IkReal j5eval[3];
sj4=0;
cj4=1.0;
j4=0;
new_r02=0;
new_r12=0;
new_r20=0;
new_r21=0;
j5eval[0]=((((1.5756506728798)*new_r10))+(((-1.0)*new_r00)));
j5eval[1]=IKsign(((((7.67571803157366e+20)*new_r10))+(((-4.87145924137159e+20)*new_r00))));
j5eval[2]=((sj3*sj3)+(((12.1248431495952)*(cj3*cj3)))+(((-6.96414909363526)*cj3*sj3)));
if( IKabs(j5eval[0]) < 0.0000010000000000  || IKabs(j5eval[1]) < 0.0000010000000000  || IKabs(j5eval[2]) < 0.0000010000000000  )
{
{
IkReal evalcond[1];
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((0.279658958882409)+j3)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j5eval[3];
sj4=0;
cj4=1.0;
j4=0;
new_r02=0;
new_r12=0;
new_r20=0;
new_r21=0;
sj3=-0.276027873007547;
cj3=0.96114963;
j3=-0.27965896;
j5eval[0]=((((-1.5756506728798)*new_r00))+(((-1.0)*new_r10)));
j5eval[1]=IKsign(((((-7.67571803157366e+20)*new_r00))+(((-4.87145924137159e+20)*new_r10))));
j5eval[2]=346898311.953055;
if( IKabs(j5eval[0]) < 0.0000010000000000  || IKabs(j5eval[1]) < 0.0000010000000000  || IKabs(j5eval[2]) < 0.0000010000000000  )
{
{
IkReal j5eval[3];
sj4=0;
cj4=1.0;
j4=0;
new_r02=0;
new_r12=0;
new_r20=0;
new_r21=0;
sj3=-0.276027873007547;
cj3=0.96114963;
j3=-0.27965896;
j5eval[0]=((((-1.5756506728798)*new_r01))+(((-1.0)*new_r11)));
j5eval[1]=57412245357.8717;
j5eval[2]=IKsign(((((-7.67571803157366e+20)*new_r01))+(((-4.87145924137159e+20)*new_r11))));
if( IKabs(j5eval[0]) < 0.0000010000000000  || IKabs(j5eval[1]) < 0.0000010000000000  || IKabs(j5eval[2]) < 0.0000010000000000  )
{
{
IkReal j5eval[3];
sj4=0;
cj4=1.0;
j4=0;
new_r02=0;
new_r12=0;
new_r20=0;
new_r21=0;
sj3=-0.276027873007547;
cj3=0.96114963;
j3=-0.27965896;
j5eval[0]=((((1.5756506728798)*new_r10))+(((-1.0)*new_r00)));
j5eval[1]=IKsign(((((7.67571803157366e+20)*new_r10))+(((-4.87145924137159e+20)*new_r00))));
j5eval[2]=-346898311.953055;
if( IKabs(j5eval[0]) < 0.0000010000000000  || IKabs(j5eval[1]) < 0.0000010000000000  || IKabs(j5eval[2]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j5array[1], cj5array[1], sj5array[1];
bool j5valid[1]={false};
_nj5 = 1;
CheckValue<IkReal> x1386=IKPowWithIntegerCheck(IKsign(((((7.67571803157366e+20)*new_r10))+(((-4.87145924137159e+20)*new_r00)))),-1);
if(!x1386.valid){
continue;
}
j5array[0]=((1.0052817445023)+(((1.5707963267949)*(x1386.value))));
sj5array[0]=IKsin(j5array[0]);
cj5array[0]=IKcos(j5array[0]);
if( j5array[0] > IKPI )
{
    j5array[0]-=IK2PI;
}
else if( j5array[0] < -IKPI )
{    j5array[0]+=IK2PI;
}
j5valid[0] = true;
for(int ij5 = 0; ij5 < 1; ++ij5)
{
if( !j5valid[ij5] )
{
    continue;
}
_ij5[0] = ij5; _ij5[1] = -1;
for(int iij5 = ij5+1; iij5 < 1; ++iij5)
{
if( j5valid[iij5] && IKabs(cj5array[ij5]-cj5array[iij5]) < IKFAST_SOLUTION_THRESH && IKabs(sj5array[ij5]-sj5array[iij5]) < IKFAST_SOLUTION_THRESH )
{
    j5valid[iij5]=false; _ij5[1] = iij5; break; 
}
}
j5 = j5array[ij5]; cj5 = cj5array[ij5]; sj5 = sj5array[ij5];
{
IkReal evalcond[16];
IkReal x1387=IKsin(j5);
IkReal x1388=IKcos(j5);
IkReal x1389=((0.531815483588428)*x1387);
IkReal x1390=(new_r01*x1387);
IkReal x1391=(new_r01*x1388);
IkReal x1392=(new_r00*x1388);
IkReal x1393=(new_r11*x1387);
IkReal x1394=(new_r11*x1388);
IkReal x1395=(new_r10*x1388);
IkReal x1396=(new_r10*x1387);
IkReal x1397=(new_r00*x1387);
evalcond[0]=(x1389+(((-0.837955424564001)*x1388)));
evalcond[1]=((((0.837955424564001)*x1387))+(((0.531815483588428)*x1388)));
evalcond[2]=((0.0656300101559687)+x1397+x1395);
evalcond[3]=((0.844313325546427)+x1394+x1390);
evalcond[4]=((-0.103420015585614)+x1392+(((-1.0)*x1396)));
evalcond[5]=((0.535849798173328)+x1391+(((-1.0)*x1393)));
evalcond[6]=((((-0.103420015585614)*x1388))+(((0.0656300101559687)*x1387))+new_r00);
evalcond[7]=((((0.535849798173328)*x1388))+new_r01+(((0.844313325546427)*x1387)));
evalcond[8]=((((0.103420015585614)*x1387))+(((0.0656300101559687)*x1388))+new_r10);
evalcond[9]=((((-0.535849798173328)*x1387))+new_r11+(((0.844313325546427)*x1388)));
evalcond[10]=((((-0.837955424564001)*x1392))+(((0.531815483588428)*x1395))+(((0.837955424564001)*x1396))+((new_r00*x1389)));
evalcond[11]=((((-0.837955424564001)*x1391))+(((0.531815483588428)*x1394))+(((0.837955424564001)*x1393))+((new_r01*x1389)));
evalcond[12]=((-2.24076669481955e-10)+(((-0.844313326436599)*x1395))+(((-0.844313326436599)*x1397))+(((0.535849798705775)*x1396))+(((-0.535849798705775)*x1392)));
evalcond[13]=((-0.999999998963104)+(((-0.844313326436599)*x1394))+(((-0.844313326436599)*x1390))+(((0.535849798705775)*x1393))+(((-0.535849798705775)*x1391)));
evalcond[14]=((-0.999999998963104)+(((-0.103420015812922)*x1396))+(((-0.0656300100348293)*x1395))+(((-0.0656300100348293)*x1397))+(((0.103420015812922)*x1392)));
evalcond[15]=((2.24076669481955e-10)+(((-0.103420015812922)*x1393))+(((-0.0656300100348293)*x1390))+(((-0.0656300100348293)*x1394))+(((0.103420015812922)*x1391)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[9]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[10]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[11]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[12]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[13]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[14]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[15]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j2;
vinfos[0].indices[0] = _ij2[0];
vinfos[0].indices[1] = _ij2[1];
vinfos[0].maxsolutions = _nj2;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j3;
vinfos[1].indices[0] = _ij3[0];
vinfos[1].indices[1] = _ij3[1];
vinfos[1].maxsolutions = _nj3;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j4;
vinfos[2].indices[0] = _ij4[0];
vinfos[2].indices[1] = _ij4[1];
vinfos[2].maxsolutions = _nj4;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j5;
vinfos[3].indices[0] = _ij5[0];
vinfos[3].indices[1] = _ij5[1];
vinfos[3].maxsolutions = _nj5;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j6;
vinfos[4].indices[0] = _ij6[0];
vinfos[4].indices[1] = _ij6[1];
vinfos[4].maxsolutions = _nj6;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j7;
vinfos[5].indices[0] = _ij7[0];
vinfos[5].indices[1] = _ij7[1];
vinfos[5].maxsolutions = _nj7;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j8;
vinfos[6].indices[0] = _ij8[0];
vinfos[6].indices[1] = _ij8[1];
vinfos[6].maxsolutions = _nj8;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j5array[1], cj5array[1], sj5array[1];
bool j5valid[1]={false};
_nj5 = 1;
CheckValue<IkReal> x1398=IKPowWithIntegerCheck(IKsign(((((-7.67571803157366e+20)*new_r01))+(((-4.87145924137159e+20)*new_r11)))),-1);
if(!x1398.valid){
continue;
}
j5array[0]=((-0.565514582292594)+(((1.5707963267949)*(x1398.value))));
sj5array[0]=IKsin(j5array[0]);
cj5array[0]=IKcos(j5array[0]);
if( j5array[0] > IKPI )
{
    j5array[0]-=IK2PI;
}
else if( j5array[0] < -IKPI )
{    j5array[0]+=IK2PI;
}
j5valid[0] = true;
for(int ij5 = 0; ij5 < 1; ++ij5)
{
if( !j5valid[ij5] )
{
    continue;
}
_ij5[0] = ij5; _ij5[1] = -1;
for(int iij5 = ij5+1; iij5 < 1; ++iij5)
{
if( j5valid[iij5] && IKabs(cj5array[ij5]-cj5array[iij5]) < IKFAST_SOLUTION_THRESH && IKabs(sj5array[ij5]-sj5array[iij5]) < IKFAST_SOLUTION_THRESH )
{
    j5valid[iij5]=false; _ij5[1] = iij5; break; 
}
}
j5 = j5array[ij5]; cj5 = cj5array[ij5]; sj5 = sj5array[ij5];
{
IkReal evalcond[16];
IkReal x1399=IKsin(j5);
IkReal x1400=IKcos(j5);
IkReal x1401=((0.531815483588428)*x1399);
IkReal x1402=(new_r01*x1399);
IkReal x1403=(new_r01*x1400);
IkReal x1404=(new_r00*x1400);
IkReal x1405=(new_r11*x1399);
IkReal x1406=(new_r11*x1400);
IkReal x1407=(new_r10*x1400);
IkReal x1408=(new_r10*x1399);
IkReal x1409=(new_r00*x1399);
evalcond[0]=(x1401+(((-0.837955424564001)*x1400)));
evalcond[1]=((((0.531815483588428)*x1400))+(((0.837955424564001)*x1399)));
evalcond[2]=((0.0656300101559687)+x1409+x1407);
evalcond[3]=((0.844313325546427)+x1402+x1406);
evalcond[4]=((-0.103420015585614)+(((-1.0)*x1408))+x1404);
evalcond[5]=((0.535849798173328)+(((-1.0)*x1405))+x1403);
evalcond[6]=(new_r00+(((0.0656300101559687)*x1399))+(((-0.103420015585614)*x1400)));
evalcond[7]=((((0.535849798173328)*x1400))+new_r01+(((0.844313325546427)*x1399)));
evalcond[8]=((((0.0656300101559687)*x1400))+(((0.103420015585614)*x1399))+new_r10);
evalcond[9]=((((0.844313325546427)*x1400))+(((-0.535849798173328)*x1399))+new_r11);
evalcond[10]=((((0.531815483588428)*x1407))+(((0.837955424564001)*x1408))+((new_r00*x1401))+(((-0.837955424564001)*x1404)));
evalcond[11]=((((0.531815483588428)*x1406))+(((0.837955424564001)*x1405))+((new_r01*x1401))+(((-0.837955424564001)*x1403)));
evalcond[12]=((-2.24076669481955e-10)+(((-0.844313326436599)*x1409))+(((-0.844313326436599)*x1407))+(((-0.535849798705775)*x1404))+(((0.535849798705775)*x1408)));
evalcond[13]=((-0.999999998963104)+(((-0.844313326436599)*x1402))+(((-0.844313326436599)*x1406))+(((-0.535849798705775)*x1403))+(((0.535849798705775)*x1405)));
evalcond[14]=((-0.999999998963104)+(((-0.0656300100348293)*x1407))+(((-0.0656300100348293)*x1409))+(((-0.103420015812922)*x1408))+(((0.103420015812922)*x1404)));
evalcond[15]=((2.24076669481955e-10)+(((-0.0656300100348293)*x1406))+(((-0.0656300100348293)*x1402))+(((-0.103420015812922)*x1405))+(((0.103420015812922)*x1403)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[9]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[10]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[11]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[12]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[13]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[14]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[15]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j2;
vinfos[0].indices[0] = _ij2[0];
vinfos[0].indices[1] = _ij2[1];
vinfos[0].maxsolutions = _nj2;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j3;
vinfos[1].indices[0] = _ij3[0];
vinfos[1].indices[1] = _ij3[1];
vinfos[1].maxsolutions = _nj3;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j4;
vinfos[2].indices[0] = _ij4[0];
vinfos[2].indices[1] = _ij4[1];
vinfos[2].maxsolutions = _nj4;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j5;
vinfos[3].indices[0] = _ij5[0];
vinfos[3].indices[1] = _ij5[1];
vinfos[3].maxsolutions = _nj5;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j6;
vinfos[4].indices[0] = _ij6[0];
vinfos[4].indices[1] = _ij6[1];
vinfos[4].maxsolutions = _nj6;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j7;
vinfos[5].indices[0] = _ij7[0];
vinfos[5].indices[1] = _ij7[1];
vinfos[5].maxsolutions = _nj7;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j8;
vinfos[6].indices[0] = _ij8[0];
vinfos[6].indices[1] = _ij8[1];
vinfos[6].maxsolutions = _nj8;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j5array[1], cj5array[1], sj5array[1];
bool j5valid[1]={false};
_nj5 = 1;
CheckValue<IkReal> x1410=IKPowWithIntegerCheck(IKsign(((((-7.67571803157366e+20)*new_r00))+(((-4.87145924137159e+20)*new_r10)))),-1);
if(!x1410.valid){
continue;
}
j5array[0]=((-0.565514582292594)+(((1.5707963267949)*(x1410.value))));
sj5array[0]=IKsin(j5array[0]);
cj5array[0]=IKcos(j5array[0]);
if( j5array[0] > IKPI )
{
    j5array[0]-=IK2PI;
}
else if( j5array[0] < -IKPI )
{    j5array[0]+=IK2PI;
}
j5valid[0] = true;
for(int ij5 = 0; ij5 < 1; ++ij5)
{
if( !j5valid[ij5] )
{
    continue;
}
_ij5[0] = ij5; _ij5[1] = -1;
for(int iij5 = ij5+1; iij5 < 1; ++iij5)
{
if( j5valid[iij5] && IKabs(cj5array[ij5]-cj5array[iij5]) < IKFAST_SOLUTION_THRESH && IKabs(sj5array[ij5]-sj5array[iij5]) < IKFAST_SOLUTION_THRESH )
{
    j5valid[iij5]=false; _ij5[1] = iij5; break; 
}
}
j5 = j5array[ij5]; cj5 = cj5array[ij5]; sj5 = sj5array[ij5];
{
IkReal evalcond[16];
IkReal x1411=IKsin(j5);
IkReal x1412=IKcos(j5);
IkReal x1413=((0.531815483588428)*x1411);
IkReal x1414=(new_r01*x1411);
IkReal x1415=(new_r01*x1412);
IkReal x1416=(new_r00*x1412);
IkReal x1417=(new_r11*x1411);
IkReal x1418=(new_r11*x1412);
IkReal x1419=(new_r10*x1412);
IkReal x1420=(new_r10*x1411);
IkReal x1421=(new_r00*x1411);
evalcond[0]=(x1413+(((-0.837955424564001)*x1412)));
evalcond[1]=((((0.837955424564001)*x1411))+(((0.531815483588428)*x1412)));
evalcond[2]=((0.0656300101559687)+x1421+x1419);
evalcond[3]=((0.844313325546427)+x1418+x1414);
evalcond[4]=((-0.103420015585614)+(((-1.0)*x1420))+x1416);
evalcond[5]=((0.535849798173328)+x1415+(((-1.0)*x1417)));
evalcond[6]=((((-0.103420015585614)*x1412))+new_r00+(((0.0656300101559687)*x1411)));
evalcond[7]=((((0.535849798173328)*x1412))+(((0.844313325546427)*x1411))+new_r01);
evalcond[8]=((((0.103420015585614)*x1411))+new_r10+(((0.0656300101559687)*x1412)));
evalcond[9]=((((0.844313325546427)*x1412))+new_r11+(((-0.535849798173328)*x1411)));
evalcond[10]=(((new_r00*x1413))+(((0.837955424564001)*x1420))+(((-0.837955424564001)*x1416))+(((0.531815483588428)*x1419)));
evalcond[11]=(((new_r01*x1413))+(((0.837955424564001)*x1417))+(((-0.837955424564001)*x1415))+(((0.531815483588428)*x1418)));
evalcond[12]=((-2.24076669481955e-10)+(((-0.844313326436599)*x1419))+(((0.535849798705775)*x1420))+(((-0.535849798705775)*x1416))+(((-0.844313326436599)*x1421)));
evalcond[13]=((-0.999999998963104)+(((-0.844313326436599)*x1418))+(((-0.844313326436599)*x1414))+(((-0.535849798705775)*x1415))+(((0.535849798705775)*x1417)));
evalcond[14]=((-0.999999998963104)+(((-0.0656300100348293)*x1419))+(((0.103420015812922)*x1416))+(((-0.103420015812922)*x1420))+(((-0.0656300100348293)*x1421)));
evalcond[15]=((2.24076669481955e-10)+(((-0.0656300100348293)*x1414))+(((-0.0656300100348293)*x1418))+(((0.103420015812922)*x1415))+(((-0.103420015812922)*x1417)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[9]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[10]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[11]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[12]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[13]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[14]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[15]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j2;
vinfos[0].indices[0] = _ij2[0];
vinfos[0].indices[1] = _ij2[1];
vinfos[0].maxsolutions = _nj2;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j3;
vinfos[1].indices[0] = _ij3[0];
vinfos[1].indices[1] = _ij3[1];
vinfos[1].maxsolutions = _nj3;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j4;
vinfos[2].indices[0] = _ij4[0];
vinfos[2].indices[1] = _ij4[1];
vinfos[2].maxsolutions = _nj4;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j5;
vinfos[3].indices[0] = _ij5[0];
vinfos[3].indices[1] = _ij5[1];
vinfos[3].maxsolutions = _nj5;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j6;
vinfos[4].indices[0] = _ij6[0];
vinfos[4].indices[1] = _ij6[1];
vinfos[4].maxsolutions = _nj6;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j7;
vinfos[5].indices[0] = _ij7[0];
vinfos[5].indices[1] = _ij7[1];
vinfos[5].maxsolutions = _nj7;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j8;
vinfos[6].indices[0] = _ij8[0];
vinfos[6].indices[1] = _ij8[1];
vinfos[6].maxsolutions = _nj8;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-2.86193369470738)+j3)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j5eval[3];
sj4=0;
cj4=1.0;
j4=0;
new_r02=0;
new_r12=0;
new_r20=0;
new_r21=0;
sj3=0.276027873007547;
cj3=-0.96114963;
j3=2.86193373421393;
j5eval[0]=((((1.5756506728798)*new_r11))+(((-1.0)*new_r01)));
j5eval[1]=57412245357.8717;
j5eval[2]=IKsign(((((7.67571803157366e+20)*new_r11))+(((-4.87145924137159e+20)*new_r01))));
if( IKabs(j5eval[0]) < 0.0000010000000000  || IKabs(j5eval[1]) < 0.0000010000000000  || IKabs(j5eval[2]) < 0.0000010000000000  )
{
{
IkReal j5eval[3];
sj4=0;
cj4=1.0;
j4=0;
new_r02=0;
new_r12=0;
new_r20=0;
new_r21=0;
sj3=0.276027873007547;
cj3=-0.96114963;
j3=2.86193373421393;
j5eval[0]=((((-1.5756506728798)*new_r00))+(((-1.0)*new_r10)));
j5eval[1]=IKsign(((((-7.67571803157366e+20)*new_r00))+(((-4.87145924137159e+20)*new_r10))));
j5eval[2]=-346898311.953055;
if( IKabs(j5eval[0]) < 0.0000010000000000  || IKabs(j5eval[1]) < 0.0000010000000000  || IKabs(j5eval[2]) < 0.0000010000000000  )
{
{
IkReal j5eval[3];
sj4=0;
cj4=1.0;
j4=0;
new_r02=0;
new_r12=0;
new_r20=0;
new_r21=0;
sj3=0.276027873007547;
cj3=-0.96114963;
j3=2.86193373421393;
j5eval[0]=((((-1.5756506728798)*new_r01))+(((-1.0)*new_r11)));
j5eval[1]=IKsign(((((-7.67571803157366e+20)*new_r01))+(((-4.87145924137159e+20)*new_r11))));
j5eval[2]=-57412245357.8717;
if( IKabs(j5eval[0]) < 0.0000010000000000  || IKabs(j5eval[1]) < 0.0000010000000000  || IKabs(j5eval[2]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j5array[1], cj5array[1], sj5array[1];
bool j5valid[1]={false};
_nj5 = 1;
CheckValue<IkReal> x1422=IKPowWithIntegerCheck(IKsign(((((-7.67571803157366e+20)*new_r01))+(((-4.87145924137159e+20)*new_r11)))),-1);
if(!x1422.valid){
continue;
}
j5array[0]=((-3.70710723588239)+(((1.5707963267949)*(x1422.value))));
sj5array[0]=IKsin(j5array[0]);
cj5array[0]=IKcos(j5array[0]);
if( j5array[0] > IKPI )
{
    j5array[0]-=IK2PI;
}
else if( j5array[0] < -IKPI )
{    j5array[0]+=IK2PI;
}
j5valid[0] = true;
for(int ij5 = 0; ij5 < 1; ++ij5)
{
if( !j5valid[ij5] )
{
    continue;
}
_ij5[0] = ij5; _ij5[1] = -1;
for(int iij5 = ij5+1; iij5 < 1; ++iij5)
{
if( j5valid[iij5] && IKabs(cj5array[ij5]-cj5array[iij5]) < IKFAST_SOLUTION_THRESH && IKabs(sj5array[ij5]-sj5array[iij5]) < IKFAST_SOLUTION_THRESH )
{
    j5valid[iij5]=false; _ij5[1] = iij5; break; 
}
}
j5 = j5array[ij5]; cj5 = cj5array[ij5]; sj5 = sj5array[ij5];
{
IkReal evalcond[16];
IkReal x1423=IKsin(j5);
IkReal x1424=IKcos(j5);
IkReal x1425=((0.531815483588428)*x1423);
IkReal x1426=(new_r01*x1423);
IkReal x1427=(new_r01*x1424);
IkReal x1428=(new_r00*x1424);
IkReal x1429=(new_r11*x1423);
IkReal x1430=(new_r11*x1424);
IkReal x1431=(new_r10*x1424);
IkReal x1432=(new_r10*x1423);
IkReal x1433=(new_r00*x1423);
evalcond[0]=((((-0.837955424564001)*x1424))+x1425);
evalcond[1]=((((0.531815483588428)*x1424))+(((0.837955424564001)*x1423)));
evalcond[2]=((-0.0656300101559687)+x1433+x1431);
evalcond[3]=((-0.844313325546427)+x1426+x1430);
evalcond[4]=((0.103420015585614)+(((-1.0)*x1432))+x1428);
evalcond[5]=((-0.535849798173328)+(((-1.0)*x1429))+x1427);
evalcond[6]=((((0.103420015585614)*x1424))+new_r00+(((-0.0656300101559687)*x1423)));
evalcond[7]=((((-0.844313325546427)*x1423))+(((-0.535849798173328)*x1424))+new_r01);
evalcond[8]=((((-0.103420015585614)*x1423))+new_r10+(((-0.0656300101559687)*x1424)));
evalcond[9]=((((0.535849798173328)*x1423))+(((-0.844313325546427)*x1424))+new_r11);
evalcond[10]=((((0.531815483588428)*x1431))+(((0.837955424564001)*x1432))+(((-0.837955424564001)*x1428))+((new_r00*x1425)));
evalcond[11]=((((0.531815483588428)*x1430))+(((-0.837955424564001)*x1427))+(((0.837955424564001)*x1429))+((new_r01*x1425)));
evalcond[12]=((2.24076669481955e-10)+(((0.535849798705775)*x1432))+(((-0.844313326436599)*x1433))+(((-0.844313326436599)*x1431))+(((-0.535849798705775)*x1428)));
evalcond[13]=((0.999999998963104)+(((-0.844313326436599)*x1430))+(((0.535849798705775)*x1429))+(((-0.535849798705775)*x1427))+(((-0.844313326436599)*x1426)));
evalcond[14]=((0.999999998963104)+(((-0.0656300100348293)*x1431))+(((-0.0656300100348293)*x1433))+(((0.103420015812922)*x1428))+(((-0.103420015812922)*x1432)));
evalcond[15]=((-2.24076669481955e-10)+(((-0.103420015812922)*x1429))+(((-0.0656300100348293)*x1430))+(((0.103420015812922)*x1427))+(((-0.0656300100348293)*x1426)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[9]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[10]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[11]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[12]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[13]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[14]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[15]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j2;
vinfos[0].indices[0] = _ij2[0];
vinfos[0].indices[1] = _ij2[1];
vinfos[0].maxsolutions = _nj2;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j3;
vinfos[1].indices[0] = _ij3[0];
vinfos[1].indices[1] = _ij3[1];
vinfos[1].maxsolutions = _nj3;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j4;
vinfos[2].indices[0] = _ij4[0];
vinfos[2].indices[1] = _ij4[1];
vinfos[2].maxsolutions = _nj4;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j5;
vinfos[3].indices[0] = _ij5[0];
vinfos[3].indices[1] = _ij5[1];
vinfos[3].maxsolutions = _nj5;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j6;
vinfos[4].indices[0] = _ij6[0];
vinfos[4].indices[1] = _ij6[1];
vinfos[4].maxsolutions = _nj6;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j7;
vinfos[5].indices[0] = _ij7[0];
vinfos[5].indices[1] = _ij7[1];
vinfos[5].maxsolutions = _nj7;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j8;
vinfos[6].indices[0] = _ij8[0];
vinfos[6].indices[1] = _ij8[1];
vinfos[6].maxsolutions = _nj8;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j5array[1], cj5array[1], sj5array[1];
bool j5valid[1]={false};
_nj5 = 1;
CheckValue<IkReal> x1434=IKPowWithIntegerCheck(IKsign(((((-7.67571803157366e+20)*new_r00))+(((-4.87145924137159e+20)*new_r10)))),-1);
if(!x1434.valid){
continue;
}
j5array[0]=((-3.70710723588239)+(((1.5707963267949)*(x1434.value))));
sj5array[0]=IKsin(j5array[0]);
cj5array[0]=IKcos(j5array[0]);
if( j5array[0] > IKPI )
{
    j5array[0]-=IK2PI;
}
else if( j5array[0] < -IKPI )
{    j5array[0]+=IK2PI;
}
j5valid[0] = true;
for(int ij5 = 0; ij5 < 1; ++ij5)
{
if( !j5valid[ij5] )
{
    continue;
}
_ij5[0] = ij5; _ij5[1] = -1;
for(int iij5 = ij5+1; iij5 < 1; ++iij5)
{
if( j5valid[iij5] && IKabs(cj5array[ij5]-cj5array[iij5]) < IKFAST_SOLUTION_THRESH && IKabs(sj5array[ij5]-sj5array[iij5]) < IKFAST_SOLUTION_THRESH )
{
    j5valid[iij5]=false; _ij5[1] = iij5; break; 
}
}
j5 = j5array[ij5]; cj5 = cj5array[ij5]; sj5 = sj5array[ij5];
{
IkReal evalcond[16];
IkReal x1435=IKsin(j5);
IkReal x1436=IKcos(j5);
IkReal x1437=((0.531815483588428)*x1435);
IkReal x1438=(new_r01*x1435);
IkReal x1439=(new_r01*x1436);
IkReal x1440=(new_r00*x1436);
IkReal x1441=(new_r11*x1435);
IkReal x1442=(new_r11*x1436);
IkReal x1443=(new_r10*x1436);
IkReal x1444=(new_r10*x1435);
IkReal x1445=(new_r00*x1435);
evalcond[0]=(x1437+(((-0.837955424564001)*x1436)));
evalcond[1]=((((0.531815483588428)*x1436))+(((0.837955424564001)*x1435)));
evalcond[2]=((-0.0656300101559687)+x1445+x1443);
evalcond[3]=((-0.844313325546427)+x1438+x1442);
evalcond[4]=((0.103420015585614)+(((-1.0)*x1444))+x1440);
evalcond[5]=((-0.535849798173328)+(((-1.0)*x1441))+x1439);
evalcond[6]=((((-0.0656300101559687)*x1435))+(((0.103420015585614)*x1436))+new_r00);
evalcond[7]=((((-0.535849798173328)*x1436))+(((-0.844313325546427)*x1435))+new_r01);
evalcond[8]=((((-0.103420015585614)*x1435))+(((-0.0656300101559687)*x1436))+new_r10);
evalcond[9]=((((0.535849798173328)*x1435))+(((-0.844313325546427)*x1436))+new_r11);
evalcond[10]=(((new_r00*x1437))+(((0.531815483588428)*x1443))+(((-0.837955424564001)*x1440))+(((0.837955424564001)*x1444)));
evalcond[11]=((((0.531815483588428)*x1442))+((new_r01*x1437))+(((-0.837955424564001)*x1439))+(((0.837955424564001)*x1441)));
evalcond[12]=((2.24076669481955e-10)+(((-0.535849798705775)*x1440))+(((0.535849798705775)*x1444))+(((-0.844313326436599)*x1445))+(((-0.844313326436599)*x1443)));
evalcond[13]=((0.999999998963104)+(((-0.844313326436599)*x1438))+(((0.535849798705775)*x1441))+(((-0.535849798705775)*x1439))+(((-0.844313326436599)*x1442)));
evalcond[14]=((0.999999998963104)+(((0.103420015812922)*x1440))+(((-0.0656300100348293)*x1443))+(((-0.0656300100348293)*x1445))+(((-0.103420015812922)*x1444)));
evalcond[15]=((-2.24076669481955e-10)+(((-0.0656300100348293)*x1438))+(((-0.0656300100348293)*x1442))+(((0.103420015812922)*x1439))+(((-0.103420015812922)*x1441)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[9]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[10]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[11]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[12]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[13]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[14]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[15]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j2;
vinfos[0].indices[0] = _ij2[0];
vinfos[0].indices[1] = _ij2[1];
vinfos[0].maxsolutions = _nj2;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j3;
vinfos[1].indices[0] = _ij3[0];
vinfos[1].indices[1] = _ij3[1];
vinfos[1].maxsolutions = _nj3;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j4;
vinfos[2].indices[0] = _ij4[0];
vinfos[2].indices[1] = _ij4[1];
vinfos[2].maxsolutions = _nj4;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j5;
vinfos[3].indices[0] = _ij5[0];
vinfos[3].indices[1] = _ij5[1];
vinfos[3].maxsolutions = _nj5;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j6;
vinfos[4].indices[0] = _ij6[0];
vinfos[4].indices[1] = _ij6[1];
vinfos[4].maxsolutions = _nj6;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j7;
vinfos[5].indices[0] = _ij7[0];
vinfos[5].indices[1] = _ij7[1];
vinfos[5].maxsolutions = _nj7;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j8;
vinfos[6].indices[0] = _ij8[0];
vinfos[6].indices[1] = _ij8[1];
vinfos[6].maxsolutions = _nj8;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j5array[1], cj5array[1], sj5array[1];
bool j5valid[1]={false};
_nj5 = 1;
CheckValue<IkReal> x1446=IKPowWithIntegerCheck(IKsign(((((7.67571803157366e+20)*new_r11))+(((-4.87145924137159e+20)*new_r01)))),-1);
if(!x1446.valid){
continue;
}
j5array[0]=((-2.13631090908749)+(((1.5707963267949)*(x1446.value))));
sj5array[0]=IKsin(j5array[0]);
cj5array[0]=IKcos(j5array[0]);
if( j5array[0] > IKPI )
{
    j5array[0]-=IK2PI;
}
else if( j5array[0] < -IKPI )
{    j5array[0]+=IK2PI;
}
j5valid[0] = true;
for(int ij5 = 0; ij5 < 1; ++ij5)
{
if( !j5valid[ij5] )
{
    continue;
}
_ij5[0] = ij5; _ij5[1] = -1;
for(int iij5 = ij5+1; iij5 < 1; ++iij5)
{
if( j5valid[iij5] && IKabs(cj5array[ij5]-cj5array[iij5]) < IKFAST_SOLUTION_THRESH && IKabs(sj5array[ij5]-sj5array[iij5]) < IKFAST_SOLUTION_THRESH )
{
    j5valid[iij5]=false; _ij5[1] = iij5; break; 
}
}
j5 = j5array[ij5]; cj5 = cj5array[ij5]; sj5 = sj5array[ij5];
{
IkReal evalcond[16];
IkReal x1447=IKsin(j5);
IkReal x1448=IKcos(j5);
IkReal x1449=((0.531815483588428)*x1447);
IkReal x1450=(new_r01*x1447);
IkReal x1451=(new_r01*x1448);
IkReal x1452=(new_r00*x1448);
IkReal x1453=(new_r11*x1447);
IkReal x1454=(new_r11*x1448);
IkReal x1455=(new_r10*x1448);
IkReal x1456=(new_r10*x1447);
IkReal x1457=(new_r00*x1447);
evalcond[0]=((((-0.837955424564001)*x1448))+x1449);
evalcond[1]=((((0.531815483588428)*x1448))+(((0.837955424564001)*x1447)));
evalcond[2]=((-0.0656300101559687)+x1455+x1457);
evalcond[3]=((-0.844313325546427)+x1454+x1450);
evalcond[4]=((0.103420015585614)+(((-1.0)*x1456))+x1452);
evalcond[5]=((-0.535849798173328)+(((-1.0)*x1453))+x1451);
evalcond[6]=((((0.103420015585614)*x1448))+new_r00+(((-0.0656300101559687)*x1447)));
evalcond[7]=((((-0.844313325546427)*x1447))+(((-0.535849798173328)*x1448))+new_r01);
evalcond[8]=((((-0.103420015585614)*x1447))+new_r10+(((-0.0656300101559687)*x1448)));
evalcond[9]=((((-0.844313325546427)*x1448))+(((0.535849798173328)*x1447))+new_r11);
evalcond[10]=((((0.531815483588428)*x1455))+(((0.837955424564001)*x1456))+(((-0.837955424564001)*x1452))+((new_r00*x1449)));
evalcond[11]=((((0.531815483588428)*x1454))+(((0.837955424564001)*x1453))+(((-0.837955424564001)*x1451))+((new_r01*x1449)));
evalcond[12]=((2.24076669481955e-10)+(((0.535849798705775)*x1456))+(((-0.844313326436599)*x1455))+(((-0.844313326436599)*x1457))+(((-0.535849798705775)*x1452)));
evalcond[13]=((0.999999998963104)+(((0.535849798705775)*x1453))+(((-0.844313326436599)*x1454))+(((-0.844313326436599)*x1450))+(((-0.535849798705775)*x1451)));
evalcond[14]=((0.999999998963104)+(((-0.0656300100348293)*x1457))+(((-0.0656300100348293)*x1455))+(((-0.103420015812922)*x1456))+(((0.103420015812922)*x1452)));
evalcond[15]=((-2.24076669481955e-10)+(((-0.0656300100348293)*x1450))+(((-0.0656300100348293)*x1454))+(((-0.103420015812922)*x1453))+(((0.103420015812922)*x1451)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[9]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[10]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[11]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[12]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[13]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[14]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[15]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j2;
vinfos[0].indices[0] = _ij2[0];
vinfos[0].indices[1] = _ij2[1];
vinfos[0].maxsolutions = _nj2;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j3;
vinfos[1].indices[0] = _ij3[0];
vinfos[1].indices[1] = _ij3[1];
vinfos[1].maxsolutions = _nj3;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j4;
vinfos[2].indices[0] = _ij4[0];
vinfos[2].indices[1] = _ij4[1];
vinfos[2].maxsolutions = _nj4;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j5;
vinfos[3].indices[0] = _ij5[0];
vinfos[3].indices[1] = _ij5[1];
vinfos[3].maxsolutions = _nj5;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j6;
vinfos[4].indices[0] = _ij6[0];
vinfos[4].indices[1] = _ij6[1];
vinfos[4].maxsolutions = _nj6;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j7;
vinfos[5].indices[0] = _ij7[0];
vinfos[5].indices[1] = _ij7[1];
vinfos[5].maxsolutions = _nj7;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j8;
vinfos[6].indices[0] = _ij8[0];
vinfos[6].indices[1] = _ij8[1];
vinfos[6].maxsolutions = _nj8;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((1.85045528567731)+j3)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j5eval[3];
sj4=0;
cj4=1.0;
j4=0;
new_r02=0;
new_r12=0;
new_r20=0;
new_r21=0;
sj3=-0.96114963;
cj3=-0.276027873007547;
j3=-1.85045527213674;
j5eval[0]=((((-1.5756506728798)*new_r00))+(((-1.0)*new_r10)));
j5eval[1]=57412245357.8717;
j5eval[2]=IKsign(((((-7.67571803157366e+20)*new_r00))+(((-4.87145924137159e+20)*new_r10))));
if( IKabs(j5eval[0]) < 0.0000010000000000  || IKabs(j5eval[1]) < 0.0000010000000000  || IKabs(j5eval[2]) < 0.0000010000000000  )
{
{
IkReal j5eval[3];
sj4=0;
cj4=1.0;
j4=0;
new_r02=0;
new_r12=0;
new_r20=0;
new_r21=0;
sj3=-0.96114963;
cj3=-0.276027873007547;
j3=-1.85045527213674;
j5eval[0]=((((1.5756506728798)*new_r10))+(((-1.0)*new_r00)));
j5eval[1]=IKsign(((((7.67571803157366e+20)*new_r10))+(((-4.87145924137159e+20)*new_r00))));
j5eval[2]=-57412245357.8717;
if( IKabs(j5eval[0]) < 0.0000010000000000  || IKabs(j5eval[1]) < 0.0000010000000000  || IKabs(j5eval[2]) < 0.0000010000000000  )
{
{
IkReal j5eval[3];
sj4=0;
cj4=1.0;
j4=0;
new_r02=0;
new_r12=0;
new_r20=0;
new_r21=0;
sj3=-0.96114963;
cj3=-0.276027873007547;
j3=-1.85045527213674;
j5eval[0]=((((-1.5756506728798)*new_r01))+(((-1.0)*new_r11)));
j5eval[1]=IKsign(((((-7.67571803157366e+20)*new_r01))+(((-4.87145924137159e+20)*new_r11))));
j5eval[2]=-346898311.953055;
if( IKabs(j5eval[0]) < 0.0000010000000000  || IKabs(j5eval[1]) < 0.0000010000000000  || IKabs(j5eval[2]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j5array[1], cj5array[1], sj5array[1];
bool j5valid[1]={false};
_nj5 = 1;
CheckValue<IkReal> x1458=IKPowWithIntegerCheck(IKsign(((((-7.67571803157366e+20)*new_r01))+(((-4.87145924137159e+20)*new_r11)))),-1);
if(!x1458.valid){
continue;
}
j5array[0]=((-3.70710723588239)+(((1.5707963267949)*(x1458.value))));
sj5array[0]=IKsin(j5array[0]);
cj5array[0]=IKcos(j5array[0]);
if( j5array[0] > IKPI )
{
    j5array[0]-=IK2PI;
}
else if( j5array[0] < -IKPI )
{    j5array[0]+=IK2PI;
}
j5valid[0] = true;
for(int ij5 = 0; ij5 < 1; ++ij5)
{
if( !j5valid[ij5] )
{
    continue;
}
_ij5[0] = ij5; _ij5[1] = -1;
for(int iij5 = ij5+1; iij5 < 1; ++iij5)
{
if( j5valid[iij5] && IKabs(cj5array[ij5]-cj5array[iij5]) < IKFAST_SOLUTION_THRESH && IKabs(sj5array[ij5]-sj5array[iij5]) < IKFAST_SOLUTION_THRESH )
{
    j5valid[iij5]=false; _ij5[1] = iij5; break; 
}
}
j5 = j5array[ij5]; cj5 = cj5array[ij5]; sj5 = sj5array[ij5];
{
IkReal evalcond[16];
IkReal x1459=IKsin(j5);
IkReal x1460=IKcos(j5);
IkReal x1461=((0.531815483588428)*x1459);
IkReal x1462=(new_r01*x1459);
IkReal x1463=(new_r01*x1460);
IkReal x1464=(new_r00*x1460);
IkReal x1465=(new_r11*x1459);
IkReal x1466=(new_r11*x1460);
IkReal x1467=(new_r10*x1460);
IkReal x1468=(new_r10*x1459);
IkReal x1469=(new_r00*x1459);
evalcond[0]=((((-0.837955424564001)*x1460))+x1461);
evalcond[1]=((((0.837955424564001)*x1459))+(((0.531815483588428)*x1460)));
evalcond[2]=((0.844313325546427)+x1469+x1467);
evalcond[3]=((-0.0656300101559687)+x1466+x1462);
evalcond[4]=((0.535849798173328)+x1464+(((-1.0)*x1468)));
evalcond[5]=((0.103420015585614)+x1463+(((-1.0)*x1465)));
evalcond[6]=((((0.844313325546427)*x1459))+(((0.535849798173328)*x1460))+new_r00);
evalcond[7]=((((-0.0656300101559687)*x1459))+new_r01+(((0.103420015585614)*x1460)));
evalcond[8]=((((-0.535849798173328)*x1459))+(((0.844313325546427)*x1460))+new_r10);
evalcond[9]=((((-0.103420015585614)*x1459))+(((-0.0656300101559687)*x1460))+new_r11);
evalcond[10]=(((new_r00*x1461))+(((0.837955424564001)*x1468))+(((0.531815483588428)*x1467))+(((-0.837955424564001)*x1464)));
evalcond[11]=(((new_r01*x1461))+(((0.837955424564001)*x1465))+(((0.531815483588428)*x1466))+(((-0.837955424564001)*x1463)));
evalcond[12]=((-0.999999998963104)+(((-0.844313326436599)*x1469))+(((-0.844313326436599)*x1467))+(((-0.535849798705775)*x1464))+(((0.535849798705775)*x1468)));
evalcond[13]=((2.24076669481955e-10)+(((-0.844313326436599)*x1466))+(((-0.844313326436599)*x1462))+(((-0.535849798705775)*x1463))+(((0.535849798705775)*x1465)));
evalcond[14]=((2.24076669481955e-10)+(((-0.0656300100348293)*x1467))+(((-0.0656300100348293)*x1469))+(((0.103420015812922)*x1464))+(((-0.103420015812922)*x1468)));
evalcond[15]=((0.999999998963104)+(((-0.0656300100348293)*x1466))+(((-0.0656300100348293)*x1462))+(((0.103420015812922)*x1463))+(((-0.103420015812922)*x1465)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[9]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[10]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[11]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[12]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[13]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[14]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[15]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j2;
vinfos[0].indices[0] = _ij2[0];
vinfos[0].indices[1] = _ij2[1];
vinfos[0].maxsolutions = _nj2;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j3;
vinfos[1].indices[0] = _ij3[0];
vinfos[1].indices[1] = _ij3[1];
vinfos[1].maxsolutions = _nj3;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j4;
vinfos[2].indices[0] = _ij4[0];
vinfos[2].indices[1] = _ij4[1];
vinfos[2].maxsolutions = _nj4;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j5;
vinfos[3].indices[0] = _ij5[0];
vinfos[3].indices[1] = _ij5[1];
vinfos[3].maxsolutions = _nj5;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j6;
vinfos[4].indices[0] = _ij6[0];
vinfos[4].indices[1] = _ij6[1];
vinfos[4].maxsolutions = _nj6;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j7;
vinfos[5].indices[0] = _ij7[0];
vinfos[5].indices[1] = _ij7[1];
vinfos[5].maxsolutions = _nj7;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j8;
vinfos[6].indices[0] = _ij8[0];
vinfos[6].indices[1] = _ij8[1];
vinfos[6].maxsolutions = _nj8;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j5array[1], cj5array[1], sj5array[1];
bool j5valid[1]={false};
_nj5 = 1;
CheckValue<IkReal> x1470=IKPowWithIntegerCheck(IKsign(((((7.67571803157366e+20)*new_r10))+(((-4.87145924137159e+20)*new_r00)))),-1);
if(!x1470.valid){
continue;
}
j5array[0]=((1.0052817445023)+(((1.5707963267949)*(x1470.value))));
sj5array[0]=IKsin(j5array[0]);
cj5array[0]=IKcos(j5array[0]);
if( j5array[0] > IKPI )
{
    j5array[0]-=IK2PI;
}
else if( j5array[0] < -IKPI )
{    j5array[0]+=IK2PI;
}
j5valid[0] = true;
for(int ij5 = 0; ij5 < 1; ++ij5)
{
if( !j5valid[ij5] )
{
    continue;
}
_ij5[0] = ij5; _ij5[1] = -1;
for(int iij5 = ij5+1; iij5 < 1; ++iij5)
{
if( j5valid[iij5] && IKabs(cj5array[ij5]-cj5array[iij5]) < IKFAST_SOLUTION_THRESH && IKabs(sj5array[ij5]-sj5array[iij5]) < IKFAST_SOLUTION_THRESH )
{
    j5valid[iij5]=false; _ij5[1] = iij5; break; 
}
}
j5 = j5array[ij5]; cj5 = cj5array[ij5]; sj5 = sj5array[ij5];
{
IkReal evalcond[16];
IkReal x1471=IKsin(j5);
IkReal x1472=IKcos(j5);
IkReal x1473=((0.531815483588428)*x1471);
IkReal x1474=(new_r01*x1471);
IkReal x1475=(new_r01*x1472);
IkReal x1476=(new_r00*x1472);
IkReal x1477=(new_r11*x1471);
IkReal x1478=(new_r11*x1472);
IkReal x1479=(new_r10*x1472);
IkReal x1480=(new_r10*x1471);
IkReal x1481=(new_r00*x1471);
evalcond[0]=((((-0.837955424564001)*x1472))+x1473);
evalcond[1]=((((0.837955424564001)*x1471))+(((0.531815483588428)*x1472)));
evalcond[2]=((0.844313325546427)+x1479+x1481);
evalcond[3]=((-0.0656300101559687)+x1474+x1478);
evalcond[4]=((0.535849798173328)+(((-1.0)*x1480))+x1476);
evalcond[5]=((0.103420015585614)+(((-1.0)*x1477))+x1475);
evalcond[6]=((((0.535849798173328)*x1472))+new_r00+(((0.844313325546427)*x1471)));
evalcond[7]=((((0.103420015585614)*x1472))+new_r01+(((-0.0656300101559687)*x1471)));
evalcond[8]=((((-0.535849798173328)*x1471))+new_r10+(((0.844313325546427)*x1472)));
evalcond[9]=((((-0.103420015585614)*x1471))+new_r11+(((-0.0656300101559687)*x1472)));
evalcond[10]=((((0.531815483588428)*x1479))+(((-0.837955424564001)*x1476))+(((0.837955424564001)*x1480))+((new_r00*x1473)));
evalcond[11]=((((0.531815483588428)*x1478))+(((-0.837955424564001)*x1475))+((new_r01*x1473))+(((0.837955424564001)*x1477)));
evalcond[12]=((-0.999999998963104)+(((-0.535849798705775)*x1476))+(((-0.844313326436599)*x1481))+(((0.535849798705775)*x1480))+(((-0.844313326436599)*x1479)));
evalcond[13]=((2.24076669481955e-10)+(((-0.535849798705775)*x1475))+(((0.535849798705775)*x1477))+(((-0.844313326436599)*x1474))+(((-0.844313326436599)*x1478)));
evalcond[14]=((2.24076669481955e-10)+(((-0.103420015812922)*x1480))+(((-0.0656300100348293)*x1481))+(((0.103420015812922)*x1476))+(((-0.0656300100348293)*x1479)));
evalcond[15]=((0.999999998963104)+(((0.103420015812922)*x1475))+(((-0.0656300100348293)*x1478))+(((-0.0656300100348293)*x1474))+(((-0.103420015812922)*x1477)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[9]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[10]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[11]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[12]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[13]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[14]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[15]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j2;
vinfos[0].indices[0] = _ij2[0];
vinfos[0].indices[1] = _ij2[1];
vinfos[0].maxsolutions = _nj2;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j3;
vinfos[1].indices[0] = _ij3[0];
vinfos[1].indices[1] = _ij3[1];
vinfos[1].maxsolutions = _nj3;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j4;
vinfos[2].indices[0] = _ij4[0];
vinfos[2].indices[1] = _ij4[1];
vinfos[2].maxsolutions = _nj4;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j5;
vinfos[3].indices[0] = _ij5[0];
vinfos[3].indices[1] = _ij5[1];
vinfos[3].maxsolutions = _nj5;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j6;
vinfos[4].indices[0] = _ij6[0];
vinfos[4].indices[1] = _ij6[1];
vinfos[4].maxsolutions = _nj6;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j7;
vinfos[5].indices[0] = _ij7[0];
vinfos[5].indices[1] = _ij7[1];
vinfos[5].maxsolutions = _nj7;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j8;
vinfos[6].indices[0] = _ij8[0];
vinfos[6].indices[1] = _ij8[1];
vinfos[6].maxsolutions = _nj8;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j5array[1], cj5array[1], sj5array[1];
bool j5valid[1]={false};
_nj5 = 1;
CheckValue<IkReal> x1482=IKPowWithIntegerCheck(IKsign(((((-7.67571803157366e+20)*new_r00))+(((-4.87145924137159e+20)*new_r10)))),-1);
if(!x1482.valid){
continue;
}
j5array[0]=((-0.565514582292594)+(((1.5707963267949)*(x1482.value))));
sj5array[0]=IKsin(j5array[0]);
cj5array[0]=IKcos(j5array[0]);
if( j5array[0] > IKPI )
{
    j5array[0]-=IK2PI;
}
else if( j5array[0] < -IKPI )
{    j5array[0]+=IK2PI;
}
j5valid[0] = true;
for(int ij5 = 0; ij5 < 1; ++ij5)
{
if( !j5valid[ij5] )
{
    continue;
}
_ij5[0] = ij5; _ij5[1] = -1;
for(int iij5 = ij5+1; iij5 < 1; ++iij5)
{
if( j5valid[iij5] && IKabs(cj5array[ij5]-cj5array[iij5]) < IKFAST_SOLUTION_THRESH && IKabs(sj5array[ij5]-sj5array[iij5]) < IKFAST_SOLUTION_THRESH )
{
    j5valid[iij5]=false; _ij5[1] = iij5; break; 
}
}
j5 = j5array[ij5]; cj5 = cj5array[ij5]; sj5 = sj5array[ij5];
{
IkReal evalcond[16];
IkReal x1483=IKsin(j5);
IkReal x1484=IKcos(j5);
IkReal x1485=((0.531815483588428)*x1483);
IkReal x1486=(new_r01*x1483);
IkReal x1487=(new_r01*x1484);
IkReal x1488=(new_r00*x1484);
IkReal x1489=(new_r11*x1483);
IkReal x1490=(new_r11*x1484);
IkReal x1491=(new_r10*x1484);
IkReal x1492=(new_r10*x1483);
IkReal x1493=(new_r00*x1483);
evalcond[0]=((((-0.837955424564001)*x1484))+x1485);
evalcond[1]=((((0.531815483588428)*x1484))+(((0.837955424564001)*x1483)));
evalcond[2]=((0.844313325546427)+x1491+x1493);
evalcond[3]=((-0.0656300101559687)+x1490+x1486);
evalcond[4]=((0.535849798173328)+(((-1.0)*x1492))+x1488);
evalcond[5]=((0.103420015585614)+(((-1.0)*x1489))+x1487);
evalcond[6]=((((0.535849798173328)*x1484))+new_r00+(((0.844313325546427)*x1483)));
evalcond[7]=((((0.103420015585614)*x1484))+new_r01+(((-0.0656300101559687)*x1483)));
evalcond[8]=((((-0.535849798173328)*x1483))+new_r10+(((0.844313325546427)*x1484)));
evalcond[9]=((((-0.103420015585614)*x1483))+new_r11+(((-0.0656300101559687)*x1484)));
evalcond[10]=((((-0.837955424564001)*x1488))+(((0.837955424564001)*x1492))+((new_r00*x1485))+(((0.531815483588428)*x1491)));
evalcond[11]=((((-0.837955424564001)*x1487))+(((0.837955424564001)*x1489))+((new_r01*x1485))+(((0.531815483588428)*x1490)));
evalcond[12]=((-0.999999998963104)+(((-0.844313326436599)*x1493))+(((-0.844313326436599)*x1491))+(((0.535849798705775)*x1492))+(((-0.535849798705775)*x1488)));
evalcond[13]=((2.24076669481955e-10)+(((-0.844313326436599)*x1486))+(((-0.844313326436599)*x1490))+(((0.535849798705775)*x1489))+(((-0.535849798705775)*x1487)));
evalcond[14]=((2.24076669481955e-10)+(((-0.103420015812922)*x1492))+(((-0.0656300100348293)*x1493))+(((-0.0656300100348293)*x1491))+(((0.103420015812922)*x1488)));
evalcond[15]=((0.999999998963104)+(((-0.103420015812922)*x1489))+(((-0.0656300100348293)*x1490))+(((-0.0656300100348293)*x1486))+(((0.103420015812922)*x1487)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[9]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[10]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[11]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[12]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[13]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[14]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[15]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j2;
vinfos[0].indices[0] = _ij2[0];
vinfos[0].indices[1] = _ij2[1];
vinfos[0].maxsolutions = _nj2;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j3;
vinfos[1].indices[0] = _ij3[0];
vinfos[1].indices[1] = _ij3[1];
vinfos[1].maxsolutions = _nj3;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j4;
vinfos[2].indices[0] = _ij4[0];
vinfos[2].indices[1] = _ij4[1];
vinfos[2].maxsolutions = _nj4;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j5;
vinfos[3].indices[0] = _ij5[0];
vinfos[3].indices[1] = _ij5[1];
vinfos[3].maxsolutions = _nj5;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j6;
vinfos[4].indices[0] = _ij6[0];
vinfos[4].indices[1] = _ij6[1];
vinfos[4].maxsolutions = _nj6;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j7;
vinfos[5].indices[0] = _ij7[0];
vinfos[5].indices[1] = _ij7[1];
vinfos[5].maxsolutions = _nj7;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j8;
vinfos[6].indices[0] = _ij8[0];
vinfos[6].indices[1] = _ij8[1];
vinfos[6].maxsolutions = _nj8;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-1.29113736791249)+j3)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j5eval[3];
sj4=0;
cj4=1.0;
j4=0;
new_r02=0;
new_r12=0;
new_r20=0;
new_r21=0;
sj3=0.96114963;
cj3=0.276027873007547;
j3=1.29113736329066;
j5eval[0]=((((-1.5756506728798)*new_r01))+(((-1.0)*new_r11)));
j5eval[1]=IKsign(((((-7.67571803157366e+20)*new_r01))+(((-4.87145924137159e+20)*new_r11))));
j5eval[2]=346898311.953055;
if( IKabs(j5eval[0]) < 0.0000010000000000  || IKabs(j5eval[1]) < 0.0000010000000000  || IKabs(j5eval[2]) < 0.0000010000000000  )
{
{
IkReal j5eval[3];
sj4=0;
cj4=1.0;
j4=0;
new_r02=0;
new_r12=0;
new_r20=0;
new_r21=0;
sj3=0.96114963;
cj3=0.276027873007547;
j3=1.29113736329066;
j5eval[0]=((((1.5756506728798)*new_r10))+(((-1.0)*new_r00)));
j5eval[1]=IKsign(((((7.67571803157366e+20)*new_r10))+(((-4.87145924137159e+20)*new_r00))));
j5eval[2]=57412245357.8717;
if( IKabs(j5eval[0]) < 0.0000010000000000  || IKabs(j5eval[1]) < 0.0000010000000000  || IKabs(j5eval[2]) < 0.0000010000000000  )
{
{
IkReal j5eval[3];
sj4=0;
cj4=1.0;
j4=0;
new_r02=0;
new_r12=0;
new_r20=0;
new_r21=0;
sj3=0.96114963;
cj3=0.276027873007547;
j3=1.29113736329066;
j5eval[0]=((((1.5756506728798)*new_r11))+(((-1.0)*new_r01)));
j5eval[1]=-346898311.953055;
j5eval[2]=IKsign(((((7.67571803157366e+20)*new_r11))+(((-4.87145924137159e+20)*new_r01))));
if( IKabs(j5eval[0]) < 0.0000010000000000  || IKabs(j5eval[1]) < 0.0000010000000000  || IKabs(j5eval[2]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j5array[1], cj5array[1], sj5array[1];
bool j5valid[1]={false};
_nj5 = 1;
CheckValue<IkReal> x1494=IKPowWithIntegerCheck(IKsign(((((7.67571803157366e+20)*new_r11))+(((-4.87145924137159e+20)*new_r01)))),-1);
if(!x1494.valid){
continue;
}
j5array[0]=((1.0052817445023)+(((1.5707963267949)*(x1494.value))));
sj5array[0]=IKsin(j5array[0]);
cj5array[0]=IKcos(j5array[0]);
if( j5array[0] > IKPI )
{
    j5array[0]-=IK2PI;
}
else if( j5array[0] < -IKPI )
{    j5array[0]+=IK2PI;
}
j5valid[0] = true;
for(int ij5 = 0; ij5 < 1; ++ij5)
{
if( !j5valid[ij5] )
{
    continue;
}
_ij5[0] = ij5; _ij5[1] = -1;
for(int iij5 = ij5+1; iij5 < 1; ++iij5)
{
if( j5valid[iij5] && IKabs(cj5array[ij5]-cj5array[iij5]) < IKFAST_SOLUTION_THRESH && IKabs(sj5array[ij5]-sj5array[iij5]) < IKFAST_SOLUTION_THRESH )
{
    j5valid[iij5]=false; _ij5[1] = iij5; break; 
}
}
j5 = j5array[ij5]; cj5 = cj5array[ij5]; sj5 = sj5array[ij5];
{
IkReal evalcond[16];
IkReal x1495=IKsin(j5);
IkReal x1496=IKcos(j5);
IkReal x1497=((0.531815483588428)*x1495);
IkReal x1498=(new_r01*x1495);
IkReal x1499=(new_r01*x1496);
IkReal x1500=(new_r00*x1496);
IkReal x1501=(new_r11*x1495);
IkReal x1502=(new_r11*x1496);
IkReal x1503=(new_r10*x1496);
IkReal x1504=(new_r10*x1495);
IkReal x1505=(new_r00*x1495);
evalcond[0]=((((-0.837955424564001)*x1496))+x1497);
evalcond[1]=((((0.837955424564001)*x1495))+(((0.531815483588428)*x1496)));
evalcond[2]=((-0.844313325546427)+x1503+x1505);
evalcond[3]=((0.0656300101559687)+x1502+x1498);
evalcond[4]=((-0.535849798173328)+(((-1.0)*x1504))+x1500);
evalcond[5]=((-0.103420015585614)+(((-1.0)*x1501))+x1499);
evalcond[6]=((((-0.535849798173328)*x1496))+(((-0.844313325546427)*x1495))+new_r00);
evalcond[7]=((((0.0656300101559687)*x1495))+(((-0.103420015585614)*x1496))+new_r01);
evalcond[8]=((((0.535849798173328)*x1495))+(((-0.844313325546427)*x1496))+new_r10);
evalcond[9]=((((0.0656300101559687)*x1496))+new_r11+(((0.103420015585614)*x1495)));
evalcond[10]=((((0.531815483588428)*x1503))+(((0.837955424564001)*x1504))+((new_r00*x1497))+(((-0.837955424564001)*x1500)));
evalcond[11]=((((-0.837955424564001)*x1499))+(((0.531815483588428)*x1502))+(((0.837955424564001)*x1501))+((new_r01*x1497)));
evalcond[12]=((0.999999998963104)+(((-0.535849798705775)*x1500))+(((0.535849798705775)*x1504))+(((-0.844313326436599)*x1503))+(((-0.844313326436599)*x1505)));
evalcond[13]=((-2.24076669481955e-10)+(((-0.844313326436599)*x1498))+(((0.535849798705775)*x1501))+(((-0.535849798705775)*x1499))+(((-0.844313326436599)*x1502)));
evalcond[14]=((-2.24076669481955e-10)+(((-0.0656300100348293)*x1503))+(((-0.0656300100348293)*x1505))+(((-0.103420015812922)*x1504))+(((0.103420015812922)*x1500)));
evalcond[15]=((-0.999999998963104)+(((-0.0656300100348293)*x1502))+(((-0.0656300100348293)*x1498))+(((0.103420015812922)*x1499))+(((-0.103420015812922)*x1501)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[9]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[10]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[11]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[12]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[13]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[14]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[15]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j2;
vinfos[0].indices[0] = _ij2[0];
vinfos[0].indices[1] = _ij2[1];
vinfos[0].maxsolutions = _nj2;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j3;
vinfos[1].indices[0] = _ij3[0];
vinfos[1].indices[1] = _ij3[1];
vinfos[1].maxsolutions = _nj3;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j4;
vinfos[2].indices[0] = _ij4[0];
vinfos[2].indices[1] = _ij4[1];
vinfos[2].maxsolutions = _nj4;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j5;
vinfos[3].indices[0] = _ij5[0];
vinfos[3].indices[1] = _ij5[1];
vinfos[3].maxsolutions = _nj5;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j6;
vinfos[4].indices[0] = _ij6[0];
vinfos[4].indices[1] = _ij6[1];
vinfos[4].maxsolutions = _nj6;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j7;
vinfos[5].indices[0] = _ij7[0];
vinfos[5].indices[1] = _ij7[1];
vinfos[5].maxsolutions = _nj7;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j8;
vinfos[6].indices[0] = _ij8[0];
vinfos[6].indices[1] = _ij8[1];
vinfos[6].maxsolutions = _nj8;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j5array[1], cj5array[1], sj5array[1];
bool j5valid[1]={false};
_nj5 = 1;
CheckValue<IkReal> x1506=IKPowWithIntegerCheck(IKsign(((((7.67571803157366e+20)*new_r10))+(((-4.87145924137159e+20)*new_r00)))),-1);
if(!x1506.valid){
continue;
}
j5array[0]=((-2.13631090908749)+(((1.5707963267949)*(x1506.value))));
sj5array[0]=IKsin(j5array[0]);
cj5array[0]=IKcos(j5array[0]);
if( j5array[0] > IKPI )
{
    j5array[0]-=IK2PI;
}
else if( j5array[0] < -IKPI )
{    j5array[0]+=IK2PI;
}
j5valid[0] = true;
for(int ij5 = 0; ij5 < 1; ++ij5)
{
if( !j5valid[ij5] )
{
    continue;
}
_ij5[0] = ij5; _ij5[1] = -1;
for(int iij5 = ij5+1; iij5 < 1; ++iij5)
{
if( j5valid[iij5] && IKabs(cj5array[ij5]-cj5array[iij5]) < IKFAST_SOLUTION_THRESH && IKabs(sj5array[ij5]-sj5array[iij5]) < IKFAST_SOLUTION_THRESH )
{
    j5valid[iij5]=false; _ij5[1] = iij5; break; 
}
}
j5 = j5array[ij5]; cj5 = cj5array[ij5]; sj5 = sj5array[ij5];
{
IkReal evalcond[16];
IkReal x1507=IKsin(j5);
IkReal x1508=IKcos(j5);
IkReal x1509=((0.531815483588428)*x1507);
IkReal x1510=(new_r01*x1507);
IkReal x1511=(new_r01*x1508);
IkReal x1512=(new_r00*x1508);
IkReal x1513=(new_r11*x1507);
IkReal x1514=(new_r11*x1508);
IkReal x1515=(new_r10*x1508);
IkReal x1516=(new_r10*x1507);
IkReal x1517=(new_r00*x1507);
evalcond[0]=((((-0.837955424564001)*x1508))+x1509);
evalcond[1]=((((0.531815483588428)*x1508))+(((0.837955424564001)*x1507)));
evalcond[2]=((-0.844313325546427)+x1515+x1517);
evalcond[3]=((0.0656300101559687)+x1514+x1510);
evalcond[4]=((-0.535849798173328)+(((-1.0)*x1516))+x1512);
evalcond[5]=((-0.103420015585614)+(((-1.0)*x1513))+x1511);
evalcond[6]=((((-0.844313325546427)*x1507))+new_r00+(((-0.535849798173328)*x1508)));
evalcond[7]=((((-0.103420015585614)*x1508))+(((0.0656300101559687)*x1507))+new_r01);
evalcond[8]=((((0.535849798173328)*x1507))+(((-0.844313325546427)*x1508))+new_r10);
evalcond[9]=((((0.103420015585614)*x1507))+(((0.0656300101559687)*x1508))+new_r11);
evalcond[10]=((((0.531815483588428)*x1515))+(((0.837955424564001)*x1516))+((new_r00*x1509))+(((-0.837955424564001)*x1512)));
evalcond[11]=((((0.531815483588428)*x1514))+(((0.837955424564001)*x1513))+((new_r01*x1509))+(((-0.837955424564001)*x1511)));
evalcond[12]=((0.999999998963104)+(((-0.535849798705775)*x1512))+(((0.535849798705775)*x1516))+(((-0.844313326436599)*x1515))+(((-0.844313326436599)*x1517)));
evalcond[13]=((-2.24076669481955e-10)+(((-0.535849798705775)*x1511))+(((0.535849798705775)*x1513))+(((-0.844313326436599)*x1514))+(((-0.844313326436599)*x1510)));
evalcond[14]=((-2.24076669481955e-10)+(((-0.0656300100348293)*x1517))+(((-0.0656300100348293)*x1515))+(((-0.103420015812922)*x1516))+(((0.103420015812922)*x1512)));
evalcond[15]=((-0.999999998963104)+(((-0.0656300100348293)*x1510))+(((-0.0656300100348293)*x1514))+(((-0.103420015812922)*x1513))+(((0.103420015812922)*x1511)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[9]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[10]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[11]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[12]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[13]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[14]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[15]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j2;
vinfos[0].indices[0] = _ij2[0];
vinfos[0].indices[1] = _ij2[1];
vinfos[0].maxsolutions = _nj2;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j3;
vinfos[1].indices[0] = _ij3[0];
vinfos[1].indices[1] = _ij3[1];
vinfos[1].maxsolutions = _nj3;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j4;
vinfos[2].indices[0] = _ij4[0];
vinfos[2].indices[1] = _ij4[1];
vinfos[2].maxsolutions = _nj4;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j5;
vinfos[3].indices[0] = _ij5[0];
vinfos[3].indices[1] = _ij5[1];
vinfos[3].maxsolutions = _nj5;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j6;
vinfos[4].indices[0] = _ij6[0];
vinfos[4].indices[1] = _ij6[1];
vinfos[4].maxsolutions = _nj6;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j7;
vinfos[5].indices[0] = _ij7[0];
vinfos[5].indices[1] = _ij7[1];
vinfos[5].maxsolutions = _nj7;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j8;
vinfos[6].indices[0] = _ij8[0];
vinfos[6].indices[1] = _ij8[1];
vinfos[6].maxsolutions = _nj8;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j5array[1], cj5array[1], sj5array[1];
bool j5valid[1]={false};
_nj5 = 1;
CheckValue<IkReal> x1518=IKPowWithIntegerCheck(IKsign(((((-7.67571803157366e+20)*new_r01))+(((-4.87145924137159e+20)*new_r11)))),-1);
if(!x1518.valid){
continue;
}
j5array[0]=((-0.565514582292594)+(((1.5707963267949)*(x1518.value))));
sj5array[0]=IKsin(j5array[0]);
cj5array[0]=IKcos(j5array[0]);
if( j5array[0] > IKPI )
{
    j5array[0]-=IK2PI;
}
else if( j5array[0] < -IKPI )
{    j5array[0]+=IK2PI;
}
j5valid[0] = true;
for(int ij5 = 0; ij5 < 1; ++ij5)
{
if( !j5valid[ij5] )
{
    continue;
}
_ij5[0] = ij5; _ij5[1] = -1;
for(int iij5 = ij5+1; iij5 < 1; ++iij5)
{
if( j5valid[iij5] && IKabs(cj5array[ij5]-cj5array[iij5]) < IKFAST_SOLUTION_THRESH && IKabs(sj5array[ij5]-sj5array[iij5]) < IKFAST_SOLUTION_THRESH )
{
    j5valid[iij5]=false; _ij5[1] = iij5; break; 
}
}
j5 = j5array[ij5]; cj5 = cj5array[ij5]; sj5 = sj5array[ij5];
{
IkReal evalcond[16];
IkReal x1519=IKsin(j5);
IkReal x1520=IKcos(j5);
IkReal x1521=((0.531815483588428)*x1519);
IkReal x1522=(new_r01*x1519);
IkReal x1523=(new_r01*x1520);
IkReal x1524=(new_r00*x1520);
IkReal x1525=(new_r11*x1519);
IkReal x1526=(new_r11*x1520);
IkReal x1527=(new_r10*x1520);
IkReal x1528=(new_r10*x1519);
IkReal x1529=(new_r00*x1519);
evalcond[0]=((((-0.837955424564001)*x1520))+x1521);
evalcond[1]=((((0.837955424564001)*x1519))+(((0.531815483588428)*x1520)));
evalcond[2]=((-0.844313325546427)+x1527+x1529);
evalcond[3]=((0.0656300101559687)+x1526+x1522);
evalcond[4]=((-0.535849798173328)+x1524+(((-1.0)*x1528)));
evalcond[5]=((-0.103420015585614)+x1523+(((-1.0)*x1525)));
evalcond[6]=((((-0.535849798173328)*x1520))+(((-0.844313325546427)*x1519))+new_r00);
evalcond[7]=((((-0.103420015585614)*x1520))+new_r01+(((0.0656300101559687)*x1519)));
evalcond[8]=((((0.535849798173328)*x1519))+(((-0.844313325546427)*x1520))+new_r10);
evalcond[9]=((((0.0656300101559687)*x1520))+(((0.103420015585614)*x1519))+new_r11);
evalcond[10]=((((0.837955424564001)*x1528))+((new_r00*x1521))+(((0.531815483588428)*x1527))+(((-0.837955424564001)*x1524)));
evalcond[11]=((((0.837955424564001)*x1525))+((new_r01*x1521))+(((0.531815483588428)*x1526))+(((-0.837955424564001)*x1523)));
evalcond[12]=((0.999999998963104)+(((-0.535849798705775)*x1524))+(((0.535849798705775)*x1528))+(((-0.844313326436599)*x1527))+(((-0.844313326436599)*x1529)));
evalcond[13]=((-2.24076669481955e-10)+(((-0.535849798705775)*x1523))+(((0.535849798705775)*x1525))+(((-0.844313326436599)*x1526))+(((-0.844313326436599)*x1522)));
evalcond[14]=((-2.24076669481955e-10)+(((-0.0656300100348293)*x1527))+(((-0.0656300100348293)*x1529))+(((0.103420015812922)*x1524))+(((-0.103420015812922)*x1528)));
evalcond[15]=((-0.999999998963104)+(((-0.0656300100348293)*x1522))+(((-0.0656300100348293)*x1526))+(((0.103420015812922)*x1523))+(((-0.103420015812922)*x1525)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[9]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[10]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[11]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[12]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[13]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[14]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[15]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j2;
vinfos[0].indices[0] = _ij2[0];
vinfos[0].indices[1] = _ij2[1];
vinfos[0].maxsolutions = _nj2;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j3;
vinfos[1].indices[0] = _ij3[0];
vinfos[1].indices[1] = _ij3[1];
vinfos[1].maxsolutions = _nj3;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j4;
vinfos[2].indices[0] = _ij4[0];
vinfos[2].indices[1] = _ij4[1];
vinfos[2].maxsolutions = _nj4;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j5;
vinfos[3].indices[0] = _ij5[0];
vinfos[3].indices[1] = _ij5[1];
vinfos[3].maxsolutions = _nj5;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j6;
vinfos[4].indices[0] = _ij6[0];
vinfos[4].indices[1] = _ij6[1];
vinfos[4].maxsolutions = _nj6;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j7;
vinfos[5].indices[0] = _ij7[0];
vinfos[5].indices[1] = _ij7[1];
vinfos[5].maxsolutions = _nj7;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j8;
vinfos[6].indices[0] = _ij8[0];
vinfos[6].indices[1] = _ij8[1];
vinfos[6].maxsolutions = _nj8;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
if( 1 )
{
bgotonextstatement=false;
continue; // branch miss [j5]

}
} while(0);
if( bgotonextstatement )
{
}
}
}
}
}
}

} else
{
{
IkReal j5array[1], cj5array[1], sj5array[1];
bool j5valid[1]={false};
_nj5 = 1;
CheckValue<IkReal> x1530 = IKatan2WithCheck(IkReal(((((-4.04149486762137e+20)*sj3))+(((-8.28020203883177e+19)*cj3)))),IkReal(((((6.36798410760785e+20)*sj3))+(((1.30467059140659e+20)*cj3)))),IKFAST_ATAN2_MAGTHRESH);
if(!x1530.valid){
continue;
}
CheckValue<IkReal> x1531=IKPowWithIntegerCheck(IKsign(((((7.67571803157366e+20)*new_r10))+(((-4.87145924137159e+20)*new_r00)))),-1);
if(!x1531.valid){
continue;
}
j5array[0]=((-1.5707963267949)+(x1530.value)+(((1.5707963267949)*(x1531.value))));
sj5array[0]=IKsin(j5array[0]);
cj5array[0]=IKcos(j5array[0]);
if( j5array[0] > IKPI )
{
    j5array[0]-=IK2PI;
}
else if( j5array[0] < -IKPI )
{    j5array[0]+=IK2PI;
}
j5valid[0] = true;
for(int ij5 = 0; ij5 < 1; ++ij5)
{
if( !j5valid[ij5] )
{
    continue;
}
_ij5[0] = ij5; _ij5[1] = -1;
for(int iij5 = ij5+1; iij5 < 1; ++iij5)
{
if( j5valid[iij5] && IKabs(cj5array[ij5]-cj5array[iij5]) < IKFAST_SOLUTION_THRESH && IKabs(sj5array[ij5]-sj5array[iij5]) < IKFAST_SOLUTION_THRESH )
{
    j5valid[iij5]=false; _ij5[1] = iij5; break; 
}
}
j5 = j5array[ij5]; cj5 = cj5array[ij5]; sj5 = sj5array[ij5];
{
IkReal evalcond[16];
IkReal x1532=IKsin(j5);
IkReal x1533=IKcos(j5);
IkReal x1534=((0.276027873078388)*sj3);
IkReal x1535=((0.961149631058464)*cj3);
IkReal x1536=((0.961149631058464)*sj3);
IkReal x1537=((0.276027873078388)*cj3);
IkReal x1538=((0.169973751776694)*sj3);
IkReal x1539=((0.247311590268888)*sj3);
IkReal x1540=((0.829627154282309)*sj3);
IkReal x1541=((0.486485029330234)*sj3);
IkReal x1542=(cj3*x1532);
IkReal x1543=((0.531815483588428)*x1532);
IkReal x1544=(new_r01*x1532);
IkReal x1545=(new_r01*x1533);
IkReal x1546=(new_r00*x1533);
IkReal x1547=(new_r11*x1532);
IkReal x1548=(new_r11*x1533);
IkReal x1549=(new_r10*x1533);
IkReal x1550=(cj3*x1533);
IkReal x1551=(sj3*x1533);
IkReal x1552=(new_r10*x1532);
IkReal x1553=(new_r00*x1532);
IkReal x1554=(x1537+x1536);
evalcond[0]=((((-0.837955424564001)*x1533))+x1543);
evalcond[1]=((((0.837955424564001)*x1532))+(((0.531815483588428)*x1533)));
evalcond[2]=(x1549+x1553+(((-1.0)*x1540))+(((-0.169973751776694)*cj3)));
evalcond[3]=((((0.829627154282309)*cj3))+(((-1.0)*x1538))+x1544+x1548);
evalcond[4]=((((-1.0)*x1552))+x1546+(((-1.0)*x1541))+(((-0.247311590268888)*cj3)));
evalcond[5]=((((-1.0)*x1547))+(((-1.0)*x1539))+x1545+(((0.486485029330234)*cj3)));
evalcond[6]=(((new_r00*x1543))+(((-0.837955424564001)*x1546))+(((0.837955424564001)*x1552))+(((0.531815483588428)*x1549)));
evalcond[7]=(((new_r01*x1543))+(((-0.837955424564001)*x1545))+(((0.837955424564001)*x1547))+(((0.531815483588428)*x1548)));
evalcond[8]=((((-0.535849798705775)*x1546))+(((0.535849798705775)*x1552))+(((-0.844313326436599)*x1549))+x1554+(((-0.844313326436599)*x1553)));
evalcond[9]=((((-0.535849798705775)*x1545))+(((-1.0)*x1535))+(((0.535849798705775)*x1547))+(((-0.844313326436599)*x1544))+(((-0.844313326436599)*x1548))+x1534);
evalcond[10]=((((-0.0656300100348293)*x1549))+(((-1.0)*x1535))+(((-0.0656300100348293)*x1553))+(((-0.103420015812922)*x1552))+x1534+(((0.103420015812922)*x1546)));
evalcond[11]=((((-0.0656300100348293)*x1548))+(((-0.0656300100348293)*x1544))+(((-0.103420015812922)*x1547))+(((-1.0)*x1554))+(((0.103420015812922)*x1545)));
evalcond[12]=((((-1.0)*x1532*x1540))+(((-1.0)*x1533*x1541))+new_r00+(((-0.169973751776694)*x1542))+(((-0.247311590268888)*x1550)));
evalcond[13]=((((-1.0)*x1532*x1538))+(((-1.0)*x1533*x1539))+new_r01+(((0.486485029330234)*x1550))+(((0.829627154282309)*x1542)));
evalcond[14]=(((x1532*x1541))+(((0.247311590268888)*x1542))+(((-1.0)*x1533*x1540))+(((-0.169973751776694)*x1550))+new_r10);
evalcond[15]=((((-0.486485029330234)*x1542))+(((0.829627154282309)*x1550))+((x1532*x1539))+(((-1.0)*x1533*x1538))+new_r11);
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[9]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[10]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[11]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[12]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[13]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[14]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[15]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j2;
vinfos[0].indices[0] = _ij2[0];
vinfos[0].indices[1] = _ij2[1];
vinfos[0].maxsolutions = _nj2;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j3;
vinfos[1].indices[0] = _ij3[0];
vinfos[1].indices[1] = _ij3[1];
vinfos[1].maxsolutions = _nj3;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j4;
vinfos[2].indices[0] = _ij4[0];
vinfos[2].indices[1] = _ij4[1];
vinfos[2].maxsolutions = _nj4;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j5;
vinfos[3].indices[0] = _ij5[0];
vinfos[3].indices[1] = _ij5[1];
vinfos[3].maxsolutions = _nj5;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j6;
vinfos[4].indices[0] = _ij6[0];
vinfos[4].indices[1] = _ij6[1];
vinfos[4].maxsolutions = _nj6;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j7;
vinfos[5].indices[0] = _ij7[0];
vinfos[5].indices[1] = _ij7[1];
vinfos[5].maxsolutions = _nj7;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j8;
vinfos[6].indices[0] = _ij8[0];
vinfos[6].indices[1] = _ij8[1];
vinfos[6].maxsolutions = _nj8;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j5array[1], cj5array[1], sj5array[1];
bool j5valid[1]={false};
_nj5 = 1;
CheckValue<IkReal> x1555 = IKatan2WithCheck(IkReal(((((6.36798410760785e+20)*cj3))+(((-1.30467059140659e+20)*sj3)))),IkReal(((((-8.28020203883177e+19)*sj3))+(((4.04149486762137e+20)*cj3)))),IKFAST_ATAN2_MAGTHRESH);
if(!x1555.valid){
continue;
}
CheckValue<IkReal> x1556=IKPowWithIntegerCheck(IKsign(((((-7.67571803157366e+20)*new_r01))+(((-4.87145924137159e+20)*new_r11)))),-1);
if(!x1556.valid){
continue;
}
j5array[0]=((-1.5707963267949)+(x1555.value)+(((1.5707963267949)*(x1556.value))));
sj5array[0]=IKsin(j5array[0]);
cj5array[0]=IKcos(j5array[0]);
if( j5array[0] > IKPI )
{
    j5array[0]-=IK2PI;
}
else if( j5array[0] < -IKPI )
{    j5array[0]+=IK2PI;
}
j5valid[0] = true;
for(int ij5 = 0; ij5 < 1; ++ij5)
{
if( !j5valid[ij5] )
{
    continue;
}
_ij5[0] = ij5; _ij5[1] = -1;
for(int iij5 = ij5+1; iij5 < 1; ++iij5)
{
if( j5valid[iij5] && IKabs(cj5array[ij5]-cj5array[iij5]) < IKFAST_SOLUTION_THRESH && IKabs(sj5array[ij5]-sj5array[iij5]) < IKFAST_SOLUTION_THRESH )
{
    j5valid[iij5]=false; _ij5[1] = iij5; break; 
}
}
j5 = j5array[ij5]; cj5 = cj5array[ij5]; sj5 = sj5array[ij5];
{
IkReal evalcond[16];
IkReal x1557=IKsin(j5);
IkReal x1558=IKcos(j5);
IkReal x1559=((0.276027873078388)*sj3);
IkReal x1560=((0.961149631058464)*cj3);
IkReal x1561=((0.961149631058464)*sj3);
IkReal x1562=((0.276027873078388)*cj3);
IkReal x1563=((0.169973751776694)*sj3);
IkReal x1564=((0.247311590268888)*sj3);
IkReal x1565=((0.829627154282309)*sj3);
IkReal x1566=((0.486485029330234)*sj3);
IkReal x1567=(cj3*x1557);
IkReal x1568=((0.531815483588428)*x1557);
IkReal x1569=(new_r01*x1557);
IkReal x1570=(new_r01*x1558);
IkReal x1571=(new_r00*x1558);
IkReal x1572=(new_r11*x1557);
IkReal x1573=(new_r11*x1558);
IkReal x1574=(new_r10*x1558);
IkReal x1575=(cj3*x1558);
IkReal x1576=(sj3*x1558);
IkReal x1577=(new_r10*x1557);
IkReal x1578=(new_r00*x1557);
IkReal x1579=(x1561+x1562);
evalcond[0]=((((-0.837955424564001)*x1558))+x1568);
evalcond[1]=((((0.837955424564001)*x1557))+(((0.531815483588428)*x1558)));
evalcond[2]=(x1578+x1574+(((-0.169973751776694)*cj3))+(((-1.0)*x1565)));
evalcond[3]=((((0.829627154282309)*cj3))+x1569+x1573+(((-1.0)*x1563)));
evalcond[4]=(x1571+(((-1.0)*x1566))+(((-0.247311590268888)*cj3))+(((-1.0)*x1577)));
evalcond[5]=(x1570+(((0.486485029330234)*cj3))+(((-1.0)*x1564))+(((-1.0)*x1572)));
evalcond[6]=(((new_r00*x1568))+(((-0.837955424564001)*x1571))+(((0.837955424564001)*x1577))+(((0.531815483588428)*x1574)));
evalcond[7]=(((new_r01*x1568))+(((-0.837955424564001)*x1570))+(((0.837955424564001)*x1572))+(((0.531815483588428)*x1573)));
evalcond[8]=((((-0.535849798705775)*x1571))+(((0.535849798705775)*x1577))+(((-0.844313326436599)*x1578))+(((-0.844313326436599)*x1574))+x1579);
evalcond[9]=((((-0.535849798705775)*x1570))+(((0.535849798705775)*x1572))+(((-0.844313326436599)*x1573))+x1559+(((-0.844313326436599)*x1569))+(((-1.0)*x1560)));
evalcond[10]=((((-0.0656300100348293)*x1574))+(((-0.0656300100348293)*x1578))+x1559+(((-0.103420015812922)*x1577))+(((-1.0)*x1560))+(((0.103420015812922)*x1571)));
evalcond[11]=((((-0.0656300100348293)*x1569))+(((-0.0656300100348293)*x1573))+(((-0.103420015812922)*x1572))+(((-1.0)*x1579))+(((0.103420015812922)*x1570)));
evalcond[12]=((((-1.0)*x1557*x1565))+new_r00+(((-0.169973751776694)*x1567))+(((-1.0)*x1558*x1566))+(((-0.247311590268888)*x1575)));
evalcond[13]=((((0.829627154282309)*x1567))+(((-1.0)*x1557*x1563))+new_r01+(((0.486485029330234)*x1575))+(((-1.0)*x1558*x1564)));
evalcond[14]=((((0.247311590268888)*x1567))+((x1557*x1566))+new_r10+(((-0.169973751776694)*x1575))+(((-1.0)*x1558*x1565)));
evalcond[15]=(((x1557*x1564))+new_r11+(((-1.0)*x1558*x1563))+(((-0.486485029330234)*x1567))+(((0.829627154282309)*x1575)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[9]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[10]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[11]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[12]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[13]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[14]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[15]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j2;
vinfos[0].indices[0] = _ij2[0];
vinfos[0].indices[1] = _ij2[1];
vinfos[0].maxsolutions = _nj2;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j3;
vinfos[1].indices[0] = _ij3[0];
vinfos[1].indices[1] = _ij3[1];
vinfos[1].maxsolutions = _nj3;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j4;
vinfos[2].indices[0] = _ij4[0];
vinfos[2].indices[1] = _ij4[1];
vinfos[2].maxsolutions = _nj4;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j5;
vinfos[3].indices[0] = _ij5[0];
vinfos[3].indices[1] = _ij5[1];
vinfos[3].maxsolutions = _nj5;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j6;
vinfos[4].indices[0] = _ij6[0];
vinfos[4].indices[1] = _ij6[1];
vinfos[4].maxsolutions = _nj6;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j7;
vinfos[5].indices[0] = _ij7[0];
vinfos[5].indices[1] = _ij7[1];
vinfos[5].maxsolutions = _nj7;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j8;
vinfos[6].indices[0] = _ij8[0];
vinfos[6].indices[1] = _ij8[1];
vinfos[6].maxsolutions = _nj8;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j5array[1], cj5array[1], sj5array[1];
bool j5valid[1]={false};
_nj5 = 1;
CheckValue<IkReal> x1580 = IKatan2WithCheck(IkReal(((((-1.30467059140659e+20)*cj3))+(((-6.36798410760785e+20)*sj3)))),IkReal(((((-4.04149486762137e+20)*sj3))+(((-8.28020203883177e+19)*cj3)))),IKFAST_ATAN2_MAGTHRESH);
if(!x1580.valid){
continue;
}
CheckValue<IkReal> x1581=IKPowWithIntegerCheck(IKsign(((((-7.67571803157366e+20)*new_r00))+(((-4.87145924137159e+20)*new_r10)))),-1);
if(!x1581.valid){
continue;
}
j5array[0]=((-1.5707963267949)+(x1580.value)+(((1.5707963267949)*(x1581.value))));
sj5array[0]=IKsin(j5array[0]);
cj5array[0]=IKcos(j5array[0]);
if( j5array[0] > IKPI )
{
    j5array[0]-=IK2PI;
}
else if( j5array[0] < -IKPI )
{    j5array[0]+=IK2PI;
}
j5valid[0] = true;
for(int ij5 = 0; ij5 < 1; ++ij5)
{
if( !j5valid[ij5] )
{
    continue;
}
_ij5[0] = ij5; _ij5[1] = -1;
for(int iij5 = ij5+1; iij5 < 1; ++iij5)
{
if( j5valid[iij5] && IKabs(cj5array[ij5]-cj5array[iij5]) < IKFAST_SOLUTION_THRESH && IKabs(sj5array[ij5]-sj5array[iij5]) < IKFAST_SOLUTION_THRESH )
{
    j5valid[iij5]=false; _ij5[1] = iij5; break; 
}
}
j5 = j5array[ij5]; cj5 = cj5array[ij5]; sj5 = sj5array[ij5];
{
IkReal evalcond[16];
IkReal x1582=IKsin(j5);
IkReal x1583=IKcos(j5);
IkReal x1584=((0.276027873078388)*sj3);
IkReal x1585=((0.961149631058464)*cj3);
IkReal x1586=((0.961149631058464)*sj3);
IkReal x1587=((0.276027873078388)*cj3);
IkReal x1588=((0.169973751776694)*sj3);
IkReal x1589=((0.247311590268888)*sj3);
IkReal x1590=((0.829627154282309)*sj3);
IkReal x1591=((0.486485029330234)*sj3);
IkReal x1592=(cj3*x1582);
IkReal x1593=((0.531815483588428)*x1582);
IkReal x1594=(new_r01*x1582);
IkReal x1595=(new_r01*x1583);
IkReal x1596=(new_r00*x1583);
IkReal x1597=(new_r11*x1582);
IkReal x1598=(new_r11*x1583);
IkReal x1599=(new_r10*x1583);
IkReal x1600=(cj3*x1583);
IkReal x1601=(sj3*x1583);
IkReal x1602=(new_r10*x1582);
IkReal x1603=(new_r00*x1582);
IkReal x1604=(x1586+x1587);
evalcond[0]=(x1593+(((-0.837955424564001)*x1583)));
evalcond[1]=((((0.531815483588428)*x1583))+(((0.837955424564001)*x1582)));
evalcond[2]=((((-1.0)*x1590))+x1603+x1599+(((-0.169973751776694)*cj3)));
evalcond[3]=((((-1.0)*x1588))+(((0.829627154282309)*cj3))+x1594+x1598);
evalcond[4]=((((-1.0)*x1591))+(((-1.0)*x1602))+x1596+(((-0.247311590268888)*cj3)));
evalcond[5]=((((-1.0)*x1589))+x1595+(((0.486485029330234)*cj3))+(((-1.0)*x1597)));
evalcond[6]=((((-0.837955424564001)*x1596))+((new_r00*x1593))+(((0.837955424564001)*x1602))+(((0.531815483588428)*x1599)));
evalcond[7]=(((new_r01*x1593))+(((-0.837955424564001)*x1595))+(((0.837955424564001)*x1597))+(((0.531815483588428)*x1598)));
evalcond[8]=((((-0.844313326436599)*x1603))+x1604+(((-0.535849798705775)*x1596))+(((-0.844313326436599)*x1599))+(((0.535849798705775)*x1602)));
evalcond[9]=((((-1.0)*x1585))+(((0.535849798705775)*x1597))+(((-0.535849798705775)*x1595))+(((-0.844313326436599)*x1594))+(((-0.844313326436599)*x1598))+x1584);
evalcond[10]=((((-0.0656300100348293)*x1599))+(((-1.0)*x1585))+(((-0.103420015812922)*x1602))+(((-0.0656300100348293)*x1603))+x1584+(((0.103420015812922)*x1596)));
evalcond[11]=((((-0.0656300100348293)*x1598))+(((-0.0656300100348293)*x1594))+(((-1.0)*x1604))+(((-0.103420015812922)*x1597))+(((0.103420015812922)*x1595)));
evalcond[12]=((((-1.0)*x1583*x1591))+(((-0.247311590268888)*x1600))+(((-0.169973751776694)*x1592))+new_r00+(((-1.0)*x1582*x1590)));
evalcond[13]=(new_r01+(((0.486485029330234)*x1600))+(((0.829627154282309)*x1592))+(((-1.0)*x1582*x1588))+(((-1.0)*x1583*x1589)));
evalcond[14]=((((-1.0)*x1583*x1590))+(((-0.169973751776694)*x1600))+(((0.247311590268888)*x1592))+((x1582*x1591))+new_r10);
evalcond[15]=(((x1582*x1589))+new_r11+(((-0.486485029330234)*x1592))+(((0.829627154282309)*x1600))+(((-1.0)*x1583*x1588)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[9]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[10]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[11]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[12]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[13]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[14]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[15]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j2;
vinfos[0].indices[0] = _ij2[0];
vinfos[0].indices[1] = _ij2[1];
vinfos[0].maxsolutions = _nj2;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j3;
vinfos[1].indices[0] = _ij3[0];
vinfos[1].indices[1] = _ij3[1];
vinfos[1].maxsolutions = _nj3;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j4;
vinfos[2].indices[0] = _ij4[0];
vinfos[2].indices[1] = _ij4[1];
vinfos[2].maxsolutions = _nj4;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j5;
vinfos[3].indices[0] = _ij5[0];
vinfos[3].indices[1] = _ij5[1];
vinfos[3].maxsolutions = _nj5;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j6;
vinfos[4].indices[0] = _ij6[0];
vinfos[4].indices[1] = _ij6[1];
vinfos[4].maxsolutions = _nj6;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j7;
vinfos[5].indices[0] = _ij7[0];
vinfos[5].indices[1] = _ij7[1];
vinfos[5].maxsolutions = _nj7;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j8;
vinfos[6].indices[0] = _ij8[0];
vinfos[6].indices[1] = _ij8[1];
vinfos[6].maxsolutions = _nj8;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
if( 1 )
{
bgotonextstatement=false;
continue; // branch miss [j5]

}
} while(0);
if( bgotonextstatement )
{
}
}
}

} else
{
{
IkReal j5array[1], cj5array[1], sj5array[1];
bool j5valid[1]={false};
_nj5 = 1;
CheckValue<IkReal> x1605=IKPowWithIntegerCheck(((((-9.83245236388639e+76)*new_r02))+(((-6.24024889090152e+76)*new_r12))),-1);
if(!x1605.valid){
continue;
}
CheckValue<IkReal> x1606=IKPowWithIntegerCheck(((((1.2480497781803e+77)*new_r12))+(((1.96649047277728e+77)*new_r02))),-1);
if(!x1606.valid){
continue;
}
if( IKabs(((x1605.value)*(((5.22905040876042e+76)+(((1.173386086617e+77)*new_r02*new_r12)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((x1606.value)*(((-6.63732196325388e+76)+(((2.346772173234e+77)*(new_r02*new_r02))))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((x1605.value)*(((5.22905040876042e+76)+(((1.173386086617e+77)*new_r02*new_r12))))))+IKsqr(((x1606.value)*(((-6.63732196325388e+76)+(((2.346772173234e+77)*(new_r02*new_r02)))))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j5array[0]=IKatan2(((x1605.value)*(((5.22905040876042e+76)+(((1.173386086617e+77)*new_r02*new_r12))))), ((x1606.value)*(((-6.63732196325388e+76)+(((2.346772173234e+77)*(new_r02*new_r02)))))));
sj5array[0]=IKsin(j5array[0]);
cj5array[0]=IKcos(j5array[0]);
if( j5array[0] > IKPI )
{
    j5array[0]-=IK2PI;
}
else if( j5array[0] < -IKPI )
{    j5array[0]+=IK2PI;
}
j5valid[0] = true;
for(int ij5 = 0; ij5 < 1; ++ij5)
{
if( !j5valid[ij5] )
{
    continue;
}
_ij5[0] = ij5; _ij5[1] = -1;
for(int iij5 = ij5+1; iij5 < 1; ++iij5)
{
if( j5valid[iij5] && IKabs(cj5array[ij5]-cj5array[iij5]) < IKFAST_SOLUTION_THRESH && IKabs(sj5array[ij5]-sj5array[iij5]) < IKFAST_SOLUTION_THRESH )
{
    j5valid[iij5]=false; _ij5[1] = iij5; break; 
}
}
j5 = j5array[ij5]; cj5 = cj5array[ij5]; sj5 = sj5array[ij5];
{
IkReal evalcond[21];
IkReal x1607=IKcos(j5);
IkReal x1608=IKsin(j5);
IkReal x1609=((0.276027873078388)*sj3);
IkReal x1610=((0.961149631058464)*cj3);
IkReal x1611=((0.961149631058464)*sj3);
IkReal x1612=((0.276027873078388)*cj3);
IkReal x1613=((0.247311590268888)*sj3);
IkReal x1614=((0.169973751776694)*sj3);
IkReal x1615=((0.829627154282309)*sj3);
IkReal x1616=((0.486485029330234)*sj3);
IkReal x1617=((0.486485029330234)*cj3);
IkReal x1618=((0.247311590268888)*cj3);
IkReal x1619=((0.169973751776694)*cj3);
IkReal x1620=((0.829627154282309)*cj3);
IkReal x1621=((0.0656300100348293)*x1607);
IkReal x1622=((0.103420015812922)*x1607);
IkReal x1623=((1.0)*x1608);
IkReal x1624=(new_r12*x1607);
IkReal x1625=(new_r01*x1607);
IkReal x1626=(new_r02*x1608);
IkReal x1627=(new_r11*x1608);
IkReal x1628=((0.844313326436599)*x1607);
IkReal x1629=((0.531815483588428)*x1608);
IkReal x1630=(cj3*x1608);
IkReal x1631=(new_r00*x1607);
IkReal x1632=((0.844313326436599)*x1608);
IkReal x1633=(new_r12*x1608);
IkReal x1634=(new_r02*x1607);
IkReal x1635=(new_r01*x1608);
IkReal x1636=(new_r10*x1608);
IkReal x1637=(new_r10*x1607);
IkReal x1638=(new_r00*x1608);
IkReal x1639=(new_r11*x1607);
IkReal x1640=(x1612+x1611);
evalcond[0]=((0.531815483588428)+x1626+x1624);
evalcond[1]=((-0.837955424564001)+(((-1.0)*new_r12*x1623))+x1634);
evalcond[2]=(x1629+(((-0.837955424564001)*x1607))+new_r02);
evalcond[3]=((((0.531815483588428)*x1607))+new_r12+(((0.837955424564001)*x1608)));
evalcond[4]=(x1637+x1638+(((-1.0)*x1615))+(((-1.0)*x1619)));
evalcond[5]=(x1620+x1635+x1639+(((-1.0)*x1614)));
evalcond[6]=((((-1.0)*new_r10*x1623))+x1631+(((-1.0)*x1616))+(((-1.0)*x1618)));
evalcond[7]=((((-1.0)*new_r11*x1623))+x1625+x1617+(((-1.0)*x1613)));
evalcond[8]=((0.984997002140629)+(((0.531815483588428)*x1626))+(((0.531815483588428)*x1624))+(((0.837955424564001)*x1633))+(((-0.837955424564001)*x1634)));
evalcond[9]=((-6.54422001705664e-7)+(((-0.844313326436599)*x1626))+(((-0.844313326436599)*x1624))+(((0.535849798705775)*x1633))+(((-0.535849798705775)*x1634)));
evalcond[10]=((-0.121564418783519)+(((-1.0)*new_r12*x1621))+(((-0.0656300100348293)*x1626))+((new_r02*x1622))+(((-0.103420015812922)*x1633)));
evalcond[11]=((((0.837955424564001)*x1636))+((new_r00*x1629))+(((0.531815483588428)*x1637))+(((-0.837955424564001)*x1631))+(((0.122486725237355)*new_r20)));
evalcond[12]=((((-0.837955424564001)*x1625))+((new_r01*x1629))+(((0.837955424564001)*x1627))+(((0.531815483588428)*x1639))+(((0.122486725237355)*new_r21)));
evalcond[13]=((((-1.0)*new_r10*x1628))+(((0.535849798705775)*x1636))+x1640+(((-1.0)*new_r00*x1632))+(((5.34279939673075e-6)*new_r20))+(((-0.535849798705775)*x1631)));
evalcond[14]=((((-1.0)*new_r11*x1628))+x1609+(((-1.0)*x1610))+(((-1.0)*new_r01*x1632))+(((5.34279939673075e-6)*new_r21))+(((0.535849798705775)*x1627))+(((-0.535849798705775)*x1625)));
evalcond[15]=((((-1.0)*new_r10*x1621))+(((0.992470151748698)*new_r20))+x1609+(((-1.0)*x1610))+((new_r00*x1622))+(((-0.103420015812922)*x1636))+(((-0.0656300100348293)*x1638)));
evalcond[16]=((((0.992470151748698)*new_r21))+(((-1.0)*new_r11*x1621))+(((-0.103420015812922)*x1627))+((new_r01*x1622))+(((-1.0)*x1640))+(((-0.0656300100348293)*x1635)));
evalcond[17]=((((-1.0)*x1608*x1615))+(((-1.0)*x1608*x1619))+new_r00+(((-1.0)*x1607*x1618))+(((-1.0)*x1607*x1616)));
evalcond[18]=(((x1608*x1620))+((x1607*x1617))+(((-1.0)*x1608*x1614))+new_r01+(((-1.0)*x1607*x1613)));
evalcond[19]=(((x1608*x1616))+((x1608*x1618))+new_r10+(((-1.0)*x1607*x1615))+(((-1.0)*x1607*x1619)));
evalcond[20]=(((x1608*x1613))+((x1607*x1620))+(((-1.0)*x1608*x1617))+new_r11+(((-1.0)*x1607*x1614)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[9]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[10]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[11]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[12]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[13]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[14]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[15]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[16]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[17]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[18]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[19]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[20]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j2;
vinfos[0].indices[0] = _ij2[0];
vinfos[0].indices[1] = _ij2[1];
vinfos[0].maxsolutions = _nj2;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j3;
vinfos[1].indices[0] = _ij3[0];
vinfos[1].indices[1] = _ij3[1];
vinfos[1].maxsolutions = _nj3;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j4;
vinfos[2].indices[0] = _ij4[0];
vinfos[2].indices[1] = _ij4[1];
vinfos[2].maxsolutions = _nj4;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j5;
vinfos[3].indices[0] = _ij5[0];
vinfos[3].indices[1] = _ij5[1];
vinfos[3].maxsolutions = _nj5;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j6;
vinfos[4].indices[0] = _ij6[0];
vinfos[4].indices[1] = _ij6[1];
vinfos[4].maxsolutions = _nj6;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j7;
vinfos[5].indices[0] = _ij7[0];
vinfos[5].indices[1] = _ij7[1];
vinfos[5].maxsolutions = _nj7;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j8;
vinfos[6].indices[0] = _ij8[0];
vinfos[6].indices[1] = _ij8[1];
vinfos[6].maxsolutions = _nj8;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j5array[1], cj5array[1], sj5array[1];
bool j5valid[1]={false};
_nj5 = 1;
CheckValue<IkReal> x1641 = IKatan2WithCheck(IkReal(((((1.36249153167196e+56)*new_r02))+(((2.14681069867194e+56)*new_r12)))),IkReal(((((-2.14681069867194e+56)*new_r02))+(((1.36249153167196e+56)*new_r12)))),IKFAST_ATAN2_MAGTHRESH);
if(!x1641.valid){
continue;
}
CheckValue<IkReal> x1642=IKPowWithIntegerCheck(IKsign(((((-2.56196288697451e+56)*(new_r02*new_r02)))+(((-2.56196288697451e+56)*(new_r12*new_r12))))),-1);
if(!x1642.valid){
continue;
}
j5array[0]=((-1.5707963267949)+(x1641.value)+(((1.5707963267949)*(x1642.value))));
sj5array[0]=IKsin(j5array[0]);
cj5array[0]=IKcos(j5array[0]);
if( j5array[0] > IKPI )
{
    j5array[0]-=IK2PI;
}
else if( j5array[0] < -IKPI )
{    j5array[0]+=IK2PI;
}
j5valid[0] = true;
for(int ij5 = 0; ij5 < 1; ++ij5)
{
if( !j5valid[ij5] )
{
    continue;
}
_ij5[0] = ij5; _ij5[1] = -1;
for(int iij5 = ij5+1; iij5 < 1; ++iij5)
{
if( j5valid[iij5] && IKabs(cj5array[ij5]-cj5array[iij5]) < IKFAST_SOLUTION_THRESH && IKabs(sj5array[ij5]-sj5array[iij5]) < IKFAST_SOLUTION_THRESH )
{
    j5valid[iij5]=false; _ij5[1] = iij5; break; 
}
}
j5 = j5array[ij5]; cj5 = cj5array[ij5]; sj5 = sj5array[ij5];
{
IkReal evalcond[21];
IkReal x1643=IKcos(j5);
IkReal x1644=IKsin(j5);
IkReal x1645=((0.276027873078388)*sj3);
IkReal x1646=((0.961149631058464)*cj3);
IkReal x1647=((0.961149631058464)*sj3);
IkReal x1648=((0.276027873078388)*cj3);
IkReal x1649=((0.247311590268888)*sj3);
IkReal x1650=((0.169973751776694)*sj3);
IkReal x1651=((0.829627154282309)*sj3);
IkReal x1652=((0.486485029330234)*sj3);
IkReal x1653=((0.486485029330234)*cj3);
IkReal x1654=((0.247311590268888)*cj3);
IkReal x1655=((0.169973751776694)*cj3);
IkReal x1656=((0.829627154282309)*cj3);
IkReal x1657=((0.0656300100348293)*x1643);
IkReal x1658=((0.103420015812922)*x1643);
IkReal x1659=((1.0)*x1644);
IkReal x1660=(new_r12*x1643);
IkReal x1661=(new_r01*x1643);
IkReal x1662=(new_r02*x1644);
IkReal x1663=(new_r11*x1644);
IkReal x1664=((0.844313326436599)*x1643);
IkReal x1665=((0.531815483588428)*x1644);
IkReal x1666=(cj3*x1644);
IkReal x1667=(new_r00*x1643);
IkReal x1668=((0.844313326436599)*x1644);
IkReal x1669=(new_r12*x1644);
IkReal x1670=(new_r02*x1643);
IkReal x1671=(new_r01*x1644);
IkReal x1672=(new_r10*x1644);
IkReal x1673=(new_r10*x1643);
IkReal x1674=(new_r00*x1644);
IkReal x1675=(new_r11*x1643);
IkReal x1676=(x1647+x1648);
evalcond[0]=((0.531815483588428)+x1662+x1660);
evalcond[1]=((-0.837955424564001)+x1670+(((-1.0)*new_r12*x1659)));
evalcond[2]=(x1665+(((-0.837955424564001)*x1643))+new_r02);
evalcond[3]=((((0.837955424564001)*x1644))+(((0.531815483588428)*x1643))+new_r12);
evalcond[4]=(x1674+x1673+(((-1.0)*x1655))+(((-1.0)*x1651)));
evalcond[5]=(x1656+x1675+x1671+(((-1.0)*x1650)));
evalcond[6]=(x1667+(((-1.0)*x1654))+(((-1.0)*x1652))+(((-1.0)*new_r10*x1659)));
evalcond[7]=(x1661+x1653+(((-1.0)*x1649))+(((-1.0)*new_r11*x1659)));
evalcond[8]=((0.984997002140629)+(((0.837955424564001)*x1669))+(((0.531815483588428)*x1660))+(((0.531815483588428)*x1662))+(((-0.837955424564001)*x1670)));
evalcond[9]=((-6.54422001705664e-7)+(((-0.844313326436599)*x1660))+(((-0.844313326436599)*x1662))+(((-0.535849798705775)*x1670))+(((0.535849798705775)*x1669)));
evalcond[10]=((-0.121564418783519)+((new_r02*x1658))+(((-1.0)*new_r12*x1657))+(((-0.0656300100348293)*x1662))+(((-0.103420015812922)*x1669)));
evalcond[11]=(((new_r00*x1665))+(((0.531815483588428)*x1673))+(((-0.837955424564001)*x1667))+(((0.837955424564001)*x1672))+(((0.122486725237355)*new_r20)));
evalcond[12]=((((0.837955424564001)*x1663))+((new_r01*x1665))+(((0.531815483588428)*x1675))+(((-0.837955424564001)*x1661))+(((0.122486725237355)*new_r21)));
evalcond[13]=((((0.535849798705775)*x1672))+x1676+(((-1.0)*new_r00*x1668))+(((5.34279939673075e-6)*new_r20))+(((-0.535849798705775)*x1667))+(((-1.0)*new_r10*x1664)));
evalcond[14]=((((-1.0)*new_r01*x1668))+x1645+(((5.34279939673075e-6)*new_r21))+(((-0.535849798705775)*x1661))+(((-1.0)*x1646))+(((-1.0)*new_r11*x1664))+(((0.535849798705775)*x1663)));
evalcond[15]=((((0.992470151748698)*new_r20))+x1645+(((-1.0)*x1646))+((new_r00*x1658))+(((-0.103420015812922)*x1672))+(((-1.0)*new_r10*x1657))+(((-0.0656300100348293)*x1674)));
evalcond[16]=((((0.992470151748698)*new_r21))+(((-0.103420015812922)*x1663))+((new_r01*x1658))+(((-1.0)*new_r11*x1657))+(((-0.0656300100348293)*x1671))+(((-1.0)*x1676)));
evalcond[17]=((((-1.0)*x1644*x1651))+(((-1.0)*x1644*x1655))+(((-1.0)*x1643*x1654))+(((-1.0)*x1643*x1652))+new_r00);
evalcond[18]=((((-1.0)*x1644*x1650))+((x1644*x1656))+(((-1.0)*x1643*x1649))+((x1643*x1653))+new_r01);
evalcond[19]=((((-1.0)*x1643*x1655))+(((-1.0)*x1643*x1651))+((x1644*x1654))+((x1644*x1652))+new_r10);
evalcond[20]=((((-1.0)*x1644*x1653))+(((-1.0)*x1643*x1650))+((x1644*x1649))+((x1643*x1656))+new_r11);
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[9]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[10]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[11]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[12]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[13]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[14]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[15]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[16]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[17]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[18]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[19]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[20]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j2;
vinfos[0].indices[0] = _ij2[0];
vinfos[0].indices[1] = _ij2[1];
vinfos[0].maxsolutions = _nj2;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j3;
vinfos[1].indices[0] = _ij3[0];
vinfos[1].indices[1] = _ij3[1];
vinfos[1].maxsolutions = _nj3;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j4;
vinfos[2].indices[0] = _ij4[0];
vinfos[2].indices[1] = _ij4[1];
vinfos[2].maxsolutions = _nj4;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j5;
vinfos[3].indices[0] = _ij5[0];
vinfos[3].indices[1] = _ij5[1];
vinfos[3].maxsolutions = _nj5;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j6;
vinfos[4].indices[0] = _ij6[0];
vinfos[4].indices[1] = _ij6[1];
vinfos[4].maxsolutions = _nj6;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j7;
vinfos[5].indices[0] = _ij7[0];
vinfos[5].indices[1] = _ij7[1];
vinfos[5].maxsolutions = _nj7;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j8;
vinfos[6].indices[0] = _ij8[0];
vinfos[6].indices[1] = _ij8[1];
vinfos[6].maxsolutions = _nj8;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j5array[1], cj5array[1], sj5array[1];
bool j5valid[1]={false};
_nj5 = 1;
CheckValue<IkReal> x1677 = IKatan2WithCheck(IkReal(((8.23915679508573e+76)+(((-1.173386086617e+77)*(new_r02*new_r02))))),IkReal(((5.22905040876042e+76)+(((-1.173386086617e+77)*new_r02*new_r12)))),IKFAST_ATAN2_MAGTHRESH);
if(!x1677.valid){
continue;
}
CheckValue<IkReal> x1678=IKPowWithIntegerCheck(IKsign(((((6.24024889090152e+76)*new_r02))+(((-9.83245236388639e+76)*new_r12)))),-1);
if(!x1678.valid){
continue;
}
j5array[0]=((-1.5707963267949)+(x1677.value)+(((1.5707963267949)*(x1678.value))));
sj5array[0]=IKsin(j5array[0]);
cj5array[0]=IKcos(j5array[0]);
if( j5array[0] > IKPI )
{
    j5array[0]-=IK2PI;
}
else if( j5array[0] < -IKPI )
{    j5array[0]+=IK2PI;
}
j5valid[0] = true;
for(int ij5 = 0; ij5 < 1; ++ij5)
{
if( !j5valid[ij5] )
{
    continue;
}
_ij5[0] = ij5; _ij5[1] = -1;
for(int iij5 = ij5+1; iij5 < 1; ++iij5)
{
if( j5valid[iij5] && IKabs(cj5array[ij5]-cj5array[iij5]) < IKFAST_SOLUTION_THRESH && IKabs(sj5array[ij5]-sj5array[iij5]) < IKFAST_SOLUTION_THRESH )
{
    j5valid[iij5]=false; _ij5[1] = iij5; break; 
}
}
j5 = j5array[ij5]; cj5 = cj5array[ij5]; sj5 = sj5array[ij5];
{
IkReal evalcond[21];
IkReal x1679=IKcos(j5);
IkReal x1680=IKsin(j5);
IkReal x1681=((0.276027873078388)*sj3);
IkReal x1682=((0.961149631058464)*cj3);
IkReal x1683=((0.961149631058464)*sj3);
IkReal x1684=((0.276027873078388)*cj3);
IkReal x1685=((0.247311590268888)*sj3);
IkReal x1686=((0.169973751776694)*sj3);
IkReal x1687=((0.829627154282309)*sj3);
IkReal x1688=((0.486485029330234)*sj3);
IkReal x1689=((0.486485029330234)*cj3);
IkReal x1690=((0.247311590268888)*cj3);
IkReal x1691=((0.169973751776694)*cj3);
IkReal x1692=((0.829627154282309)*cj3);
IkReal x1693=((0.0656300100348293)*x1679);
IkReal x1694=((0.103420015812922)*x1679);
IkReal x1695=((1.0)*x1680);
IkReal x1696=(new_r12*x1679);
IkReal x1697=(new_r01*x1679);
IkReal x1698=(new_r02*x1680);
IkReal x1699=(new_r11*x1680);
IkReal x1700=((0.844313326436599)*x1679);
IkReal x1701=((0.531815483588428)*x1680);
IkReal x1702=(cj3*x1680);
IkReal x1703=(new_r00*x1679);
IkReal x1704=((0.844313326436599)*x1680);
IkReal x1705=(new_r12*x1680);
IkReal x1706=(new_r02*x1679);
IkReal x1707=(new_r01*x1680);
IkReal x1708=(new_r10*x1680);
IkReal x1709=(new_r10*x1679);
IkReal x1710=(new_r00*x1680);
IkReal x1711=(new_r11*x1679);
IkReal x1712=(x1683+x1684);
evalcond[0]=((0.531815483588428)+x1696+x1698);
evalcond[1]=((-0.837955424564001)+x1706+(((-1.0)*new_r12*x1695)));
evalcond[2]=(x1701+(((-0.837955424564001)*x1679))+new_r02);
evalcond[3]=((((0.837955424564001)*x1680))+new_r12+(((0.531815483588428)*x1679)));
evalcond[4]=((((-1.0)*x1687))+(((-1.0)*x1691))+x1709+x1710);
evalcond[5]=((((-1.0)*x1686))+x1707+x1711+x1692);
evalcond[6]=((((-1.0)*x1688))+(((-1.0)*x1690))+x1703+(((-1.0)*new_r10*x1695)));
evalcond[7]=((((-1.0)*x1685))+(((-1.0)*new_r11*x1695))+x1697+x1689);
evalcond[8]=((0.984997002140629)+(((0.531815483588428)*x1696))+(((0.531815483588428)*x1698))+(((-0.837955424564001)*x1706))+(((0.837955424564001)*x1705)));
evalcond[9]=((-6.54422001705664e-7)+(((0.535849798705775)*x1705))+(((-0.844313326436599)*x1696))+(((-0.844313326436599)*x1698))+(((-0.535849798705775)*x1706)));
evalcond[10]=((-0.121564418783519)+(((-0.0656300100348293)*x1698))+(((-1.0)*new_r12*x1693))+((new_r02*x1694))+(((-0.103420015812922)*x1705)));
evalcond[11]=(((new_r00*x1701))+(((-0.837955424564001)*x1703))+(((0.837955424564001)*x1708))+(((0.531815483588428)*x1709))+(((0.122486725237355)*new_r20)));
evalcond[12]=(((new_r01*x1701))+(((0.837955424564001)*x1699))+(((-0.837955424564001)*x1697))+(((0.531815483588428)*x1711))+(((0.122486725237355)*new_r21)));
evalcond[13]=((((0.535849798705775)*x1708))+x1712+(((5.34279939673075e-6)*new_r20))+(((-0.535849798705775)*x1703))+(((-1.0)*new_r10*x1700))+(((-1.0)*new_r00*x1704)));
evalcond[14]=((((-1.0)*x1682))+x1681+(((5.34279939673075e-6)*new_r21))+(((-1.0)*new_r11*x1700))+(((0.535849798705775)*x1699))+(((-1.0)*new_r01*x1704))+(((-0.535849798705775)*x1697)));
evalcond[15]=((((0.992470151748698)*new_r20))+(((-1.0)*x1682))+x1681+(((-1.0)*new_r10*x1693))+(((-0.0656300100348293)*x1710))+((new_r00*x1694))+(((-0.103420015812922)*x1708)));
evalcond[16]=((((0.992470151748698)*new_r21))+(((-1.0)*new_r11*x1693))+(((-1.0)*x1712))+(((-0.103420015812922)*x1699))+(((-0.0656300100348293)*x1707))+((new_r01*x1694)));
evalcond[17]=((((-1.0)*x1679*x1690))+(((-1.0)*x1680*x1691))+(((-1.0)*x1679*x1688))+(((-1.0)*x1680*x1687))+new_r00);
evalcond[18]=((((-1.0)*x1679*x1685))+(((-1.0)*x1680*x1686))+((x1679*x1689))+new_r01+((x1680*x1692)));
evalcond[19]=(((x1680*x1688))+(((-1.0)*x1679*x1691))+(((-1.0)*x1679*x1687))+new_r10+((x1680*x1690)));
evalcond[20]=(((x1680*x1685))+(((-1.0)*x1679*x1686))+(((-1.0)*x1680*x1689))+((x1679*x1692))+new_r11);
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[9]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[10]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[11]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[12]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[13]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[14]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[15]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[16]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[17]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[18]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[19]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[20]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j2;
vinfos[0].indices[0] = _ij2[0];
vinfos[0].indices[1] = _ij2[1];
vinfos[0].maxsolutions = _nj2;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j3;
vinfos[1].indices[0] = _ij3[0];
vinfos[1].indices[1] = _ij3[1];
vinfos[1].maxsolutions = _nj3;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j4;
vinfos[2].indices[0] = _ij4[0];
vinfos[2].indices[1] = _ij4[1];
vinfos[2].maxsolutions = _nj4;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j5;
vinfos[3].indices[0] = _ij5[0];
vinfos[3].indices[1] = _ij5[1];
vinfos[3].maxsolutions = _nj5;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j6;
vinfos[4].indices[0] = _ij6[0];
vinfos[4].indices[1] = _ij6[1];
vinfos[4].maxsolutions = _nj6;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j7;
vinfos[5].indices[0] = _ij7[0];
vinfos[5].indices[1] = _ij7[1];
vinfos[5].maxsolutions = _nj7;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j8;
vinfos[6].indices[0] = _ij8[0];
vinfos[6].indices[1] = _ij8[1];
vinfos[6].maxsolutions = _nj8;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-3.14159265358979)+j4)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j3array[1], cj3array[1], sj3array[1];
bool j3valid[1]={false};
_nj3 = 1;
if( IKabs(((((-0.968443348434842)*new_r21))+(((0.278116876757964)*new_r20)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((((-0.278116876757964)*new_r21))+(((-0.968443348434842)*new_r20)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((((-0.968443348434842)*new_r21))+(((0.278116876757964)*new_r20))))+IKsqr(((((-0.278116876757964)*new_r21))+(((-0.968443348434842)*new_r20))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j3array[0]=IKatan2(((((-0.968443348434842)*new_r21))+(((0.278116876757964)*new_r20))), ((((-0.278116876757964)*new_r21))+(((-0.968443348434842)*new_r20))));
sj3array[0]=IKsin(j3array[0]);
cj3array[0]=IKcos(j3array[0]);
if( j3array[0] > IKPI )
{
    j3array[0]-=IK2PI;
}
else if( j3array[0] < -IKPI )
{    j3array[0]+=IK2PI;
}
j3valid[0] = true;
for(int ij3 = 0; ij3 < 1; ++ij3)
{
if( !j3valid[ij3] )
{
    continue;
}
_ij3[0] = ij3; _ij3[1] = -1;
for(int iij3 = ij3+1; iij3 < 1; ++iij3)
{
if( j3valid[iij3] && IKabs(cj3array[ij3]-cj3array[iij3]) < IKFAST_SOLUTION_THRESH && IKabs(sj3array[ij3]-sj3array[iij3]) < IKFAST_SOLUTION_THRESH )
{
    j3valid[iij3]=false; _ij3[1] = iij3; break; 
}
}
j3 = j3array[ij3]; cj3 = cj3array[ij3]; sj3 = sj3array[ij3];
{
IkReal evalcond[2];
IkReal x1713=IKcos(j3);
IkReal x1714=IKsin(j3);
evalcond[0]=((((0.953913794951352)*x1713))+new_r20+(((-0.273944289851309)*x1714)));
evalcond[1]=((((0.953913794951352)*x1714))+new_r21+(((0.273944289851309)*x1713)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j5eval[3];
sj4=0;
cj4=-1.0;
j4=3.14159265358979;
IkReal x1715=new_r02*new_r02;
j5eval[0]=((((-1.5756506728798)*new_r12))+new_r02);
j5eval[1]=IKsign(((((6.24024889090152e+76)*new_r02))+(((-9.83245236388639e+76)*new_r12))));
j5eval[2]=((1.0)+(((1.44585006149089)*x1715*(new_r12*new_r12)))+(((-2.03046303253059)*x1715))+(((-1.28865050323593)*new_r02*new_r12))+(((1.44585006149089)*(x1715*x1715))));
if( IKabs(j5eval[0]) < 0.0000010000000000  || IKabs(j5eval[1]) < 0.0000010000000000  || IKabs(j5eval[2]) < 0.0000010000000000  )
{
{
IkReal j5eval[2];
sj4=0;
cj4=-1.0;
j4=3.14159265358979;
IkReal x1716=new_r12*new_r12;
IkReal x1717=new_r02*new_r02;
j5eval[0]=(x1717+x1716);
j5eval[1]=IKsign(((((2.56196288697451e+56)*x1716))+(((2.56196288697451e+56)*x1717))));
if( IKabs(j5eval[0]) < 0.0000010000000000  || IKabs(j5eval[1]) < 0.0000010000000000  )
{
{
IkReal j5eval[1];
sj4=0;
cj4=-1.0;
j4=3.14159265358979;
j5eval[0]=((((1.5756506728798)*new_r02))+new_r12);
if( IKabs(j5eval[0]) < 0.0000010000000000  )
{
{
IkReal evalcond[1];
bool bgotonextstatement = true;
do
{
evalcond[0]=((new_r12*new_r12)+(new_r02*new_r02));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j5eval[4];
sj4=0;
cj4=-1.0;
j4=3.14159265358979;
new_r12=0;
new_r02=0;
j5eval[0]=((((-1.5756506728798)*new_r00))+(((-1.0)*new_r10)));
j5eval[1]=IKsign(((((-7.67571803157366e+20)*new_r00))+(((-4.87145924137159e+20)*new_r10))));
j5eval[2]=602796.058909135;
j5eval[3]=((((-3.48207454681763)*cj3))+sj3);
if( IKabs(j5eval[0]) < 0.0000010000000000  || IKabs(j5eval[1]) < 0.0000010000000000  || IKabs(j5eval[2]) < 0.0000010000000000  || IKabs(j5eval[3]) < 0.0000010000000000  )
{
{
IkReal j5eval[4];
sj4=0;
cj4=-1.0;
j4=3.14159265358979;
new_r12=0;
new_r02=0;
j5eval[0]=((((-1.5756506728798)*new_r01))+(((-1.0)*new_r11)));
j5eval[1]=IKsign(((((-7.67571803157366e+20)*new_r01))+(((-4.87145924137159e+20)*new_r11))));
j5eval[2]=602796.058909135;
j5eval[3]=((((-3.48207454681763)*sj3))+(((-1.0)*cj3)));
if( IKabs(j5eval[0]) < 0.0000010000000000  || IKabs(j5eval[1]) < 0.0000010000000000  || IKabs(j5eval[2]) < 0.0000010000000000  || IKabs(j5eval[3]) < 0.0000010000000000  )
{
{
IkReal j5eval[3];
sj4=0;
cj4=-1.0;
j4=3.14159265358979;
new_r12=0;
new_r02=0;
j5eval[0]=((((1.5756506728798)*new_r10))+(((-1.0)*new_r00)));
j5eval[1]=IKsign(((((7.67571803157366e+20)*new_r10))+(((-4.87145924137159e+20)*new_r00))));
j5eval[2]=((sj3*sj3)+(((12.1248431495952)*(cj3*cj3)))+(((-6.96414909363526)*cj3*sj3)));
if( IKabs(j5eval[0]) < 0.0000010000000000  || IKabs(j5eval[1]) < 0.0000010000000000  || IKabs(j5eval[2]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j5array[1], cj5array[1], sj5array[1];
bool j5valid[1]={false};
_nj5 = 1;
CheckValue<IkReal> x1718 = IKatan2WithCheck(IkReal(((((-1.44260603426447e+20)*cj3))+(((-3.86499496156882e+20)*sj3)))),IkReal(((((2.27304316858926e+20)*cj3))+(((6.08988191187293e+20)*sj3)))),IKFAST_ATAN2_MAGTHRESH);
if(!x1718.valid){
continue;
}
CheckValue<IkReal> x1719=IKPowWithIntegerCheck(IKsign(((((7.67571803157366e+20)*new_r10))+(((-4.87145924137159e+20)*new_r00)))),-1);
if(!x1719.valid){
continue;
}
j5array[0]=((-1.5707963267949)+(x1718.value)+(((1.5707963267949)*(x1719.value))));
sj5array[0]=IKsin(j5array[0]);
cj5array[0]=IKcos(j5array[0]);
if( j5array[0] > IKPI )
{
    j5array[0]-=IK2PI;
}
else if( j5array[0] < -IKPI )
{    j5array[0]+=IK2PI;
}
j5valid[0] = true;
for(int ij5 = 0; ij5 < 1; ++ij5)
{
if( !j5valid[ij5] )
{
    continue;
}
_ij5[0] = ij5; _ij5[1] = -1;
for(int iij5 = ij5+1; iij5 < 1; ++iij5)
{
if( j5valid[iij5] && IKabs(cj5array[ij5]-cj5array[iij5]) < IKFAST_SOLUTION_THRESH && IKabs(sj5array[ij5]-sj5array[iij5]) < IKFAST_SOLUTION_THRESH )
{
    j5valid[iij5]=false; _ij5[1] = iij5; break; 
}
}
j5 = j5array[ij5]; cj5 = cj5array[ij5]; sj5 = sj5array[ij5];
{
IkReal evalcond[16];
IkReal x1720=IKsin(j5);
IkReal x1721=IKcos(j5);
IkReal x1722=((0.276027873078388)*sj3);
IkReal x1723=((0.961149631058464)*cj3);
IkReal x1724=((0.961149631058464)*sj3);
IkReal x1725=((0.276027873078388)*cj3);
IkReal x1726=((0.0485073701835875)*sj3);
IkReal x1727=((0.793395730122254)*cj3);
IkReal x1728=((0.543578643327382)*sj3);
IkReal x1729=((0.793395730122254)*sj3);
IkReal x1730=((0.296134271639373)*sj3);
IkReal x1731=((0.0485073701835875)*cj3);
IkReal x1732=((0.543578643327382)*cj3);
IkReal x1733=((0.296134271639373)*cj3);
IkReal x1734=((0.531815483588428)*x1720);
IkReal x1735=(new_r01*x1720);
IkReal x1736=(new_r00*x1721);
IkReal x1737=(new_r11*x1720);
IkReal x1738=(new_r11*x1721);
IkReal x1739=(new_r01*x1721);
IkReal x1740=(new_r10*x1721);
IkReal x1741=(cj3*x1721);
IkReal x1742=(new_r10*x1720);
IkReal x1743=(new_r00*x1720);
IkReal x1744=(x1724+x1725);
evalcond[0]=((((0.837955424564001)*x1721))+(((-1.0)*x1734)));
evalcond[1]=((((-0.531815483588428)*x1721))+(((-0.837955424564001)*x1720)));
evalcond[2]=(x1740+x1743+(((-1.0)*x1729))+(((-1.0)*x1733)));
evalcond[3]=(x1727+x1738+x1735+(((-1.0)*x1730)));
evalcond[4]=(x1736+(((-1.0)*x1742))+(((-1.0)*x1728))+(((-1.0)*x1731)));
evalcond[5]=(x1739+x1732+(((-1.0)*x1737))+(((-1.0)*x1726)));
evalcond[6]=((((0.837955424564001)*x1736))+(((-0.531815483588428)*x1740))+(((-1.0)*new_r00*x1734))+(((-0.122486725237355)*new_r20))+(((-0.837955424564001)*x1742)));
evalcond[7]=((((0.837955424564001)*x1739))+(((-1.0)*new_r01*x1734))+(((-0.531815483588428)*x1738))+(((-0.122486725237355)*new_r21))+(((-0.837955424564001)*x1737)));
evalcond[8]=(x1744+(((-0.535849798705775)*x1736))+(((5.34279939673075e-6)*new_r20))+(((0.535849798705775)*x1742))+(((-0.844313326436599)*x1743))+(((-0.844313326436599)*x1740)));
evalcond[9]=((((-0.844313326436599)*x1738))+(((-0.844313326436599)*x1735))+x1722+(((-0.535849798705775)*x1739))+(((5.34279939673075e-6)*new_r21))+(((0.535849798705775)*x1737))+(((-1.0)*x1723)));
evalcond[10]=(x1722+(((-0.992470151748698)*new_r20))+(((-0.103420015812922)*x1736))+(((0.103420015812922)*x1742))+(((-1.0)*x1723))+(((0.0656300100348293)*x1743))+(((0.0656300100348293)*x1740)));
evalcond[11]=((((0.103420015812922)*x1737))+(((-0.992470151748698)*new_r21))+(((-0.103420015812922)*x1739))+(((-1.0)*x1744))+(((0.0656300100348293)*x1735))+(((0.0656300100348293)*x1738)));
evalcond[12]=((((-1.0)*x1720*x1733))+(((-1.0)*x1720*x1729))+new_r00+(((-1.0)*x1721*x1731))+(((-1.0)*x1721*x1728)));
evalcond[13]=((((-1.0)*x1720*x1730))+((x1721*x1732))+((x1720*x1727))+new_r01+(((-1.0)*x1721*x1726)));
evalcond[14]=(((x1720*x1731))+((x1720*x1728))+new_r10+(((-1.0)*x1721*x1733))+(((-1.0)*x1721*x1729)));
evalcond[15]=(((x1721*x1727))+(((-1.0)*x1720*x1732))+((x1720*x1726))+new_r11+(((-1.0)*x1721*x1730)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[9]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[10]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[11]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[12]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[13]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[14]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[15]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j2;
vinfos[0].indices[0] = _ij2[0];
vinfos[0].indices[1] = _ij2[1];
vinfos[0].maxsolutions = _nj2;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j3;
vinfos[1].indices[0] = _ij3[0];
vinfos[1].indices[1] = _ij3[1];
vinfos[1].maxsolutions = _nj3;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j4;
vinfos[2].indices[0] = _ij4[0];
vinfos[2].indices[1] = _ij4[1];
vinfos[2].maxsolutions = _nj4;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j5;
vinfos[3].indices[0] = _ij5[0];
vinfos[3].indices[1] = _ij5[1];
vinfos[3].maxsolutions = _nj5;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j6;
vinfos[4].indices[0] = _ij6[0];
vinfos[4].indices[1] = _ij6[1];
vinfos[4].maxsolutions = _nj6;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j7;
vinfos[5].indices[0] = _ij7[0];
vinfos[5].indices[1] = _ij7[1];
vinfos[5].maxsolutions = _nj7;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j8;
vinfos[6].indices[0] = _ij8[0];
vinfos[6].indices[1] = _ij8[1];
vinfos[6].maxsolutions = _nj8;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j5array[1], cj5array[1], sj5array[1];
bool j5valid[1]={false};
_nj5 = 1;
CheckValue<IkReal> x1745 = IKatan2WithCheck(IkReal(((((6.08988191187293e+20)*cj3))+(((-2.27304316858926e+20)*sj3)))),IkReal(((((-1.44260603426447e+20)*sj3))+(((3.86499496156882e+20)*cj3)))),IKFAST_ATAN2_MAGTHRESH);
if(!x1745.valid){
continue;
}
CheckValue<IkReal> x1746=IKPowWithIntegerCheck(IKsign(((((-7.67571803157366e+20)*new_r01))+(((-4.87145924137159e+20)*new_r11)))),-1);
if(!x1746.valid){
continue;
}
j5array[0]=((-1.5707963267949)+(x1745.value)+(((1.5707963267949)*(x1746.value))));
sj5array[0]=IKsin(j5array[0]);
cj5array[0]=IKcos(j5array[0]);
if( j5array[0] > IKPI )
{
    j5array[0]-=IK2PI;
}
else if( j5array[0] < -IKPI )
{    j5array[0]+=IK2PI;
}
j5valid[0] = true;
for(int ij5 = 0; ij5 < 1; ++ij5)
{
if( !j5valid[ij5] )
{
    continue;
}
_ij5[0] = ij5; _ij5[1] = -1;
for(int iij5 = ij5+1; iij5 < 1; ++iij5)
{
if( j5valid[iij5] && IKabs(cj5array[ij5]-cj5array[iij5]) < IKFAST_SOLUTION_THRESH && IKabs(sj5array[ij5]-sj5array[iij5]) < IKFAST_SOLUTION_THRESH )
{
    j5valid[iij5]=false; _ij5[1] = iij5; break; 
}
}
j5 = j5array[ij5]; cj5 = cj5array[ij5]; sj5 = sj5array[ij5];
{
IkReal evalcond[16];
IkReal x1747=IKsin(j5);
IkReal x1748=IKcos(j5);
IkReal x1749=((0.276027873078388)*sj3);
IkReal x1750=((0.961149631058464)*cj3);
IkReal x1751=((0.961149631058464)*sj3);
IkReal x1752=((0.276027873078388)*cj3);
IkReal x1753=((0.0485073701835875)*sj3);
IkReal x1754=((0.793395730122254)*cj3);
IkReal x1755=((0.543578643327382)*sj3);
IkReal x1756=((0.793395730122254)*sj3);
IkReal x1757=((0.296134271639373)*sj3);
IkReal x1758=((0.0485073701835875)*cj3);
IkReal x1759=((0.543578643327382)*cj3);
IkReal x1760=((0.296134271639373)*cj3);
IkReal x1761=((0.531815483588428)*x1747);
IkReal x1762=(new_r01*x1747);
IkReal x1763=(new_r00*x1748);
IkReal x1764=(new_r11*x1747);
IkReal x1765=(new_r11*x1748);
IkReal x1766=(new_r01*x1748);
IkReal x1767=(new_r10*x1748);
IkReal x1768=(cj3*x1748);
IkReal x1769=(new_r10*x1747);
IkReal x1770=(new_r00*x1747);
IkReal x1771=(x1752+x1751);
evalcond[0]=((((-1.0)*x1761))+(((0.837955424564001)*x1748)));
evalcond[1]=((((-0.531815483588428)*x1748))+(((-0.837955424564001)*x1747)));
evalcond[2]=((((-1.0)*x1760))+x1767+x1770+(((-1.0)*x1756)));
evalcond[3]=(x1762+x1765+x1754+(((-1.0)*x1757)));
evalcond[4]=((((-1.0)*x1769))+x1763+(((-1.0)*x1755))+(((-1.0)*x1758)));
evalcond[5]=((((-1.0)*x1764))+x1766+x1759+(((-1.0)*x1753)));
evalcond[6]=((((-0.837955424564001)*x1769))+(((-1.0)*new_r00*x1761))+(((-0.122486725237355)*new_r20))+(((-0.531815483588428)*x1767))+(((0.837955424564001)*x1763)));
evalcond[7]=((((-0.837955424564001)*x1764))+(((-0.122486725237355)*new_r21))+(((-1.0)*new_r01*x1761))+(((-0.531815483588428)*x1765))+(((0.837955424564001)*x1766)));
evalcond[8]=((((0.535849798705775)*x1769))+x1771+(((-0.844313326436599)*x1767))+(((-0.844313326436599)*x1770))+(((5.34279939673075e-6)*new_r20))+(((-0.535849798705775)*x1763)));
evalcond[9]=((((0.535849798705775)*x1764))+x1749+(((-0.844313326436599)*x1762))+(((-0.844313326436599)*x1765))+(((5.34279939673075e-6)*new_r21))+(((-1.0)*x1750))+(((-0.535849798705775)*x1766)));
evalcond[10]=((((0.0656300100348293)*x1770))+x1749+(((-0.992470151748698)*new_r20))+(((0.0656300100348293)*x1767))+(((-0.103420015812922)*x1763))+(((-1.0)*x1750))+(((0.103420015812922)*x1769)));
evalcond[11]=((((-0.992470151748698)*new_r21))+(((0.0656300100348293)*x1765))+(((0.0656300100348293)*x1762))+(((-1.0)*x1771))+(((-0.103420015812922)*x1766))+(((0.103420015812922)*x1764)));
evalcond[12]=((((-1.0)*x1747*x1760))+(((-1.0)*x1748*x1755))+(((-1.0)*x1748*x1758))+(((-1.0)*x1747*x1756))+new_r00);
evalcond[13]=((((-1.0)*x1748*x1753))+((x1747*x1754))+(((-1.0)*x1747*x1757))+((x1748*x1759))+new_r01);
evalcond[14]=((((-1.0)*x1748*x1756))+((x1747*x1755))+((x1747*x1758))+(((-1.0)*x1748*x1760))+new_r10);
evalcond[15]=((((-1.0)*x1748*x1757))+((x1747*x1753))+(((-1.0)*x1747*x1759))+((x1748*x1754))+new_r11);
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[9]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[10]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[11]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[12]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[13]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[14]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[15]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j2;
vinfos[0].indices[0] = _ij2[0];
vinfos[0].indices[1] = _ij2[1];
vinfos[0].maxsolutions = _nj2;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j3;
vinfos[1].indices[0] = _ij3[0];
vinfos[1].indices[1] = _ij3[1];
vinfos[1].maxsolutions = _nj3;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j4;
vinfos[2].indices[0] = _ij4[0];
vinfos[2].indices[1] = _ij4[1];
vinfos[2].maxsolutions = _nj4;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j5;
vinfos[3].indices[0] = _ij5[0];
vinfos[3].indices[1] = _ij5[1];
vinfos[3].maxsolutions = _nj5;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j6;
vinfos[4].indices[0] = _ij6[0];
vinfos[4].indices[1] = _ij6[1];
vinfos[4].maxsolutions = _nj6;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j7;
vinfos[5].indices[0] = _ij7[0];
vinfos[5].indices[1] = _ij7[1];
vinfos[5].maxsolutions = _nj7;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j8;
vinfos[6].indices[0] = _ij8[0];
vinfos[6].indices[1] = _ij8[1];
vinfos[6].maxsolutions = _nj8;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j5array[1], cj5array[1], sj5array[1];
bool j5valid[1]={false};
_nj5 = 1;
CheckValue<IkReal> x1772 = IKatan2WithCheck(IkReal(((((-6.08988191187293e+20)*sj3))+(((-2.27304316858926e+20)*cj3)))),IkReal(((((-1.44260603426447e+20)*cj3))+(((-3.86499496156882e+20)*sj3)))),IKFAST_ATAN2_MAGTHRESH);
if(!x1772.valid){
continue;
}
CheckValue<IkReal> x1773=IKPowWithIntegerCheck(IKsign(((((-7.67571803157366e+20)*new_r00))+(((-4.87145924137159e+20)*new_r10)))),-1);
if(!x1773.valid){
continue;
}
j5array[0]=((-1.5707963267949)+(x1772.value)+(((1.5707963267949)*(x1773.value))));
sj5array[0]=IKsin(j5array[0]);
cj5array[0]=IKcos(j5array[0]);
if( j5array[0] > IKPI )
{
    j5array[0]-=IK2PI;
}
else if( j5array[0] < -IKPI )
{    j5array[0]+=IK2PI;
}
j5valid[0] = true;
for(int ij5 = 0; ij5 < 1; ++ij5)
{
if( !j5valid[ij5] )
{
    continue;
}
_ij5[0] = ij5; _ij5[1] = -1;
for(int iij5 = ij5+1; iij5 < 1; ++iij5)
{
if( j5valid[iij5] && IKabs(cj5array[ij5]-cj5array[iij5]) < IKFAST_SOLUTION_THRESH && IKabs(sj5array[ij5]-sj5array[iij5]) < IKFAST_SOLUTION_THRESH )
{
    j5valid[iij5]=false; _ij5[1] = iij5; break; 
}
}
j5 = j5array[ij5]; cj5 = cj5array[ij5]; sj5 = sj5array[ij5];
{
IkReal evalcond[16];
IkReal x1774=IKsin(j5);
IkReal x1775=IKcos(j5);
IkReal x1776=((0.276027873078388)*sj3);
IkReal x1777=((0.961149631058464)*cj3);
IkReal x1778=((0.961149631058464)*sj3);
IkReal x1779=((0.276027873078388)*cj3);
IkReal x1780=((0.0485073701835875)*sj3);
IkReal x1781=((0.793395730122254)*cj3);
IkReal x1782=((0.543578643327382)*sj3);
IkReal x1783=((0.793395730122254)*sj3);
IkReal x1784=((0.296134271639373)*sj3);
IkReal x1785=((0.0485073701835875)*cj3);
IkReal x1786=((0.543578643327382)*cj3);
IkReal x1787=((0.296134271639373)*cj3);
IkReal x1788=((0.531815483588428)*x1774);
IkReal x1789=(new_r01*x1774);
IkReal x1790=(new_r00*x1775);
IkReal x1791=(new_r11*x1774);
IkReal x1792=(new_r11*x1775);
IkReal x1793=(new_r01*x1775);
IkReal x1794=(new_r10*x1775);
IkReal x1795=(cj3*x1775);
IkReal x1796=(new_r10*x1774);
IkReal x1797=(new_r00*x1774);
IkReal x1798=(x1779+x1778);
evalcond[0]=((((-1.0)*x1788))+(((0.837955424564001)*x1775)));
evalcond[1]=((((-0.531815483588428)*x1775))+(((-0.837955424564001)*x1774)));
evalcond[2]=((((-1.0)*x1783))+(((-1.0)*x1787))+x1797+x1794);
evalcond[3]=((((-1.0)*x1784))+x1789+x1781+x1792);
evalcond[4]=((((-1.0)*x1785))+(((-1.0)*x1782))+x1790+(((-1.0)*x1796)));
evalcond[5]=((((-1.0)*x1780))+x1786+x1793+(((-1.0)*x1791)));
evalcond[6]=((((-1.0)*new_r00*x1788))+(((-0.122486725237355)*new_r20))+(((-0.531815483588428)*x1794))+(((-0.837955424564001)*x1796))+(((0.837955424564001)*x1790)));
evalcond[7]=((((-1.0)*new_r01*x1788))+(((-0.122486725237355)*new_r21))+(((-0.531815483588428)*x1792))+(((-0.837955424564001)*x1791))+(((0.837955424564001)*x1793)));
evalcond[8]=((((-0.535849798705775)*x1790))+x1798+(((5.34279939673075e-6)*new_r20))+(((0.535849798705775)*x1796))+(((-0.844313326436599)*x1794))+(((-0.844313326436599)*x1797)));
evalcond[9]=((((-0.535849798705775)*x1793))+x1776+(((5.34279939673075e-6)*new_r21))+(((-1.0)*x1777))+(((0.535849798705775)*x1791))+(((-0.844313326436599)*x1792))+(((-0.844313326436599)*x1789)));
evalcond[10]=((((0.103420015812922)*x1796))+x1776+(((-0.992470151748698)*new_r20))+(((-0.103420015812922)*x1790))+(((-1.0)*x1777))+(((0.0656300100348293)*x1794))+(((0.0656300100348293)*x1797)));
evalcond[11]=((((-1.0)*x1798))+(((0.103420015812922)*x1791))+(((-0.992470151748698)*new_r21))+(((-0.103420015812922)*x1793))+(((0.0656300100348293)*x1792))+(((0.0656300100348293)*x1789)));
evalcond[12]=((((-1.0)*x1775*x1782))+(((-1.0)*x1775*x1785))+(((-1.0)*x1774*x1787))+(((-1.0)*x1774*x1783))+new_r00);
evalcond[13]=(((x1775*x1786))+((x1774*x1781))+(((-1.0)*x1775*x1780))+(((-1.0)*x1774*x1784))+new_r01);
evalcond[14]=(((x1774*x1785))+((x1774*x1782))+(((-1.0)*x1775*x1787))+(((-1.0)*x1775*x1783))+new_r10);
evalcond[15]=(((x1775*x1781))+((x1774*x1780))+(((-1.0)*x1775*x1784))+(((-1.0)*x1774*x1786))+new_r11);
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[9]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[10]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[11]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[12]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[13]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[14]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[15]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j2;
vinfos[0].indices[0] = _ij2[0];
vinfos[0].indices[1] = _ij2[1];
vinfos[0].maxsolutions = _nj2;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j3;
vinfos[1].indices[0] = _ij3[0];
vinfos[1].indices[1] = _ij3[1];
vinfos[1].maxsolutions = _nj3;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j4;
vinfos[2].indices[0] = _ij4[0];
vinfos[2].indices[1] = _ij4[1];
vinfos[2].maxsolutions = _nj4;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j5;
vinfos[3].indices[0] = _ij5[0];
vinfos[3].indices[1] = _ij5[1];
vinfos[3].maxsolutions = _nj5;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j6;
vinfos[4].indices[0] = _ij6[0];
vinfos[4].indices[1] = _ij6[1];
vinfos[4].maxsolutions = _nj6;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j7;
vinfos[5].indices[0] = _ij7[0];
vinfos[5].indices[1] = _ij7[1];
vinfos[5].maxsolutions = _nj7;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j8;
vinfos[6].indices[0] = _ij8[0];
vinfos[6].indices[1] = _ij8[1];
vinfos[6].maxsolutions = _nj8;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((IKabs(new_r12))+(IKabs(new_r02)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j5eval[4];
sj4=0;
cj4=-1.0;
j4=3.14159265358979;
new_r02=0;
new_r12=0;
new_r20=0;
new_r21=0;
j5eval[0]=((((-1.5756506728798)*new_r00))+(((-1.0)*new_r10)));
j5eval[1]=IKsign(((((-7.67571803157366e+20)*new_r00))+(((-4.87145924137159e+20)*new_r10))));
j5eval[2]=602796.058909135;
j5eval[3]=((((-3.48207454681763)*cj3))+sj3);
if( IKabs(j5eval[0]) < 0.0000010000000000  || IKabs(j5eval[1]) < 0.0000010000000000  || IKabs(j5eval[2]) < 0.0000010000000000  || IKabs(j5eval[3]) < 0.0000010000000000  )
{
{
IkReal j5eval[4];
sj4=0;
cj4=-1.0;
j4=3.14159265358979;
new_r02=0;
new_r12=0;
new_r20=0;
new_r21=0;
j5eval[0]=((((-1.5756506728798)*new_r01))+(((-1.0)*new_r11)));
j5eval[1]=IKsign(((((-7.67571803157366e+20)*new_r01))+(((-4.87145924137159e+20)*new_r11))));
j5eval[2]=602796.058909135;
j5eval[3]=((((-3.48207454681763)*sj3))+(((-1.0)*cj3)));
if( IKabs(j5eval[0]) < 0.0000010000000000  || IKabs(j5eval[1]) < 0.0000010000000000  || IKabs(j5eval[2]) < 0.0000010000000000  || IKabs(j5eval[3]) < 0.0000010000000000  )
{
{
IkReal j5eval[3];
sj4=0;
cj4=-1.0;
j4=3.14159265358979;
new_r02=0;
new_r12=0;
new_r20=0;
new_r21=0;
j5eval[0]=((((1.5756506728798)*new_r10))+(((-1.0)*new_r00)));
j5eval[1]=IKsign(((((7.67571803157366e+20)*new_r10))+(((-4.87145924137159e+20)*new_r00))));
j5eval[2]=((sj3*sj3)+(((12.1248431495952)*(cj3*cj3)))+(((-6.96414909363526)*cj3*sj3)));
if( IKabs(j5eval[0]) < 0.0000010000000000  || IKabs(j5eval[1]) < 0.0000010000000000  || IKabs(j5eval[2]) < 0.0000010000000000  )
{
{
IkReal evalcond[1];
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-2.86193369470738)+j3)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j5eval[3];
sj4=0;
cj4=-1.0;
j4=3.14159265358979;
new_r02=0;
new_r12=0;
new_r20=0;
new_r21=0;
sj3=0.276027873007547;
cj3=-0.96114963;
j3=2.86193373421393;
j5eval[0]=((((-1.5756506728798)*new_r00))+(((-1.0)*new_r10)));
j5eval[1]=IKsign(((((-7.67571803157366e+20)*new_r00))+(((-4.87145924137159e+20)*new_r10))));
j5eval[2]=346898309.953055;
if( IKabs(j5eval[0]) < 0.0000010000000000  || IKabs(j5eval[1]) < 0.0000010000000000  || IKabs(j5eval[2]) < 0.0000010000000000  )
{
{
IkReal j5eval[3];
sj4=0;
cj4=-1.0;
j4=3.14159265358979;
new_r02=0;
new_r12=0;
new_r20=0;
new_r21=0;
sj3=0.276027873007547;
cj3=-0.96114963;
j3=2.86193373421393;
j5eval[0]=((((1.5756506728798)*new_r10))+(((-1.0)*new_r00)));
j5eval[1]=-346898309.953055;
j5eval[2]=IKsign(((((7.67571803157366e+20)*new_r10))+(((-4.87145924137159e+20)*new_r00))));
if( IKabs(j5eval[0]) < 0.0000010000000000  || IKabs(j5eval[1]) < 0.0000010000000000  || IKabs(j5eval[2]) < 0.0000010000000000  )
{
{
IkReal j5eval[3];
sj4=0;
cj4=-1.0;
j4=3.14159265358979;
new_r02=0;
new_r12=0;
new_r20=0;
new_r21=0;
sj3=0.276027873007547;
cj3=-0.96114963;
j3=2.86193373421393;
j5eval[0]=((((-1.5756506728798)*new_r01))+(((-1.0)*new_r11)));
j5eval[1]=IKsign(((((-7.67571803157366e+20)*new_r01))+(((-4.87145924137159e+20)*new_r11))));
j5eval[2]=-57412245359.8717;
if( IKabs(j5eval[0]) < 0.0000010000000000  || IKabs(j5eval[1]) < 0.0000010000000000  || IKabs(j5eval[2]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j5array[1], cj5array[1], sj5array[1];
bool j5valid[1]={false};
_nj5 = 1;
CheckValue<IkReal> x1799=IKPowWithIntegerCheck(IKsign(((((-7.67571803157366e+20)*new_r01))+(((-4.87145924137159e+20)*new_r11)))),-1);
if(!x1799.valid){
continue;
}
j5array[0]=((-3.70710723588239)+(((1.5707963267949)*(x1799.value))));
sj5array[0]=IKsin(j5array[0]);
cj5array[0]=IKcos(j5array[0]);
if( j5array[0] > IKPI )
{
    j5array[0]-=IK2PI;
}
else if( j5array[0] < -IKPI )
{    j5array[0]+=IK2PI;
}
j5valid[0] = true;
for(int ij5 = 0; ij5 < 1; ++ij5)
{
if( !j5valid[ij5] )
{
    continue;
}
_ij5[0] = ij5; _ij5[1] = -1;
for(int iij5 = ij5+1; iij5 < 1; ++iij5)
{
if( j5valid[iij5] && IKabs(cj5array[ij5]-cj5array[iij5]) < IKFAST_SOLUTION_THRESH && IKabs(sj5array[ij5]-sj5array[iij5]) < IKFAST_SOLUTION_THRESH )
{
    j5valid[iij5]=false; _ij5[1] = iij5; break; 
}
}
j5 = j5array[ij5]; cj5 = cj5array[ij5]; sj5 = sj5array[ij5];
{
IkReal evalcond[16];
IkReal x1800=IKsin(j5);
IkReal x1801=IKcos(j5);
IkReal x1802=((0.531815483588428)*x1800);
IkReal x1803=(new_r01*x1800);
IkReal x1804=(new_r00*x1801);
IkReal x1805=(new_r11*x1800);
IkReal x1806=(new_r11*x1801);
IkReal x1807=(new_r01*x1801);
IkReal x1808=(new_r10*x1801);
IkReal x1809=(new_r10*x1800);
IkReal x1810=(new_r00*x1800);
evalcond[0]=((((0.837955424564001)*x1801))+(((-1.0)*x1802)));
evalcond[1]=((((-0.837955424564001)*x1800))+(((-0.531815483588428)*x1801)));
evalcond[2]=((0.0656300097775869)+x1810+x1808);
evalcond[3]=((-0.84431332557584)+x1806+x1803);
evalcond[4]=((-0.103420015825757)+x1804+(((-1.0)*x1809)));
evalcond[5]=((-0.53584979812698)+x1807+(((-1.0)*x1805)));
evalcond[6]=((((0.0656300097775869)*x1800))+(((-0.103420015825757)*x1801))+new_r00);
evalcond[7]=((((-0.84431332557584)*x1800))+(((-0.53584979812698)*x1801))+new_r01);
evalcond[8]=((((0.0656300097775869)*x1801))+new_r10+(((0.103420015825757)*x1800)));
evalcond[9]=((((-0.84431332557584)*x1801))+(((0.53584979812698)*x1800))+new_r11);
evalcond[10]=((((-0.531815483588428)*x1808))+(((-1.0)*new_r00*x1802))+(((0.837955424564001)*x1804))+(((-0.837955424564001)*x1809)));
evalcond[11]=((((-1.0)*new_r01*x1802))+(((-0.531815483588428)*x1806))+(((0.837955424564001)*x1807))+(((-0.837955424564001)*x1805)));
evalcond[12]=((2.24076669481955e-10)+(((0.535849798705775)*x1809))+(((-0.844313326436599)*x1810))+(((-0.844313326436599)*x1808))+(((-0.535849798705775)*x1804)));
evalcond[13]=((0.999999998963104)+(((0.535849798705775)*x1805))+(((-0.844313326436599)*x1806))+(((-0.844313326436599)*x1803))+(((-0.535849798705775)*x1807)));
evalcond[14]=((0.999999998963104)+(((0.103420015812922)*x1809))+(((0.0656300100348293)*x1810))+(((0.0656300100348293)*x1808))+(((-0.103420015812922)*x1804)));
evalcond[15]=((-2.24076669481955e-10)+(((0.103420015812922)*x1805))+(((0.0656300100348293)*x1803))+(((0.0656300100348293)*x1806))+(((-0.103420015812922)*x1807)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[9]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[10]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[11]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[12]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[13]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[14]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[15]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j2;
vinfos[0].indices[0] = _ij2[0];
vinfos[0].indices[1] = _ij2[1];
vinfos[0].maxsolutions = _nj2;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j3;
vinfos[1].indices[0] = _ij3[0];
vinfos[1].indices[1] = _ij3[1];
vinfos[1].maxsolutions = _nj3;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j4;
vinfos[2].indices[0] = _ij4[0];
vinfos[2].indices[1] = _ij4[1];
vinfos[2].maxsolutions = _nj4;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j5;
vinfos[3].indices[0] = _ij5[0];
vinfos[3].indices[1] = _ij5[1];
vinfos[3].maxsolutions = _nj5;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j6;
vinfos[4].indices[0] = _ij6[0];
vinfos[4].indices[1] = _ij6[1];
vinfos[4].maxsolutions = _nj6;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j7;
vinfos[5].indices[0] = _ij7[0];
vinfos[5].indices[1] = _ij7[1];
vinfos[5].maxsolutions = _nj7;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j8;
vinfos[6].indices[0] = _ij8[0];
vinfos[6].indices[1] = _ij8[1];
vinfos[6].maxsolutions = _nj8;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j5array[1], cj5array[1], sj5array[1];
bool j5valid[1]={false};
_nj5 = 1;
CheckValue<IkReal> x1811=IKPowWithIntegerCheck(IKsign(((((7.67571803157366e+20)*new_r10))+(((-4.87145924137159e+20)*new_r00)))),-1);
if(!x1811.valid){
continue;
}
j5array[0]=((1.0052817445023)+(((1.5707963267949)*(x1811.value))));
sj5array[0]=IKsin(j5array[0]);
cj5array[0]=IKcos(j5array[0]);
if( j5array[0] > IKPI )
{
    j5array[0]-=IK2PI;
}
else if( j5array[0] < -IKPI )
{    j5array[0]+=IK2PI;
}
j5valid[0] = true;
for(int ij5 = 0; ij5 < 1; ++ij5)
{
if( !j5valid[ij5] )
{
    continue;
}
_ij5[0] = ij5; _ij5[1] = -1;
for(int iij5 = ij5+1; iij5 < 1; ++iij5)
{
if( j5valid[iij5] && IKabs(cj5array[ij5]-cj5array[iij5]) < IKFAST_SOLUTION_THRESH && IKabs(sj5array[ij5]-sj5array[iij5]) < IKFAST_SOLUTION_THRESH )
{
    j5valid[iij5]=false; _ij5[1] = iij5; break; 
}
}
j5 = j5array[ij5]; cj5 = cj5array[ij5]; sj5 = sj5array[ij5];
{
IkReal evalcond[16];
IkReal x1812=IKsin(j5);
IkReal x1813=IKcos(j5);
IkReal x1814=((0.531815483588428)*x1812);
IkReal x1815=(new_r01*x1812);
IkReal x1816=(new_r00*x1813);
IkReal x1817=(new_r11*x1812);
IkReal x1818=(new_r11*x1813);
IkReal x1819=(new_r01*x1813);
IkReal x1820=(new_r10*x1813);
IkReal x1821=(new_r10*x1812);
IkReal x1822=(new_r00*x1812);
evalcond[0]=((((-1.0)*x1814))+(((0.837955424564001)*x1813)));
evalcond[1]=((((-0.531815483588428)*x1813))+(((-0.837955424564001)*x1812)));
evalcond[2]=((0.0656300097775869)+x1820+x1822);
evalcond[3]=((-0.84431332557584)+x1815+x1818);
evalcond[4]=((-0.103420015825757)+(((-1.0)*x1821))+x1816);
evalcond[5]=((-0.53584979812698)+x1819+(((-1.0)*x1817)));
evalcond[6]=((((-0.103420015825757)*x1813))+(((0.0656300097775869)*x1812))+new_r00);
evalcond[7]=((((-0.84431332557584)*x1812))+(((-0.53584979812698)*x1813))+new_r01);
evalcond[8]=((((0.103420015825757)*x1812))+(((0.0656300097775869)*x1813))+new_r10);
evalcond[9]=((((-0.84431332557584)*x1813))+(((0.53584979812698)*x1812))+new_r11);
evalcond[10]=((((0.837955424564001)*x1816))+(((-0.837955424564001)*x1821))+(((-0.531815483588428)*x1820))+(((-1.0)*new_r00*x1814)));
evalcond[11]=((((0.837955424564001)*x1819))+(((-1.0)*new_r01*x1814))+(((-0.837955424564001)*x1817))+(((-0.531815483588428)*x1818)));
evalcond[12]=((2.24076669481955e-10)+(((-0.535849798705775)*x1816))+(((0.535849798705775)*x1821))+(((-0.844313326436599)*x1822))+(((-0.844313326436599)*x1820)));
evalcond[13]=((0.999999998963104)+(((-0.535849798705775)*x1819))+(((-0.844313326436599)*x1815))+(((-0.844313326436599)*x1818))+(((0.535849798705775)*x1817)));
evalcond[14]=((0.999999998963104)+(((-0.103420015812922)*x1816))+(((0.0656300100348293)*x1822))+(((0.0656300100348293)*x1820))+(((0.103420015812922)*x1821)));
evalcond[15]=((-2.24076669481955e-10)+(((0.0656300100348293)*x1818))+(((0.0656300100348293)*x1815))+(((0.103420015812922)*x1817))+(((-0.103420015812922)*x1819)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[9]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[10]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[11]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[12]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[13]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[14]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[15]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j2;
vinfos[0].indices[0] = _ij2[0];
vinfos[0].indices[1] = _ij2[1];
vinfos[0].maxsolutions = _nj2;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j3;
vinfos[1].indices[0] = _ij3[0];
vinfos[1].indices[1] = _ij3[1];
vinfos[1].maxsolutions = _nj3;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j4;
vinfos[2].indices[0] = _ij4[0];
vinfos[2].indices[1] = _ij4[1];
vinfos[2].maxsolutions = _nj4;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j5;
vinfos[3].indices[0] = _ij5[0];
vinfos[3].indices[1] = _ij5[1];
vinfos[3].maxsolutions = _nj5;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j6;
vinfos[4].indices[0] = _ij6[0];
vinfos[4].indices[1] = _ij6[1];
vinfos[4].maxsolutions = _nj6;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j7;
vinfos[5].indices[0] = _ij7[0];
vinfos[5].indices[1] = _ij7[1];
vinfos[5].maxsolutions = _nj7;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j8;
vinfos[6].indices[0] = _ij8[0];
vinfos[6].indices[1] = _ij8[1];
vinfos[6].maxsolutions = _nj8;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j5array[1], cj5array[1], sj5array[1];
bool j5valid[1]={false};
_nj5 = 1;
CheckValue<IkReal> x1823=IKPowWithIntegerCheck(IKsign(((((-7.67571803157366e+20)*new_r00))+(((-4.87145924137159e+20)*new_r10)))),-1);
if(!x1823.valid){
continue;
}
j5array[0]=((-0.565514582292594)+(((1.5707963267949)*(x1823.value))));
sj5array[0]=IKsin(j5array[0]);
cj5array[0]=IKcos(j5array[0]);
if( j5array[0] > IKPI )
{
    j5array[0]-=IK2PI;
}
else if( j5array[0] < -IKPI )
{    j5array[0]+=IK2PI;
}
j5valid[0] = true;
for(int ij5 = 0; ij5 < 1; ++ij5)
{
if( !j5valid[ij5] )
{
    continue;
}
_ij5[0] = ij5; _ij5[1] = -1;
for(int iij5 = ij5+1; iij5 < 1; ++iij5)
{
if( j5valid[iij5] && IKabs(cj5array[ij5]-cj5array[iij5]) < IKFAST_SOLUTION_THRESH && IKabs(sj5array[ij5]-sj5array[iij5]) < IKFAST_SOLUTION_THRESH )
{
    j5valid[iij5]=false; _ij5[1] = iij5; break; 
}
}
j5 = j5array[ij5]; cj5 = cj5array[ij5]; sj5 = sj5array[ij5];
{
IkReal evalcond[16];
IkReal x1824=IKsin(j5);
IkReal x1825=IKcos(j5);
IkReal x1826=((0.531815483588428)*x1824);
IkReal x1827=(new_r01*x1824);
IkReal x1828=(new_r00*x1825);
IkReal x1829=(new_r11*x1824);
IkReal x1830=(new_r11*x1825);
IkReal x1831=(new_r01*x1825);
IkReal x1832=(new_r10*x1825);
IkReal x1833=(new_r10*x1824);
IkReal x1834=(new_r00*x1824);
evalcond[0]=((((-1.0)*x1826))+(((0.837955424564001)*x1825)));
evalcond[1]=((((-0.837955424564001)*x1824))+(((-0.531815483588428)*x1825)));
evalcond[2]=((0.0656300097775869)+x1832+x1834);
evalcond[3]=((-0.84431332557584)+x1827+x1830);
evalcond[4]=((-0.103420015825757)+(((-1.0)*x1833))+x1828);
evalcond[5]=((-0.53584979812698)+(((-1.0)*x1829))+x1831);
evalcond[6]=((((0.0656300097775869)*x1824))+(((-0.103420015825757)*x1825))+new_r00);
evalcond[7]=((((-0.53584979812698)*x1825))+(((-0.84431332557584)*x1824))+new_r01);
evalcond[8]=((((0.0656300097775869)*x1825))+(((0.103420015825757)*x1824))+new_r10);
evalcond[9]=((((-0.84431332557584)*x1825))+new_r11+(((0.53584979812698)*x1824)));
evalcond[10]=((((-0.531815483588428)*x1832))+(((-1.0)*new_r00*x1826))+(((-0.837955424564001)*x1833))+(((0.837955424564001)*x1828)));
evalcond[11]=((((-0.531815483588428)*x1830))+(((-0.837955424564001)*x1829))+(((-1.0)*new_r01*x1826))+(((0.837955424564001)*x1831)));
evalcond[12]=((2.24076669481955e-10)+(((0.535849798705775)*x1833))+(((-0.535849798705775)*x1828))+(((-0.844313326436599)*x1832))+(((-0.844313326436599)*x1834)));
evalcond[13]=((0.999999998963104)+(((-0.844313326436599)*x1830))+(((-0.535849798705775)*x1831))+(((0.535849798705775)*x1829))+(((-0.844313326436599)*x1827)));
evalcond[14]=((0.999999998963104)+(((0.103420015812922)*x1833))+(((-0.103420015812922)*x1828))+(((0.0656300100348293)*x1834))+(((0.0656300100348293)*x1832)));
evalcond[15]=((-2.24076669481955e-10)+(((0.0656300100348293)*x1827))+(((0.103420015812922)*x1829))+(((-0.103420015812922)*x1831))+(((0.0656300100348293)*x1830)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[9]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[10]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[11]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[12]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[13]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[14]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[15]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j2;
vinfos[0].indices[0] = _ij2[0];
vinfos[0].indices[1] = _ij2[1];
vinfos[0].maxsolutions = _nj2;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j3;
vinfos[1].indices[0] = _ij3[0];
vinfos[1].indices[1] = _ij3[1];
vinfos[1].maxsolutions = _nj3;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j4;
vinfos[2].indices[0] = _ij4[0];
vinfos[2].indices[1] = _ij4[1];
vinfos[2].maxsolutions = _nj4;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j5;
vinfos[3].indices[0] = _ij5[0];
vinfos[3].indices[1] = _ij5[1];
vinfos[3].maxsolutions = _nj5;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j6;
vinfos[4].indices[0] = _ij6[0];
vinfos[4].indices[1] = _ij6[1];
vinfos[4].maxsolutions = _nj6;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j7;
vinfos[5].indices[0] = _ij7[0];
vinfos[5].indices[1] = _ij7[1];
vinfos[5].maxsolutions = _nj7;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j8;
vinfos[6].indices[0] = _ij8[0];
vinfos[6].indices[1] = _ij8[1];
vinfos[6].maxsolutions = _nj8;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-6.00352634829718)+j3)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j5eval[3];
sj4=0;
cj4=-1.0;
j4=3.14159265358979;
new_r02=0;
new_r12=0;
new_r20=0;
new_r21=0;
sj3=-0.276027873007547;
cj3=0.96114963;
j3=6.00352635130823;
j5eval[0]=((((-1.5756506728798)*new_r01))+(((-1.0)*new_r11)));
j5eval[1]=IKsign(((((-7.67571803157366e+20)*new_r01))+(((-4.87145924137159e+20)*new_r11))));
j5eval[2]=57412245359.8717;
if( IKabs(j5eval[0]) < 0.0000010000000000  || IKabs(j5eval[1]) < 0.0000010000000000  || IKabs(j5eval[2]) < 0.0000010000000000  )
{
{
IkReal j5eval[3];
sj4=0;
cj4=-1.0;
j4=3.14159265358979;
new_r02=0;
new_r12=0;
new_r20=0;
new_r21=0;
sj3=-0.276027873007547;
cj3=0.96114963;
j3=6.00352635130823;
j5eval[0]=((((1.5756506728798)*new_r10))+(((-1.0)*new_r00)));
j5eval[1]=IKsign(((((7.67571803157366e+20)*new_r10))+(((-4.87145924137159e+20)*new_r00))));
j5eval[2]=346898309.953055;
if( IKabs(j5eval[0]) < 0.0000010000000000  || IKabs(j5eval[1]) < 0.0000010000000000  || IKabs(j5eval[2]) < 0.0000010000000000  )
{
{
IkReal j5eval[3];
sj4=0;
cj4=-1.0;
j4=3.14159265358979;
new_r02=0;
new_r12=0;
new_r20=0;
new_r21=0;
sj3=-0.276027873007547;
cj3=0.96114963;
j3=6.00352635130823;
j5eval[0]=((((1.5756506728798)*new_r11))+(((-1.0)*new_r01)));
j5eval[1]=-57412245359.8717;
j5eval[2]=IKsign(((((7.67571803157366e+20)*new_r11))+(((-4.87145924137159e+20)*new_r01))));
if( IKabs(j5eval[0]) < 0.0000010000000000  || IKabs(j5eval[1]) < 0.0000010000000000  || IKabs(j5eval[2]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j5array[1], cj5array[1], sj5array[1];
bool j5valid[1]={false};
_nj5 = 1;
CheckValue<IkReal> x1835=IKPowWithIntegerCheck(IKsign(((((7.67571803157366e+20)*new_r11))+(((-4.87145924137159e+20)*new_r01)))),-1);
if(!x1835.valid){
continue;
}
j5array[0]=((1.0052817445023)+(((1.5707963267949)*(x1835.value))));
sj5array[0]=IKsin(j5array[0]);
cj5array[0]=IKcos(j5array[0]);
if( j5array[0] > IKPI )
{
    j5array[0]-=IK2PI;
}
else if( j5array[0] < -IKPI )
{    j5array[0]+=IK2PI;
}
j5valid[0] = true;
for(int ij5 = 0; ij5 < 1; ++ij5)
{
if( !j5valid[ij5] )
{
    continue;
}
_ij5[0] = ij5; _ij5[1] = -1;
for(int iij5 = ij5+1; iij5 < 1; ++iij5)
{
if( j5valid[iij5] && IKabs(cj5array[ij5]-cj5array[iij5]) < IKFAST_SOLUTION_THRESH && IKabs(sj5array[ij5]-sj5array[iij5]) < IKFAST_SOLUTION_THRESH )
{
    j5valid[iij5]=false; _ij5[1] = iij5; break; 
}
}
j5 = j5array[ij5]; cj5 = cj5array[ij5]; sj5 = sj5array[ij5];
{
IkReal evalcond[16];
IkReal x1836=IKsin(j5);
IkReal x1837=IKcos(j5);
IkReal x1838=((0.531815483588428)*x1836);
IkReal x1839=(new_r01*x1836);
IkReal x1840=(new_r00*x1837);
IkReal x1841=(new_r11*x1836);
IkReal x1842=(new_r11*x1837);
IkReal x1843=(new_r01*x1837);
IkReal x1844=(new_r10*x1837);
IkReal x1845=(new_r10*x1836);
IkReal x1846=(new_r00*x1836);
evalcond[0]=((((0.837955424564001)*x1837))+(((-1.0)*x1838)));
evalcond[1]=((((-0.531815483588428)*x1837))+(((-0.837955424564001)*x1836)));
evalcond[2]=((-0.0656300097775869)+x1846+x1844);
evalcond[3]=((0.84431332557584)+x1842+x1839);
evalcond[4]=((0.103420015825757)+x1840+(((-1.0)*x1845)));
evalcond[5]=((0.53584979812698)+x1843+(((-1.0)*x1841)));
evalcond[6]=((((0.103420015825757)*x1837))+new_r00+(((-0.0656300097775869)*x1836)));
evalcond[7]=((((0.84431332557584)*x1836))+new_r01+(((0.53584979812698)*x1837)));
evalcond[8]=((((-0.103420015825757)*x1836))+new_r10+(((-0.0656300097775869)*x1837)));
evalcond[9]=((((0.84431332557584)*x1837))+new_r11+(((-0.53584979812698)*x1836)));
evalcond[10]=((((-0.837955424564001)*x1845))+(((-0.531815483588428)*x1844))+(((-1.0)*new_r00*x1838))+(((0.837955424564001)*x1840)));
evalcond[11]=((((-0.837955424564001)*x1841))+(((-0.531815483588428)*x1842))+(((-1.0)*new_r01*x1838))+(((0.837955424564001)*x1843)));
evalcond[12]=((-2.24076669481955e-10)+(((-0.844313326436599)*x1846))+(((-0.844313326436599)*x1844))+(((0.535849798705775)*x1845))+(((-0.535849798705775)*x1840)));
evalcond[13]=((-0.999999998963104)+(((-0.844313326436599)*x1842))+(((-0.844313326436599)*x1839))+(((0.535849798705775)*x1841))+(((-0.535849798705775)*x1843)));
evalcond[14]=((-0.999999998963104)+(((0.103420015812922)*x1845))+(((-0.103420015812922)*x1840))+(((0.0656300100348293)*x1844))+(((0.0656300100348293)*x1846)));
evalcond[15]=((2.24076669481955e-10)+(((0.103420015812922)*x1841))+(((-0.103420015812922)*x1843))+(((0.0656300100348293)*x1839))+(((0.0656300100348293)*x1842)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[9]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[10]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[11]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[12]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[13]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[14]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[15]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j2;
vinfos[0].indices[0] = _ij2[0];
vinfos[0].indices[1] = _ij2[1];
vinfos[0].maxsolutions = _nj2;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j3;
vinfos[1].indices[0] = _ij3[0];
vinfos[1].indices[1] = _ij3[1];
vinfos[1].maxsolutions = _nj3;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j4;
vinfos[2].indices[0] = _ij4[0];
vinfos[2].indices[1] = _ij4[1];
vinfos[2].maxsolutions = _nj4;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j5;
vinfos[3].indices[0] = _ij5[0];
vinfos[3].indices[1] = _ij5[1];
vinfos[3].maxsolutions = _nj5;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j6;
vinfos[4].indices[0] = _ij6[0];
vinfos[4].indices[1] = _ij6[1];
vinfos[4].maxsolutions = _nj6;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j7;
vinfos[5].indices[0] = _ij7[0];
vinfos[5].indices[1] = _ij7[1];
vinfos[5].maxsolutions = _nj7;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j8;
vinfos[6].indices[0] = _ij8[0];
vinfos[6].indices[1] = _ij8[1];
vinfos[6].maxsolutions = _nj8;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j5array[1], cj5array[1], sj5array[1];
bool j5valid[1]={false};
_nj5 = 1;
CheckValue<IkReal> x1847=IKPowWithIntegerCheck(IKsign(((((7.67571803157366e+20)*new_r10))+(((-4.87145924137159e+20)*new_r00)))),-1);
if(!x1847.valid){
continue;
}
j5array[0]=((-2.13631090908749)+(((1.5707963267949)*(x1847.value))));
sj5array[0]=IKsin(j5array[0]);
cj5array[0]=IKcos(j5array[0]);
if( j5array[0] > IKPI )
{
    j5array[0]-=IK2PI;
}
else if( j5array[0] < -IKPI )
{    j5array[0]+=IK2PI;
}
j5valid[0] = true;
for(int ij5 = 0; ij5 < 1; ++ij5)
{
if( !j5valid[ij5] )
{
    continue;
}
_ij5[0] = ij5; _ij5[1] = -1;
for(int iij5 = ij5+1; iij5 < 1; ++iij5)
{
if( j5valid[iij5] && IKabs(cj5array[ij5]-cj5array[iij5]) < IKFAST_SOLUTION_THRESH && IKabs(sj5array[ij5]-sj5array[iij5]) < IKFAST_SOLUTION_THRESH )
{
    j5valid[iij5]=false; _ij5[1] = iij5; break; 
}
}
j5 = j5array[ij5]; cj5 = cj5array[ij5]; sj5 = sj5array[ij5];
{
IkReal evalcond[16];
IkReal x1848=IKsin(j5);
IkReal x1849=IKcos(j5);
IkReal x1850=((0.531815483588428)*x1848);
IkReal x1851=(new_r01*x1848);
IkReal x1852=(new_r00*x1849);
IkReal x1853=(new_r11*x1848);
IkReal x1854=(new_r11*x1849);
IkReal x1855=(new_r01*x1849);
IkReal x1856=(new_r10*x1849);
IkReal x1857=(new_r10*x1848);
IkReal x1858=(new_r00*x1848);
evalcond[0]=((((0.837955424564001)*x1849))+(((-1.0)*x1850)));
evalcond[1]=((((-0.531815483588428)*x1849))+(((-0.837955424564001)*x1848)));
evalcond[2]=((-0.0656300097775869)+x1858+x1856);
evalcond[3]=((0.84431332557584)+x1851+x1854);
evalcond[4]=((0.103420015825757)+(((-1.0)*x1857))+x1852);
evalcond[5]=((0.53584979812698)+(((-1.0)*x1853))+x1855);
evalcond[6]=((((-0.0656300097775869)*x1848))+(((0.103420015825757)*x1849))+new_r00);
evalcond[7]=((((0.53584979812698)*x1849))+(((0.84431332557584)*x1848))+new_r01);
evalcond[8]=((((-0.0656300097775869)*x1849))+(((-0.103420015825757)*x1848))+new_r10);
evalcond[9]=((((0.84431332557584)*x1849))+(((-0.53584979812698)*x1848))+new_r11);
evalcond[10]=((((-0.837955424564001)*x1857))+(((-1.0)*new_r00*x1850))+(((0.837955424564001)*x1852))+(((-0.531815483588428)*x1856)));
evalcond[11]=((((-0.837955424564001)*x1853))+(((-1.0)*new_r01*x1850))+(((0.837955424564001)*x1855))+(((-0.531815483588428)*x1854)));
evalcond[12]=((-2.24076669481955e-10)+(((-0.535849798705775)*x1852))+(((-0.844313326436599)*x1858))+(((-0.844313326436599)*x1856))+(((0.535849798705775)*x1857)));
evalcond[13]=((-0.999999998963104)+(((-0.535849798705775)*x1855))+(((-0.844313326436599)*x1851))+(((-0.844313326436599)*x1854))+(((0.535849798705775)*x1853)));
evalcond[14]=((-0.999999998963104)+(((0.0656300100348293)*x1858))+(((0.0656300100348293)*x1856))+(((-0.103420015812922)*x1852))+(((0.103420015812922)*x1857)));
evalcond[15]=((2.24076669481955e-10)+(((0.0656300100348293)*x1854))+(((0.0656300100348293)*x1851))+(((-0.103420015812922)*x1855))+(((0.103420015812922)*x1853)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[9]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[10]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[11]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[12]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[13]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[14]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[15]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j2;
vinfos[0].indices[0] = _ij2[0];
vinfos[0].indices[1] = _ij2[1];
vinfos[0].maxsolutions = _nj2;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j3;
vinfos[1].indices[0] = _ij3[0];
vinfos[1].indices[1] = _ij3[1];
vinfos[1].maxsolutions = _nj3;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j4;
vinfos[2].indices[0] = _ij4[0];
vinfos[2].indices[1] = _ij4[1];
vinfos[2].maxsolutions = _nj4;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j5;
vinfos[3].indices[0] = _ij5[0];
vinfos[3].indices[1] = _ij5[1];
vinfos[3].maxsolutions = _nj5;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j6;
vinfos[4].indices[0] = _ij6[0];
vinfos[4].indices[1] = _ij6[1];
vinfos[4].maxsolutions = _nj6;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j7;
vinfos[5].indices[0] = _ij7[0];
vinfos[5].indices[1] = _ij7[1];
vinfos[5].maxsolutions = _nj7;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j8;
vinfos[6].indices[0] = _ij8[0];
vinfos[6].indices[1] = _ij8[1];
vinfos[6].maxsolutions = _nj8;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j5array[1], cj5array[1], sj5array[1];
bool j5valid[1]={false};
_nj5 = 1;
CheckValue<IkReal> x1859=IKPowWithIntegerCheck(IKsign(((((-7.67571803157366e+20)*new_r01))+(((-4.87145924137159e+20)*new_r11)))),-1);
if(!x1859.valid){
continue;
}
j5array[0]=((-0.565514582292594)+(((1.5707963267949)*(x1859.value))));
sj5array[0]=IKsin(j5array[0]);
cj5array[0]=IKcos(j5array[0]);
if( j5array[0] > IKPI )
{
    j5array[0]-=IK2PI;
}
else if( j5array[0] < -IKPI )
{    j5array[0]+=IK2PI;
}
j5valid[0] = true;
for(int ij5 = 0; ij5 < 1; ++ij5)
{
if( !j5valid[ij5] )
{
    continue;
}
_ij5[0] = ij5; _ij5[1] = -1;
for(int iij5 = ij5+1; iij5 < 1; ++iij5)
{
if( j5valid[iij5] && IKabs(cj5array[ij5]-cj5array[iij5]) < IKFAST_SOLUTION_THRESH && IKabs(sj5array[ij5]-sj5array[iij5]) < IKFAST_SOLUTION_THRESH )
{
    j5valid[iij5]=false; _ij5[1] = iij5; break; 
}
}
j5 = j5array[ij5]; cj5 = cj5array[ij5]; sj5 = sj5array[ij5];
{
IkReal evalcond[16];
IkReal x1860=IKsin(j5);
IkReal x1861=IKcos(j5);
IkReal x1862=((0.531815483588428)*x1860);
IkReal x1863=(new_r01*x1860);
IkReal x1864=(new_r00*x1861);
IkReal x1865=(new_r11*x1860);
IkReal x1866=(new_r11*x1861);
IkReal x1867=(new_r01*x1861);
IkReal x1868=(new_r10*x1861);
IkReal x1869=(new_r10*x1860);
IkReal x1870=(new_r00*x1860);
evalcond[0]=((((0.837955424564001)*x1861))+(((-1.0)*x1862)));
evalcond[1]=((((-0.531815483588428)*x1861))+(((-0.837955424564001)*x1860)));
evalcond[2]=((-0.0656300097775869)+x1868+x1870);
evalcond[3]=((0.84431332557584)+x1863+x1866);
evalcond[4]=((0.103420015825757)+x1864+(((-1.0)*x1869)));
evalcond[5]=((0.53584979812698)+x1867+(((-1.0)*x1865)));
evalcond[6]=((((-0.0656300097775869)*x1860))+new_r00+(((0.103420015825757)*x1861)));
evalcond[7]=((((0.53584979812698)*x1861))+(((0.84431332557584)*x1860))+new_r01);
evalcond[8]=((((-0.103420015825757)*x1860))+(((-0.0656300097775869)*x1861))+new_r10);
evalcond[9]=((((0.84431332557584)*x1861))+new_r11+(((-0.53584979812698)*x1860)));
evalcond[10]=((((-1.0)*new_r00*x1862))+(((-0.837955424564001)*x1869))+(((-0.531815483588428)*x1868))+(((0.837955424564001)*x1864)));
evalcond[11]=((((-1.0)*new_r01*x1862))+(((-0.837955424564001)*x1865))+(((-0.531815483588428)*x1866))+(((0.837955424564001)*x1867)));
evalcond[12]=((-2.24076669481955e-10)+(((-0.844313326436599)*x1870))+(((-0.844313326436599)*x1868))+(((0.535849798705775)*x1869))+(((-0.535849798705775)*x1864)));
evalcond[13]=((-0.999999998963104)+(((-0.844313326436599)*x1863))+(((-0.844313326436599)*x1866))+(((0.535849798705775)*x1865))+(((-0.535849798705775)*x1867)));
evalcond[14]=((-0.999999998963104)+(((0.103420015812922)*x1869))+(((-0.103420015812922)*x1864))+(((0.0656300100348293)*x1868))+(((0.0656300100348293)*x1870)));
evalcond[15]=((2.24076669481955e-10)+(((0.103420015812922)*x1865))+(((-0.103420015812922)*x1867))+(((0.0656300100348293)*x1866))+(((0.0656300100348293)*x1863)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[9]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[10]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[11]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[12]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[13]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[14]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[15]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j2;
vinfos[0].indices[0] = _ij2[0];
vinfos[0].indices[1] = _ij2[1];
vinfos[0].maxsolutions = _nj2;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j3;
vinfos[1].indices[0] = _ij3[0];
vinfos[1].indices[1] = _ij3[1];
vinfos[1].maxsolutions = _nj3;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j4;
vinfos[2].indices[0] = _ij4[0];
vinfos[2].indices[1] = _ij4[1];
vinfos[2].maxsolutions = _nj4;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j5;
vinfos[3].indices[0] = _ij5[0];
vinfos[3].indices[1] = _ij5[1];
vinfos[3].maxsolutions = _nj5;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j6;
vinfos[4].indices[0] = _ij6[0];
vinfos[4].indices[1] = _ij6[1];
vinfos[4].maxsolutions = _nj6;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j7;
vinfos[5].indices[0] = _ij7[0];
vinfos[5].indices[1] = _ij7[1];
vinfos[5].maxsolutions = _nj7;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j8;
vinfos[6].indices[0] = _ij8[0];
vinfos[6].indices[1] = _ij8[1];
vinfos[6].maxsolutions = _nj8;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-1.29113736791249)+j3)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j5eval[3];
sj4=0;
cj4=-1.0;
j4=3.14159265358979;
new_r02=0;
new_r12=0;
new_r20=0;
new_r21=0;
sj3=0.96114963;
cj3=0.276027873007547;
j3=1.29113736329066;
j5eval[0]=((((1.5756506728798)*new_r11))+(((-1.0)*new_r01)));
j5eval[1]=346898309.953055;
j5eval[2]=IKsign(((((7.67571803157366e+20)*new_r11))+(((-4.87145924137159e+20)*new_r01))));
if( IKabs(j5eval[0]) < 0.0000010000000000  || IKabs(j5eval[1]) < 0.0000010000000000  || IKabs(j5eval[2]) < 0.0000010000000000  )
{
{
IkReal j5eval[3];
sj4=0;
cj4=-1.0;
j4=3.14159265358979;
new_r02=0;
new_r12=0;
new_r20=0;
new_r21=0;
sj3=0.96114963;
cj3=0.276027873007547;
j3=1.29113736329066;
j5eval[0]=((((-1.5756506728798)*new_r00))+(((-1.0)*new_r10)));
j5eval[1]=-57412245359.8717;
j5eval[2]=IKsign(((((-7.67571803157366e+20)*new_r00))+(((-4.87145924137159e+20)*new_r10))));
if( IKabs(j5eval[0]) < 0.0000010000000000  || IKabs(j5eval[1]) < 0.0000010000000000  || IKabs(j5eval[2]) < 0.0000010000000000  )
{
{
IkReal j5eval[3];
sj4=0;
cj4=-1.0;
j4=3.14159265358979;
new_r02=0;
new_r12=0;
new_r20=0;
new_r21=0;
sj3=0.96114963;
cj3=0.276027873007547;
j3=1.29113736329066;
j5eval[0]=((((-1.5756506728798)*new_r01))+(((-1.0)*new_r11)));
j5eval[1]=-346898309.953055;
j5eval[2]=IKsign(((((-7.67571803157366e+20)*new_r01))+(((-4.87145924137159e+20)*new_r11))));
if( IKabs(j5eval[0]) < 0.0000010000000000  || IKabs(j5eval[1]) < 0.0000010000000000  || IKabs(j5eval[2]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j5array[1], cj5array[1], sj5array[1];
bool j5valid[1]={false};
_nj5 = 1;
CheckValue<IkReal> x1871=IKPowWithIntegerCheck(IKsign(((((-7.67571803157366e+20)*new_r01))+(((-4.87145924137159e+20)*new_r11)))),-1);
if(!x1871.valid){
continue;
}
j5array[0]=((-3.70710723588239)+(((1.5707963267949)*(x1871.value))));
sj5array[0]=IKsin(j5array[0]);
cj5array[0]=IKcos(j5array[0]);
if( j5array[0] > IKPI )
{
    j5array[0]-=IK2PI;
}
else if( j5array[0] < -IKPI )
{    j5array[0]+=IK2PI;
}
j5valid[0] = true;
for(int ij5 = 0; ij5 < 1; ++ij5)
{
if( !j5valid[ij5] )
{
    continue;
}
_ij5[0] = ij5; _ij5[1] = -1;
for(int iij5 = ij5+1; iij5 < 1; ++iij5)
{
if( j5valid[iij5] && IKabs(cj5array[ij5]-cj5array[iij5]) < IKFAST_SOLUTION_THRESH && IKabs(sj5array[ij5]-sj5array[iij5]) < IKFAST_SOLUTION_THRESH )
{
    j5valid[iij5]=false; _ij5[1] = iij5; break; 
}
}
j5 = j5array[ij5]; cj5 = cj5array[ij5]; sj5 = sj5array[ij5];
{
IkReal evalcond[16];
IkReal x1872=IKsin(j5);
IkReal x1873=IKcos(j5);
IkReal x1874=((0.531815483588428)*x1872);
IkReal x1875=(new_r01*x1872);
IkReal x1876=(new_r00*x1873);
IkReal x1877=(new_r11*x1872);
IkReal x1878=(new_r11*x1873);
IkReal x1879=(new_r01*x1873);
IkReal x1880=(new_r10*x1873);
IkReal x1881=(new_r10*x1872);
IkReal x1882=(new_r00*x1872);
evalcond[0]=((((-1.0)*x1874))+(((0.837955424564001)*x1873)));
evalcond[1]=((((-0.531815483588428)*x1873))+(((-0.837955424564001)*x1872)));
evalcond[2]=((-0.84431332557584)+x1882+x1880);
evalcond[3]=((-0.0656300097775869)+x1875+x1878);
evalcond[4]=((-0.53584979812698)+x1876+(((-1.0)*x1881)));
evalcond[5]=((0.103420015825757)+x1879+(((-1.0)*x1877)));
evalcond[6]=((((-0.84431332557584)*x1872))+(((-0.53584979812698)*x1873))+new_r00);
evalcond[7]=((((0.103420015825757)*x1873))+(((-0.0656300097775869)*x1872))+new_r01);
evalcond[8]=((((-0.84431332557584)*x1873))+(((0.53584979812698)*x1872))+new_r10);
evalcond[9]=((((-0.0656300097775869)*x1873))+(((-0.103420015825757)*x1872))+new_r11);
evalcond[10]=((((-0.837955424564001)*x1881))+(((-1.0)*new_r00*x1874))+(((-0.531815483588428)*x1880))+(((0.837955424564001)*x1876)));
evalcond[11]=((((-0.837955424564001)*x1877))+(((-0.531815483588428)*x1878))+(((0.837955424564001)*x1879))+(((-1.0)*new_r01*x1874)));
evalcond[12]=((0.999999998963104)+(((0.535849798705775)*x1881))+(((-0.535849798705775)*x1876))+(((-0.844313326436599)*x1882))+(((-0.844313326436599)*x1880)));
evalcond[13]=((-2.24076669481955e-10)+(((-0.844313326436599)*x1875))+(((-0.844313326436599)*x1878))+(((0.535849798705775)*x1877))+(((-0.535849798705775)*x1879)));
evalcond[14]=((-2.24076669481955e-10)+(((0.0656300100348293)*x1880))+(((0.0656300100348293)*x1882))+(((0.103420015812922)*x1881))+(((-0.103420015812922)*x1876)));
evalcond[15]=((-0.999999998963104)+(((0.103420015812922)*x1877))+(((-0.103420015812922)*x1879))+(((0.0656300100348293)*x1878))+(((0.0656300100348293)*x1875)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[9]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[10]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[11]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[12]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[13]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[14]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[15]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j2;
vinfos[0].indices[0] = _ij2[0];
vinfos[0].indices[1] = _ij2[1];
vinfos[0].maxsolutions = _nj2;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j3;
vinfos[1].indices[0] = _ij3[0];
vinfos[1].indices[1] = _ij3[1];
vinfos[1].maxsolutions = _nj3;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j4;
vinfos[2].indices[0] = _ij4[0];
vinfos[2].indices[1] = _ij4[1];
vinfos[2].maxsolutions = _nj4;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j5;
vinfos[3].indices[0] = _ij5[0];
vinfos[3].indices[1] = _ij5[1];
vinfos[3].maxsolutions = _nj5;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j6;
vinfos[4].indices[0] = _ij6[0];
vinfos[4].indices[1] = _ij6[1];
vinfos[4].maxsolutions = _nj6;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j7;
vinfos[5].indices[0] = _ij7[0];
vinfos[5].indices[1] = _ij7[1];
vinfos[5].maxsolutions = _nj7;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j8;
vinfos[6].indices[0] = _ij8[0];
vinfos[6].indices[1] = _ij8[1];
vinfos[6].maxsolutions = _nj8;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j5array[1], cj5array[1], sj5array[1];
bool j5valid[1]={false};
_nj5 = 1;
CheckValue<IkReal> x1883=IKPowWithIntegerCheck(IKsign(((((-7.67571803157366e+20)*new_r00))+(((-4.87145924137159e+20)*new_r10)))),-1);
if(!x1883.valid){
continue;
}
j5array[0]=((-3.70710723588239)+(((1.5707963267949)*(x1883.value))));
sj5array[0]=IKsin(j5array[0]);
cj5array[0]=IKcos(j5array[0]);
if( j5array[0] > IKPI )
{
    j5array[0]-=IK2PI;
}
else if( j5array[0] < -IKPI )
{    j5array[0]+=IK2PI;
}
j5valid[0] = true;
for(int ij5 = 0; ij5 < 1; ++ij5)
{
if( !j5valid[ij5] )
{
    continue;
}
_ij5[0] = ij5; _ij5[1] = -1;
for(int iij5 = ij5+1; iij5 < 1; ++iij5)
{
if( j5valid[iij5] && IKabs(cj5array[ij5]-cj5array[iij5]) < IKFAST_SOLUTION_THRESH && IKabs(sj5array[ij5]-sj5array[iij5]) < IKFAST_SOLUTION_THRESH )
{
    j5valid[iij5]=false; _ij5[1] = iij5; break; 
}
}
j5 = j5array[ij5]; cj5 = cj5array[ij5]; sj5 = sj5array[ij5];
{
IkReal evalcond[16];
IkReal x1884=IKsin(j5);
IkReal x1885=IKcos(j5);
IkReal x1886=((0.531815483588428)*x1884);
IkReal x1887=(new_r01*x1884);
IkReal x1888=(new_r00*x1885);
IkReal x1889=(new_r11*x1884);
IkReal x1890=(new_r11*x1885);
IkReal x1891=(new_r01*x1885);
IkReal x1892=(new_r10*x1885);
IkReal x1893=(new_r10*x1884);
IkReal x1894=(new_r00*x1884);
evalcond[0]=((((0.837955424564001)*x1885))+(((-1.0)*x1886)));
evalcond[1]=((((-0.531815483588428)*x1885))+(((-0.837955424564001)*x1884)));
evalcond[2]=((-0.84431332557584)+x1894+x1892);
evalcond[3]=((-0.0656300097775869)+x1890+x1887);
evalcond[4]=((-0.53584979812698)+(((-1.0)*x1893))+x1888);
evalcond[5]=((0.103420015825757)+x1891+(((-1.0)*x1889)));
evalcond[6]=((((-0.84431332557584)*x1884))+(((-0.53584979812698)*x1885))+new_r00);
evalcond[7]=((((0.103420015825757)*x1885))+(((-0.0656300097775869)*x1884))+new_r01);
evalcond[8]=((((-0.84431332557584)*x1885))+(((0.53584979812698)*x1884))+new_r10);
evalcond[9]=((((-0.0656300097775869)*x1885))+new_r11+(((-0.103420015825757)*x1884)));
evalcond[10]=((((-0.837955424564001)*x1893))+(((0.837955424564001)*x1888))+(((-0.531815483588428)*x1892))+(((-1.0)*new_r00*x1886)));
evalcond[11]=((((-0.837955424564001)*x1889))+(((0.837955424564001)*x1891))+(((-0.531815483588428)*x1890))+(((-1.0)*new_r01*x1886)));
evalcond[12]=((0.999999998963104)+(((-0.535849798705775)*x1888))+(((0.535849798705775)*x1893))+(((-0.844313326436599)*x1894))+(((-0.844313326436599)*x1892)));
evalcond[13]=((-2.24076669481955e-10)+(((-0.535849798705775)*x1891))+(((0.535849798705775)*x1889))+(((-0.844313326436599)*x1890))+(((-0.844313326436599)*x1887)));
evalcond[14]=((-2.24076669481955e-10)+(((0.0656300100348293)*x1892))+(((0.0656300100348293)*x1894))+(((-0.103420015812922)*x1888))+(((0.103420015812922)*x1893)));
evalcond[15]=((-0.999999998963104)+(((0.0656300100348293)*x1890))+(((0.0656300100348293)*x1887))+(((-0.103420015812922)*x1891))+(((0.103420015812922)*x1889)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[9]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[10]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[11]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[12]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[13]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[14]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[15]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j2;
vinfos[0].indices[0] = _ij2[0];
vinfos[0].indices[1] = _ij2[1];
vinfos[0].maxsolutions = _nj2;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j3;
vinfos[1].indices[0] = _ij3[0];
vinfos[1].indices[1] = _ij3[1];
vinfos[1].maxsolutions = _nj3;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j4;
vinfos[2].indices[0] = _ij4[0];
vinfos[2].indices[1] = _ij4[1];
vinfos[2].maxsolutions = _nj4;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j5;
vinfos[3].indices[0] = _ij5[0];
vinfos[3].indices[1] = _ij5[1];
vinfos[3].maxsolutions = _nj5;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j6;
vinfos[4].indices[0] = _ij6[0];
vinfos[4].indices[1] = _ij6[1];
vinfos[4].maxsolutions = _nj6;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j7;
vinfos[5].indices[0] = _ij7[0];
vinfos[5].indices[1] = _ij7[1];
vinfos[5].maxsolutions = _nj7;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j8;
vinfos[6].indices[0] = _ij8[0];
vinfos[6].indices[1] = _ij8[1];
vinfos[6].maxsolutions = _nj8;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j5array[1], cj5array[1], sj5array[1];
bool j5valid[1]={false};
_nj5 = 1;
CheckValue<IkReal> x1895=IKPowWithIntegerCheck(IKsign(((((7.67571803157366e+20)*new_r11))+(((-4.87145924137159e+20)*new_r01)))),-1);
if(!x1895.valid){
continue;
}
j5array[0]=((-2.13631090908749)+(((1.5707963267949)*(x1895.value))));
sj5array[0]=IKsin(j5array[0]);
cj5array[0]=IKcos(j5array[0]);
if( j5array[0] > IKPI )
{
    j5array[0]-=IK2PI;
}
else if( j5array[0] < -IKPI )
{    j5array[0]+=IK2PI;
}
j5valid[0] = true;
for(int ij5 = 0; ij5 < 1; ++ij5)
{
if( !j5valid[ij5] )
{
    continue;
}
_ij5[0] = ij5; _ij5[1] = -1;
for(int iij5 = ij5+1; iij5 < 1; ++iij5)
{
if( j5valid[iij5] && IKabs(cj5array[ij5]-cj5array[iij5]) < IKFAST_SOLUTION_THRESH && IKabs(sj5array[ij5]-sj5array[iij5]) < IKFAST_SOLUTION_THRESH )
{
    j5valid[iij5]=false; _ij5[1] = iij5; break; 
}
}
j5 = j5array[ij5]; cj5 = cj5array[ij5]; sj5 = sj5array[ij5];
{
IkReal evalcond[16];
IkReal x1896=IKsin(j5);
IkReal x1897=IKcos(j5);
IkReal x1898=((0.531815483588428)*x1896);
IkReal x1899=(new_r01*x1896);
IkReal x1900=(new_r00*x1897);
IkReal x1901=(new_r11*x1896);
IkReal x1902=(new_r11*x1897);
IkReal x1903=(new_r01*x1897);
IkReal x1904=(new_r10*x1897);
IkReal x1905=(new_r10*x1896);
IkReal x1906=(new_r00*x1896);
evalcond[0]=((((0.837955424564001)*x1897))+(((-1.0)*x1898)));
evalcond[1]=((((-0.837955424564001)*x1896))+(((-0.531815483588428)*x1897)));
evalcond[2]=((-0.84431332557584)+x1906+x1904);
evalcond[3]=((-0.0656300097775869)+x1902+x1899);
evalcond[4]=((-0.53584979812698)+(((-1.0)*x1905))+x1900);
evalcond[5]=((0.103420015825757)+(((-1.0)*x1901))+x1903);
evalcond[6]=((((-0.84431332557584)*x1896))+(((-0.53584979812698)*x1897))+new_r00);
evalcond[7]=((((0.103420015825757)*x1897))+(((-0.0656300097775869)*x1896))+new_r01);
evalcond[8]=((((-0.84431332557584)*x1897))+(((0.53584979812698)*x1896))+new_r10);
evalcond[9]=((((-0.0656300097775869)*x1897))+new_r11+(((-0.103420015825757)*x1896)));
evalcond[10]=((((-0.531815483588428)*x1904))+(((-0.837955424564001)*x1905))+(((0.837955424564001)*x1900))+(((-1.0)*new_r00*x1898)));
evalcond[11]=((((-0.531815483588428)*x1902))+(((-0.837955424564001)*x1901))+(((-1.0)*new_r01*x1898))+(((0.837955424564001)*x1903)));
evalcond[12]=((0.999999998963104)+(((-0.844313326436599)*x1906))+(((-0.844313326436599)*x1904))+(((-0.535849798705775)*x1900))+(((0.535849798705775)*x1905)));
evalcond[13]=((-2.24076669481955e-10)+(((-0.844313326436599)*x1902))+(((-0.535849798705775)*x1903))+(((0.535849798705775)*x1901))+(((-0.844313326436599)*x1899)));
evalcond[14]=((-2.24076669481955e-10)+(((-0.103420015812922)*x1900))+(((0.103420015812922)*x1905))+(((0.0656300100348293)*x1904))+(((0.0656300100348293)*x1906)));
evalcond[15]=((-0.999999998963104)+(((0.0656300100348293)*x1899))+(((-0.103420015812922)*x1903))+(((0.103420015812922)*x1901))+(((0.0656300100348293)*x1902)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[9]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[10]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[11]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[12]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[13]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[14]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[15]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j2;
vinfos[0].indices[0] = _ij2[0];
vinfos[0].indices[1] = _ij2[1];
vinfos[0].maxsolutions = _nj2;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j3;
vinfos[1].indices[0] = _ij3[0];
vinfos[1].indices[1] = _ij3[1];
vinfos[1].maxsolutions = _nj3;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j4;
vinfos[2].indices[0] = _ij4[0];
vinfos[2].indices[1] = _ij4[1];
vinfos[2].maxsolutions = _nj4;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j5;
vinfos[3].indices[0] = _ij5[0];
vinfos[3].indices[1] = _ij5[1];
vinfos[3].maxsolutions = _nj5;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j6;
vinfos[4].indices[0] = _ij6[0];
vinfos[4].indices[1] = _ij6[1];
vinfos[4].maxsolutions = _nj6;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j7;
vinfos[5].indices[0] = _ij7[0];
vinfos[5].indices[1] = _ij7[1];
vinfos[5].maxsolutions = _nj7;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j8;
vinfos[6].indices[0] = _ij8[0];
vinfos[6].indices[1] = _ij8[1];
vinfos[6].maxsolutions = _nj8;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-4.43273002150228)+j3)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j5eval[3];
sj4=0;
cj4=-1.0;
j4=3.14159265358979;
new_r02=0;
new_r12=0;
new_r20=0;
new_r21=0;
sj3=-0.96114963;
cj3=-0.276027873007547;
j3=4.43273001956917;
j5eval[0]=((((-1.5756506728798)*new_r00))+(((-1.0)*new_r10)));
j5eval[1]=IKsign(((((-7.67571803157366e+20)*new_r00))+(((-4.87145924137159e+20)*new_r10))));
j5eval[2]=57412245359.8717;
if( IKabs(j5eval[0]) < 0.0000010000000000  || IKabs(j5eval[1]) < 0.0000010000000000  || IKabs(j5eval[2]) < 0.0000010000000000  )
{
{
IkReal j5eval[3];
sj4=0;
cj4=-1.0;
j4=3.14159265358979;
new_r02=0;
new_r12=0;
new_r20=0;
new_r21=0;
sj3=-0.96114963;
cj3=-0.276027873007547;
j3=4.43273001956917;
j5eval[0]=((((-1.5756506728798)*new_r01))+(((-1.0)*new_r11)));
j5eval[1]=IKsign(((((-7.67571803157366e+20)*new_r01))+(((-4.87145924137159e+20)*new_r11))));
j5eval[2]=346898309.953055;
if( IKabs(j5eval[0]) < 0.0000010000000000  || IKabs(j5eval[1]) < 0.0000010000000000  || IKabs(j5eval[2]) < 0.0000010000000000  )
{
{
IkReal j5eval[3];
sj4=0;
cj4=-1.0;
j4=3.14159265358979;
new_r02=0;
new_r12=0;
new_r20=0;
new_r21=0;
sj3=-0.96114963;
cj3=-0.276027873007547;
j3=4.43273001956917;
j5eval[0]=((((1.5756506728798)*new_r10))+(((-1.0)*new_r00)));
j5eval[1]=IKsign(((((7.67571803157366e+20)*new_r10))+(((-4.87145924137159e+20)*new_r00))));
j5eval[2]=-57412245359.8717;
if( IKabs(j5eval[0]) < 0.0000010000000000  || IKabs(j5eval[1]) < 0.0000010000000000  || IKabs(j5eval[2]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j5array[1], cj5array[1], sj5array[1];
bool j5valid[1]={false};
_nj5 = 1;
CheckValue<IkReal> x1907=IKPowWithIntegerCheck(IKsign(((((7.67571803157366e+20)*new_r10))+(((-4.87145924137159e+20)*new_r00)))),-1);
if(!x1907.valid){
continue;
}
j5array[0]=((1.0052817445023)+(((1.5707963267949)*(x1907.value))));
sj5array[0]=IKsin(j5array[0]);
cj5array[0]=IKcos(j5array[0]);
if( j5array[0] > IKPI )
{
    j5array[0]-=IK2PI;
}
else if( j5array[0] < -IKPI )
{    j5array[0]+=IK2PI;
}
j5valid[0] = true;
for(int ij5 = 0; ij5 < 1; ++ij5)
{
if( !j5valid[ij5] )
{
    continue;
}
_ij5[0] = ij5; _ij5[1] = -1;
for(int iij5 = ij5+1; iij5 < 1; ++iij5)
{
if( j5valid[iij5] && IKabs(cj5array[ij5]-cj5array[iij5]) < IKFAST_SOLUTION_THRESH && IKabs(sj5array[ij5]-sj5array[iij5]) < IKFAST_SOLUTION_THRESH )
{
    j5valid[iij5]=false; _ij5[1] = iij5; break; 
}
}
j5 = j5array[ij5]; cj5 = cj5array[ij5]; sj5 = sj5array[ij5];
{
IkReal evalcond[16];
IkReal x1908=IKsin(j5);
IkReal x1909=IKcos(j5);
IkReal x1910=((0.531815483588428)*x1908);
IkReal x1911=(new_r01*x1908);
IkReal x1912=(new_r00*x1909);
IkReal x1913=(new_r11*x1908);
IkReal x1914=(new_r11*x1909);
IkReal x1915=(new_r01*x1909);
IkReal x1916=(new_r10*x1909);
IkReal x1917=(new_r10*x1908);
IkReal x1918=(new_r00*x1908);
evalcond[0]=((((0.837955424564001)*x1909))+(((-1.0)*x1910)));
evalcond[1]=((((-0.531815483588428)*x1909))+(((-0.837955424564001)*x1908)));
evalcond[2]=((0.84431332557584)+x1918+x1916);
evalcond[3]=((0.0656300097775869)+x1911+x1914);
evalcond[4]=((0.53584979812698)+(((-1.0)*x1917))+x1912);
evalcond[5]=((-0.103420015825757)+(((-1.0)*x1913))+x1915);
evalcond[6]=((((0.53584979812698)*x1909))+new_r00+(((0.84431332557584)*x1908)));
evalcond[7]=(new_r01+(((0.0656300097775869)*x1908))+(((-0.103420015825757)*x1909)));
evalcond[8]=((((-0.53584979812698)*x1908))+new_r10+(((0.84431332557584)*x1909)));
evalcond[9]=((((0.103420015825757)*x1908))+new_r11+(((0.0656300097775869)*x1909)));
evalcond[10]=((((-1.0)*new_r00*x1910))+(((-0.531815483588428)*x1916))+(((-0.837955424564001)*x1917))+(((0.837955424564001)*x1912)));
evalcond[11]=((((-1.0)*new_r01*x1910))+(((-0.531815483588428)*x1914))+(((-0.837955424564001)*x1913))+(((0.837955424564001)*x1915)));
evalcond[12]=((-0.999999998963104)+(((-0.844313326436599)*x1918))+(((-0.844313326436599)*x1916))+(((0.535849798705775)*x1917))+(((-0.535849798705775)*x1912)));
evalcond[13]=((2.24076669481955e-10)+(((-0.844313326436599)*x1911))+(((-0.844313326436599)*x1914))+(((0.535849798705775)*x1913))+(((-0.535849798705775)*x1915)));
evalcond[14]=((2.24076669481955e-10)+(((0.0656300100348293)*x1916))+(((0.0656300100348293)*x1918))+(((-0.103420015812922)*x1912))+(((0.103420015812922)*x1917)));
evalcond[15]=((0.999999998963104)+(((0.0656300100348293)*x1914))+(((0.0656300100348293)*x1911))+(((-0.103420015812922)*x1915))+(((0.103420015812922)*x1913)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[9]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[10]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[11]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[12]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[13]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[14]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[15]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j2;
vinfos[0].indices[0] = _ij2[0];
vinfos[0].indices[1] = _ij2[1];
vinfos[0].maxsolutions = _nj2;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j3;
vinfos[1].indices[0] = _ij3[0];
vinfos[1].indices[1] = _ij3[1];
vinfos[1].maxsolutions = _nj3;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j4;
vinfos[2].indices[0] = _ij4[0];
vinfos[2].indices[1] = _ij4[1];
vinfos[2].maxsolutions = _nj4;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j5;
vinfos[3].indices[0] = _ij5[0];
vinfos[3].indices[1] = _ij5[1];
vinfos[3].maxsolutions = _nj5;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j6;
vinfos[4].indices[0] = _ij6[0];
vinfos[4].indices[1] = _ij6[1];
vinfos[4].maxsolutions = _nj6;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j7;
vinfos[5].indices[0] = _ij7[0];
vinfos[5].indices[1] = _ij7[1];
vinfos[5].maxsolutions = _nj7;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j8;
vinfos[6].indices[0] = _ij8[0];
vinfos[6].indices[1] = _ij8[1];
vinfos[6].maxsolutions = _nj8;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j5array[1], cj5array[1], sj5array[1];
bool j5valid[1]={false};
_nj5 = 1;
CheckValue<IkReal> x1919=IKPowWithIntegerCheck(IKsign(((((-7.67571803157366e+20)*new_r01))+(((-4.87145924137159e+20)*new_r11)))),-1);
if(!x1919.valid){
continue;
}
j5array[0]=((-0.565514582292594)+(((1.5707963267949)*(x1919.value))));
sj5array[0]=IKsin(j5array[0]);
cj5array[0]=IKcos(j5array[0]);
if( j5array[0] > IKPI )
{
    j5array[0]-=IK2PI;
}
else if( j5array[0] < -IKPI )
{    j5array[0]+=IK2PI;
}
j5valid[0] = true;
for(int ij5 = 0; ij5 < 1; ++ij5)
{
if( !j5valid[ij5] )
{
    continue;
}
_ij5[0] = ij5; _ij5[1] = -1;
for(int iij5 = ij5+1; iij5 < 1; ++iij5)
{
if( j5valid[iij5] && IKabs(cj5array[ij5]-cj5array[iij5]) < IKFAST_SOLUTION_THRESH && IKabs(sj5array[ij5]-sj5array[iij5]) < IKFAST_SOLUTION_THRESH )
{
    j5valid[iij5]=false; _ij5[1] = iij5; break; 
}
}
j5 = j5array[ij5]; cj5 = cj5array[ij5]; sj5 = sj5array[ij5];
{
IkReal evalcond[16];
IkReal x1920=IKsin(j5);
IkReal x1921=IKcos(j5);
IkReal x1922=((0.531815483588428)*x1920);
IkReal x1923=(new_r01*x1920);
IkReal x1924=(new_r00*x1921);
IkReal x1925=(new_r11*x1920);
IkReal x1926=(new_r11*x1921);
IkReal x1927=(new_r01*x1921);
IkReal x1928=(new_r10*x1921);
IkReal x1929=(new_r10*x1920);
IkReal x1930=(new_r00*x1920);
evalcond[0]=((((-1.0)*x1922))+(((0.837955424564001)*x1921)));
evalcond[1]=((((-0.531815483588428)*x1921))+(((-0.837955424564001)*x1920)));
evalcond[2]=((0.84431332557584)+x1928+x1930);
evalcond[3]=((0.0656300097775869)+x1923+x1926);
evalcond[4]=((0.53584979812698)+(((-1.0)*x1929))+x1924);
evalcond[5]=((-0.103420015825757)+(((-1.0)*x1925))+x1927);
evalcond[6]=((((0.84431332557584)*x1920))+new_r00+(((0.53584979812698)*x1921)));
evalcond[7]=((((0.0656300097775869)*x1920))+new_r01+(((-0.103420015825757)*x1921)));
evalcond[8]=((((0.84431332557584)*x1921))+new_r10+(((-0.53584979812698)*x1920)));
evalcond[9]=((((0.103420015825757)*x1920))+(((0.0656300097775869)*x1921))+new_r11);
evalcond[10]=((((-0.531815483588428)*x1928))+(((0.837955424564001)*x1924))+(((-1.0)*new_r00*x1922))+(((-0.837955424564001)*x1929)));
evalcond[11]=((((-0.531815483588428)*x1926))+(((-1.0)*new_r01*x1922))+(((0.837955424564001)*x1927))+(((-0.837955424564001)*x1925)));
evalcond[12]=((-0.999999998963104)+(((-0.844313326436599)*x1928))+(((0.535849798705775)*x1929))+(((-0.844313326436599)*x1930))+(((-0.535849798705775)*x1924)));
evalcond[13]=((2.24076669481955e-10)+(((-0.844313326436599)*x1926))+(((-0.844313326436599)*x1923))+(((0.535849798705775)*x1925))+(((-0.535849798705775)*x1927)));
evalcond[14]=((2.24076669481955e-10)+(((-0.103420015812922)*x1924))+(((0.103420015812922)*x1929))+(((0.0656300100348293)*x1928))+(((0.0656300100348293)*x1930)));
evalcond[15]=((0.999999998963104)+(((-0.103420015812922)*x1927))+(((0.103420015812922)*x1925))+(((0.0656300100348293)*x1926))+(((0.0656300100348293)*x1923)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[9]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[10]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[11]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[12]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[13]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[14]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[15]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j2;
vinfos[0].indices[0] = _ij2[0];
vinfos[0].indices[1] = _ij2[1];
vinfos[0].maxsolutions = _nj2;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j3;
vinfos[1].indices[0] = _ij3[0];
vinfos[1].indices[1] = _ij3[1];
vinfos[1].maxsolutions = _nj3;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j4;
vinfos[2].indices[0] = _ij4[0];
vinfos[2].indices[1] = _ij4[1];
vinfos[2].maxsolutions = _nj4;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j5;
vinfos[3].indices[0] = _ij5[0];
vinfos[3].indices[1] = _ij5[1];
vinfos[3].maxsolutions = _nj5;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j6;
vinfos[4].indices[0] = _ij6[0];
vinfos[4].indices[1] = _ij6[1];
vinfos[4].maxsolutions = _nj6;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j7;
vinfos[5].indices[0] = _ij7[0];
vinfos[5].indices[1] = _ij7[1];
vinfos[5].maxsolutions = _nj7;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j8;
vinfos[6].indices[0] = _ij8[0];
vinfos[6].indices[1] = _ij8[1];
vinfos[6].maxsolutions = _nj8;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j5array[1], cj5array[1], sj5array[1];
bool j5valid[1]={false};
_nj5 = 1;
CheckValue<IkReal> x1931=IKPowWithIntegerCheck(IKsign(((((-7.67571803157366e+20)*new_r00))+(((-4.87145924137159e+20)*new_r10)))),-1);
if(!x1931.valid){
continue;
}
j5array[0]=((-0.565514582292594)+(((1.5707963267949)*(x1931.value))));
sj5array[0]=IKsin(j5array[0]);
cj5array[0]=IKcos(j5array[0]);
if( j5array[0] > IKPI )
{
    j5array[0]-=IK2PI;
}
else if( j5array[0] < -IKPI )
{    j5array[0]+=IK2PI;
}
j5valid[0] = true;
for(int ij5 = 0; ij5 < 1; ++ij5)
{
if( !j5valid[ij5] )
{
    continue;
}
_ij5[0] = ij5; _ij5[1] = -1;
for(int iij5 = ij5+1; iij5 < 1; ++iij5)
{
if( j5valid[iij5] && IKabs(cj5array[ij5]-cj5array[iij5]) < IKFAST_SOLUTION_THRESH && IKabs(sj5array[ij5]-sj5array[iij5]) < IKFAST_SOLUTION_THRESH )
{
    j5valid[iij5]=false; _ij5[1] = iij5; break; 
}
}
j5 = j5array[ij5]; cj5 = cj5array[ij5]; sj5 = sj5array[ij5];
{
IkReal evalcond[16];
IkReal x1932=IKsin(j5);
IkReal x1933=IKcos(j5);
IkReal x1934=((0.531815483588428)*x1932);
IkReal x1935=(new_r01*x1932);
IkReal x1936=(new_r00*x1933);
IkReal x1937=(new_r11*x1932);
IkReal x1938=(new_r11*x1933);
IkReal x1939=(new_r01*x1933);
IkReal x1940=(new_r10*x1933);
IkReal x1941=(new_r10*x1932);
IkReal x1942=(new_r00*x1932);
evalcond[0]=((((0.837955424564001)*x1933))+(((-1.0)*x1934)));
evalcond[1]=((((-0.531815483588428)*x1933))+(((-0.837955424564001)*x1932)));
evalcond[2]=((0.84431332557584)+x1942+x1940);
evalcond[3]=((0.0656300097775869)+x1935+x1938);
evalcond[4]=((0.53584979812698)+x1936+(((-1.0)*x1941)));
evalcond[5]=((-0.103420015825757)+(((-1.0)*x1937))+x1939);
evalcond[6]=((((0.53584979812698)*x1933))+new_r00+(((0.84431332557584)*x1932)));
evalcond[7]=(new_r01+(((0.0656300097775869)*x1932))+(((-0.103420015825757)*x1933)));
evalcond[8]=((((-0.53584979812698)*x1932))+new_r10+(((0.84431332557584)*x1933)));
evalcond[9]=((((0.103420015825757)*x1932))+new_r11+(((0.0656300097775869)*x1933)));
evalcond[10]=((((-1.0)*new_r00*x1934))+(((-0.837955424564001)*x1941))+(((-0.531815483588428)*x1940))+(((0.837955424564001)*x1936)));
evalcond[11]=((((-1.0)*new_r01*x1934))+(((-0.531815483588428)*x1938))+(((-0.837955424564001)*x1937))+(((0.837955424564001)*x1939)));
evalcond[12]=((-0.999999998963104)+(((-0.535849798705775)*x1936))+(((0.535849798705775)*x1941))+(((-0.844313326436599)*x1942))+(((-0.844313326436599)*x1940)));
evalcond[13]=((2.24076669481955e-10)+(((0.535849798705775)*x1937))+(((-0.535849798705775)*x1939))+(((-0.844313326436599)*x1935))+(((-0.844313326436599)*x1938)));
evalcond[14]=((2.24076669481955e-10)+(((-0.103420015812922)*x1936))+(((0.103420015812922)*x1941))+(((0.0656300100348293)*x1940))+(((0.0656300100348293)*x1942)));
evalcond[15]=((0.999999998963104)+(((-0.103420015812922)*x1939))+(((0.103420015812922)*x1937))+(((0.0656300100348293)*x1938))+(((0.0656300100348293)*x1935)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[9]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[10]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[11]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[12]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[13]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[14]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[15]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j2;
vinfos[0].indices[0] = _ij2[0];
vinfos[0].indices[1] = _ij2[1];
vinfos[0].maxsolutions = _nj2;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j3;
vinfos[1].indices[0] = _ij3[0];
vinfos[1].indices[1] = _ij3[1];
vinfos[1].maxsolutions = _nj3;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j4;
vinfos[2].indices[0] = _ij4[0];
vinfos[2].indices[1] = _ij4[1];
vinfos[2].maxsolutions = _nj4;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j5;
vinfos[3].indices[0] = _ij5[0];
vinfos[3].indices[1] = _ij5[1];
vinfos[3].maxsolutions = _nj5;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j6;
vinfos[4].indices[0] = _ij6[0];
vinfos[4].indices[1] = _ij6[1];
vinfos[4].maxsolutions = _nj6;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j7;
vinfos[5].indices[0] = _ij7[0];
vinfos[5].indices[1] = _ij7[1];
vinfos[5].maxsolutions = _nj7;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j8;
vinfos[6].indices[0] = _ij8[0];
vinfos[6].indices[1] = _ij8[1];
vinfos[6].maxsolutions = _nj8;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
if( 1 )
{
bgotonextstatement=false;
continue; // branch miss [j5]

}
} while(0);
if( bgotonextstatement )
{
}
}
}
}
}
}

} else
{
{
IkReal j5array[1], cj5array[1], sj5array[1];
bool j5valid[1]={false};
_nj5 = 1;
CheckValue<IkReal> x1943 = IKatan2WithCheck(IkReal(((((-1.44260603426447e+20)*cj3))+(((-3.86499496156882e+20)*sj3)))),IkReal(((((2.27304316858926e+20)*cj3))+(((6.08988191187293e+20)*sj3)))),IKFAST_ATAN2_MAGTHRESH);
if(!x1943.valid){
continue;
}
CheckValue<IkReal> x1944=IKPowWithIntegerCheck(IKsign(((((7.67571803157366e+20)*new_r10))+(((-4.87145924137159e+20)*new_r00)))),-1);
if(!x1944.valid){
continue;
}
j5array[0]=((-1.5707963267949)+(x1943.value)+(((1.5707963267949)*(x1944.value))));
sj5array[0]=IKsin(j5array[0]);
cj5array[0]=IKcos(j5array[0]);
if( j5array[0] > IKPI )
{
    j5array[0]-=IK2PI;
}
else if( j5array[0] < -IKPI )
{    j5array[0]+=IK2PI;
}
j5valid[0] = true;
for(int ij5 = 0; ij5 < 1; ++ij5)
{
if( !j5valid[ij5] )
{
    continue;
}
_ij5[0] = ij5; _ij5[1] = -1;
for(int iij5 = ij5+1; iij5 < 1; ++iij5)
{
if( j5valid[iij5] && IKabs(cj5array[ij5]-cj5array[iij5]) < IKFAST_SOLUTION_THRESH && IKabs(sj5array[ij5]-sj5array[iij5]) < IKFAST_SOLUTION_THRESH )
{
    j5valid[iij5]=false; _ij5[1] = iij5; break; 
}
}
j5 = j5array[ij5]; cj5 = cj5array[ij5]; sj5 = sj5array[ij5];
{
IkReal evalcond[16];
IkReal x1945=IKsin(j5);
IkReal x1946=IKcos(j5);
IkReal x1947=((0.276027873078388)*sj3);
IkReal x1948=((0.961149631058464)*cj3);
IkReal x1949=((0.961149631058464)*sj3);
IkReal x1950=((0.276027873078388)*cj3);
IkReal x1951=((0.0485073701835875)*sj3);
IkReal x1952=((0.793395730122254)*cj3);
IkReal x1953=((0.543578643327382)*sj3);
IkReal x1954=((0.793395730122254)*sj3);
IkReal x1955=((0.296134271639373)*sj3);
IkReal x1956=((0.0485073701835875)*cj3);
IkReal x1957=((0.543578643327382)*cj3);
IkReal x1958=((0.296134271639373)*cj3);
IkReal x1959=((0.531815483588428)*x1945);
IkReal x1960=(new_r01*x1945);
IkReal x1961=(new_r00*x1946);
IkReal x1962=(new_r11*x1945);
IkReal x1963=(new_r11*x1946);
IkReal x1964=(new_r01*x1946);
IkReal x1965=(new_r10*x1946);
IkReal x1966=(cj3*x1946);
IkReal x1967=(new_r10*x1945);
IkReal x1968=(new_r00*x1945);
IkReal x1969=(x1949+x1950);
evalcond[0]=((((0.837955424564001)*x1946))+(((-1.0)*x1959)));
evalcond[1]=((((-0.531815483588428)*x1946))+(((-0.837955424564001)*x1945)));
evalcond[2]=((((-1.0)*x1954))+(((-1.0)*x1958))+x1968+x1965);
evalcond[3]=((((-1.0)*x1955))+x1960+x1963+x1952);
evalcond[4]=((((-1.0)*x1953))+(((-1.0)*x1956))+(((-1.0)*x1967))+x1961);
evalcond[5]=((((-1.0)*x1951))+(((-1.0)*x1962))+x1964+x1957);
evalcond[6]=((((-1.0)*new_r00*x1959))+(((0.837955424564001)*x1961))+(((-0.837955424564001)*x1967))+(((-0.531815483588428)*x1965)));
evalcond[7]=((((-1.0)*new_r01*x1959))+(((0.837955424564001)*x1964))+(((-0.837955424564001)*x1962))+(((-0.531815483588428)*x1963)));
evalcond[8]=((((-0.535849798705775)*x1961))+(((0.535849798705775)*x1967))+(((-0.844313326436599)*x1968))+(((-0.844313326436599)*x1965))+x1969);
evalcond[9]=((((-0.535849798705775)*x1964))+(((-1.0)*x1948))+(((0.535849798705775)*x1962))+(((-0.844313326436599)*x1963))+(((-0.844313326436599)*x1960))+x1947);
evalcond[10]=((((-1.0)*x1948))+(((0.103420015812922)*x1967))+x1947+(((0.0656300100348293)*x1968))+(((0.0656300100348293)*x1965))+(((-0.103420015812922)*x1961)));
evalcond[11]=((((0.103420015812922)*x1962))+(((-1.0)*x1969))+(((0.0656300100348293)*x1963))+(((0.0656300100348293)*x1960))+(((-0.103420015812922)*x1964)));
evalcond[12]=((((-1.0)*x1945*x1954))+(((-1.0)*x1945*x1958))+(((-1.0)*x1946*x1953))+(((-1.0)*x1946*x1956))+new_r00);
evalcond[13]=(((x1945*x1952))+(((-1.0)*x1945*x1955))+((x1946*x1957))+(((-1.0)*x1946*x1951))+new_r01);
evalcond[14]=(((x1945*x1953))+((x1945*x1956))+(((-1.0)*x1946*x1958))+(((-1.0)*x1946*x1954))+new_r10);
evalcond[15]=(((x1945*x1951))+(((-1.0)*x1945*x1957))+((x1946*x1952))+(((-1.0)*x1946*x1955))+new_r11);
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[9]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[10]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[11]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[12]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[13]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[14]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[15]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j2;
vinfos[0].indices[0] = _ij2[0];
vinfos[0].indices[1] = _ij2[1];
vinfos[0].maxsolutions = _nj2;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j3;
vinfos[1].indices[0] = _ij3[0];
vinfos[1].indices[1] = _ij3[1];
vinfos[1].maxsolutions = _nj3;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j4;
vinfos[2].indices[0] = _ij4[0];
vinfos[2].indices[1] = _ij4[1];
vinfos[2].maxsolutions = _nj4;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j5;
vinfos[3].indices[0] = _ij5[0];
vinfos[3].indices[1] = _ij5[1];
vinfos[3].maxsolutions = _nj5;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j6;
vinfos[4].indices[0] = _ij6[0];
vinfos[4].indices[1] = _ij6[1];
vinfos[4].maxsolutions = _nj6;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j7;
vinfos[5].indices[0] = _ij7[0];
vinfos[5].indices[1] = _ij7[1];
vinfos[5].maxsolutions = _nj7;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j8;
vinfos[6].indices[0] = _ij8[0];
vinfos[6].indices[1] = _ij8[1];
vinfos[6].maxsolutions = _nj8;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j5array[1], cj5array[1], sj5array[1];
bool j5valid[1]={false};
_nj5 = 1;
CheckValue<IkReal> x1970 = IKatan2WithCheck(IkReal(((((6.08988191187293e+20)*cj3))+(((-2.27304316858926e+20)*sj3)))),IkReal(((((-1.44260603426447e+20)*sj3))+(((3.86499496156882e+20)*cj3)))),IKFAST_ATAN2_MAGTHRESH);
if(!x1970.valid){
continue;
}
CheckValue<IkReal> x1971=IKPowWithIntegerCheck(IKsign(((((-7.67571803157366e+20)*new_r01))+(((-4.87145924137159e+20)*new_r11)))),-1);
if(!x1971.valid){
continue;
}
j5array[0]=((-1.5707963267949)+(x1970.value)+(((1.5707963267949)*(x1971.value))));
sj5array[0]=IKsin(j5array[0]);
cj5array[0]=IKcos(j5array[0]);
if( j5array[0] > IKPI )
{
    j5array[0]-=IK2PI;
}
else if( j5array[0] < -IKPI )
{    j5array[0]+=IK2PI;
}
j5valid[0] = true;
for(int ij5 = 0; ij5 < 1; ++ij5)
{
if( !j5valid[ij5] )
{
    continue;
}
_ij5[0] = ij5; _ij5[1] = -1;
for(int iij5 = ij5+1; iij5 < 1; ++iij5)
{
if( j5valid[iij5] && IKabs(cj5array[ij5]-cj5array[iij5]) < IKFAST_SOLUTION_THRESH && IKabs(sj5array[ij5]-sj5array[iij5]) < IKFAST_SOLUTION_THRESH )
{
    j5valid[iij5]=false; _ij5[1] = iij5; break; 
}
}
j5 = j5array[ij5]; cj5 = cj5array[ij5]; sj5 = sj5array[ij5];
{
IkReal evalcond[16];
IkReal x1972=IKsin(j5);
IkReal x1973=IKcos(j5);
IkReal x1974=((0.276027873078388)*sj3);
IkReal x1975=((0.961149631058464)*cj3);
IkReal x1976=((0.961149631058464)*sj3);
IkReal x1977=((0.276027873078388)*cj3);
IkReal x1978=((0.0485073701835875)*sj3);
IkReal x1979=((0.793395730122254)*cj3);
IkReal x1980=((0.543578643327382)*sj3);
IkReal x1981=((0.793395730122254)*sj3);
IkReal x1982=((0.296134271639373)*sj3);
IkReal x1983=((0.0485073701835875)*cj3);
IkReal x1984=((0.543578643327382)*cj3);
IkReal x1985=((0.296134271639373)*cj3);
IkReal x1986=((0.531815483588428)*x1972);
IkReal x1987=(new_r01*x1972);
IkReal x1988=(new_r00*x1973);
IkReal x1989=(new_r11*x1972);
IkReal x1990=(new_r11*x1973);
IkReal x1991=(new_r01*x1973);
IkReal x1992=(new_r10*x1973);
IkReal x1993=(cj3*x1973);
IkReal x1994=(new_r10*x1972);
IkReal x1995=(new_r00*x1972);
IkReal x1996=(x1977+x1976);
evalcond[0]=((((-1.0)*x1986))+(((0.837955424564001)*x1973)));
evalcond[1]=((((-0.531815483588428)*x1973))+(((-0.837955424564001)*x1972)));
evalcond[2]=((((-1.0)*x1985))+(((-1.0)*x1981))+x1992+x1995);
evalcond[3]=((((-1.0)*x1982))+x1987+x1990+x1979);
evalcond[4]=((((-1.0)*x1980))+(((-1.0)*x1983))+x1988+(((-1.0)*x1994)));
evalcond[5]=((((-1.0)*x1978))+x1984+x1991+(((-1.0)*x1989)));
evalcond[6]=((((-0.531815483588428)*x1992))+(((-1.0)*new_r00*x1986))+(((-0.837955424564001)*x1994))+(((0.837955424564001)*x1988)));
evalcond[7]=((((-0.531815483588428)*x1990))+(((0.837955424564001)*x1991))+(((-1.0)*new_r01*x1986))+(((-0.837955424564001)*x1989)));
evalcond[8]=((((-0.535849798705775)*x1988))+x1996+(((0.535849798705775)*x1994))+(((-0.844313326436599)*x1995))+(((-0.844313326436599)*x1992)));
evalcond[9]=((((-1.0)*x1975))+x1974+(((-0.844313326436599)*x1987))+(((0.535849798705775)*x1989))+(((-0.535849798705775)*x1991))+(((-0.844313326436599)*x1990)));
evalcond[10]=((((0.103420015812922)*x1994))+(((-1.0)*x1975))+(((0.0656300100348293)*x1995))+(((0.0656300100348293)*x1992))+x1974+(((-0.103420015812922)*x1988)));
evalcond[11]=((((-0.103420015812922)*x1991))+(((0.0656300100348293)*x1990))+(((-1.0)*x1996))+(((0.103420015812922)*x1989))+(((0.0656300100348293)*x1987)));
evalcond[12]=((((-1.0)*x1973*x1980))+(((-1.0)*x1973*x1983))+(((-1.0)*x1972*x1981))+(((-1.0)*x1972*x1985))+new_r00);
evalcond[13]=(((x1972*x1979))+(((-1.0)*x1972*x1982))+(((-1.0)*x1973*x1978))+((x1973*x1984))+new_r01);
evalcond[14]=(((x1972*x1983))+((x1972*x1980))+(((-1.0)*x1973*x1981))+(((-1.0)*x1973*x1985))+new_r10);
evalcond[15]=(((x1972*x1978))+(((-1.0)*x1973*x1982))+(((-1.0)*x1972*x1984))+((x1973*x1979))+new_r11);
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[9]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[10]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[11]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[12]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[13]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[14]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[15]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j2;
vinfos[0].indices[0] = _ij2[0];
vinfos[0].indices[1] = _ij2[1];
vinfos[0].maxsolutions = _nj2;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j3;
vinfos[1].indices[0] = _ij3[0];
vinfos[1].indices[1] = _ij3[1];
vinfos[1].maxsolutions = _nj3;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j4;
vinfos[2].indices[0] = _ij4[0];
vinfos[2].indices[1] = _ij4[1];
vinfos[2].maxsolutions = _nj4;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j5;
vinfos[3].indices[0] = _ij5[0];
vinfos[3].indices[1] = _ij5[1];
vinfos[3].maxsolutions = _nj5;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j6;
vinfos[4].indices[0] = _ij6[0];
vinfos[4].indices[1] = _ij6[1];
vinfos[4].maxsolutions = _nj6;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j7;
vinfos[5].indices[0] = _ij7[0];
vinfos[5].indices[1] = _ij7[1];
vinfos[5].maxsolutions = _nj7;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j8;
vinfos[6].indices[0] = _ij8[0];
vinfos[6].indices[1] = _ij8[1];
vinfos[6].maxsolutions = _nj8;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j5array[1], cj5array[1], sj5array[1];
bool j5valid[1]={false};
_nj5 = 1;
CheckValue<IkReal> x1997 = IKatan2WithCheck(IkReal(((((-6.08988191187293e+20)*sj3))+(((-2.27304316858926e+20)*cj3)))),IkReal(((((-1.44260603426447e+20)*cj3))+(((-3.86499496156882e+20)*sj3)))),IKFAST_ATAN2_MAGTHRESH);
if(!x1997.valid){
continue;
}
CheckValue<IkReal> x1998=IKPowWithIntegerCheck(IKsign(((((-7.67571803157366e+20)*new_r00))+(((-4.87145924137159e+20)*new_r10)))),-1);
if(!x1998.valid){
continue;
}
j5array[0]=((-1.5707963267949)+(x1997.value)+(((1.5707963267949)*(x1998.value))));
sj5array[0]=IKsin(j5array[0]);
cj5array[0]=IKcos(j5array[0]);
if( j5array[0] > IKPI )
{
    j5array[0]-=IK2PI;
}
else if( j5array[0] < -IKPI )
{    j5array[0]+=IK2PI;
}
j5valid[0] = true;
for(int ij5 = 0; ij5 < 1; ++ij5)
{
if( !j5valid[ij5] )
{
    continue;
}
_ij5[0] = ij5; _ij5[1] = -1;
for(int iij5 = ij5+1; iij5 < 1; ++iij5)
{
if( j5valid[iij5] && IKabs(cj5array[ij5]-cj5array[iij5]) < IKFAST_SOLUTION_THRESH && IKabs(sj5array[ij5]-sj5array[iij5]) < IKFAST_SOLUTION_THRESH )
{
    j5valid[iij5]=false; _ij5[1] = iij5; break; 
}
}
j5 = j5array[ij5]; cj5 = cj5array[ij5]; sj5 = sj5array[ij5];
{
IkReal evalcond[16];
IkReal x1999=IKsin(j5);
IkReal x2000=IKcos(j5);
IkReal x2001=((0.276027873078388)*sj3);
IkReal x2002=((0.961149631058464)*cj3);
IkReal x2003=((0.961149631058464)*sj3);
IkReal x2004=((0.276027873078388)*cj3);
IkReal x2005=((0.0485073701835875)*sj3);
IkReal x2006=((0.793395730122254)*cj3);
IkReal x2007=((0.543578643327382)*sj3);
IkReal x2008=((0.793395730122254)*sj3);
IkReal x2009=((0.296134271639373)*sj3);
IkReal x2010=((0.0485073701835875)*cj3);
IkReal x2011=((0.543578643327382)*cj3);
IkReal x2012=((0.296134271639373)*cj3);
IkReal x2013=((0.531815483588428)*x1999);
IkReal x2014=(new_r01*x1999);
IkReal x2015=(new_r00*x2000);
IkReal x2016=(new_r11*x1999);
IkReal x2017=(new_r11*x2000);
IkReal x2018=(new_r01*x2000);
IkReal x2019=(new_r10*x2000);
IkReal x2020=(cj3*x2000);
IkReal x2021=(new_r10*x1999);
IkReal x2022=(new_r00*x1999);
IkReal x2023=(x2003+x2004);
evalcond[0]=((((-1.0)*x2013))+(((0.837955424564001)*x2000)));
evalcond[1]=((((-0.837955424564001)*x1999))+(((-0.531815483588428)*x2000)));
evalcond[2]=((((-1.0)*x2012))+x2022+x2019+(((-1.0)*x2008)));
evalcond[3]=(x2006+x2014+x2017+(((-1.0)*x2009)));
evalcond[4]=((((-1.0)*x2010))+x2015+(((-1.0)*x2021))+(((-1.0)*x2007)));
evalcond[5]=(x2018+x2011+(((-1.0)*x2005))+(((-1.0)*x2016)));
evalcond[6]=((((0.837955424564001)*x2015))+(((-1.0)*new_r00*x2013))+(((-0.531815483588428)*x2019))+(((-0.837955424564001)*x2021)));
evalcond[7]=((((0.837955424564001)*x2018))+(((-0.837955424564001)*x2016))+(((-1.0)*new_r01*x2013))+(((-0.531815483588428)*x2017)));
evalcond[8]=((((0.535849798705775)*x2021))+x2023+(((-0.844313326436599)*x2022))+(((-0.844313326436599)*x2019))+(((-0.535849798705775)*x2015)));
evalcond[9]=(x2001+(((0.535849798705775)*x2016))+(((-1.0)*x2002))+(((-0.844313326436599)*x2014))+(((-0.844313326436599)*x2017))+(((-0.535849798705775)*x2018)));
evalcond[10]=((((0.0656300100348293)*x2019))+(((-0.103420015812922)*x2015))+(((0.0656300100348293)*x2022))+x2001+(((0.103420015812922)*x2021))+(((-1.0)*x2002)));
evalcond[11]=((((0.0656300100348293)*x2014))+(((0.0656300100348293)*x2017))+(((-0.103420015812922)*x2018))+(((-1.0)*x2023))+(((0.103420015812922)*x2016)));
evalcond[12]=((((-1.0)*x1999*x2012))+(((-1.0)*x2000*x2007))+new_r00+(((-1.0)*x2000*x2010))+(((-1.0)*x1999*x2008)));
evalcond[13]=(((x2000*x2011))+((x1999*x2006))+(((-1.0)*x2000*x2005))+new_r01+(((-1.0)*x1999*x2009)));
evalcond[14]=(((x1999*x2007))+((x1999*x2010))+(((-1.0)*x2000*x2008))+new_r10+(((-1.0)*x2000*x2012)));
evalcond[15]=((((-1.0)*x1999*x2011))+((x1999*x2005))+((x2000*x2006))+(((-1.0)*x2000*x2009))+new_r11);
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[9]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[10]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[11]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[12]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[13]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[14]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[15]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j2;
vinfos[0].indices[0] = _ij2[0];
vinfos[0].indices[1] = _ij2[1];
vinfos[0].maxsolutions = _nj2;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j3;
vinfos[1].indices[0] = _ij3[0];
vinfos[1].indices[1] = _ij3[1];
vinfos[1].maxsolutions = _nj3;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j4;
vinfos[2].indices[0] = _ij4[0];
vinfos[2].indices[1] = _ij4[1];
vinfos[2].maxsolutions = _nj4;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j5;
vinfos[3].indices[0] = _ij5[0];
vinfos[3].indices[1] = _ij5[1];
vinfos[3].maxsolutions = _nj5;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j6;
vinfos[4].indices[0] = _ij6[0];
vinfos[4].indices[1] = _ij6[1];
vinfos[4].maxsolutions = _nj6;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j7;
vinfos[5].indices[0] = _ij7[0];
vinfos[5].indices[1] = _ij7[1];
vinfos[5].maxsolutions = _nj7;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j8;
vinfos[6].indices[0] = _ij8[0];
vinfos[6].indices[1] = _ij8[1];
vinfos[6].maxsolutions = _nj8;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
if( 1 )
{
bgotonextstatement=false;
continue; // branch miss [j5]

}
} while(0);
if( bgotonextstatement )
{
}
}
}
}

} else
{
{
IkReal j5array[1], cj5array[1], sj5array[1];
bool j5valid[1]={false};
_nj5 = 1;
CheckValue<IkReal> x2024=IKPowWithIntegerCheck(((((6.24024889090152e+76)*new_r12))+(((9.83245236388639e+76)*new_r02))),-1);
if(!x2024.valid){
continue;
}
CheckValue<IkReal> x2025=IKPowWithIntegerCheck(((((1.2480497781803e+77)*new_r12))+(((1.96649047277728e+77)*new_r02))),-1);
if(!x2025.valid){
continue;
}
if( IKabs(((x2024.value)*(((5.22905040876042e+76)+(((1.173386086617e+77)*new_r02*new_r12)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((x2025.value)*(((6.63732196325388e+76)+(((-2.346772173234e+77)*(new_r02*new_r02))))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((x2024.value)*(((5.22905040876042e+76)+(((1.173386086617e+77)*new_r02*new_r12))))))+IKsqr(((x2025.value)*(((6.63732196325388e+76)+(((-2.346772173234e+77)*(new_r02*new_r02)))))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j5array[0]=IKatan2(((x2024.value)*(((5.22905040876042e+76)+(((1.173386086617e+77)*new_r02*new_r12))))), ((x2025.value)*(((6.63732196325388e+76)+(((-2.346772173234e+77)*(new_r02*new_r02)))))));
sj5array[0]=IKsin(j5array[0]);
cj5array[0]=IKcos(j5array[0]);
if( j5array[0] > IKPI )
{
    j5array[0]-=IK2PI;
}
else if( j5array[0] < -IKPI )
{    j5array[0]+=IK2PI;
}
j5valid[0] = true;
for(int ij5 = 0; ij5 < 1; ++ij5)
{
if( !j5valid[ij5] )
{
    continue;
}
_ij5[0] = ij5; _ij5[1] = -1;
for(int iij5 = ij5+1; iij5 < 1; ++iij5)
{
if( j5valid[iij5] && IKabs(cj5array[ij5]-cj5array[iij5]) < IKFAST_SOLUTION_THRESH && IKabs(sj5array[ij5]-sj5array[iij5]) < IKFAST_SOLUTION_THRESH )
{
    j5valid[iij5]=false; _ij5[1] = iij5; break; 
}
}
j5 = j5array[ij5]; cj5 = cj5array[ij5]; sj5 = sj5array[ij5];
{
IkReal evalcond[21];
IkReal x2026=IKcos(j5);
IkReal x2027=IKsin(j5);
IkReal x2028=((0.276027873078388)*sj3);
IkReal x2029=((0.961149631058464)*cj3);
IkReal x2030=((0.961149631058464)*sj3);
IkReal x2031=((0.276027873078388)*cj3);
IkReal x2032=((0.793395730122254)*sj3);
IkReal x2033=((0.543578643327382)*cj3);
IkReal x2034=((0.0485073701835875)*cj3);
IkReal x2035=((0.793395730122254)*cj3);
IkReal x2036=((0.296134271639373)*cj3);
IkReal x2037=((0.543578643327382)*sj3);
IkReal x2038=((0.0485073701835875)*sj3);
IkReal x2039=((0.296134271639373)*sj3);
IkReal x2040=((0.0656300100348293)*x2026);
IkReal x2041=((0.103420015812922)*x2026);
IkReal x2042=((1.0)*x2027);
IkReal x2043=(new_r01*x2026);
IkReal x2044=(new_r12*x2026);
IkReal x2045=(new_r02*x2027);
IkReal x2046=((0.837955424564001)*x2027);
IkReal x2047=((0.844313326436599)*x2026);
IkReal x2048=(new_r00*x2027);
IkReal x2049=(new_r00*x2026);
IkReal x2050=((0.103420015812922)*x2027);
IkReal x2051=((0.531815483588428)*x2027);
IkReal x2052=(new_r01*x2027);
IkReal x2053=(new_r02*x2026);
IkReal x2054=(new_r10*x2026);
IkReal x2055=(new_r11*x2026);
IkReal x2056=((0.535849798705775)*x2027);
IkReal x2057=(x2031+x2030);
evalcond[0]=((-0.531815483588428)+x2044+x2045);
evalcond[1]=((0.837955424564001)+x2053+(((-1.0)*new_r12*x2042)));
evalcond[2]=((((0.837955424564001)*x2026))+new_r02+(((-1.0)*x2051)));
evalcond[3]=((((-0.837955424564001)*x2027))+(((-0.531815483588428)*x2026))+new_r12);
evalcond[4]=(x2048+x2054+(((-1.0)*x2036))+(((-1.0)*x2032)));
evalcond[5]=(x2052+x2055+x2035+(((-1.0)*x2039)));
evalcond[6]=(x2049+(((-1.0)*new_r10*x2042))+(((-1.0)*x2034))+(((-1.0)*x2037)));
evalcond[7]=(x2043+x2033+(((-1.0)*new_r11*x2042))+(((-1.0)*x2038)));
evalcond[8]=((0.984997002140629)+(((-1.0)*new_r12*x2046))+(((-0.531815483588428)*x2045))+(((-0.531815483588428)*x2044))+(((0.837955424564001)*x2053)));
evalcond[9]=((6.54422001705664e-7)+(((-0.535849798705775)*x2053))+(((-0.844313326436599)*x2044))+(((-0.844313326436599)*x2045))+((new_r12*x2056)));
evalcond[10]=((-0.121564418783519)+(((-1.0)*new_r02*x2041))+((new_r12*x2050))+(((0.0656300100348293)*x2045))+((new_r12*x2040)));
evalcond[11]=((((0.837955424564001)*x2049))+(((-0.531815483588428)*x2048))+(((-0.531815483588428)*x2054))+(((-1.0)*new_r10*x2046))+(((-0.122486725237355)*new_r20)));
evalcond[12]=((((0.837955424564001)*x2043))+(((-1.0)*new_r01*x2051))+(((-0.531815483588428)*x2055))+(((-1.0)*new_r11*x2046))+(((-0.122486725237355)*new_r21)));
evalcond[13]=(x2057+((new_r10*x2056))+(((-0.535849798705775)*x2049))+(((5.34279939673075e-6)*new_r20))+(((-0.844313326436599)*x2048))+(((-1.0)*new_r10*x2047)));
evalcond[14]=(x2028+((new_r11*x2056))+(((-0.535849798705775)*x2043))+(((5.34279939673075e-6)*new_r21))+(((-1.0)*new_r11*x2047))+(((-0.844313326436599)*x2052))+(((-1.0)*x2029)));
evalcond[15]=((((-0.992470151748698)*new_r20))+x2028+((new_r10*x2050))+(((-1.0)*new_r00*x2041))+(((0.0656300100348293)*x2048))+(((-1.0)*x2029))+((new_r10*x2040)));
evalcond[16]=((((-0.992470151748698)*new_r21))+((new_r11*x2050))+(((0.0656300100348293)*x2052))+(((-1.0)*new_r01*x2041))+((new_r11*x2040))+(((-1.0)*x2057)));
evalcond[17]=((((-1.0)*x2026*x2034))+(((-1.0)*x2026*x2037))+new_r00+(((-1.0)*x2027*x2032))+(((-1.0)*x2027*x2036)));
evalcond[18]=(((x2027*x2035))+((x2026*x2033))+(((-1.0)*x2026*x2038))+new_r01+(((-1.0)*x2027*x2039)));
evalcond[19]=(((x2027*x2037))+((x2027*x2034))+(((-1.0)*x2026*x2036))+(((-1.0)*x2026*x2032))+new_r10);
evalcond[20]=(((x2027*x2038))+((x2026*x2035))+(((-1.0)*x2026*x2039))+new_r11+(((-1.0)*x2027*x2033)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[9]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[10]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[11]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[12]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[13]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[14]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[15]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[16]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[17]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[18]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[19]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[20]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j2;
vinfos[0].indices[0] = _ij2[0];
vinfos[0].indices[1] = _ij2[1];
vinfos[0].maxsolutions = _nj2;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j3;
vinfos[1].indices[0] = _ij3[0];
vinfos[1].indices[1] = _ij3[1];
vinfos[1].maxsolutions = _nj3;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j4;
vinfos[2].indices[0] = _ij4[0];
vinfos[2].indices[1] = _ij4[1];
vinfos[2].maxsolutions = _nj4;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j5;
vinfos[3].indices[0] = _ij5[0];
vinfos[3].indices[1] = _ij5[1];
vinfos[3].maxsolutions = _nj5;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j6;
vinfos[4].indices[0] = _ij6[0];
vinfos[4].indices[1] = _ij6[1];
vinfos[4].maxsolutions = _nj6;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j7;
vinfos[5].indices[0] = _ij7[0];
vinfos[5].indices[1] = _ij7[1];
vinfos[5].maxsolutions = _nj7;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j8;
vinfos[6].indices[0] = _ij8[0];
vinfos[6].indices[1] = _ij8[1];
vinfos[6].maxsolutions = _nj8;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j5array[1], cj5array[1], sj5array[1];
bool j5valid[1]={false};
_nj5 = 1;
CheckValue<IkReal> x2058 = IKatan2WithCheck(IkReal(((((1.36249153167196e+56)*new_r02))+(((2.14681069867194e+56)*new_r12)))),IkReal(((((-2.14681069867194e+56)*new_r02))+(((1.36249153167196e+56)*new_r12)))),IKFAST_ATAN2_MAGTHRESH);
if(!x2058.valid){
continue;
}
CheckValue<IkReal> x2059=IKPowWithIntegerCheck(IKsign(((((2.56196288697451e+56)*(new_r12*new_r12)))+(((2.56196288697451e+56)*(new_r02*new_r02))))),-1);
if(!x2059.valid){
continue;
}
j5array[0]=((-1.5707963267949)+(x2058.value)+(((1.5707963267949)*(x2059.value))));
sj5array[0]=IKsin(j5array[0]);
cj5array[0]=IKcos(j5array[0]);
if( j5array[0] > IKPI )
{
    j5array[0]-=IK2PI;
}
else if( j5array[0] < -IKPI )
{    j5array[0]+=IK2PI;
}
j5valid[0] = true;
for(int ij5 = 0; ij5 < 1; ++ij5)
{
if( !j5valid[ij5] )
{
    continue;
}
_ij5[0] = ij5; _ij5[1] = -1;
for(int iij5 = ij5+1; iij5 < 1; ++iij5)
{
if( j5valid[iij5] && IKabs(cj5array[ij5]-cj5array[iij5]) < IKFAST_SOLUTION_THRESH && IKabs(sj5array[ij5]-sj5array[iij5]) < IKFAST_SOLUTION_THRESH )
{
    j5valid[iij5]=false; _ij5[1] = iij5; break; 
}
}
j5 = j5array[ij5]; cj5 = cj5array[ij5]; sj5 = sj5array[ij5];
{
IkReal evalcond[21];
IkReal x2060=IKcos(j5);
IkReal x2061=IKsin(j5);
IkReal x2062=((0.276027873078388)*sj3);
IkReal x2063=((0.961149631058464)*cj3);
IkReal x2064=((0.961149631058464)*sj3);
IkReal x2065=((0.276027873078388)*cj3);
IkReal x2066=((0.793395730122254)*sj3);
IkReal x2067=((0.543578643327382)*cj3);
IkReal x2068=((0.0485073701835875)*cj3);
IkReal x2069=((0.793395730122254)*cj3);
IkReal x2070=((0.296134271639373)*cj3);
IkReal x2071=((0.543578643327382)*sj3);
IkReal x2072=((0.0485073701835875)*sj3);
IkReal x2073=((0.296134271639373)*sj3);
IkReal x2074=((0.0656300100348293)*x2060);
IkReal x2075=((0.103420015812922)*x2060);
IkReal x2076=((1.0)*x2061);
IkReal x2077=(new_r01*x2060);
IkReal x2078=(new_r12*x2060);
IkReal x2079=(new_r02*x2061);
IkReal x2080=((0.837955424564001)*x2061);
IkReal x2081=((0.844313326436599)*x2060);
IkReal x2082=(new_r00*x2061);
IkReal x2083=(new_r00*x2060);
IkReal x2084=((0.103420015812922)*x2061);
IkReal x2085=((0.531815483588428)*x2061);
IkReal x2086=(new_r01*x2061);
IkReal x2087=(new_r02*x2060);
IkReal x2088=(new_r10*x2060);
IkReal x2089=(new_r11*x2060);
IkReal x2090=((0.535849798705775)*x2061);
IkReal x2091=(x2064+x2065);
evalcond[0]=((-0.531815483588428)+x2079+x2078);
evalcond[1]=((0.837955424564001)+(((-1.0)*new_r12*x2076))+x2087);
evalcond[2]=((((-1.0)*x2085))+(((0.837955424564001)*x2060))+new_r02);
evalcond[3]=((((-0.531815483588428)*x2060))+new_r12+(((-0.837955424564001)*x2061)));
evalcond[4]=(x2088+x2082+(((-1.0)*x2070))+(((-1.0)*x2066)));
evalcond[5]=(x2069+x2089+x2086+(((-1.0)*x2073)));
evalcond[6]=(x2083+(((-1.0)*x2071))+(((-1.0)*x2068))+(((-1.0)*new_r10*x2076)));
evalcond[7]=(x2067+x2077+(((-1.0)*new_r11*x2076))+(((-1.0)*x2072)));
evalcond[8]=((0.984997002140629)+(((0.837955424564001)*x2087))+(((-0.531815483588428)*x2079))+(((-0.531815483588428)*x2078))+(((-1.0)*new_r12*x2080)));
evalcond[9]=((6.54422001705664e-7)+((new_r12*x2090))+(((-0.844313326436599)*x2079))+(((-0.844313326436599)*x2078))+(((-0.535849798705775)*x2087)));
evalcond[10]=((-0.121564418783519)+(((-1.0)*new_r02*x2075))+(((0.0656300100348293)*x2079))+((new_r12*x2084))+((new_r12*x2074)));
evalcond[11]=((((0.837955424564001)*x2083))+(((-0.531815483588428)*x2082))+(((-0.531815483588428)*x2088))+(((-1.0)*new_r10*x2080))+(((-0.122486725237355)*new_r20)));
evalcond[12]=((((-1.0)*new_r01*x2085))+(((0.837955424564001)*x2077))+(((-0.531815483588428)*x2089))+(((-1.0)*new_r11*x2080))+(((-0.122486725237355)*new_r21)));
evalcond[13]=(((new_r10*x2090))+x2091+(((-0.844313326436599)*x2082))+(((5.34279939673075e-6)*new_r20))+(((-1.0)*new_r10*x2081))+(((-0.535849798705775)*x2083)));
evalcond[14]=(x2062+(((-0.535849798705775)*x2077))+(((-1.0)*new_r11*x2081))+(((-0.844313326436599)*x2086))+(((5.34279939673075e-6)*new_r21))+(((-1.0)*x2063))+((new_r11*x2090)));
evalcond[15]=((((0.0656300100348293)*x2082))+(((-0.992470151748698)*new_r20))+x2062+(((-1.0)*x2063))+(((-1.0)*new_r00*x2075))+((new_r10*x2074))+((new_r10*x2084)));
evalcond[16]=((((-1.0)*x2091))+(((0.0656300100348293)*x2086))+(((-0.992470151748698)*new_r21))+(((-1.0)*new_r01*x2075))+((new_r11*x2074))+((new_r11*x2084)));
evalcond[17]=((((-1.0)*x2060*x2071))+(((-1.0)*x2061*x2070))+(((-1.0)*x2061*x2066))+new_r00+(((-1.0)*x2060*x2068)));
evalcond[18]=((((-1.0)*x2060*x2072))+(((-1.0)*x2061*x2073))+((x2060*x2067))+new_r01+((x2061*x2069)));
evalcond[19]=((((-1.0)*x2060*x2070))+new_r10+((x2061*x2071))+((x2061*x2068))+(((-1.0)*x2060*x2066)));
evalcond[20]=((((-1.0)*x2060*x2073))+(((-1.0)*x2061*x2067))+((x2060*x2069))+new_r11+((x2061*x2072)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[9]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[10]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[11]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[12]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[13]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[14]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[15]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[16]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[17]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[18]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[19]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[20]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j2;
vinfos[0].indices[0] = _ij2[0];
vinfos[0].indices[1] = _ij2[1];
vinfos[0].maxsolutions = _nj2;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j3;
vinfos[1].indices[0] = _ij3[0];
vinfos[1].indices[1] = _ij3[1];
vinfos[1].maxsolutions = _nj3;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j4;
vinfos[2].indices[0] = _ij4[0];
vinfos[2].indices[1] = _ij4[1];
vinfos[2].maxsolutions = _nj4;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j5;
vinfos[3].indices[0] = _ij5[0];
vinfos[3].indices[1] = _ij5[1];
vinfos[3].maxsolutions = _nj5;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j6;
vinfos[4].indices[0] = _ij6[0];
vinfos[4].indices[1] = _ij6[1];
vinfos[4].maxsolutions = _nj6;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j7;
vinfos[5].indices[0] = _ij7[0];
vinfos[5].indices[1] = _ij7[1];
vinfos[5].maxsolutions = _nj7;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j8;
vinfos[6].indices[0] = _ij8[0];
vinfos[6].indices[1] = _ij8[1];
vinfos[6].maxsolutions = _nj8;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j5array[1], cj5array[1], sj5array[1];
bool j5valid[1]={false};
_nj5 = 1;
CheckValue<IkReal> x2092=IKPowWithIntegerCheck(IKsign(((((6.24024889090152e+76)*new_r02))+(((-9.83245236388639e+76)*new_r12)))),-1);
if(!x2092.valid){
continue;
}
CheckValue<IkReal> x2093 = IKatan2WithCheck(IkReal(((-8.23915679508573e+76)+(((1.173386086617e+77)*(new_r02*new_r02))))),IkReal(((-5.22905040876042e+76)+(((1.173386086617e+77)*new_r02*new_r12)))),IKFAST_ATAN2_MAGTHRESH);
if(!x2093.valid){
continue;
}
j5array[0]=((-1.5707963267949)+(((1.5707963267949)*(x2092.value)))+(x2093.value));
sj5array[0]=IKsin(j5array[0]);
cj5array[0]=IKcos(j5array[0]);
if( j5array[0] > IKPI )
{
    j5array[0]-=IK2PI;
}
else if( j5array[0] < -IKPI )
{    j5array[0]+=IK2PI;
}
j5valid[0] = true;
for(int ij5 = 0; ij5 < 1; ++ij5)
{
if( !j5valid[ij5] )
{
    continue;
}
_ij5[0] = ij5; _ij5[1] = -1;
for(int iij5 = ij5+1; iij5 < 1; ++iij5)
{
if( j5valid[iij5] && IKabs(cj5array[ij5]-cj5array[iij5]) < IKFAST_SOLUTION_THRESH && IKabs(sj5array[ij5]-sj5array[iij5]) < IKFAST_SOLUTION_THRESH )
{
    j5valid[iij5]=false; _ij5[1] = iij5; break; 
}
}
j5 = j5array[ij5]; cj5 = cj5array[ij5]; sj5 = sj5array[ij5];
{
IkReal evalcond[21];
IkReal x2094=IKcos(j5);
IkReal x2095=IKsin(j5);
IkReal x2096=((0.276027873078388)*sj3);
IkReal x2097=((0.961149631058464)*cj3);
IkReal x2098=((0.961149631058464)*sj3);
IkReal x2099=((0.276027873078388)*cj3);
IkReal x2100=((0.793395730122254)*sj3);
IkReal x2101=((0.543578643327382)*cj3);
IkReal x2102=((0.0485073701835875)*cj3);
IkReal x2103=((0.793395730122254)*cj3);
IkReal x2104=((0.296134271639373)*cj3);
IkReal x2105=((0.543578643327382)*sj3);
IkReal x2106=((0.0485073701835875)*sj3);
IkReal x2107=((0.296134271639373)*sj3);
IkReal x2108=((0.0656300100348293)*x2094);
IkReal x2109=((0.103420015812922)*x2094);
IkReal x2110=((1.0)*x2095);
IkReal x2111=(new_r01*x2094);
IkReal x2112=(new_r12*x2094);
IkReal x2113=(new_r02*x2095);
IkReal x2114=((0.837955424564001)*x2095);
IkReal x2115=((0.844313326436599)*x2094);
IkReal x2116=(new_r00*x2095);
IkReal x2117=(new_r00*x2094);
IkReal x2118=((0.103420015812922)*x2095);
IkReal x2119=((0.531815483588428)*x2095);
IkReal x2120=(new_r01*x2095);
IkReal x2121=(new_r02*x2094);
IkReal x2122=(new_r10*x2094);
IkReal x2123=(new_r11*x2094);
IkReal x2124=((0.535849798705775)*x2095);
IkReal x2125=(x2099+x2098);
evalcond[0]=((-0.531815483588428)+x2112+x2113);
evalcond[1]=((0.837955424564001)+x2121+(((-1.0)*new_r12*x2110)));
evalcond[2]=((((0.837955424564001)*x2094))+(((-1.0)*x2119))+new_r02);
evalcond[3]=((((-0.837955424564001)*x2095))+new_r12+(((-0.531815483588428)*x2094)));
evalcond[4]=((((-1.0)*x2104))+(((-1.0)*x2100))+x2122+x2116);
evalcond[5]=((((-1.0)*x2107))+x2120+x2123+x2103);
evalcond[6]=((((-1.0)*new_r10*x2110))+(((-1.0)*x2102))+(((-1.0)*x2105))+x2117);
evalcond[7]=((((-1.0)*new_r11*x2110))+(((-1.0)*x2106))+x2111+x2101);
evalcond[8]=((0.984997002140629)+(((-1.0)*new_r12*x2114))+(((0.837955424564001)*x2121))+(((-0.531815483588428)*x2113))+(((-0.531815483588428)*x2112)));
evalcond[9]=((6.54422001705664e-7)+(((-0.535849798705775)*x2121))+(((-0.844313326436599)*x2112))+(((-0.844313326436599)*x2113))+((new_r12*x2124)));
evalcond[10]=((-0.121564418783519)+((new_r12*x2108))+(((0.0656300100348293)*x2113))+((new_r12*x2118))+(((-1.0)*new_r02*x2109)));
evalcond[11]=((((-1.0)*new_r10*x2114))+(((-0.122486725237355)*new_r20))+(((0.837955424564001)*x2117))+(((-0.531815483588428)*x2122))+(((-0.531815483588428)*x2116)));
evalcond[12]=((((-1.0)*new_r11*x2114))+(((-1.0)*new_r01*x2119))+(((-0.122486725237355)*new_r21))+(((0.837955424564001)*x2111))+(((-0.531815483588428)*x2123)));
evalcond[13]=((((-1.0)*new_r10*x2115))+x2125+(((5.34279939673075e-6)*new_r20))+(((-0.844313326436599)*x2116))+((new_r10*x2124))+(((-0.535849798705775)*x2117)));
evalcond[14]=((((-1.0)*x2097))+(((-0.844313326436599)*x2120))+(((-1.0)*new_r11*x2115))+x2096+(((5.34279939673075e-6)*new_r21))+((new_r11*x2124))+(((-0.535849798705775)*x2111)));
evalcond[15]=((((-1.0)*x2097))+((new_r10*x2108))+(((-1.0)*new_r00*x2109))+(((-0.992470151748698)*new_r20))+x2096+(((0.0656300100348293)*x2116))+((new_r10*x2118)));
evalcond[16]=((((-1.0)*new_r01*x2109))+((new_r11*x2108))+(((-0.992470151748698)*new_r21))+(((0.0656300100348293)*x2120))+(((-1.0)*x2125))+((new_r11*x2118)));
evalcond[17]=((((-1.0)*x2095*x2104))+(((-1.0)*x2095*x2100))+(((-1.0)*x2094*x2102))+(((-1.0)*x2094*x2105))+new_r00);
evalcond[18]=((((-1.0)*x2095*x2107))+(((-1.0)*x2094*x2106))+new_r01+((x2095*x2103))+((x2094*x2101)));
evalcond[19]=((((-1.0)*x2094*x2100))+(((-1.0)*x2094*x2104))+new_r10+((x2095*x2102))+((x2095*x2105)));
evalcond[20]=((((-1.0)*x2095*x2101))+(((-1.0)*x2094*x2107))+new_r11+((x2095*x2106))+((x2094*x2103)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[9]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[10]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[11]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[12]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[13]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[14]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[15]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[16]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[17]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[18]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[19]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[20]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j2;
vinfos[0].indices[0] = _ij2[0];
vinfos[0].indices[1] = _ij2[1];
vinfos[0].maxsolutions = _nj2;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j3;
vinfos[1].indices[0] = _ij3[0];
vinfos[1].indices[1] = _ij3[1];
vinfos[1].maxsolutions = _nj3;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j4;
vinfos[2].indices[0] = _ij4[0];
vinfos[2].indices[1] = _ij4[1];
vinfos[2].maxsolutions = _nj4;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j5;
vinfos[3].indices[0] = _ij5[0];
vinfos[3].indices[1] = _ij5[1];
vinfos[3].maxsolutions = _nj5;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j6;
vinfos[4].indices[0] = _ij6[0];
vinfos[4].indices[1] = _ij6[1];
vinfos[4].maxsolutions = _nj6;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j7;
vinfos[5].indices[0] = _ij7[0];
vinfos[5].indices[1] = _ij7[1];
vinfos[5].maxsolutions = _nj7;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j8;
vinfos[6].indices[0] = _ij8[0];
vinfos[6].indices[1] = _ij8[1];
vinfos[6].maxsolutions = _nj8;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
IkReal x2126=((((1.57580374828584)*new_r12))+(((-1.0)*new_r02)));
CheckValue<IkReal> x2127 = IKatan2WithCheck(IkReal(((((-12.7678698223466)*new_r12))+(((8.1032363594977)*new_r02)))),IkReal(x2126),IKFAST_ATAN2_MAGTHRESH);
if(!x2127.valid){
continue;
}
IkReal gconst6=((-1.0)*(x2127.value));
IkReal gconst7=0;
IkReal x2128 = x2126*x2126;
if(IKabs(x2128)==0){
continue;
}
IkReal gconst8=(x2126*(pow(x2128,-0.5)));
IkReal x2129=j4;
CheckValue<IkReal> x2132 = IKatan2WithCheck(IkReal(((((-12.7678698223466)*new_r12))+(((8.1032363594977)*new_r02)))),IkReal(((((1.57580374828584)*new_r12))+(((-1.0)*new_r02)))),IKFAST_ATAN2_MAGTHRESH);
if(!x2132.valid){
continue;
}
IkReal x2130=x2132.value;
IkReal x2131=x2130;
if(((((j4*x2131))+((j4*x2129))+((x2129*x2130))+((x2130*x2131)))) < -0.00001)
continue;
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKsqrt((((j4*x2131))+((j4*x2129))+((x2129*x2130))+((x2130*x2131)))))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j5eval[2];
IkReal x2133=x2126;
sj4=gconst7;
cj4=gconst8;
j4=nan;
CheckValue<IkReal> x2134 = IKatan2WithCheck(IkReal(((((-12.7678698223466)*new_r12))+(((8.1032363594977)*new_r02)))),IkReal(x2133),IKFAST_ATAN2_MAGTHRESH);
if(!x2134.valid){
continue;
}
IkReal gconst6=((-1.0)*(x2134.value));
IkReal gconst7=0;
IkReal x2135 = x2133*x2133;
if(IKabs(x2135)==0){
continue;
}
IkReal gconst8=(x2133*(pow(x2135,-0.5)));
IkReal x2136=new_r12*new_r12;
IkReal x2137=new_r02*new_r02;
j5eval[0]=((((-1.0)*x2136))+(((-1.0)*x2137)));
j5eval[1]=IKsign(((((-2.56196288697451e+56)*x2137))+(((-2.56196288697451e+56)*x2136))));
if( IKabs(j5eval[0]) < 0.0000010000000000  || IKabs(j5eval[1]) < 0.0000010000000000  )
{
{
IkReal j5eval[1];
IkReal x2138=x2126;
sj4=gconst7;
cj4=gconst8;
j4=nan;
CheckValue<IkReal> x2139 = IKatan2WithCheck(IkReal(((((-12.7678698223466)*new_r12))+(((8.1032363594977)*new_r02)))),IkReal(x2138),IKFAST_ATAN2_MAGTHRESH);
if(!x2139.valid){
continue;
}
IkReal gconst6=((-1.0)*(x2139.value));
IkReal gconst7=0;
IkReal x2140 = x2138*x2138;
if(IKabs(x2140)==0){
continue;
}
IkReal gconst8=(x2138*(pow(x2140,-0.5)));
IkReal x2141=new_r02*new_r02;
j5eval[0]=((1.0)+(((1.44585006149089)*x2141*(new_r12*new_r12)))+(((-1.28865050323593)*new_r02*new_r12))+(((-2.03046303253059)*x2141))+(((1.44585006149089)*(x2141*x2141))));
if( IKabs(j5eval[0]) < 0.0000010000000000  )
{
{
IkReal j3eval[2];
IkReal x2142=x2126;
sj4=gconst7;
cj4=gconst8;
j4=nan;
CheckValue<IkReal> x2143 = IKatan2WithCheck(IkReal(((((-12.7678698223466)*new_r12))+(((8.1032363594977)*new_r02)))),IkReal(x2142),IKFAST_ATAN2_MAGTHRESH);
if(!x2143.valid){
continue;
}
IkReal gconst6=((-1.0)*(x2143.value));
IkReal gconst7=0;
IkReal x2144 = x2142*x2142;
if(IKabs(x2144)==0){
continue;
}
IkReal gconst8=(x2142*(pow(x2144,-0.5)));
j3eval[0]=34506202940.0186;
j3eval[1]=1.0;
if( IKabs(j3eval[0]) < 0.0000010000000000  || IKabs(j3eval[1]) < 0.0000010000000000  )
{
continue; // no branches [j3, j5]

} else
{
{
IkReal j3array[1], cj3array[1], sj3array[1];
bool j3valid[1]={false};
_nj3 = 1;
IkReal x2145=(gconst8*new_r21);
IkReal x2146=(gconst8*new_r20);
CheckValue<IkReal> x2147=IKPowWithIntegerCheck(IKsign(((2.85455053937064e-11)+(((0.984997002112083)*(gconst8*gconst8))))),-1);
if(!x2147.valid){
continue;
}
CheckValue<IkReal> x2148 = IKatan2WithCheck(IkReal(((((-5.13522966898714e-6)*new_r20))+(((0.953912320189798)*x2145))+(((-1.47476155376408e-6)*new_r21))+(((-0.273949425080978)*x2146)))),IkReal(((((5.13522966898714e-6)*new_r21))+(((0.953912320189798)*x2146))+(((-1.47476155376408e-6)*new_r20))+(((0.273949425080978)*x2145)))),IKFAST_ATAN2_MAGTHRESH);
if(!x2148.valid){
continue;
}
j3array[0]=((-1.5707963267949)+(((1.5707963267949)*(x2147.value)))+(x2148.value));
sj3array[0]=IKsin(j3array[0]);
cj3array[0]=IKcos(j3array[0]);
if( j3array[0] > IKPI )
{
    j3array[0]-=IK2PI;
}
else if( j3array[0] < -IKPI )
{    j3array[0]+=IK2PI;
}
j3valid[0] = true;
for(int ij3 = 0; ij3 < 1; ++ij3)
{
if( !j3valid[ij3] )
{
    continue;
}
_ij3[0] = ij3; _ij3[1] = -1;
for(int iij3 = ij3+1; iij3 < 1; ++iij3)
{
if( j3valid[iij3] && IKabs(cj3array[ij3]-cj3array[iij3]) < IKFAST_SOLUTION_THRESH && IKabs(sj3array[ij3]-sj3array[iij3]) < IKFAST_SOLUTION_THRESH )
{
    j3valid[iij3]=false; _ij3[1] = iij3; break; 
}
}
j3 = j3array[ij3]; cj3 = cj3array[ij3]; sj3 = sj3array[ij3];
{
IkReal evalcond[2];
IkReal x2149=IKsin(j3);
IkReal x2150=IKcos(j3);
IkReal x2151=(gconst8*x2150);
IkReal x2152=(gconst8*x2149);
evalcond[0]=((((-0.953912320189798)*x2151))+(((5.13522966898714e-6)*x2149))+(((1.47476155376408e-6)*x2150))+new_r20+(((0.273949425080978)*x2152)));
evalcond[1]=((((-0.953912320189798)*x2152))+(((-5.13522966898714e-6)*x2150))+(((1.47476155376408e-6)*x2149))+(((-0.273949425080978)*x2151))+new_r21);
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j5eval[2];
IkReal x2153=x2126;
sj4=gconst7;
cj4=gconst8;
j4=nan;
CheckValue<IkReal> x2154 = IKatan2WithCheck(IkReal(((((-12.7678698223466)*new_r12))+(((8.1032363594977)*new_r02)))),IkReal(x2153),IKFAST_ATAN2_MAGTHRESH);
if(!x2154.valid){
continue;
}
IkReal gconst6=((-1.0)*(x2154.value));
IkReal gconst7=0;
IkReal x2155 = x2153*x2153;
if(IKabs(x2155)==0){
continue;
}
IkReal gconst8=(x2153*(pow(x2155,-0.5)));
IkReal x2156=new_r12*new_r12;
IkReal x2157=new_r02*new_r02;
j5eval[0]=((((-1.0)*x2157))+(((-1.0)*x2156)));
j5eval[1]=IKsign(((((-2.56196288697451e+56)*x2156))+(((-2.56196288697451e+56)*x2157))));
if( IKabs(j5eval[0]) < 0.0000010000000000  || IKabs(j5eval[1]) < 0.0000010000000000  )
{
{
IkReal j5eval[1];
IkReal x2158=x2126;
sj4=gconst7;
cj4=gconst8;
j4=nan;
CheckValue<IkReal> x2159 = IKatan2WithCheck(IkReal(((((-12.7678698223466)*new_r12))+(((8.1032363594977)*new_r02)))),IkReal(x2158),IKFAST_ATAN2_MAGTHRESH);
if(!x2159.valid){
continue;
}
IkReal gconst6=((-1.0)*(x2159.value));
IkReal gconst7=0;
IkReal x2160 = x2158*x2158;
if(IKabs(x2160)==0){
continue;
}
IkReal gconst8=(x2158*(pow(x2160,-0.5)));
IkReal x2161=new_r02*new_r02;
j5eval[0]=((1.0)+(((-1.28865050323593)*new_r02*new_r12))+(((-2.03046303253059)*x2161))+(((1.44585006149089)*x2161*(new_r12*new_r12)))+(((1.44585006149089)*(x2161*x2161))));
if( IKabs(j5eval[0]) < 0.0000010000000000  )
{
{
IkReal j5array[1], cj5array[1], sj5array[1];
bool j5valid[1]={false};
_nj5 = 1;
IkReal x2162=gconst8*gconst8;
IkReal x2163=(gconst8*new_r12);
IkReal x2164=(gconst8*new_r02);
CheckValue<IkReal> x2165=IKPowWithIntegerCheck(((((6.24024889090152e+76)*x2163))+(((9.83245236388639e+76)*x2164))),-1);
if(!x2165.valid){
continue;
}
CheckValue<IkReal> x2166=IKPowWithIntegerCheck(((((1.2480497781803e+77)*x2163))+(((1.96649047277728e+77)*x2164))),-1);
if(!x2166.valid){
continue;
}
if( IKabs(((x2165.value)*(((((-5.22905040876042e+76)*x2162))+(((-1.173386086617e+77)*new_r02*new_r12)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((x2166.value)*(((((2.346772173234e+77)*(new_r02*new_r02)))+(((-6.63732196325388e+76)*x2162)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((x2165.value)*(((((-5.22905040876042e+76)*x2162))+(((-1.173386086617e+77)*new_r02*new_r12))))))+IKsqr(((x2166.value)*(((((2.346772173234e+77)*(new_r02*new_r02)))+(((-6.63732196325388e+76)*x2162))))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j5array[0]=IKatan2(((x2165.value)*(((((-5.22905040876042e+76)*x2162))+(((-1.173386086617e+77)*new_r02*new_r12))))), ((x2166.value)*(((((2.346772173234e+77)*(new_r02*new_r02)))+(((-6.63732196325388e+76)*x2162))))));
sj5array[0]=IKsin(j5array[0]);
cj5array[0]=IKcos(j5array[0]);
if( j5array[0] > IKPI )
{
    j5array[0]-=IK2PI;
}
else if( j5array[0] < -IKPI )
{    j5array[0]+=IK2PI;
}
j5valid[0] = true;
for(int ij5 = 0; ij5 < 1; ++ij5)
{
if( !j5valid[ij5] )
{
    continue;
}
_ij5[0] = ij5; _ij5[1] = -1;
for(int iij5 = ij5+1; iij5 < 1; ++iij5)
{
if( j5valid[iij5] && IKabs(cj5array[ij5]-cj5array[iij5]) < IKFAST_SOLUTION_THRESH && IKabs(sj5array[ij5]-sj5array[iij5]) < IKFAST_SOLUTION_THRESH )
{
    j5valid[iij5]=false; _ij5[1] = iij5; break; 
}
}
j5 = j5array[ij5]; cj5 = cj5array[ij5]; sj5 = sj5array[ij5];
{
IkReal evalcond[21];
IkReal x2167=IKcos(j5);
IkReal x2168=IKsin(j5);
IkReal x2169=gconst8*gconst8;
IkReal x2170=((0.276027873078388)*sj3);
IkReal x2171=((0.961149631058464)*cj3);
IkReal x2172=((0.961149631058464)*sj3);
IkReal x2173=((0.276027873078388)*cj3);
IkReal x2174=((0.0994021100426501)*cj3);
IkReal x2175=((0.028546806998574)*sj3);
IkReal x2176=(gconst8*new_r20);
IkReal x2177=((0.837955424564001)*gconst8);
IkReal x2178=(gconst8*new_r21);
IkReal x2179=((0.147909480226238)*sj3);
IkReal x2180=((0.147909480226238)*cj3);
IkReal x2181=((0.028546806998574)*gconst8);
IkReal x2182=((0.811511442202281)*sj3);
IkReal x2183=((0.0181157120800272)*sj3);
IkReal x2184=((0.233054011708033)*sj3);
IkReal x2185=(gconst8*sj3);
IkReal x2186=((0.0181157120800272)*gconst8);
IkReal x2187=((0.0630802599313394)*gconst8);
IkReal x2188=((0.0630802599313394)*sj3);
IkReal x2189=((0.515031836328808)*sj3);
IkReal x2190=((0.0994021100426501)*sj3);
IkReal x2191=(gconst8*x2168);
IkReal x2192=((1.0)*x2168);
IkReal x2193=(cj3*x2167);
IkReal x2194=(new_r01*x2167);
IkReal x2195=(new_r12*x2167);
IkReal x2196=(new_r02*x2168);
IkReal x2197=(cj3*x2168);
IkReal x2198=((0.844313326436599)*x2167);
IkReal x2199=(gconst8*x2167);
IkReal x2200=(new_r00*x2167);
IkReal x2201=((0.844313326436599)*x2168);
IkReal x2202=(new_r02*x2167);
IkReal x2203=((0.535849798705775)*x2168);
IkReal x2204=(x2172+x2173);
IkReal x2205=((0.531815483588428)*x2199);
evalcond[0]=(x2195+x2196+(((0.531815483588428)*gconst8)));
evalcond[1]=(x2202+(((-1.0)*new_r12*x2192))+(((-1.0)*x2177)));
evalcond[2]=((((0.531815483588428)*x2191))+new_r02+(((-1.0)*x2167*x2177)));
evalcond[3]=(x2205+new_r12+((x2168*x2177)));
evalcond[4]=(((new_r00*x2168))+((cj3*x2187))+(((-0.233054011708033)*cj3))+((new_r10*x2167))+(((-1.0)*x2182))+(((-1.0)*gconst8*x2183)));
evalcond[5]=((((0.0630802599313394)*x2185))+((cj3*x2186))+(((0.811511442202281)*cj3))+(((-1.0)*x2184))+((new_r11*x2167))+((new_r01*x2168)));
evalcond[6]=(x2200+((gconst8*x2175))+(((-1.0)*new_r10*x2192))+(((-1.0)*x2180))+(((-1.0)*x2189))+(((-1.0)*gconst8*x2174)));
evalcond[7]=((((0.515031836328808)*cj3))+x2194+(((-0.0994021100426501)*x2185))+(((-1.0)*new_r11*x2192))+(((-1.0)*x2179))+(((-1.0)*cj3*x2181)));
evalcond[8]=((((-0.844313326436599)*x2195))+(((-0.844313326436599)*x2196))+(((-6.54422001705664e-7)*gconst8))+((new_r12*x2203))+(((-0.535849798705775)*x2202)));
evalcond[9]=((1.0)+(((0.531815483588428)*new_r02*x2191))+((new_r12*x2168*x2177))+(((0.531815483588428)*gconst8*x2195))+(((-1.0)*x2177*x2202))+(((-0.0150029978593712)*x2169)));
evalcond[10]=((((0.531815483588428)*new_r00*x2191))+(((0.122486725237355)*x2176))+(((-1.0)*x2177*x2200))+((new_r10*x2205))+((new_r10*x2168*x2177)));
evalcond[11]=((((0.122486725237355)*x2178))+((new_r11*x2205))+(((-1.0)*x2177*x2194))+((new_r11*x2168*x2177))+(((0.531815483588428)*new_r01*x2191)));
evalcond[12]=((((-0.103420015812922)*new_r12*x2191))+(((-0.0656300100348293)*gconst8*x2195))+(((-0.121564418783519)*x2169))+(((-0.0656300100348293)*new_r02*x2191))+(((0.103420015812922)*new_r02*x2199)));
evalcond[13]=(x2204+(((5.34279939673075e-6)*new_r20))+(((-1.0)*new_r10*x2198))+((new_r10*x2203))+(((-1.0)*new_r00*x2201))+(((-0.535849798705775)*x2200)));
evalcond[14]=(x2170+(((5.34279939673075e-6)*new_r21))+(((-1.0)*new_r11*x2198))+(((-1.0)*new_r01*x2201))+((new_r11*x2203))+(((-0.535849798705775)*x2194))+(((-1.0)*x2171)));
evalcond[15]=((((-0.103420015812922)*new_r10*x2191))+x2170+(((-0.0656300100348293)*new_r00*x2191))+(((0.992470151748698)*x2176))+(((-0.0656300100348293)*new_r10*x2199))+(((0.103420015812922)*new_r00*x2199))+(((-1.0)*x2171)));
evalcond[16]=((((-0.103420015812922)*new_r11*x2191))+(((-1.0)*x2204))+(((-0.0656300100348293)*new_r11*x2199))+(((-0.0656300100348293)*new_r01*x2191))+(((0.992470151748698)*x2178))+(((0.103420015812922)*gconst8*x2194)));
evalcond[17]=((((-1.0)*x2168*x2182))+((x2187*x2197))+(((-1.0)*x2183*x2191))+((x2175*x2199))+new_r00+(((-1.0)*x2174*x2199))+(((-1.0)*x2167*x2180))+(((-1.0)*x2167*x2189))+(((-0.233054011708033)*x2197)));
evalcond[18]=((((0.811511442202281)*x2197))+(((0.515031836328808)*x2193))+((x2186*x2197))+(((-1.0)*x2168*x2184))+(((-1.0)*x2181*x2193))+(((-0.0994021100426501)*x2167*x2185))+new_r01+(((0.0630802599313394)*x2168*x2185))+(((-1.0)*x2167*x2179)));
evalcond[19]=((((-1.0)*x2175*x2191))+((x2168*x2180))+((x2168*x2189))+((x2187*x2193))+((x2174*x2191))+(((-1.0)*x2183*x2199))+new_r10+(((-1.0)*x2167*x2182))+(((-0.233054011708033)*x2193)));
evalcond[20]=((((0.811511442202281)*x2193))+(((0.0994021100426501)*x2168*x2185))+((x2186*x2193))+(((0.0630802599313394)*x2167*x2185))+(((-0.515031836328808)*x2197))+((x2181*x2197))+new_r11+((x2168*x2179))+(((-1.0)*x2167*x2184)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[9]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[10]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[11]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[12]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[13]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[14]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[15]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[16]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[17]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[18]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[19]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[20]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j2;
vinfos[0].indices[0] = _ij2[0];
vinfos[0].indices[1] = _ij2[1];
vinfos[0].maxsolutions = _nj2;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j3;
vinfos[1].indices[0] = _ij3[0];
vinfos[1].indices[1] = _ij3[1];
vinfos[1].maxsolutions = _nj3;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j4;
vinfos[2].indices[0] = _ij4[0];
vinfos[2].indices[1] = _ij4[1];
vinfos[2].maxsolutions = _nj4;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j5;
vinfos[3].indices[0] = _ij5[0];
vinfos[3].indices[1] = _ij5[1];
vinfos[3].maxsolutions = _nj5;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j6;
vinfos[4].indices[0] = _ij6[0];
vinfos[4].indices[1] = _ij6[1];
vinfos[4].maxsolutions = _nj6;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j7;
vinfos[5].indices[0] = _ij7[0];
vinfos[5].indices[1] = _ij7[1];
vinfos[5].maxsolutions = _nj7;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j8;
vinfos[6].indices[0] = _ij8[0];
vinfos[6].indices[1] = _ij8[1];
vinfos[6].maxsolutions = _nj8;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

} else
{
{
IkReal j5array[1], cj5array[1], sj5array[1];
bool j5valid[1]={false};
_nj5 = 1;
IkReal x2206=gconst8*gconst8;
CheckValue<IkReal> x2207 = IKatan2WithCheck(IkReal(((((8.23915679508573e+76)*x2206))+(((-1.173386086617e+77)*(new_r02*new_r02))))),IkReal(((((-1.173386086617e+77)*new_r02*new_r12))+(((5.22905040876042e+76)*x2206)))),IKFAST_ATAN2_MAGTHRESH);
if(!x2207.valid){
continue;
}
CheckValue<IkReal> x2208=IKPowWithIntegerCheck(IKsign(((((-9.83245236388639e+76)*gconst8*new_r12))+(((6.24024889090152e+76)*gconst8*new_r02)))),-1);
if(!x2208.valid){
continue;
}
j5array[0]=((-1.5707963267949)+(x2207.value)+(((1.5707963267949)*(x2208.value))));
sj5array[0]=IKsin(j5array[0]);
cj5array[0]=IKcos(j5array[0]);
if( j5array[0] > IKPI )
{
    j5array[0]-=IK2PI;
}
else if( j5array[0] < -IKPI )
{    j5array[0]+=IK2PI;
}
j5valid[0] = true;
for(int ij5 = 0; ij5 < 1; ++ij5)
{
if( !j5valid[ij5] )
{
    continue;
}
_ij5[0] = ij5; _ij5[1] = -1;
for(int iij5 = ij5+1; iij5 < 1; ++iij5)
{
if( j5valid[iij5] && IKabs(cj5array[ij5]-cj5array[iij5]) < IKFAST_SOLUTION_THRESH && IKabs(sj5array[ij5]-sj5array[iij5]) < IKFAST_SOLUTION_THRESH )
{
    j5valid[iij5]=false; _ij5[1] = iij5; break; 
}
}
j5 = j5array[ij5]; cj5 = cj5array[ij5]; sj5 = sj5array[ij5];
{
IkReal evalcond[21];
IkReal x2209=IKcos(j5);
IkReal x2210=IKsin(j5);
IkReal x2211=gconst8*gconst8;
IkReal x2212=((0.276027873078388)*sj3);
IkReal x2213=((0.961149631058464)*cj3);
IkReal x2214=((0.961149631058464)*sj3);
IkReal x2215=((0.276027873078388)*cj3);
IkReal x2216=((0.0994021100426501)*cj3);
IkReal x2217=((0.028546806998574)*sj3);
IkReal x2218=(gconst8*new_r20);
IkReal x2219=((0.837955424564001)*gconst8);
IkReal x2220=(gconst8*new_r21);
IkReal x2221=((0.147909480226238)*sj3);
IkReal x2222=((0.147909480226238)*cj3);
IkReal x2223=((0.028546806998574)*gconst8);
IkReal x2224=((0.811511442202281)*sj3);
IkReal x2225=((0.0181157120800272)*sj3);
IkReal x2226=((0.233054011708033)*sj3);
IkReal x2227=(gconst8*sj3);
IkReal x2228=((0.0181157120800272)*gconst8);
IkReal x2229=((0.0630802599313394)*gconst8);
IkReal x2230=((0.0630802599313394)*sj3);
IkReal x2231=((0.515031836328808)*sj3);
IkReal x2232=((0.0994021100426501)*sj3);
IkReal x2233=(gconst8*x2210);
IkReal x2234=((1.0)*x2210);
IkReal x2235=(cj3*x2209);
IkReal x2236=(new_r01*x2209);
IkReal x2237=(new_r12*x2209);
IkReal x2238=(new_r02*x2210);
IkReal x2239=(cj3*x2210);
IkReal x2240=((0.844313326436599)*x2209);
IkReal x2241=(gconst8*x2209);
IkReal x2242=(new_r00*x2209);
IkReal x2243=((0.844313326436599)*x2210);
IkReal x2244=(new_r02*x2209);
IkReal x2245=((0.535849798705775)*x2210);
IkReal x2246=(x2215+x2214);
IkReal x2247=((0.531815483588428)*x2241);
evalcond[0]=(x2238+x2237+(((0.531815483588428)*gconst8)));
evalcond[1]=((((-1.0)*new_r12*x2234))+x2244+(((-1.0)*x2219)));
evalcond[2]=((((-1.0)*x2209*x2219))+new_r02+(((0.531815483588428)*x2233)));
evalcond[3]=(x2247+((x2210*x2219))+new_r12);
evalcond[4]=((((-0.233054011708033)*cj3))+((new_r00*x2210))+(((-1.0)*x2224))+((new_r10*x2209))+((cj3*x2229))+(((-1.0)*gconst8*x2225)));
evalcond[5]=((((0.0630802599313394)*x2227))+((new_r01*x2210))+(((0.811511442202281)*cj3))+(((-1.0)*x2226))+((new_r11*x2209))+((cj3*x2228)));
evalcond[6]=(x2242+(((-1.0)*new_r10*x2234))+(((-1.0)*x2231))+(((-1.0)*x2222))+((gconst8*x2217))+(((-1.0)*gconst8*x2216)));
evalcond[7]=((((-0.0994021100426501)*x2227))+(((-1.0)*new_r11*x2234))+(((0.515031836328808)*cj3))+x2236+(((-1.0)*x2221))+(((-1.0)*cj3*x2223)));
evalcond[8]=(((new_r12*x2245))+(((-6.54422001705664e-7)*gconst8))+(((-0.844313326436599)*x2238))+(((-0.844313326436599)*x2237))+(((-0.535849798705775)*x2244)));
evalcond[9]=((1.0)+((new_r12*x2210*x2219))+(((0.531815483588428)*gconst8*x2237))+(((0.531815483588428)*new_r02*x2233))+(((-0.0150029978593712)*x2211))+(((-1.0)*x2219*x2244)));
evalcond[10]=((((0.531815483588428)*new_r00*x2233))+((new_r10*x2247))+((new_r10*x2210*x2219))+(((-1.0)*x2219*x2242))+(((0.122486725237355)*x2218)));
evalcond[11]=(((new_r11*x2247))+(((0.122486725237355)*x2220))+(((0.531815483588428)*new_r01*x2233))+((new_r11*x2210*x2219))+(((-1.0)*x2219*x2236)));
evalcond[12]=((((-0.0656300100348293)*new_r02*x2233))+(((-0.103420015812922)*new_r12*x2233))+(((-0.0656300100348293)*gconst8*x2237))+(((0.103420015812922)*new_r02*x2241))+(((-0.121564418783519)*x2211)));
evalcond[13]=(x2246+((new_r10*x2245))+(((5.34279939673075e-6)*new_r20))+(((-1.0)*new_r10*x2240))+(((-0.535849798705775)*x2242))+(((-1.0)*new_r00*x2243)));
evalcond[14]=(x2212+(((-1.0)*x2213))+((new_r11*x2245))+(((-1.0)*new_r11*x2240))+(((5.34279939673075e-6)*new_r21))+(((-0.535849798705775)*x2236))+(((-1.0)*new_r01*x2243)));
evalcond[15]=(x2212+(((-1.0)*x2213))+(((-0.0656300100348293)*new_r00*x2233))+(((-0.103420015812922)*new_r10*x2233))+(((0.103420015812922)*new_r00*x2241))+(((-0.0656300100348293)*new_r10*x2241))+(((0.992470151748698)*x2218)));
evalcond[16]=((((0.992470151748698)*x2220))+(((-0.0656300100348293)*new_r01*x2233))+(((-0.103420015812922)*new_r11*x2233))+(((-1.0)*x2246))+(((-0.0656300100348293)*new_r11*x2241))+(((0.103420015812922)*gconst8*x2236)));
evalcond[17]=((((-0.233054011708033)*x2239))+(((-1.0)*x2225*x2233))+((x2229*x2239))+(((-1.0)*x2209*x2222))+((x2217*x2241))+(((-1.0)*x2209*x2231))+(((-1.0)*x2210*x2224))+new_r00+(((-1.0)*x2216*x2241)));
evalcond[18]=((((-0.0994021100426501)*x2209*x2227))+((x2228*x2239))+(((-1.0)*x2209*x2221))+(((-1.0)*x2210*x2226))+(((-1.0)*x2223*x2235))+(((0.811511442202281)*x2239))+(((0.515031836328808)*x2235))+(((0.0630802599313394)*x2210*x2227))+new_r01);
evalcond[19]=((((-0.233054011708033)*x2235))+(((-1.0)*x2225*x2241))+((x2229*x2235))+(((-1.0)*x2209*x2224))+((x2216*x2233))+(((-1.0)*x2217*x2233))+new_r10+((x2210*x2222))+((x2210*x2231)));
evalcond[20]=(((x2228*x2235))+(((-1.0)*x2209*x2226))+(((0.0994021100426501)*x2210*x2227))+(((-0.515031836328808)*x2239))+(((0.811511442202281)*x2235))+((x2223*x2239))+new_r11+((x2210*x2221))+(((0.0630802599313394)*x2209*x2227)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[9]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[10]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[11]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[12]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[13]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[14]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[15]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[16]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[17]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[18]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[19]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[20]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j2;
vinfos[0].indices[0] = _ij2[0];
vinfos[0].indices[1] = _ij2[1];
vinfos[0].maxsolutions = _nj2;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j3;
vinfos[1].indices[0] = _ij3[0];
vinfos[1].indices[1] = _ij3[1];
vinfos[1].maxsolutions = _nj3;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j4;
vinfos[2].indices[0] = _ij4[0];
vinfos[2].indices[1] = _ij4[1];
vinfos[2].maxsolutions = _nj4;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j5;
vinfos[3].indices[0] = _ij5[0];
vinfos[3].indices[1] = _ij5[1];
vinfos[3].maxsolutions = _nj5;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j6;
vinfos[4].indices[0] = _ij6[0];
vinfos[4].indices[1] = _ij6[1];
vinfos[4].maxsolutions = _nj6;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j7;
vinfos[5].indices[0] = _ij7[0];
vinfos[5].indices[1] = _ij7[1];
vinfos[5].maxsolutions = _nj7;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j8;
vinfos[6].indices[0] = _ij8[0];
vinfos[6].indices[1] = _ij8[1];
vinfos[6].maxsolutions = _nj8;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j5array[1], cj5array[1], sj5array[1];
bool j5valid[1]={false};
_nj5 = 1;
IkReal x2248=(gconst8*new_r02);
IkReal x2249=(gconst8*new_r12);
CheckValue<IkReal> x2250 = IKatan2WithCheck(IkReal(((((1.36249153167196e+56)*x2248))+(((2.14681069867194e+56)*x2249)))),IkReal(((((-2.14681069867194e+56)*x2248))+(((1.36249153167196e+56)*x2249)))),IKFAST_ATAN2_MAGTHRESH);
if(!x2250.valid){
continue;
}
CheckValue<IkReal> x2251=IKPowWithIntegerCheck(IKsign(((((-2.56196288697451e+56)*(new_r02*new_r02)))+(((-2.56196288697451e+56)*(new_r12*new_r12))))),-1);
if(!x2251.valid){
continue;
}
j5array[0]=((-1.5707963267949)+(x2250.value)+(((1.5707963267949)*(x2251.value))));
sj5array[0]=IKsin(j5array[0]);
cj5array[0]=IKcos(j5array[0]);
if( j5array[0] > IKPI )
{
    j5array[0]-=IK2PI;
}
else if( j5array[0] < -IKPI )
{    j5array[0]+=IK2PI;
}
j5valid[0] = true;
for(int ij5 = 0; ij5 < 1; ++ij5)
{
if( !j5valid[ij5] )
{
    continue;
}
_ij5[0] = ij5; _ij5[1] = -1;
for(int iij5 = ij5+1; iij5 < 1; ++iij5)
{
if( j5valid[iij5] && IKabs(cj5array[ij5]-cj5array[iij5]) < IKFAST_SOLUTION_THRESH && IKabs(sj5array[ij5]-sj5array[iij5]) < IKFAST_SOLUTION_THRESH )
{
    j5valid[iij5]=false; _ij5[1] = iij5; break; 
}
}
j5 = j5array[ij5]; cj5 = cj5array[ij5]; sj5 = sj5array[ij5];
{
IkReal evalcond[21];
IkReal x2252=IKcos(j5);
IkReal x2253=IKsin(j5);
IkReal x2254=gconst8*gconst8;
IkReal x2255=((0.276027873078388)*sj3);
IkReal x2256=((0.961149631058464)*cj3);
IkReal x2257=((0.961149631058464)*sj3);
IkReal x2258=((0.276027873078388)*cj3);
IkReal x2259=((0.0994021100426501)*cj3);
IkReal x2260=((0.028546806998574)*sj3);
IkReal x2261=(gconst8*new_r20);
IkReal x2262=((0.837955424564001)*gconst8);
IkReal x2263=(gconst8*new_r21);
IkReal x2264=((0.147909480226238)*sj3);
IkReal x2265=((0.147909480226238)*cj3);
IkReal x2266=((0.028546806998574)*gconst8);
IkReal x2267=((0.811511442202281)*sj3);
IkReal x2268=((0.0181157120800272)*sj3);
IkReal x2269=((0.233054011708033)*sj3);
IkReal x2270=(gconst8*sj3);
IkReal x2271=((0.0181157120800272)*gconst8);
IkReal x2272=((0.0630802599313394)*gconst8);
IkReal x2273=((0.0630802599313394)*sj3);
IkReal x2274=((0.515031836328808)*sj3);
IkReal x2275=((0.0994021100426501)*sj3);
IkReal x2276=(gconst8*x2253);
IkReal x2277=((1.0)*x2253);
IkReal x2278=(cj3*x2252);
IkReal x2279=(new_r01*x2252);
IkReal x2280=(new_r12*x2252);
IkReal x2281=(new_r02*x2253);
IkReal x2282=(cj3*x2253);
IkReal x2283=((0.844313326436599)*x2252);
IkReal x2284=(gconst8*x2252);
IkReal x2285=(new_r00*x2252);
IkReal x2286=((0.844313326436599)*x2253);
IkReal x2287=(new_r02*x2252);
IkReal x2288=((0.535849798705775)*x2253);
IkReal x2289=(x2258+x2257);
IkReal x2290=((0.531815483588428)*x2284);
evalcond[0]=(x2280+x2281+(((0.531815483588428)*gconst8)));
evalcond[1]=(x2287+(((-1.0)*new_r12*x2277))+(((-1.0)*x2262)));
evalcond[2]=((((-1.0)*x2252*x2262))+new_r02+(((0.531815483588428)*x2276)));
evalcond[3]=(x2290+((x2253*x2262))+new_r12);
evalcond[4]=(((new_r00*x2253))+(((-1.0)*gconst8*x2268))+(((-0.233054011708033)*cj3))+((new_r10*x2252))+((cj3*x2272))+(((-1.0)*x2267)));
evalcond[5]=((((0.0630802599313394)*x2270))+((new_r11*x2252))+(((0.811511442202281)*cj3))+((cj3*x2271))+(((-1.0)*x2269))+((new_r01*x2253)));
evalcond[6]=((((-1.0)*new_r10*x2277))+x2285+(((-1.0)*x2274))+(((-1.0)*x2265))+(((-1.0)*gconst8*x2259))+((gconst8*x2260)));
evalcond[7]=((((-0.0994021100426501)*x2270))+(((-1.0)*new_r11*x2277))+(((0.515031836328808)*cj3))+x2279+(((-1.0)*x2264))+(((-1.0)*cj3*x2266)));
evalcond[8]=(((new_r12*x2288))+(((-0.844313326436599)*x2280))+(((-0.844313326436599)*x2281))+(((-6.54422001705664e-7)*gconst8))+(((-0.535849798705775)*x2287)));
evalcond[9]=((1.0)+(((0.531815483588428)*gconst8*x2280))+((new_r12*x2253*x2262))+(((0.531815483588428)*new_r02*x2276))+(((-1.0)*x2262*x2287))+(((-0.0150029978593712)*x2254)));
evalcond[10]=(((new_r10*x2290))+(((0.531815483588428)*new_r00*x2276))+(((-1.0)*x2262*x2285))+(((0.122486725237355)*x2261))+((new_r10*x2253*x2262)));
evalcond[11]=(((new_r11*x2290))+(((0.531815483588428)*new_r01*x2276))+(((0.122486725237355)*x2263))+((new_r11*x2253*x2262))+(((-1.0)*x2262*x2279)));
evalcond[12]=((((0.103420015812922)*new_r02*x2284))+(((-0.0656300100348293)*new_r02*x2276))+(((-0.0656300100348293)*gconst8*x2280))+(((-0.103420015812922)*new_r12*x2276))+(((-0.121564418783519)*x2254)));
evalcond[13]=(x2289+(((5.34279939673075e-6)*new_r20))+(((-1.0)*new_r10*x2283))+((new_r10*x2288))+(((-1.0)*new_r00*x2286))+(((-0.535849798705775)*x2285)));
evalcond[14]=(x2255+(((-0.535849798705775)*x2279))+(((-1.0)*new_r11*x2283))+(((5.34279939673075e-6)*new_r21))+(((-1.0)*x2256))+((new_r11*x2288))+(((-1.0)*new_r01*x2286)));
evalcond[15]=((((0.992470151748698)*x2261))+x2255+(((-0.0656300100348293)*new_r10*x2284))+(((-0.103420015812922)*new_r10*x2276))+(((-1.0)*x2256))+(((0.103420015812922)*new_r00*x2284))+(((-0.0656300100348293)*new_r00*x2276)));
evalcond[16]=((((0.992470151748698)*x2263))+(((0.103420015812922)*gconst8*x2279))+(((-1.0)*x2289))+(((-0.103420015812922)*new_r11*x2276))+(((-0.0656300100348293)*new_r11*x2284))+(((-0.0656300100348293)*new_r01*x2276)));
evalcond[17]=(((x2272*x2282))+(((-1.0)*x2259*x2284))+(((-1.0)*x2252*x2265))+(((-1.0)*x2252*x2274))+((x2260*x2284))+(((-1.0)*x2253*x2267))+(((-1.0)*x2268*x2276))+new_r00+(((-0.233054011708033)*x2282)));
evalcond[18]=((((-1.0)*x2266*x2278))+(((-1.0)*x2252*x2264))+(((0.0630802599313394)*x2253*x2270))+((x2271*x2282))+(((-1.0)*x2253*x2269))+(((-0.0994021100426501)*x2252*x2270))+new_r01+(((0.811511442202281)*x2282))+(((0.515031836328808)*x2278)));
evalcond[19]=((((-1.0)*x2252*x2267))+((x2259*x2276))+(((-1.0)*x2268*x2284))+(((-1.0)*x2260*x2276))+(((-0.233054011708033)*x2278))+((x2253*x2274))+((x2272*x2278))+((x2253*x2265))+new_r10);
evalcond[20]=((((-1.0)*x2252*x2269))+(((0.0994021100426501)*x2253*x2270))+(((0.0630802599313394)*x2252*x2270))+((x2266*x2282))+(((0.811511442202281)*x2278))+((x2253*x2264))+(((-0.515031836328808)*x2282))+new_r11+((x2271*x2278)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[9]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[10]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[11]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[12]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[13]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[14]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[15]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[16]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[17]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[18]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[19]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[20]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j2;
vinfos[0].indices[0] = _ij2[0];
vinfos[0].indices[1] = _ij2[1];
vinfos[0].maxsolutions = _nj2;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j3;
vinfos[1].indices[0] = _ij3[0];
vinfos[1].indices[1] = _ij3[1];
vinfos[1].maxsolutions = _nj3;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j4;
vinfos[2].indices[0] = _ij4[0];
vinfos[2].indices[1] = _ij4[1];
vinfos[2].maxsolutions = _nj4;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j5;
vinfos[3].indices[0] = _ij5[0];
vinfos[3].indices[1] = _ij5[1];
vinfos[3].maxsolutions = _nj5;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j6;
vinfos[4].indices[0] = _ij6[0];
vinfos[4].indices[1] = _ij6[1];
vinfos[4].maxsolutions = _nj6;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j7;
vinfos[5].indices[0] = _ij7[0];
vinfos[5].indices[1] = _ij7[1];
vinfos[5].maxsolutions = _nj7;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j8;
vinfos[6].indices[0] = _ij8[0];
vinfos[6].indices[1] = _ij8[1];
vinfos[6].maxsolutions = _nj8;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}
}
}

}

}

} else
{
{
IkReal j5array[1], cj5array[1], sj5array[1];
bool j5valid[1]={false};
_nj5 = 1;
IkReal x2291=gconst8*gconst8;
CheckValue<IkReal> x2292 = IKatan2WithCheck(IkReal(((((8.23915679508573e+76)*x2291))+(((-1.173386086617e+77)*(new_r02*new_r02))))),IkReal(((((-1.173386086617e+77)*new_r02*new_r12))+(((5.22905040876042e+76)*x2291)))),IKFAST_ATAN2_MAGTHRESH);
if(!x2292.valid){
continue;
}
CheckValue<IkReal> x2293=IKPowWithIntegerCheck(IKsign(((((-9.83245236388639e+76)*gconst8*new_r12))+(((6.24024889090152e+76)*gconst8*new_r02)))),-1);
if(!x2293.valid){
continue;
}
j5array[0]=((-1.5707963267949)+(x2292.value)+(((1.5707963267949)*(x2293.value))));
sj5array[0]=IKsin(j5array[0]);
cj5array[0]=IKcos(j5array[0]);
if( j5array[0] > IKPI )
{
    j5array[0]-=IK2PI;
}
else if( j5array[0] < -IKPI )
{    j5array[0]+=IK2PI;
}
j5valid[0] = true;
for(int ij5 = 0; ij5 < 1; ++ij5)
{
if( !j5valid[ij5] )
{
    continue;
}
_ij5[0] = ij5; _ij5[1] = -1;
for(int iij5 = ij5+1; iij5 < 1; ++iij5)
{
if( j5valid[iij5] && IKabs(cj5array[ij5]-cj5array[iij5]) < IKFAST_SOLUTION_THRESH && IKabs(sj5array[ij5]-sj5array[iij5]) < IKFAST_SOLUTION_THRESH )
{
    j5valid[iij5]=false; _ij5[1] = iij5; break; 
}
}
j5 = j5array[ij5]; cj5 = cj5array[ij5]; sj5 = sj5array[ij5];
{
IkReal evalcond[9];
IkReal x2294=IKcos(j5);
IkReal x2295=IKsin(j5);
IkReal x2296=gconst8*gconst8;
IkReal x2297=((0.122486725237355)*gconst8);
IkReal x2298=((0.837955424564001)*gconst8);
IkReal x2299=((0.531815483588428)*gconst8);
IkReal x2300=(gconst8*x2295);
IkReal x2301=(new_r02*x2294);
IkReal x2302=(new_r12*x2295);
IkReal x2303=(new_r12*x2294);
IkReal x2304=(new_r02*x2295);
IkReal x2305=(x2294*x2299);
evalcond[0]=(x2299+x2303+x2304);
evalcond[1]=((((-1.0)*x2302))+x2301+(((-1.0)*x2298)));
evalcond[2]=(((x2295*x2299))+new_r02+(((-1.0)*x2294*x2298)));
evalcond[3]=(x2305+((x2295*x2298))+new_r12);
evalcond[4]=((((-0.535849798705775)*x2301))+(((-6.54422001705664e-7)*gconst8))+(((0.535849798705775)*x2302))+(((-0.844313326436599)*x2303))+(((-0.844313326436599)*x2304)));
evalcond[5]=((1.0)+((x2298*x2302))+(((-1.0)*x2298*x2301))+((x2299*x2304))+((x2299*x2303))+(((-0.0150029978593712)*x2296)));
evalcond[6]=(((new_r20*x2297))+((new_r10*x2305))+((new_r00*x2295*x2299))+(((-1.0)*new_r00*x2294*x2298))+((new_r10*x2295*x2298)));
evalcond[7]=(((new_r11*x2295*x2298))+((new_r11*x2305))+((new_r21*x2297))+((new_r01*x2295*x2299))+(((-1.0)*new_r01*x2294*x2298)));
evalcond[8]=((((-0.0656300100348293)*new_r02*x2300))+(((-0.0656300100348293)*gconst8*x2303))+(((0.103420015812922)*gconst8*x2301))+(((-0.121564418783519)*x2296))+(((-0.103420015812922)*new_r12*x2300)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j3eval[1];
IkReal x2306=x2126;
sj4=gconst7;
cj4=gconst8;
j4=nan;
CheckValue<IkReal> x2307 = IKatan2WithCheck(IkReal(((((-12.7678698223466)*new_r12))+(((8.1032363594977)*new_r02)))),IkReal(x2306),IKFAST_ATAN2_MAGTHRESH);
if(!x2307.valid){
continue;
}
IkReal gconst6=((-1.0)*(x2307.value));
IkReal gconst7=0;
IkReal x2308 = x2306*x2306;
if(IKabs(x2308)==0){
continue;
}
IkReal gconst8=(x2306*(pow(x2308,-0.5)));
j3eval[0]=((359792.520620029)+(IKabs(((-51663.5292815391)+(((-158028.266409035)*new_r00*sj5))+(((-100293.827058838)*cj5*new_r00))+new_r20+(((100293.827058838)*new_r10*sj5))+(((-158028.266409035)*cj5*new_r10))))));
if( IKabs(j3eval[0]) < 0.0000000100000000  )
{
{
IkReal j3eval[1];
IkReal x2309=x2126;
sj4=gconst7;
cj4=gconst8;
j4=nan;
CheckValue<IkReal> x2310 = IKatan2WithCheck(IkReal(((((-12.7678698223466)*new_r12))+(((8.1032363594977)*new_r02)))),IkReal(x2309),IKFAST_ATAN2_MAGTHRESH);
if(!x2310.valid){
continue;
}
IkReal gconst6=((-1.0)*(x2310.value));
IkReal gconst7=0;
IkReal x2311 = x2309*x2309;
if(IKabs(x2311)==0){
continue;
}
IkReal gconst8=(x2309*(pow(x2311,-0.5)));
j3eval[0]=((103327.058563078)+(IKabs(((179896.260310015)+(((100293.827058838)*new_r11*sj5))+(((-100293.827058838)*cj5*new_r01))+(((-158028.266409035)*new_r01*sj5))+new_r21+(((-158028.266409035)*cj5*new_r11))))));
if( IKabs(j3eval[0]) < 0.0000000100000000  )
{
IkReal op[2+1], zeror[2];
int numroots;
IkReal x2312=((678075.71837472)*new_r20);
IkReal x2313=((646824.781779194)*gconst8);
op[0]=((-1.0)+x2312+x2313);
op[1]=((6.96414909363526)+(((371516.906420252)*gconst8)));
op[2]=((1.0)+x2312+(((-1.0)*x2313)));
polyroots2(op,zeror,numroots);
IkReal j3array[2], cj3array[2], sj3array[2], tempj3array[1];
int numsolutions = 0;
for(int ij3 = 0; ij3 < numroots; ++ij3)
{
IkReal htj3 = zeror[ij3];
tempj3array[0]=((2.0)*(atan(htj3)));
for(int kj3 = 0; kj3 < 1; ++kj3)
{
j3array[numsolutions] = tempj3array[kj3];
if( j3array[numsolutions] > IKPI )
{
    j3array[numsolutions]-=IK2PI;
}
else if( j3array[numsolutions] < -IKPI )
{
    j3array[numsolutions]+=IK2PI;
}
sj3array[numsolutions] = IKsin(j3array[numsolutions]);
cj3array[numsolutions] = IKcos(j3array[numsolutions]);
numsolutions++;
}
}
bool j3valid[2]={true,true};
_nj3 = 2;
for(int ij3 = 0; ij3 < numsolutions; ++ij3)
    {
if( !j3valid[ij3] )
{
    continue;
}
    j3 = j3array[ij3]; cj3 = cj3array[ij3]; sj3 = sj3array[ij3];
htj3 = IKtan(j3/2);

_ij3[0] = ij3; _ij3[1] = -1;
for(int iij3 = ij3+1; iij3 < numsolutions; ++iij3)
{
if( j3valid[iij3] && IKabs(cj3array[ij3]-cj3array[iij3]) < IKFAST_SOLUTION_THRESH && IKabs(sj3array[ij3]-sj3array[iij3]) < IKFAST_SOLUTION_THRESH )
{
    j3valid[iij3]=false; _ij3[1] = iij3; break; 
}
}
{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j2;
vinfos[0].indices[0] = _ij2[0];
vinfos[0].indices[1] = _ij2[1];
vinfos[0].maxsolutions = _nj2;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j3;
vinfos[1].indices[0] = _ij3[0];
vinfos[1].indices[1] = _ij3[1];
vinfos[1].maxsolutions = _nj3;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j4;
vinfos[2].indices[0] = _ij4[0];
vinfos[2].indices[1] = _ij4[1];
vinfos[2].maxsolutions = _nj4;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j5;
vinfos[3].indices[0] = _ij5[0];
vinfos[3].indices[1] = _ij5[1];
vinfos[3].maxsolutions = _nj5;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j6;
vinfos[4].indices[0] = _ij6[0];
vinfos[4].indices[1] = _ij6[1];
vinfos[4].maxsolutions = _nj6;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j7;
vinfos[5].indices[0] = _ij7[0];
vinfos[5].indices[1] = _ij7[1];
vinfos[5].maxsolutions = _nj7;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j8;
vinfos[6].indices[0] = _ij8[0];
vinfos[6].indices[1] = _ij8[1];
vinfos[6].maxsolutions = _nj8;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
    }

} else
{
IkReal op[2+1], zeror[2];
int numroots;
IkReal x2314=((100293.827058838)*new_r11*sj5);
IkReal x2315=(x2314+new_r21);
IkReal x2316=((((158028.266409035)*new_r01*sj5))+(((100293.827058838)*cj5*new_r01))+(((158028.266409035)*cj5*new_r11)));
op[0]=((179896.260310015)+x2315+(((-1.0)*x2316)));
op[1]=103327.058563078;
op[2]=((-179896.260310015)+x2315+(((-1.0)*x2316)));
polyroots2(op,zeror,numroots);
IkReal j3array[2], cj3array[2], sj3array[2], tempj3array[1];
int numsolutions = 0;
for(int ij3 = 0; ij3 < numroots; ++ij3)
{
IkReal htj3 = zeror[ij3];
tempj3array[0]=((2.0)*(atan(htj3)));
for(int kj3 = 0; kj3 < 1; ++kj3)
{
j3array[numsolutions] = tempj3array[kj3];
if( j3array[numsolutions] > IKPI )
{
    j3array[numsolutions]-=IK2PI;
}
else if( j3array[numsolutions] < -IKPI )
{
    j3array[numsolutions]+=IK2PI;
}
sj3array[numsolutions] = IKsin(j3array[numsolutions]);
cj3array[numsolutions] = IKcos(j3array[numsolutions]);
numsolutions++;
}
}
bool j3valid[2]={true,true};
_nj3 = 2;
for(int ij3 = 0; ij3 < numsolutions; ++ij3)
    {
if( !j3valid[ij3] )
{
    continue;
}
    j3 = j3array[ij3]; cj3 = cj3array[ij3]; sj3 = sj3array[ij3];
htj3 = IKtan(j3/2);

_ij3[0] = ij3; _ij3[1] = -1;
for(int iij3 = ij3+1; iij3 < numsolutions; ++iij3)
{
if( j3valid[iij3] && IKabs(cj3array[ij3]-cj3array[iij3]) < IKFAST_SOLUTION_THRESH && IKabs(sj3array[ij3]-sj3array[iij3]) < IKFAST_SOLUTION_THRESH )
{
    j3valid[iij3]=false; _ij3[1] = iij3; break; 
}
}
{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j2;
vinfos[0].indices[0] = _ij2[0];
vinfos[0].indices[1] = _ij2[1];
vinfos[0].maxsolutions = _nj2;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j3;
vinfos[1].indices[0] = _ij3[0];
vinfos[1].indices[1] = _ij3[1];
vinfos[1].maxsolutions = _nj3;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j4;
vinfos[2].indices[0] = _ij4[0];
vinfos[2].indices[1] = _ij4[1];
vinfos[2].maxsolutions = _nj4;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j5;
vinfos[3].indices[0] = _ij5[0];
vinfos[3].indices[1] = _ij5[1];
vinfos[3].maxsolutions = _nj5;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j6;
vinfos[4].indices[0] = _ij6[0];
vinfos[4].indices[1] = _ij6[1];
vinfos[4].maxsolutions = _nj6;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j7;
vinfos[5].indices[0] = _ij7[0];
vinfos[5].indices[1] = _ij7[1];
vinfos[5].maxsolutions = _nj7;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j8;
vinfos[6].indices[0] = _ij8[0];
vinfos[6].indices[1] = _ij8[1];
vinfos[6].maxsolutions = _nj8;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
    }

}

}

} else
{
IkReal op[2+1], zeror[2];
int numroots;
IkReal x2317=((100293.827058838)*new_r10*sj5);
IkReal x2318=(x2317+new_r20);
IkReal x2319=((((100293.827058838)*cj5*new_r00))+(((158028.266409035)*cj5*new_r10))+(((158028.266409035)*new_r00*sj5)));
op[0]=((-51663.5292815391)+x2318+(((-1.0)*x2319)));
op[1]=359792.520620029;
op[2]=((51663.5292815391)+x2318+(((-1.0)*x2319)));
polyroots2(op,zeror,numroots);
IkReal j3array[2], cj3array[2], sj3array[2], tempj3array[1];
int numsolutions = 0;
for(int ij3 = 0; ij3 < numroots; ++ij3)
{
IkReal htj3 = zeror[ij3];
tempj3array[0]=((2.0)*(atan(htj3)));
for(int kj3 = 0; kj3 < 1; ++kj3)
{
j3array[numsolutions] = tempj3array[kj3];
if( j3array[numsolutions] > IKPI )
{
    j3array[numsolutions]-=IK2PI;
}
else if( j3array[numsolutions] < -IKPI )
{
    j3array[numsolutions]+=IK2PI;
}
sj3array[numsolutions] = IKsin(j3array[numsolutions]);
cj3array[numsolutions] = IKcos(j3array[numsolutions]);
numsolutions++;
}
}
bool j3valid[2]={true,true};
_nj3 = 2;
for(int ij3 = 0; ij3 < numsolutions; ++ij3)
    {
if( !j3valid[ij3] )
{
    continue;
}
    j3 = j3array[ij3]; cj3 = cj3array[ij3]; sj3 = sj3array[ij3];
htj3 = IKtan(j3/2);

_ij3[0] = ij3; _ij3[1] = -1;
for(int iij3 = ij3+1; iij3 < numsolutions; ++iij3)
{
if( j3valid[iij3] && IKabs(cj3array[ij3]-cj3array[iij3]) < IKFAST_SOLUTION_THRESH && IKabs(sj3array[ij3]-sj3array[iij3]) < IKFAST_SOLUTION_THRESH )
{
    j3valid[iij3]=false; _ij3[1] = iij3; break; 
}
}
{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j2;
vinfos[0].indices[0] = _ij2[0];
vinfos[0].indices[1] = _ij2[1];
vinfos[0].maxsolutions = _nj2;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j3;
vinfos[1].indices[0] = _ij3[0];
vinfos[1].indices[1] = _ij3[1];
vinfos[1].maxsolutions = _nj3;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j4;
vinfos[2].indices[0] = _ij4[0];
vinfos[2].indices[1] = _ij4[1];
vinfos[2].maxsolutions = _nj4;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j5;
vinfos[3].indices[0] = _ij5[0];
vinfos[3].indices[1] = _ij5[1];
vinfos[3].maxsolutions = _nj5;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j6;
vinfos[4].indices[0] = _ij6[0];
vinfos[4].indices[1] = _ij6[1];
vinfos[4].maxsolutions = _nj6;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j7;
vinfos[5].indices[0] = _ij7[0];
vinfos[5].indices[1] = _ij7[1];
vinfos[5].maxsolutions = _nj7;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j8;
vinfos[6].indices[0] = _ij8[0];
vinfos[6].indices[1] = _ij8[1];
vinfos[6].maxsolutions = _nj8;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
    }

}

}
}
}

}

}

} else
{
{
IkReal j5array[1], cj5array[1], sj5array[1];
bool j5valid[1]={false};
_nj5 = 1;
IkReal x2320=(gconst8*new_r02);
IkReal x2321=(gconst8*new_r12);
CheckValue<IkReal> x2322 = IKatan2WithCheck(IkReal(((((1.36249153167196e+56)*x2320))+(((2.14681069867194e+56)*x2321)))),IkReal(((((1.36249153167196e+56)*x2321))+(((-2.14681069867194e+56)*x2320)))),IKFAST_ATAN2_MAGTHRESH);
if(!x2322.valid){
continue;
}
CheckValue<IkReal> x2323=IKPowWithIntegerCheck(IKsign(((((-2.56196288697451e+56)*(new_r02*new_r02)))+(((-2.56196288697451e+56)*(new_r12*new_r12))))),-1);
if(!x2323.valid){
continue;
}
j5array[0]=((-1.5707963267949)+(x2322.value)+(((1.5707963267949)*(x2323.value))));
sj5array[0]=IKsin(j5array[0]);
cj5array[0]=IKcos(j5array[0]);
if( j5array[0] > IKPI )
{
    j5array[0]-=IK2PI;
}
else if( j5array[0] < -IKPI )
{    j5array[0]+=IK2PI;
}
j5valid[0] = true;
for(int ij5 = 0; ij5 < 1; ++ij5)
{
if( !j5valid[ij5] )
{
    continue;
}
_ij5[0] = ij5; _ij5[1] = -1;
for(int iij5 = ij5+1; iij5 < 1; ++iij5)
{
if( j5valid[iij5] && IKabs(cj5array[ij5]-cj5array[iij5]) < IKFAST_SOLUTION_THRESH && IKabs(sj5array[ij5]-sj5array[iij5]) < IKFAST_SOLUTION_THRESH )
{
    j5valid[iij5]=false; _ij5[1] = iij5; break; 
}
}
j5 = j5array[ij5]; cj5 = cj5array[ij5]; sj5 = sj5array[ij5];
{
IkReal evalcond[9];
IkReal x2324=IKcos(j5);
IkReal x2325=IKsin(j5);
IkReal x2326=gconst8*gconst8;
IkReal x2327=((0.122486725237355)*gconst8);
IkReal x2328=((0.837955424564001)*gconst8);
IkReal x2329=((0.531815483588428)*gconst8);
IkReal x2330=(gconst8*x2325);
IkReal x2331=(new_r02*x2324);
IkReal x2332=(new_r12*x2325);
IkReal x2333=(new_r12*x2324);
IkReal x2334=(new_r02*x2325);
IkReal x2335=(x2324*x2329);
evalcond[0]=(x2333+x2334+x2329);
evalcond[1]=(x2331+(((-1.0)*x2332))+(((-1.0)*x2328)));
evalcond[2]=((((-1.0)*x2324*x2328))+((x2325*x2329))+new_r02);
evalcond[3]=(x2335+((x2325*x2328))+new_r12);
evalcond[4]=((((-0.844313326436599)*x2333))+(((-0.844313326436599)*x2334))+(((-0.535849798705775)*x2331))+(((0.535849798705775)*x2332))+(((-6.54422001705664e-7)*gconst8)));
evalcond[5]=((1.0)+(((-1.0)*x2328*x2331))+((x2329*x2333))+((x2329*x2334))+(((-0.0150029978593712)*x2326))+((x2328*x2332)));
evalcond[6]=(((new_r00*x2325*x2329))+((new_r10*x2325*x2328))+((new_r10*x2335))+(((-1.0)*new_r00*x2324*x2328))+((new_r20*x2327)));
evalcond[7]=(((new_r11*x2335))+((new_r21*x2327))+((new_r01*x2325*x2329))+(((-1.0)*new_r01*x2324*x2328))+((new_r11*x2325*x2328)));
evalcond[8]=((((-0.121564418783519)*x2326))+(((0.103420015812922)*gconst8*x2331))+(((-0.103420015812922)*new_r12*x2330))+(((-0.0656300100348293)*new_r02*x2330))+(((-0.0656300100348293)*gconst8*x2333)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j3eval[1];
IkReal x2336=x2126;
sj4=gconst7;
cj4=gconst8;
j4=nan;
CheckValue<IkReal> x2337 = IKatan2WithCheck(IkReal(((((-12.7678698223466)*new_r12))+(((8.1032363594977)*new_r02)))),IkReal(x2336),IKFAST_ATAN2_MAGTHRESH);
if(!x2337.valid){
continue;
}
IkReal gconst6=((-1.0)*(x2337.value));
IkReal gconst7=0;
IkReal x2338 = x2336*x2336;
if(IKabs(x2338)==0){
continue;
}
IkReal gconst8=(x2336*(pow(x2338,-0.5)));
j3eval[0]=((359792.520620029)+(IKabs(((-51663.5292815391)+(((-158028.266409035)*new_r00*sj5))+(((-100293.827058838)*cj5*new_r00))+new_r20+(((100293.827058838)*new_r10*sj5))+(((-158028.266409035)*cj5*new_r10))))));
if( IKabs(j3eval[0]) < 0.0000000100000000  )
{
{
IkReal j3eval[1];
IkReal x2339=x2126;
sj4=gconst7;
cj4=gconst8;
j4=nan;
CheckValue<IkReal> x2340 = IKatan2WithCheck(IkReal(((((-12.7678698223466)*new_r12))+(((8.1032363594977)*new_r02)))),IkReal(x2339),IKFAST_ATAN2_MAGTHRESH);
if(!x2340.valid){
continue;
}
IkReal gconst6=((-1.0)*(x2340.value));
IkReal gconst7=0;
IkReal x2341 = x2339*x2339;
if(IKabs(x2341)==0){
continue;
}
IkReal gconst8=(x2339*(pow(x2341,-0.5)));
j3eval[0]=((103327.058563078)+(IKabs(((179896.260310015)+(((100293.827058838)*new_r11*sj5))+(((-100293.827058838)*cj5*new_r01))+(((-158028.266409035)*new_r01*sj5))+new_r21+(((-158028.266409035)*cj5*new_r11))))));
if( IKabs(j3eval[0]) < 0.0000000100000000  )
{
IkReal op[2+1], zeror[2];
int numroots;
IkReal x2342=((678075.71837472)*new_r20);
IkReal x2343=((646824.781779194)*gconst8);
op[0]=((-1.0)+x2343+x2342);
op[1]=((6.96414909363526)+(((371516.906420252)*gconst8)));
op[2]=((1.0)+x2342+(((-1.0)*x2343)));
polyroots2(op,zeror,numroots);
IkReal j3array[2], cj3array[2], sj3array[2], tempj3array[1];
int numsolutions = 0;
for(int ij3 = 0; ij3 < numroots; ++ij3)
{
IkReal htj3 = zeror[ij3];
tempj3array[0]=((2.0)*(atan(htj3)));
for(int kj3 = 0; kj3 < 1; ++kj3)
{
j3array[numsolutions] = tempj3array[kj3];
if( j3array[numsolutions] > IKPI )
{
    j3array[numsolutions]-=IK2PI;
}
else if( j3array[numsolutions] < -IKPI )
{
    j3array[numsolutions]+=IK2PI;
}
sj3array[numsolutions] = IKsin(j3array[numsolutions]);
cj3array[numsolutions] = IKcos(j3array[numsolutions]);
numsolutions++;
}
}
bool j3valid[2]={true,true};
_nj3 = 2;
for(int ij3 = 0; ij3 < numsolutions; ++ij3)
    {
if( !j3valid[ij3] )
{
    continue;
}
    j3 = j3array[ij3]; cj3 = cj3array[ij3]; sj3 = sj3array[ij3];
htj3 = IKtan(j3/2);

_ij3[0] = ij3; _ij3[1] = -1;
for(int iij3 = ij3+1; iij3 < numsolutions; ++iij3)
{
if( j3valid[iij3] && IKabs(cj3array[ij3]-cj3array[iij3]) < IKFAST_SOLUTION_THRESH && IKabs(sj3array[ij3]-sj3array[iij3]) < IKFAST_SOLUTION_THRESH )
{
    j3valid[iij3]=false; _ij3[1] = iij3; break; 
}
}
{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j2;
vinfos[0].indices[0] = _ij2[0];
vinfos[0].indices[1] = _ij2[1];
vinfos[0].maxsolutions = _nj2;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j3;
vinfos[1].indices[0] = _ij3[0];
vinfos[1].indices[1] = _ij3[1];
vinfos[1].maxsolutions = _nj3;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j4;
vinfos[2].indices[0] = _ij4[0];
vinfos[2].indices[1] = _ij4[1];
vinfos[2].maxsolutions = _nj4;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j5;
vinfos[3].indices[0] = _ij5[0];
vinfos[3].indices[1] = _ij5[1];
vinfos[3].maxsolutions = _nj5;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j6;
vinfos[4].indices[0] = _ij6[0];
vinfos[4].indices[1] = _ij6[1];
vinfos[4].maxsolutions = _nj6;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j7;
vinfos[5].indices[0] = _ij7[0];
vinfos[5].indices[1] = _ij7[1];
vinfos[5].maxsolutions = _nj7;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j8;
vinfos[6].indices[0] = _ij8[0];
vinfos[6].indices[1] = _ij8[1];
vinfos[6].maxsolutions = _nj8;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
    }

} else
{
IkReal op[2+1], zeror[2];
int numroots;
IkReal x2344=((100293.827058838)*new_r11*sj5);
IkReal x2345=(x2344+new_r21);
IkReal x2346=((((158028.266409035)*new_r01*sj5))+(((100293.827058838)*cj5*new_r01))+(((158028.266409035)*cj5*new_r11)));
op[0]=((179896.260310015)+x2345+(((-1.0)*x2346)));
op[1]=103327.058563078;
op[2]=((-179896.260310015)+x2345+(((-1.0)*x2346)));
polyroots2(op,zeror,numroots);
IkReal j3array[2], cj3array[2], sj3array[2], tempj3array[1];
int numsolutions = 0;
for(int ij3 = 0; ij3 < numroots; ++ij3)
{
IkReal htj3 = zeror[ij3];
tempj3array[0]=((2.0)*(atan(htj3)));
for(int kj3 = 0; kj3 < 1; ++kj3)
{
j3array[numsolutions] = tempj3array[kj3];
if( j3array[numsolutions] > IKPI )
{
    j3array[numsolutions]-=IK2PI;
}
else if( j3array[numsolutions] < -IKPI )
{
    j3array[numsolutions]+=IK2PI;
}
sj3array[numsolutions] = IKsin(j3array[numsolutions]);
cj3array[numsolutions] = IKcos(j3array[numsolutions]);
numsolutions++;
}
}
bool j3valid[2]={true,true};
_nj3 = 2;
for(int ij3 = 0; ij3 < numsolutions; ++ij3)
    {
if( !j3valid[ij3] )
{
    continue;
}
    j3 = j3array[ij3]; cj3 = cj3array[ij3]; sj3 = sj3array[ij3];
htj3 = IKtan(j3/2);

_ij3[0] = ij3; _ij3[1] = -1;
for(int iij3 = ij3+1; iij3 < numsolutions; ++iij3)
{
if( j3valid[iij3] && IKabs(cj3array[ij3]-cj3array[iij3]) < IKFAST_SOLUTION_THRESH && IKabs(sj3array[ij3]-sj3array[iij3]) < IKFAST_SOLUTION_THRESH )
{
    j3valid[iij3]=false; _ij3[1] = iij3; break; 
}
}
{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j2;
vinfos[0].indices[0] = _ij2[0];
vinfos[0].indices[1] = _ij2[1];
vinfos[0].maxsolutions = _nj2;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j3;
vinfos[1].indices[0] = _ij3[0];
vinfos[1].indices[1] = _ij3[1];
vinfos[1].maxsolutions = _nj3;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j4;
vinfos[2].indices[0] = _ij4[0];
vinfos[2].indices[1] = _ij4[1];
vinfos[2].maxsolutions = _nj4;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j5;
vinfos[3].indices[0] = _ij5[0];
vinfos[3].indices[1] = _ij5[1];
vinfos[3].maxsolutions = _nj5;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j6;
vinfos[4].indices[0] = _ij6[0];
vinfos[4].indices[1] = _ij6[1];
vinfos[4].maxsolutions = _nj6;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j7;
vinfos[5].indices[0] = _ij7[0];
vinfos[5].indices[1] = _ij7[1];
vinfos[5].maxsolutions = _nj7;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j8;
vinfos[6].indices[0] = _ij8[0];
vinfos[6].indices[1] = _ij8[1];
vinfos[6].maxsolutions = _nj8;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
    }

}

}

} else
{
IkReal op[2+1], zeror[2];
int numroots;
IkReal x2347=((100293.827058838)*new_r10*sj5);
IkReal x2348=(x2347+new_r20);
IkReal x2349=((((100293.827058838)*cj5*new_r00))+(((158028.266409035)*cj5*new_r10))+(((158028.266409035)*new_r00*sj5)));
op[0]=((-51663.5292815391)+x2348+(((-1.0)*x2349)));
op[1]=359792.520620029;
op[2]=((51663.5292815391)+x2348+(((-1.0)*x2349)));
polyroots2(op,zeror,numroots);
IkReal j3array[2], cj3array[2], sj3array[2], tempj3array[1];
int numsolutions = 0;
for(int ij3 = 0; ij3 < numroots; ++ij3)
{
IkReal htj3 = zeror[ij3];
tempj3array[0]=((2.0)*(atan(htj3)));
for(int kj3 = 0; kj3 < 1; ++kj3)
{
j3array[numsolutions] = tempj3array[kj3];
if( j3array[numsolutions] > IKPI )
{
    j3array[numsolutions]-=IK2PI;
}
else if( j3array[numsolutions] < -IKPI )
{
    j3array[numsolutions]+=IK2PI;
}
sj3array[numsolutions] = IKsin(j3array[numsolutions]);
cj3array[numsolutions] = IKcos(j3array[numsolutions]);
numsolutions++;
}
}
bool j3valid[2]={true,true};
_nj3 = 2;
for(int ij3 = 0; ij3 < numsolutions; ++ij3)
    {
if( !j3valid[ij3] )
{
    continue;
}
    j3 = j3array[ij3]; cj3 = cj3array[ij3]; sj3 = sj3array[ij3];
htj3 = IKtan(j3/2);

_ij3[0] = ij3; _ij3[1] = -1;
for(int iij3 = ij3+1; iij3 < numsolutions; ++iij3)
{
if( j3valid[iij3] && IKabs(cj3array[ij3]-cj3array[iij3]) < IKFAST_SOLUTION_THRESH && IKabs(sj3array[ij3]-sj3array[iij3]) < IKFAST_SOLUTION_THRESH )
{
    j3valid[iij3]=false; _ij3[1] = iij3; break; 
}
}
{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j2;
vinfos[0].indices[0] = _ij2[0];
vinfos[0].indices[1] = _ij2[1];
vinfos[0].maxsolutions = _nj2;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j3;
vinfos[1].indices[0] = _ij3[0];
vinfos[1].indices[1] = _ij3[1];
vinfos[1].maxsolutions = _nj3;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j4;
vinfos[2].indices[0] = _ij4[0];
vinfos[2].indices[1] = _ij4[1];
vinfos[2].maxsolutions = _nj4;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j5;
vinfos[3].indices[0] = _ij5[0];
vinfos[3].indices[1] = _ij5[1];
vinfos[3].maxsolutions = _nj5;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j6;
vinfos[4].indices[0] = _ij6[0];
vinfos[4].indices[1] = _ij6[1];
vinfos[4].maxsolutions = _nj6;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j7;
vinfos[5].indices[0] = _ij7[0];
vinfos[5].indices[1] = _ij7[1];
vinfos[5].maxsolutions = _nj7;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j8;
vinfos[6].indices[0] = _ij8[0];
vinfos[6].indices[1] = _ij8[1];
vinfos[6].maxsolutions = _nj8;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
    }

}

}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
IkReal x2350=((((1.57580374828584)*new_r12))+(((-1.0)*new_r02)));
CheckValue<IkReal> x2351 = IKatan2WithCheck(IkReal(((((-12.7678698223466)*new_r12))+(((8.1032363594977)*new_r02)))),IkReal(x2350),IKFAST_ATAN2_MAGTHRESH);
if(!x2351.valid){
continue;
}
IkReal gconst9=((3.14159265358979)+(((-1.0)*(x2351.value))));
IkReal gconst10=0;
IkReal x2352 = x2350*x2350;
if(IKabs(x2352)==0){
continue;
}
IkReal gconst11=((-1.0)*x2350*(pow(x2352,-0.5)));
IkReal x2353=j4;
CheckValue<IkReal> x2356 = IKatan2WithCheck(IkReal(((((-12.7678698223466)*new_r12))+(((8.1032363594977)*new_r02)))),IkReal(((((1.57580374828584)*new_r12))+(((-1.0)*new_r02)))),IKFAST_ATAN2_MAGTHRESH);
if(!x2356.valid){
continue;
}
IkReal x2354=x2356.value;
IkReal x2355=x2354;
if((((9.86960440108936)+((j4*x2353))+((j4*x2355))+((x2354*x2355))+((x2353*x2354))+(((-3.14159265358979)*x2353))+(((-3.14159265358979)*x2355))+(((-3.14159265358979)*x2354))+(((-3.14159265358979)*j4)))) < -0.00001)
continue;
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKsqrt(((9.86960440108936)+((j4*x2353))+((j4*x2355))+((x2354*x2355))+((x2353*x2354))+(((-3.14159265358979)*x2353))+(((-3.14159265358979)*x2355))+(((-3.14159265358979)*x2354))+(((-3.14159265358979)*j4)))))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j5eval[2];
IkReal x2357=x2350;
sj4=gconst10;
cj4=gconst11;
j4=nan;
CheckValue<IkReal> x2358 = IKatan2WithCheck(IkReal(((((-12.7678698223466)*new_r12))+(((8.1032363594977)*new_r02)))),IkReal(x2357),IKFAST_ATAN2_MAGTHRESH);
if(!x2358.valid){
continue;
}
IkReal gconst9=((3.14159265358979)+(((-1.0)*(x2358.value))));
IkReal gconst10=0;
IkReal x2359 = x2357*x2357;
if(IKabs(x2359)==0){
continue;
}
IkReal gconst11=((-1.0)*x2357*(pow(x2359,-0.5)));
IkReal x2360=new_r12*new_r12;
IkReal x2361=new_r02*new_r02;
j5eval[0]=((((-1.0)*x2361))+(((-1.0)*x2360)));
j5eval[1]=IKsign(((((-2.56196288697451e+56)*x2360))+(((-2.56196288697451e+56)*x2361))));
if( IKabs(j5eval[0]) < 0.0000010000000000  || IKabs(j5eval[1]) < 0.0000010000000000  )
{
{
IkReal j5eval[1];
IkReal x2362=x2350;
sj4=gconst10;
cj4=gconst11;
j4=nan;
CheckValue<IkReal> x2363 = IKatan2WithCheck(IkReal(((((-12.7678698223466)*new_r12))+(((8.1032363594977)*new_r02)))),IkReal(x2362),IKFAST_ATAN2_MAGTHRESH);
if(!x2363.valid){
continue;
}
IkReal gconst9=((3.14159265358979)+(((-1.0)*(x2363.value))));
IkReal gconst10=0;
IkReal x2364 = x2362*x2362;
if(IKabs(x2364)==0){
continue;
}
IkReal gconst11=((-1.0)*x2362*(pow(x2364,-0.5)));
IkReal x2365=new_r02*new_r02;
j5eval[0]=((1.0)+(((1.44585006149089)*(x2365*x2365)))+(((-1.28865050323593)*new_r02*new_r12))+(((-2.03046303253059)*x2365))+(((1.44585006149089)*x2365*(new_r12*new_r12))));
if( IKabs(j5eval[0]) < 0.0000010000000000  )
{
{
IkReal j3eval[2];
IkReal x2366=x2350;
sj4=gconst10;
cj4=gconst11;
j4=nan;
CheckValue<IkReal> x2367 = IKatan2WithCheck(IkReal(((((-12.7678698223466)*new_r12))+(((8.1032363594977)*new_r02)))),IkReal(x2366),IKFAST_ATAN2_MAGTHRESH);
if(!x2367.valid){
continue;
}
IkReal gconst9=((3.14159265358979)+(((-1.0)*(x2367.value))));
IkReal gconst10=0;
IkReal x2368 = x2366*x2366;
if(IKabs(x2368)==0){
continue;
}
IkReal gconst11=((-1.0)*x2366*(pow(x2368,-0.5)));
j3eval[0]=34506202940.0186;
j3eval[1]=1.0;
if( IKabs(j3eval[0]) < 0.0000010000000000  || IKabs(j3eval[1]) < 0.0000010000000000  )
{
continue; // no branches [j3, j5]

} else
{
{
IkReal j3array[1], cj3array[1], sj3array[1];
bool j3valid[1]={false};
_nj3 = 1;
IkReal x2369=(gconst11*new_r21);
IkReal x2370=(gconst11*new_r20);
CheckValue<IkReal> x2371=IKPowWithIntegerCheck(IKsign(((2.85455053937064e-11)+(((0.984997002112083)*(gconst11*gconst11))))),-1);
if(!x2371.valid){
continue;
}
CheckValue<IkReal> x2372 = IKatan2WithCheck(IkReal(((((-5.13522966898714e-6)*new_r20))+(((0.953912320189798)*x2369))+(((-1.47476155376408e-6)*new_r21))+(((-0.273949425080978)*x2370)))),IkReal(((((5.13522966898714e-6)*new_r21))+(((0.953912320189798)*x2370))+(((-1.47476155376408e-6)*new_r20))+(((0.273949425080978)*x2369)))),IKFAST_ATAN2_MAGTHRESH);
if(!x2372.valid){
continue;
}
j3array[0]=((-1.5707963267949)+(((1.5707963267949)*(x2371.value)))+(x2372.value));
sj3array[0]=IKsin(j3array[0]);
cj3array[0]=IKcos(j3array[0]);
if( j3array[0] > IKPI )
{
    j3array[0]-=IK2PI;
}
else if( j3array[0] < -IKPI )
{    j3array[0]+=IK2PI;
}
j3valid[0] = true;
for(int ij3 = 0; ij3 < 1; ++ij3)
{
if( !j3valid[ij3] )
{
    continue;
}
_ij3[0] = ij3; _ij3[1] = -1;
for(int iij3 = ij3+1; iij3 < 1; ++iij3)
{
if( j3valid[iij3] && IKabs(cj3array[ij3]-cj3array[iij3]) < IKFAST_SOLUTION_THRESH && IKabs(sj3array[ij3]-sj3array[iij3]) < IKFAST_SOLUTION_THRESH )
{
    j3valid[iij3]=false; _ij3[1] = iij3; break; 
}
}
j3 = j3array[ij3]; cj3 = cj3array[ij3]; sj3 = sj3array[ij3];
{
IkReal evalcond[2];
IkReal x2373=IKsin(j3);
IkReal x2374=IKcos(j3);
IkReal x2375=(gconst11*x2374);
IkReal x2376=(gconst11*x2373);
evalcond[0]=((((1.47476155376408e-6)*x2374))+(((5.13522966898714e-6)*x2373))+(((-0.953912320189798)*x2375))+new_r20+(((0.273949425080978)*x2376)));
evalcond[1]=((((1.47476155376408e-6)*x2373))+(((-0.953912320189798)*x2376))+(((-0.273949425080978)*x2375))+new_r21+(((-5.13522966898714e-6)*x2374)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j5eval[2];
IkReal x2377=x2350;
sj4=gconst10;
cj4=gconst11;
j4=nan;
CheckValue<IkReal> x2378 = IKatan2WithCheck(IkReal(((((-12.7678698223466)*new_r12))+(((8.1032363594977)*new_r02)))),IkReal(x2377),IKFAST_ATAN2_MAGTHRESH);
if(!x2378.valid){
continue;
}
IkReal gconst9=((3.14159265358979)+(((-1.0)*(x2378.value))));
IkReal gconst10=0;
IkReal x2379 = x2377*x2377;
if(IKabs(x2379)==0){
continue;
}
IkReal gconst11=((-1.0)*x2377*(pow(x2379,-0.5)));
IkReal x2380=new_r12*new_r12;
IkReal x2381=new_r02*new_r02;
j5eval[0]=((((-1.0)*x2381))+(((-1.0)*x2380)));
j5eval[1]=IKsign(((((-2.56196288697451e+56)*x2380))+(((-2.56196288697451e+56)*x2381))));
if( IKabs(j5eval[0]) < 0.0000010000000000  || IKabs(j5eval[1]) < 0.0000010000000000  )
{
{
IkReal j5eval[1];
IkReal x2382=x2350;
sj4=gconst10;
cj4=gconst11;
j4=nan;
CheckValue<IkReal> x2383 = IKatan2WithCheck(IkReal(((((-12.7678698223466)*new_r12))+(((8.1032363594977)*new_r02)))),IkReal(x2382),IKFAST_ATAN2_MAGTHRESH);
if(!x2383.valid){
continue;
}
IkReal gconst9=((3.14159265358979)+(((-1.0)*(x2383.value))));
IkReal gconst10=0;
IkReal x2384 = x2382*x2382;
if(IKabs(x2384)==0){
continue;
}
IkReal gconst11=((-1.0)*x2382*(pow(x2384,-0.5)));
IkReal x2385=new_r02*new_r02;
j5eval[0]=((1.0)+(((-1.28865050323593)*new_r02*new_r12))+(((1.44585006149089)*(x2385*x2385)))+(((-2.03046303253059)*x2385))+(((1.44585006149089)*x2385*(new_r12*new_r12))));
if( IKabs(j5eval[0]) < 0.0000010000000000  )
{
{
IkReal j5array[1], cj5array[1], sj5array[1];
bool j5valid[1]={false};
_nj5 = 1;
IkReal x2386=gconst11*gconst11;
IkReal x2387=(gconst11*new_r02);
IkReal x2388=(gconst11*new_r12);
CheckValue<IkReal> x2389=IKPowWithIntegerCheck(((((6.24024889090152e+76)*x2388))+(((9.83245236388639e+76)*x2387))),-1);
if(!x2389.valid){
continue;
}
CheckValue<IkReal> x2390=IKPowWithIntegerCheck(((((1.2480497781803e+77)*x2388))+(((1.96649047277728e+77)*x2387))),-1);
if(!x2390.valid){
continue;
}
if( IKabs(((x2389.value)*(((((-1.173386086617e+77)*new_r02*new_r12))+(((-5.22905040876042e+76)*x2386)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((x2390.value)*(((((-6.63732196325388e+76)*x2386))+(((2.346772173234e+77)*(new_r02*new_r02))))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((x2389.value)*(((((-1.173386086617e+77)*new_r02*new_r12))+(((-5.22905040876042e+76)*x2386))))))+IKsqr(((x2390.value)*(((((-6.63732196325388e+76)*x2386))+(((2.346772173234e+77)*(new_r02*new_r02)))))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j5array[0]=IKatan2(((x2389.value)*(((((-1.173386086617e+77)*new_r02*new_r12))+(((-5.22905040876042e+76)*x2386))))), ((x2390.value)*(((((-6.63732196325388e+76)*x2386))+(((2.346772173234e+77)*(new_r02*new_r02)))))));
sj5array[0]=IKsin(j5array[0]);
cj5array[0]=IKcos(j5array[0]);
if( j5array[0] > IKPI )
{
    j5array[0]-=IK2PI;
}
else if( j5array[0] < -IKPI )
{    j5array[0]+=IK2PI;
}
j5valid[0] = true;
for(int ij5 = 0; ij5 < 1; ++ij5)
{
if( !j5valid[ij5] )
{
    continue;
}
_ij5[0] = ij5; _ij5[1] = -1;
for(int iij5 = ij5+1; iij5 < 1; ++iij5)
{
if( j5valid[iij5] && IKabs(cj5array[ij5]-cj5array[iij5]) < IKFAST_SOLUTION_THRESH && IKabs(sj5array[ij5]-sj5array[iij5]) < IKFAST_SOLUTION_THRESH )
{
    j5valid[iij5]=false; _ij5[1] = iij5; break; 
}
}
j5 = j5array[ij5]; cj5 = cj5array[ij5]; sj5 = sj5array[ij5];
{
IkReal evalcond[21];
IkReal x2391=IKcos(j5);
IkReal x2392=IKsin(j5);
IkReal x2393=gconst11*gconst11;
IkReal x2394=((0.276027873078388)*sj3);
IkReal x2395=((0.961149631058464)*cj3);
IkReal x2396=((0.961149631058464)*sj3);
IkReal x2397=((0.276027873078388)*cj3);
IkReal x2398=((0.0630802599313394)*gconst11);
IkReal x2399=((0.531815483588428)*gconst11);
IkReal x2400=(cj3*gconst11);
IkReal x2401=((0.147909480226238)*sj3);
IkReal x2402=((0.0181157120800272)*gconst11);
IkReal x2403=((0.0656300100348293)*gconst11);
IkReal x2404=((0.0994021100426501)*gconst11);
IkReal x2405=((0.028546806998574)*sj3);
IkReal x2406=((0.122486725237355)*gconst11);
IkReal x2407=((0.837955424564001)*gconst11);
IkReal x2408=((0.103420015812922)*gconst11);
IkReal x2409=((0.992470151748698)*gconst11);
IkReal x2410=((0.811511442202281)*x2392);
IkReal x2411=((1.0)*x2392);
IkReal x2412=(cj3*x2391);
IkReal x2413=(new_r02*x2392);
IkReal x2414=(new_r01*x2391);
IkReal x2415=(new_r12*x2391);
IkReal x2416=(cj3*x2392);
IkReal x2417=(new_r10*x2391);
IkReal x2418=(new_r01*x2392);
IkReal x2419=(gconst11*x2392);
IkReal x2420=(sj3*x2391);
IkReal x2421=(new_r11*x2391);
IkReal x2422=(new_r00*x2392);
IkReal x2423=(new_r00*x2391);
IkReal x2424=(sj3*x2392);
IkReal x2425=(new_r02*x2391);
IkReal x2426=((0.535849798705775)*x2392);
IkReal x2427=(x2396+x2397);
evalcond[0]=(x2413+x2415+x2399);
evalcond[1]=(x2425+(((-1.0)*new_r12*x2411))+(((-1.0)*x2407)));
evalcond[2]=(((x2392*x2399))+(((-1.0)*x2391*x2407))+new_r02);
evalcond[3]=(((x2391*x2399))+new_r12+((x2392*x2407)));
evalcond[4]=(x2417+x2422+(((-0.233054011708033)*cj3))+(((-1.0)*sj3*x2402))+((cj3*x2398))+(((-0.811511442202281)*sj3)));
evalcond[5]=((((0.0181157120800272)*x2400))+x2418+x2421+(((-0.233054011708033)*sj3))+((sj3*x2398))+(((0.811511442202281)*cj3)));
evalcond[6]=(x2423+(((-1.0)*new_r10*x2411))+(((-0.0994021100426501)*x2400))+(((-0.147909480226238)*cj3))+((gconst11*x2405))+(((-0.515031836328808)*sj3)));
evalcond[7]=(x2414+(((-0.028546806998574)*x2400))+(((0.515031836328808)*cj3))+(((-1.0)*x2401))+(((-1.0)*new_r11*x2411))+(((-1.0)*sj3*x2404)));
evalcond[8]=((((-0.844313326436599)*x2413))+(((-0.844313326436599)*x2415))+(((-6.54422001705664e-7)*gconst11))+((new_r12*x2426))+(((-0.535849798705775)*x2425)));
evalcond[9]=((1.0)+((x2399*x2415))+((x2399*x2413))+(((-0.0150029978593712)*x2393))+(((-1.0)*x2407*x2425))+((new_r12*x2392*x2407)));
evalcond[10]=(((x2399*x2417))+((new_r10*x2392*x2407))+(((-1.0)*x2407*x2423))+((new_r20*x2406))+((x2399*x2422)));
evalcond[11]=(((x2399*x2418))+(((-1.0)*x2407*x2414))+((new_r21*x2406))+((new_r11*x2392*x2407))+((x2399*x2421)));
evalcond[12]=((((-1.0)*new_r12*x2392*x2408))+(((-0.121564418783519)*x2393))+((x2408*x2425))+(((-1.0)*x2403*x2415))+(((-1.0)*x2403*x2413)));
evalcond[13]=((((-0.844313326436599)*x2417))+x2427+((new_r10*x2426))+(((-0.844313326436599)*x2422))+(((5.34279939673075e-6)*new_r20))+(((-0.535849798705775)*x2423)));
evalcond[14]=((((-0.844313326436599)*x2418))+x2394+(((-0.844313326436599)*x2421))+(((-0.535849798705775)*x2414))+(((5.34279939673075e-6)*new_r21))+((new_r11*x2426))+(((-1.0)*x2395)));
evalcond[15]=(x2394+(((-1.0)*x2395))+(((-1.0)*x2403*x2422))+((x2408*x2423))+(((-1.0)*x2403*x2417))+((new_r20*x2409))+(((-1.0)*new_r10*x2392*x2408)));
evalcond[16]=((((-1.0)*new_r11*x2392*x2408))+((x2408*x2414))+((new_r21*x2409))+(((-1.0)*x2403*x2421))+(((-1.0)*x2427))+(((-1.0)*x2403*x2418)));
evalcond[17]=((((-1.0)*x2402*x2424))+((x2398*x2416))+(((-0.233054011708033)*x2416))+(((-0.147909480226238)*x2412))+new_r00+((gconst11*x2391*x2405))+(((-0.515031836328808)*x2420))+(((-1.0)*sj3*x2410))+(((-0.0994021100426501)*x2391*x2400)));
evalcond[18]=((((-0.233054011708033)*x2424))+((cj3*x2410))+(((-1.0)*x2391*x2401))+(((-1.0)*x2404*x2420))+(((0.515031836328808)*x2412))+(((-0.028546806998574)*x2391*x2400))+new_r01+(((0.0181157120800272)*x2392*x2400))+((x2398*x2424)));
evalcond[19]=((((-1.0)*x2402*x2420))+((x2398*x2412))+(((-0.233054011708033)*x2412))+(((-1.0)*x2405*x2419))+(((0.147909480226238)*x2416))+(((0.515031836328808)*x2424))+(((0.0994021100426501)*x2392*x2400))+(((-0.811511442202281)*x2420))+new_r10);
evalcond[20]=((((0.028546806998574)*x2392*x2400))+(((-0.233054011708033)*x2420))+((x2404*x2424))+(((-0.515031836328808)*x2416))+(((0.811511442202281)*x2412))+new_r11+((x2398*x2420))+((x2392*x2401))+(((0.0181157120800272)*x2391*x2400)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[9]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[10]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[11]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[12]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[13]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[14]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[15]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[16]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[17]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[18]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[19]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[20]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j2;
vinfos[0].indices[0] = _ij2[0];
vinfos[0].indices[1] = _ij2[1];
vinfos[0].maxsolutions = _nj2;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j3;
vinfos[1].indices[0] = _ij3[0];
vinfos[1].indices[1] = _ij3[1];
vinfos[1].maxsolutions = _nj3;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j4;
vinfos[2].indices[0] = _ij4[0];
vinfos[2].indices[1] = _ij4[1];
vinfos[2].maxsolutions = _nj4;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j5;
vinfos[3].indices[0] = _ij5[0];
vinfos[3].indices[1] = _ij5[1];
vinfos[3].maxsolutions = _nj5;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j6;
vinfos[4].indices[0] = _ij6[0];
vinfos[4].indices[1] = _ij6[1];
vinfos[4].maxsolutions = _nj6;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j7;
vinfos[5].indices[0] = _ij7[0];
vinfos[5].indices[1] = _ij7[1];
vinfos[5].maxsolutions = _nj7;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j8;
vinfos[6].indices[0] = _ij8[0];
vinfos[6].indices[1] = _ij8[1];
vinfos[6].maxsolutions = _nj8;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

} else
{
{
IkReal j5array[1], cj5array[1], sj5array[1];
bool j5valid[1]={false};
_nj5 = 1;
IkReal x2428=gconst11*gconst11;
CheckValue<IkReal> x2429=IKPowWithIntegerCheck(IKsign(((((6.24024889090152e+76)*gconst11*new_r02))+(((-9.83245236388639e+76)*gconst11*new_r12)))),-1);
if(!x2429.valid){
continue;
}
CheckValue<IkReal> x2430 = IKatan2WithCheck(IkReal(((((8.23915679508573e+76)*x2428))+(((-1.173386086617e+77)*(new_r02*new_r02))))),IkReal(((((-1.173386086617e+77)*new_r02*new_r12))+(((5.22905040876042e+76)*x2428)))),IKFAST_ATAN2_MAGTHRESH);
if(!x2430.valid){
continue;
}
j5array[0]=((-1.5707963267949)+(((1.5707963267949)*(x2429.value)))+(x2430.value));
sj5array[0]=IKsin(j5array[0]);
cj5array[0]=IKcos(j5array[0]);
if( j5array[0] > IKPI )
{
    j5array[0]-=IK2PI;
}
else if( j5array[0] < -IKPI )
{    j5array[0]+=IK2PI;
}
j5valid[0] = true;
for(int ij5 = 0; ij5 < 1; ++ij5)
{
if( !j5valid[ij5] )
{
    continue;
}
_ij5[0] = ij5; _ij5[1] = -1;
for(int iij5 = ij5+1; iij5 < 1; ++iij5)
{
if( j5valid[iij5] && IKabs(cj5array[ij5]-cj5array[iij5]) < IKFAST_SOLUTION_THRESH && IKabs(sj5array[ij5]-sj5array[iij5]) < IKFAST_SOLUTION_THRESH )
{
    j5valid[iij5]=false; _ij5[1] = iij5; break; 
}
}
j5 = j5array[ij5]; cj5 = cj5array[ij5]; sj5 = sj5array[ij5];
{
IkReal evalcond[21];
IkReal x2431=IKcos(j5);
IkReal x2432=IKsin(j5);
IkReal x2433=gconst11*gconst11;
IkReal x2434=((0.276027873078388)*sj3);
IkReal x2435=((0.961149631058464)*cj3);
IkReal x2436=((0.961149631058464)*sj3);
IkReal x2437=((0.276027873078388)*cj3);
IkReal x2438=((0.0630802599313394)*gconst11);
IkReal x2439=((0.531815483588428)*gconst11);
IkReal x2440=(cj3*gconst11);
IkReal x2441=((0.147909480226238)*sj3);
IkReal x2442=((0.0181157120800272)*gconst11);
IkReal x2443=((0.0656300100348293)*gconst11);
IkReal x2444=((0.0994021100426501)*gconst11);
IkReal x2445=((0.028546806998574)*sj3);
IkReal x2446=((0.122486725237355)*gconst11);
IkReal x2447=((0.837955424564001)*gconst11);
IkReal x2448=((0.103420015812922)*gconst11);
IkReal x2449=((0.992470151748698)*gconst11);
IkReal x2450=((0.811511442202281)*x2432);
IkReal x2451=((1.0)*x2432);
IkReal x2452=(cj3*x2431);
IkReal x2453=(new_r02*x2432);
IkReal x2454=(new_r01*x2431);
IkReal x2455=(new_r12*x2431);
IkReal x2456=(cj3*x2432);
IkReal x2457=(new_r10*x2431);
IkReal x2458=(new_r01*x2432);
IkReal x2459=(gconst11*x2432);
IkReal x2460=(sj3*x2431);
IkReal x2461=(new_r11*x2431);
IkReal x2462=(new_r00*x2432);
IkReal x2463=(new_r00*x2431);
IkReal x2464=(sj3*x2432);
IkReal x2465=(new_r02*x2431);
IkReal x2466=((0.535849798705775)*x2432);
IkReal x2467=(x2437+x2436);
evalcond[0]=(x2439+x2455+x2453);
evalcond[1]=(x2465+(((-1.0)*new_r12*x2451))+(((-1.0)*x2447)));
evalcond[2]=((((-1.0)*x2431*x2447))+((x2432*x2439))+new_r02);
evalcond[3]=(((x2432*x2447))+((x2431*x2439))+new_r12);
evalcond[4]=(x2462+x2457+(((-0.233054011708033)*cj3))+((cj3*x2438))+(((-0.811511442202281)*sj3))+(((-1.0)*sj3*x2442)));
evalcond[5]=(x2461+x2458+(((-0.233054011708033)*sj3))+((sj3*x2438))+(((0.811511442202281)*cj3))+(((0.0181157120800272)*x2440)));
evalcond[6]=(x2463+(((-1.0)*new_r10*x2451))+((gconst11*x2445))+(((-0.147909480226238)*cj3))+(((-0.515031836328808)*sj3))+(((-0.0994021100426501)*x2440)));
evalcond[7]=(x2454+(((-1.0)*new_r11*x2451))+(((0.515031836328808)*cj3))+(((-0.028546806998574)*x2440))+(((-1.0)*x2441))+(((-1.0)*sj3*x2444)));
evalcond[8]=((((-6.54422001705664e-7)*gconst11))+(((-0.844313326436599)*x2455))+(((-0.844313326436599)*x2453))+((new_r12*x2466))+(((-0.535849798705775)*x2465)));
evalcond[9]=((1.0)+((new_r12*x2432*x2447))+((x2439*x2453))+((x2439*x2455))+(((-0.0150029978593712)*x2433))+(((-1.0)*x2447*x2465)));
evalcond[10]=(((new_r20*x2446))+((new_r10*x2432*x2447))+((x2439*x2457))+((x2439*x2462))+(((-1.0)*x2447*x2463)));
evalcond[11]=(((new_r11*x2432*x2447))+((new_r21*x2446))+(((-1.0)*x2447*x2454))+((x2439*x2458))+((x2439*x2461)));
evalcond[12]=((((-0.121564418783519)*x2433))+((x2448*x2465))+(((-1.0)*new_r12*x2432*x2448))+(((-1.0)*x2443*x2455))+(((-1.0)*x2443*x2453)));
evalcond[13]=((((-0.844313326436599)*x2462))+x2467+(((-0.844313326436599)*x2457))+((new_r10*x2466))+(((5.34279939673075e-6)*new_r20))+(((-0.535849798705775)*x2463)));
evalcond[14]=((((-0.844313326436599)*x2461))+x2434+(((-0.844313326436599)*x2458))+(((-1.0)*x2435))+(((-0.535849798705775)*x2454))+((new_r11*x2466))+(((5.34279939673075e-6)*new_r21)));
evalcond[15]=(x2434+(((-1.0)*x2435))+(((-1.0)*x2443*x2462))+((new_r20*x2449))+(((-1.0)*new_r10*x2432*x2448))+((x2448*x2463))+(((-1.0)*x2443*x2457)));
evalcond[16]=(((new_r21*x2449))+(((-1.0)*x2443*x2461))+(((-1.0)*new_r11*x2432*x2448))+((x2448*x2454))+(((-1.0)*x2467))+(((-1.0)*x2443*x2458)));
evalcond[17]=((((-1.0)*x2442*x2464))+(((-0.515031836328808)*x2460))+(((-0.0994021100426501)*x2431*x2440))+(((-0.233054011708033)*x2456))+((gconst11*x2431*x2445))+new_r00+(((-0.147909480226238)*x2452))+((x2438*x2456))+(((-1.0)*sj3*x2450)));
evalcond[18]=(((x2438*x2464))+(((-1.0)*x2431*x2441))+((cj3*x2450))+(((-0.028546806998574)*x2431*x2440))+(((-1.0)*x2444*x2460))+(((0.0181157120800272)*x2432*x2440))+new_r01+(((0.515031836328808)*x2452))+(((-0.233054011708033)*x2464)));
evalcond[19]=((((-1.0)*x2442*x2460))+(((0.515031836328808)*x2464))+(((-1.0)*x2445*x2459))+(((-0.233054011708033)*x2452))+(((0.0994021100426501)*x2432*x2440))+(((-0.811511442202281)*x2460))+new_r10+(((0.147909480226238)*x2456))+((x2438*x2452)));
evalcond[20]=(((x2438*x2460))+((x2432*x2441))+(((0.811511442202281)*x2452))+((x2444*x2464))+(((0.028546806998574)*x2432*x2440))+(((0.0181157120800272)*x2431*x2440))+new_r11+(((-0.233054011708033)*x2460))+(((-0.515031836328808)*x2456)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[9]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[10]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[11]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[12]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[13]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[14]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[15]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[16]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[17]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[18]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[19]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[20]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j2;
vinfos[0].indices[0] = _ij2[0];
vinfos[0].indices[1] = _ij2[1];
vinfos[0].maxsolutions = _nj2;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j3;
vinfos[1].indices[0] = _ij3[0];
vinfos[1].indices[1] = _ij3[1];
vinfos[1].maxsolutions = _nj3;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j4;
vinfos[2].indices[0] = _ij4[0];
vinfos[2].indices[1] = _ij4[1];
vinfos[2].maxsolutions = _nj4;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j5;
vinfos[3].indices[0] = _ij5[0];
vinfos[3].indices[1] = _ij5[1];
vinfos[3].maxsolutions = _nj5;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j6;
vinfos[4].indices[0] = _ij6[0];
vinfos[4].indices[1] = _ij6[1];
vinfos[4].maxsolutions = _nj6;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j7;
vinfos[5].indices[0] = _ij7[0];
vinfos[5].indices[1] = _ij7[1];
vinfos[5].maxsolutions = _nj7;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j8;
vinfos[6].indices[0] = _ij8[0];
vinfos[6].indices[1] = _ij8[1];
vinfos[6].maxsolutions = _nj8;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j5array[1], cj5array[1], sj5array[1];
bool j5valid[1]={false};
_nj5 = 1;
IkReal x2468=(gconst11*new_r02);
IkReal x2469=(gconst11*new_r12);
CheckValue<IkReal> x2470 = IKatan2WithCheck(IkReal(((((1.36249153167196e+56)*x2468))+(((2.14681069867194e+56)*x2469)))),IkReal(((((1.36249153167196e+56)*x2469))+(((-2.14681069867194e+56)*x2468)))),IKFAST_ATAN2_MAGTHRESH);
if(!x2470.valid){
continue;
}
CheckValue<IkReal> x2471=IKPowWithIntegerCheck(IKsign(((((-2.56196288697451e+56)*(new_r02*new_r02)))+(((-2.56196288697451e+56)*(new_r12*new_r12))))),-1);
if(!x2471.valid){
continue;
}
j5array[0]=((-1.5707963267949)+(x2470.value)+(((1.5707963267949)*(x2471.value))));
sj5array[0]=IKsin(j5array[0]);
cj5array[0]=IKcos(j5array[0]);
if( j5array[0] > IKPI )
{
    j5array[0]-=IK2PI;
}
else if( j5array[0] < -IKPI )
{    j5array[0]+=IK2PI;
}
j5valid[0] = true;
for(int ij5 = 0; ij5 < 1; ++ij5)
{
if( !j5valid[ij5] )
{
    continue;
}
_ij5[0] = ij5; _ij5[1] = -1;
for(int iij5 = ij5+1; iij5 < 1; ++iij5)
{
if( j5valid[iij5] && IKabs(cj5array[ij5]-cj5array[iij5]) < IKFAST_SOLUTION_THRESH && IKabs(sj5array[ij5]-sj5array[iij5]) < IKFAST_SOLUTION_THRESH )
{
    j5valid[iij5]=false; _ij5[1] = iij5; break; 
}
}
j5 = j5array[ij5]; cj5 = cj5array[ij5]; sj5 = sj5array[ij5];
{
IkReal evalcond[21];
IkReal x2472=IKcos(j5);
IkReal x2473=IKsin(j5);
IkReal x2474=gconst11*gconst11;
IkReal x2475=((0.276027873078388)*sj3);
IkReal x2476=((0.961149631058464)*cj3);
IkReal x2477=((0.961149631058464)*sj3);
IkReal x2478=((0.276027873078388)*cj3);
IkReal x2479=((0.0630802599313394)*gconst11);
IkReal x2480=((0.531815483588428)*gconst11);
IkReal x2481=(cj3*gconst11);
IkReal x2482=((0.147909480226238)*sj3);
IkReal x2483=((0.0181157120800272)*gconst11);
IkReal x2484=((0.0656300100348293)*gconst11);
IkReal x2485=((0.0994021100426501)*gconst11);
IkReal x2486=((0.028546806998574)*sj3);
IkReal x2487=((0.122486725237355)*gconst11);
IkReal x2488=((0.837955424564001)*gconst11);
IkReal x2489=((0.103420015812922)*gconst11);
IkReal x2490=((0.992470151748698)*gconst11);
IkReal x2491=((0.811511442202281)*x2473);
IkReal x2492=((1.0)*x2473);
IkReal x2493=(cj3*x2472);
IkReal x2494=(new_r02*x2473);
IkReal x2495=(new_r01*x2472);
IkReal x2496=(new_r12*x2472);
IkReal x2497=(cj3*x2473);
IkReal x2498=(new_r10*x2472);
IkReal x2499=(new_r01*x2473);
IkReal x2500=(gconst11*x2473);
IkReal x2501=(sj3*x2472);
IkReal x2502=(new_r11*x2472);
IkReal x2503=(new_r00*x2473);
IkReal x2504=(new_r00*x2472);
IkReal x2505=(sj3*x2473);
IkReal x2506=(new_r02*x2472);
IkReal x2507=((0.535849798705775)*x2473);
IkReal x2508=(x2477+x2478);
evalcond[0]=(x2480+x2494+x2496);
evalcond[1]=(x2506+(((-1.0)*x2488))+(((-1.0)*new_r12*x2492)));
evalcond[2]=(((x2473*x2480))+(((-1.0)*x2472*x2488))+new_r02);
evalcond[3]=(((x2473*x2488))+((x2472*x2480))+new_r12);
evalcond[4]=(x2503+x2498+((cj3*x2479))+(((-0.233054011708033)*cj3))+(((-1.0)*sj3*x2483))+(((-0.811511442202281)*sj3)));
evalcond[5]=(x2502+x2499+(((-0.233054011708033)*sj3))+(((0.811511442202281)*cj3))+((sj3*x2479))+(((0.0181157120800272)*x2481)));
evalcond[6]=(x2504+(((-0.0994021100426501)*x2481))+(((-0.147909480226238)*cj3))+(((-1.0)*new_r10*x2492))+((gconst11*x2486))+(((-0.515031836328808)*sj3)));
evalcond[7]=(x2495+(((0.515031836328808)*cj3))+(((-1.0)*x2482))+(((-1.0)*sj3*x2485))+(((-1.0)*new_r11*x2492))+(((-0.028546806998574)*x2481)));
evalcond[8]=((((-6.54422001705664e-7)*gconst11))+((new_r12*x2507))+(((-0.535849798705775)*x2506))+(((-0.844313326436599)*x2496))+(((-0.844313326436599)*x2494)));
evalcond[9]=((1.0)+((x2480*x2496))+((x2480*x2494))+((new_r12*x2473*x2488))+(((-1.0)*x2488*x2506))+(((-0.0150029978593712)*x2474)));
evalcond[10]=(((x2480*x2498))+(((-1.0)*x2488*x2504))+((new_r20*x2487))+((new_r10*x2473*x2488))+((x2480*x2503)));
evalcond[11]=(((x2480*x2499))+((new_r11*x2473*x2488))+(((-1.0)*x2488*x2495))+((new_r21*x2487))+((x2480*x2502)));
evalcond[12]=(((x2489*x2506))+(((-1.0)*x2484*x2494))+(((-1.0)*x2484*x2496))+(((-0.121564418783519)*x2474))+(((-1.0)*new_r12*x2473*x2489)));
evalcond[13]=(x2508+(((5.34279939673075e-6)*new_r20))+((new_r10*x2507))+(((-0.535849798705775)*x2504))+(((-0.844313326436599)*x2503))+(((-0.844313326436599)*x2498)));
evalcond[14]=(x2475+(((-1.0)*x2476))+(((5.34279939673075e-6)*new_r21))+((new_r11*x2507))+(((-0.535849798705775)*x2495))+(((-0.844313326436599)*x2502))+(((-0.844313326436599)*x2499)));
evalcond[15]=(x2475+(((-1.0)*x2476))+((x2489*x2504))+(((-1.0)*new_r10*x2473*x2489))+((new_r20*x2490))+(((-1.0)*x2484*x2498))+(((-1.0)*x2484*x2503)));
evalcond[16]=((((-1.0)*x2508))+(((-1.0)*new_r11*x2473*x2489))+(((-1.0)*x2484*x2499))+(((-1.0)*x2484*x2502))+((new_r21*x2490))+((x2489*x2495)));
evalcond[17]=((((-0.0994021100426501)*x2472*x2481))+(((-1.0)*sj3*x2491))+(((-0.233054011708033)*x2497))+(((-0.515031836328808)*x2501))+((gconst11*x2472*x2486))+new_r00+(((-1.0)*x2483*x2505))+((x2479*x2497))+(((-0.147909480226238)*x2493)));
evalcond[18]=(((cj3*x2491))+(((-0.233054011708033)*x2505))+(((-1.0)*x2485*x2501))+(((-1.0)*x2472*x2482))+(((-0.028546806998574)*x2472*x2481))+(((0.0181157120800272)*x2473*x2481))+new_r01+(((0.515031836328808)*x2493))+((x2479*x2505)));
evalcond[19]=((((0.515031836328808)*x2505))+(((0.0994021100426501)*x2473*x2481))+(((-0.811511442202281)*x2501))+(((-1.0)*x2486*x2500))+(((-0.233054011708033)*x2493))+(((0.147909480226238)*x2497))+new_r10+(((-1.0)*x2483*x2501))+((x2479*x2493)));
evalcond[20]=((((-0.515031836328808)*x2497))+(((0.028546806998574)*x2473*x2481))+((x2473*x2482))+(((-0.233054011708033)*x2501))+((x2485*x2505))+new_r11+(((0.0181157120800272)*x2472*x2481))+(((0.811511442202281)*x2493))+((x2479*x2501)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[9]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[10]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[11]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[12]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[13]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[14]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[15]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[16]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[17]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[18]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[19]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[20]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j2;
vinfos[0].indices[0] = _ij2[0];
vinfos[0].indices[1] = _ij2[1];
vinfos[0].maxsolutions = _nj2;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j3;
vinfos[1].indices[0] = _ij3[0];
vinfos[1].indices[1] = _ij3[1];
vinfos[1].maxsolutions = _nj3;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j4;
vinfos[2].indices[0] = _ij4[0];
vinfos[2].indices[1] = _ij4[1];
vinfos[2].maxsolutions = _nj4;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j5;
vinfos[3].indices[0] = _ij5[0];
vinfos[3].indices[1] = _ij5[1];
vinfos[3].maxsolutions = _nj5;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j6;
vinfos[4].indices[0] = _ij6[0];
vinfos[4].indices[1] = _ij6[1];
vinfos[4].maxsolutions = _nj6;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j7;
vinfos[5].indices[0] = _ij7[0];
vinfos[5].indices[1] = _ij7[1];
vinfos[5].maxsolutions = _nj7;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j8;
vinfos[6].indices[0] = _ij8[0];
vinfos[6].indices[1] = _ij8[1];
vinfos[6].maxsolutions = _nj8;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}
}
}

}

}

} else
{
{
IkReal j5array[1], cj5array[1], sj5array[1];
bool j5valid[1]={false};
_nj5 = 1;
IkReal x2509=gconst11*gconst11;
CheckValue<IkReal> x2510=IKPowWithIntegerCheck(IKsign(((((6.24024889090152e+76)*gconst11*new_r02))+(((-9.83245236388639e+76)*gconst11*new_r12)))),-1);
if(!x2510.valid){
continue;
}
CheckValue<IkReal> x2511 = IKatan2WithCheck(IkReal(((((8.23915679508573e+76)*x2509))+(((-1.173386086617e+77)*(new_r02*new_r02))))),IkReal(((((5.22905040876042e+76)*x2509))+(((-1.173386086617e+77)*new_r02*new_r12)))),IKFAST_ATAN2_MAGTHRESH);
if(!x2511.valid){
continue;
}
j5array[0]=((-1.5707963267949)+(((1.5707963267949)*(x2510.value)))+(x2511.value));
sj5array[0]=IKsin(j5array[0]);
cj5array[0]=IKcos(j5array[0]);
if( j5array[0] > IKPI )
{
    j5array[0]-=IK2PI;
}
else if( j5array[0] < -IKPI )
{    j5array[0]+=IK2PI;
}
j5valid[0] = true;
for(int ij5 = 0; ij5 < 1; ++ij5)
{
if( !j5valid[ij5] )
{
    continue;
}
_ij5[0] = ij5; _ij5[1] = -1;
for(int iij5 = ij5+1; iij5 < 1; ++iij5)
{
if( j5valid[iij5] && IKabs(cj5array[ij5]-cj5array[iij5]) < IKFAST_SOLUTION_THRESH && IKabs(sj5array[ij5]-sj5array[iij5]) < IKFAST_SOLUTION_THRESH )
{
    j5valid[iij5]=false; _ij5[1] = iij5; break; 
}
}
j5 = j5array[ij5]; cj5 = cj5array[ij5]; sj5 = sj5array[ij5];
{
IkReal evalcond[9];
IkReal x2512=IKcos(j5);
IkReal x2513=IKsin(j5);
IkReal x2514=gconst11*gconst11;
IkReal x2515=((0.837955424564001)*gconst11);
IkReal x2516=((0.122486725237355)*gconst11);
IkReal x2517=(new_r02*x2512);
IkReal x2518=(gconst11*x2512);
IkReal x2519=(gconst11*x2513);
IkReal x2520=(new_r12*x2513);
IkReal x2521=(new_r12*x2512);
IkReal x2522=(new_r02*x2513);
evalcond[0]=(x2521+x2522+(((0.531815483588428)*gconst11)));
evalcond[1]=(x2517+(((-1.0)*x2515))+(((-1.0)*x2520)));
evalcond[2]=((((0.531815483588428)*x2519))+(((-1.0)*x2512*x2515))+new_r02);
evalcond[3]=((((0.531815483588428)*x2518))+((x2513*x2515))+new_r12);
evalcond[4]=((((-6.54422001705664e-7)*gconst11))+(((-0.844313326436599)*x2521))+(((-0.844313326436599)*x2522))+(((0.535849798705775)*x2520))+(((-0.535849798705775)*x2517)));
evalcond[5]=((1.0)+((x2515*x2520))+(((0.531815483588428)*new_r12*x2518))+(((-1.0)*x2515*x2517))+(((-0.0150029978593712)*x2514))+(((0.531815483588428)*new_r02*x2519)));
evalcond[6]=((((0.531815483588428)*new_r10*x2518))+((new_r10*x2513*x2515))+((new_r20*x2516))+(((-1.0)*new_r00*x2512*x2515))+(((0.531815483588428)*new_r00*x2519)));
evalcond[7]=(((new_r21*x2516))+(((0.531815483588428)*new_r11*x2518))+((new_r11*x2513*x2515))+(((-1.0)*new_r01*x2512*x2515))+(((0.531815483588428)*new_r01*x2519)));
evalcond[8]=((((-0.121564418783519)*x2514))+(((-0.0656300100348293)*new_r02*x2519))+(((0.103420015812922)*gconst11*x2517))+(((-0.103420015812922)*new_r12*x2519))+(((-0.0656300100348293)*new_r12*x2518)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j3eval[2];
IkReal x2523=x2350;
sj4=gconst10;
cj4=gconst11;
j4=nan;
CheckValue<IkReal> x2524 = IKatan2WithCheck(IkReal(((((-12.7678698223466)*new_r12))+(((8.1032363594977)*new_r02)))),IkReal(x2523),IKFAST_ATAN2_MAGTHRESH);
if(!x2524.valid){
continue;
}
IkReal gconst9=((3.14159265358979)+(((-1.0)*(x2524.value))));
IkReal gconst10=0;
IkReal x2525 = x2523*x2523;
if(IKabs(x2525)==0){
continue;
}
IkReal gconst11=((-1.0)*x2523*(pow(x2525,-0.5)));
j3eval[0]=34506202940.0186;
j3eval[1]=1.0;
if( IKabs(j3eval[0]) < 0.0000010000000000  || IKabs(j3eval[1]) < 0.0000010000000000  )
{
{
IkReal j3array[1], cj3array[1], sj3array[1];
bool j3valid[1]={false};
_nj3 = 1;
IkReal x2526=(cj5*new_r10);
IkReal x2527=(gconst11*new_r20);
IkReal x2528=(new_r00*sj5);
IkReal x2529=(gconst11*x2528);
CheckValue<IkReal> x2530=IKPowWithIntegerCheck(IKsign(gconst11),-1);
if(!x2530.valid){
continue;
}
CheckValue<IkReal> x2531 = IKatan2WithCheck(IkReal(((((0.953912320189798)*x2529))+(((0.0630802599313394)*x2527))+(((0.953912320189798)*gconst11*x2526))+(((-1.47476155376408e-6)*x2528))+(((-1.47476155376408e-6)*x2526))+(((-0.233054011708033)*new_r20)))),IkReal(((((0.811511442202281)*new_r20))+(((0.273949425080978)*gconst11*x2526))+(((5.13522966898714e-6)*x2526))+(((5.13522966898714e-6)*x2528))+(((0.0181157120800272)*x2527))+(((0.273949425080978)*x2529)))),IKFAST_ATAN2_MAGTHRESH);
if(!x2531.valid){
continue;
}
j3array[0]=((-1.5707963267949)+(((1.5707963267949)*(x2530.value)))+(x2531.value));
sj3array[0]=IKsin(j3array[0]);
cj3array[0]=IKcos(j3array[0]);
if( j3array[0] > IKPI )
{
    j3array[0]-=IK2PI;
}
else if( j3array[0] < -IKPI )
{    j3array[0]+=IK2PI;
}
j3valid[0] = true;
for(int ij3 = 0; ij3 < 1; ++ij3)
{
if( !j3valid[ij3] )
{
    continue;
}
_ij3[0] = ij3; _ij3[1] = -1;
for(int iij3 = ij3+1; iij3 < 1; ++iij3)
{
if( j3valid[iij3] && IKabs(cj3array[ij3]-cj3array[iij3]) < IKFAST_SOLUTION_THRESH && IKabs(sj3array[ij3]-sj3array[iij3]) < IKFAST_SOLUTION_THRESH )
{
    j3valid[iij3]=false; _ij3[1] = iij3; break; 
}
}
j3 = j3array[ij3]; cj3 = cj3array[ij3]; sj3 = sj3array[ij3];
{
IkReal evalcond[14];
IkReal x2532=IKsin(j3);
IkReal x2533=IKcos(j3);
IkReal x2534=(new_r10*sj5);
IkReal x2535=(cj5*gconst11);
IkReal x2536=(cj5*new_r01);
IkReal x2537=(gconst11*sj5);
IkReal x2538=((0.515031836328808)*sj5);
IkReal x2539=(new_r01*sj5);
IkReal x2540=(new_r00*sj5);
IkReal x2541=(new_r11*sj5);
IkReal x2542=(cj5*new_r00);
IkReal x2543=((0.844313326436599)*cj5);
IkReal x2544=((0.992470151748698)*gconst11);
IkReal x2545=((0.276027873078388)*x2532);
IkReal x2546=((0.961149631058464)*x2533);
IkReal x2547=((0.276027873078388)*x2533);
IkReal x2548=((0.961149631058464)*x2532);
IkReal x2549=((0.147909480226238)*x2533);
IkReal x2550=(cj5*x2532);
IkReal x2551=((0.0181157120800272)*x2532);
IkReal x2552=((0.0994021100426501)*x2532);
IkReal x2553=(gconst11*x2533);
IkReal x2554=((0.0994021100426501)*x2533);
IkReal x2555=(gconst11*x2532);
IkReal x2556=((0.147909480226238)*x2532);
IkReal x2557=((0.028546806998574)*x2532);
IkReal x2558=(sj5*x2532);
IkReal x2559=((0.811511442202281)*x2533);
IkReal x2560=((0.0630802599313394)*x2532);
IkReal x2561=(cj5*x2533);
IkReal x2562=((0.0181157120800272)*x2533);
IkReal x2563=((0.028546806998574)*x2533);
IkReal x2564=((0.0630802599313394)*x2533);
IkReal x2565=(x2547+x2548);
evalcond[0]=((((-0.953912320189798)*x2553))+(((0.273949425080978)*x2555))+(((5.13522966898714e-6)*x2532))+(((1.47476155376408e-6)*x2533))+new_r20);
evalcond[1]=((((-0.953912320189798)*x2555))+(((1.47476155376408e-6)*x2532))+(((-5.13522966898714e-6)*x2533))+(((-0.273949425080978)*x2553))+new_r21);
evalcond[2]=(x2540+(((-1.0)*gconst11*x2551))+(((0.0630802599313394)*x2553))+((cj5*new_r10))+(((-0.811511442202281)*x2532))+(((-0.233054011708033)*x2533)));
evalcond[3]=(x2559+x2539+(((0.0630802599313394)*x2555))+((cj5*new_r11))+(((-0.233054011708033)*x2532))+(((0.0181157120800272)*x2553)));
evalcond[4]=(x2542+(((0.028546806998574)*x2555))+(((-1.0)*x2549))+(((-1.0)*x2534))+(((-0.0994021100426501)*x2553))+(((-0.515031836328808)*x2532)));
evalcond[5]=(x2536+(((-1.0)*gconst11*x2552))+(((0.515031836328808)*x2533))+(((-0.028546806998574)*x2553))+(((-1.0)*x2541))+(((-1.0)*x2556)));
evalcond[6]=((((0.535849798705775)*x2534))+x2565+(((-1.0)*new_r10*x2543))+(((5.34279939673075e-6)*new_r20))+(((-0.844313326436599)*x2540))+(((-0.535849798705775)*x2542)));
evalcond[7]=(x2545+(((-1.0)*new_r11*x2543))+(((-0.535849798705775)*x2536))+(((5.34279939673075e-6)*new_r21))+(((0.535849798705775)*x2541))+(((-1.0)*x2546))+(((-0.844313326436599)*x2539)));
evalcond[8]=(x2545+(((-0.0656300100348293)*new_r10*x2535))+(((0.103420015812922)*new_r00*x2535))+((new_r20*x2544))+(((-0.0656300100348293)*new_r00*x2537))+(((-1.0)*x2546))+(((-0.103420015812922)*gconst11*x2534)));
evalcond[9]=((((-0.103420015812922)*new_r11*x2537))+(((-0.0656300100348293)*new_r11*x2535))+(((-1.0)*x2565))+(((0.103420015812922)*new_r01*x2535))+(((-0.0656300100348293)*new_r01*x2537))+((new_r21*x2544)));
evalcond[10]=((((-0.515031836328808)*x2550))+((x2535*x2557))+(((-0.233054011708033)*sj5*x2533))+((x2537*x2564))+new_r00+(((-1.0)*cj5*x2549))+(((-1.0)*x2537*x2551))+(((-0.811511442202281)*x2558))+(((-1.0)*x2535*x2554)));
evalcond[11]=((((0.515031836328808)*x2561))+((sj5*x2559))+(((-1.0)*x2535*x2563))+(((-0.233054011708033)*x2558))+((x2537*x2562))+((x2537*x2560))+new_r01+(((-1.0)*x2535*x2552))+(((-0.147909480226238)*x2550)));
evalcond[12]=((((-0.233054011708033)*x2561))+((x2535*x2564))+((x2537*x2554))+((sj5*x2549))+((x2532*x2538))+new_r10+(((-1.0)*x2537*x2557))+(((-0.811511442202281)*x2550))+(((-1.0)*x2535*x2551)));
evalcond[13]=((((-1.0)*x2533*x2538))+((sj5*x2556))+((x2535*x2562))+((x2535*x2560))+((x2537*x2552))+(((-0.233054011708033)*x2550))+((x2537*x2563))+((cj5*x2559))+new_r11);
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[9]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[10]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[11]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[12]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[13]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j2;
vinfos[0].indices[0] = _ij2[0];
vinfos[0].indices[1] = _ij2[1];
vinfos[0].maxsolutions = _nj2;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j3;
vinfos[1].indices[0] = _ij3[0];
vinfos[1].indices[1] = _ij3[1];
vinfos[1].maxsolutions = _nj3;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j4;
vinfos[2].indices[0] = _ij4[0];
vinfos[2].indices[1] = _ij4[1];
vinfos[2].maxsolutions = _nj4;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j5;
vinfos[3].indices[0] = _ij5[0];
vinfos[3].indices[1] = _ij5[1];
vinfos[3].maxsolutions = _nj5;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j6;
vinfos[4].indices[0] = _ij6[0];
vinfos[4].indices[1] = _ij6[1];
vinfos[4].maxsolutions = _nj6;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j7;
vinfos[5].indices[0] = _ij7[0];
vinfos[5].indices[1] = _ij7[1];
vinfos[5].maxsolutions = _nj7;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j8;
vinfos[6].indices[0] = _ij8[0];
vinfos[6].indices[1] = _ij8[1];
vinfos[6].maxsolutions = _nj8;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

} else
{
{
IkReal j3array[1], cj3array[1], sj3array[1];
bool j3valid[1]={false};
_nj3 = 1;
IkReal x2566=(gconst11*new_r21);
IkReal x2567=(gconst11*new_r20);
CheckValue<IkReal> x2568 = IKatan2WithCheck(IkReal(((((-5.13522966898714e-6)*new_r20))+(((-1.47476155376408e-6)*new_r21))+(((0.953912320189798)*x2566))+(((-0.273949425080978)*x2567)))),IkReal(((((5.13522966898714e-6)*new_r21))+(((-1.47476155376408e-6)*new_r20))+(((0.273949425080978)*x2566))+(((0.953912320189798)*x2567)))),IKFAST_ATAN2_MAGTHRESH);
if(!x2568.valid){
continue;
}
CheckValue<IkReal> x2569=IKPowWithIntegerCheck(IKsign(((2.85455053937064e-11)+(((0.984997002112083)*(gconst11*gconst11))))),-1);
if(!x2569.valid){
continue;
}
j3array[0]=((-1.5707963267949)+(x2568.value)+(((1.5707963267949)*(x2569.value))));
sj3array[0]=IKsin(j3array[0]);
cj3array[0]=IKcos(j3array[0]);
if( j3array[0] > IKPI )
{
    j3array[0]-=IK2PI;
}
else if( j3array[0] < -IKPI )
{    j3array[0]+=IK2PI;
}
j3valid[0] = true;
for(int ij3 = 0; ij3 < 1; ++ij3)
{
if( !j3valid[ij3] )
{
    continue;
}
_ij3[0] = ij3; _ij3[1] = -1;
for(int iij3 = ij3+1; iij3 < 1; ++iij3)
{
if( j3valid[iij3] && IKabs(cj3array[ij3]-cj3array[iij3]) < IKFAST_SOLUTION_THRESH && IKabs(sj3array[ij3]-sj3array[iij3]) < IKFAST_SOLUTION_THRESH )
{
    j3valid[iij3]=false; _ij3[1] = iij3; break; 
}
}
j3 = j3array[ij3]; cj3 = cj3array[ij3]; sj3 = sj3array[ij3];
{
IkReal evalcond[14];
IkReal x2570=IKsin(j3);
IkReal x2571=IKcos(j3);
IkReal x2572=(new_r10*sj5);
IkReal x2573=(cj5*gconst11);
IkReal x2574=(cj5*new_r01);
IkReal x2575=(gconst11*sj5);
IkReal x2576=((0.515031836328808)*sj5);
IkReal x2577=(new_r01*sj5);
IkReal x2578=(new_r00*sj5);
IkReal x2579=(new_r11*sj5);
IkReal x2580=(cj5*new_r00);
IkReal x2581=((0.844313326436599)*cj5);
IkReal x2582=((0.992470151748698)*gconst11);
IkReal x2583=((0.276027873078388)*x2570);
IkReal x2584=((0.961149631058464)*x2571);
IkReal x2585=((0.276027873078388)*x2571);
IkReal x2586=((0.961149631058464)*x2570);
IkReal x2587=((0.147909480226238)*x2571);
IkReal x2588=(cj5*x2570);
IkReal x2589=((0.0181157120800272)*x2570);
IkReal x2590=((0.0994021100426501)*x2570);
IkReal x2591=(gconst11*x2571);
IkReal x2592=((0.0994021100426501)*x2571);
IkReal x2593=(gconst11*x2570);
IkReal x2594=((0.147909480226238)*x2570);
IkReal x2595=((0.028546806998574)*x2570);
IkReal x2596=(sj5*x2570);
IkReal x2597=((0.811511442202281)*x2571);
IkReal x2598=((0.0630802599313394)*x2570);
IkReal x2599=(cj5*x2571);
IkReal x2600=((0.0181157120800272)*x2571);
IkReal x2601=((0.028546806998574)*x2571);
IkReal x2602=((0.0630802599313394)*x2571);
IkReal x2603=(x2586+x2585);
evalcond[0]=((((-0.953912320189798)*x2591))+(((0.273949425080978)*x2593))+(((1.47476155376408e-6)*x2571))+(((5.13522966898714e-6)*x2570))+new_r20);
evalcond[1]=((((-0.953912320189798)*x2593))+(((1.47476155376408e-6)*x2570))+new_r21+(((-5.13522966898714e-6)*x2571))+(((-0.273949425080978)*x2591)));
evalcond[2]=((((-0.233054011708033)*x2571))+x2578+((cj5*new_r10))+(((0.0630802599313394)*x2591))+(((-1.0)*gconst11*x2589))+(((-0.811511442202281)*x2570)));
evalcond[3]=((((-0.233054011708033)*x2570))+x2597+x2577+((cj5*new_r11))+(((0.0630802599313394)*x2593))+(((0.0181157120800272)*x2591)));
evalcond[4]=(x2580+(((-0.0994021100426501)*x2591))+(((-0.515031836328808)*x2570))+(((-1.0)*x2587))+(((-1.0)*x2572))+(((0.028546806998574)*x2593)));
evalcond[5]=(x2574+(((-1.0)*x2594))+(((-1.0)*x2579))+(((-1.0)*gconst11*x2590))+(((0.515031836328808)*x2571))+(((-0.028546806998574)*x2591)));
evalcond[6]=((((-1.0)*new_r10*x2581))+(((5.34279939673075e-6)*new_r20))+(((-0.844313326436599)*x2578))+(((0.535849798705775)*x2572))+(((-0.535849798705775)*x2580))+x2603);
evalcond[7]=(x2583+(((-1.0)*x2584))+(((5.34279939673075e-6)*new_r21))+(((-0.844313326436599)*x2577))+(((0.535849798705775)*x2579))+(((-0.535849798705775)*x2574))+(((-1.0)*new_r11*x2581)));
evalcond[8]=(x2583+((new_r20*x2582))+(((-1.0)*x2584))+(((-0.103420015812922)*gconst11*x2572))+(((-0.0656300100348293)*new_r10*x2573))+(((0.103420015812922)*new_r00*x2573))+(((-0.0656300100348293)*new_r00*x2575)));
evalcond[9]=((((-0.103420015812922)*new_r11*x2575))+(((-0.0656300100348293)*new_r11*x2573))+((new_r21*x2582))+(((-0.0656300100348293)*new_r01*x2575))+(((-1.0)*x2603))+(((0.103420015812922)*new_r01*x2573)));
evalcond[10]=((((-0.811511442202281)*x2596))+(((-1.0)*x2573*x2592))+((x2575*x2602))+(((-0.515031836328808)*x2588))+((x2573*x2595))+(((-0.233054011708033)*sj5*x2571))+new_r00+(((-1.0)*x2575*x2589))+(((-1.0)*cj5*x2587)));
evalcond[11]=((((-0.233054011708033)*x2596))+(((0.515031836328808)*x2599))+((sj5*x2597))+(((-1.0)*x2573*x2590))+((x2575*x2600))+(((-1.0)*x2573*x2601))+((x2575*x2598))+new_r01+(((-0.147909480226238)*x2588)));
evalcond[12]=(((sj5*x2587))+(((-1.0)*x2573*x2589))+(((-0.233054011708033)*x2599))+(((-0.811511442202281)*x2588))+((x2573*x2602))+((x2575*x2592))+new_r10+(((-1.0)*x2575*x2595))+((x2570*x2576)));
evalcond[13]=((((-0.233054011708033)*x2588))+((sj5*x2594))+(((-1.0)*x2571*x2576))+((x2575*x2601))+((x2573*x2600))+((x2575*x2590))+((x2573*x2598))+new_r11+((cj5*x2597)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[9]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[10]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[11]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[12]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[13]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j2;
vinfos[0].indices[0] = _ij2[0];
vinfos[0].indices[1] = _ij2[1];
vinfos[0].maxsolutions = _nj2;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j3;
vinfos[1].indices[0] = _ij3[0];
vinfos[1].indices[1] = _ij3[1];
vinfos[1].maxsolutions = _nj3;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j4;
vinfos[2].indices[0] = _ij4[0];
vinfos[2].indices[1] = _ij4[1];
vinfos[2].maxsolutions = _nj4;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j5;
vinfos[3].indices[0] = _ij5[0];
vinfos[3].indices[1] = _ij5[1];
vinfos[3].maxsolutions = _nj5;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j6;
vinfos[4].indices[0] = _ij6[0];
vinfos[4].indices[1] = _ij6[1];
vinfos[4].maxsolutions = _nj6;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j7;
vinfos[5].indices[0] = _ij7[0];
vinfos[5].indices[1] = _ij7[1];
vinfos[5].maxsolutions = _nj7;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j8;
vinfos[6].indices[0] = _ij8[0];
vinfos[6].indices[1] = _ij8[1];
vinfos[6].maxsolutions = _nj8;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}
}
}

}

}

} else
{
{
IkReal j5array[1], cj5array[1], sj5array[1];
bool j5valid[1]={false};
_nj5 = 1;
IkReal x2604=(gconst11*new_r02);
IkReal x2605=(gconst11*new_r12);
CheckValue<IkReal> x2606 = IKatan2WithCheck(IkReal(((((1.36249153167196e+56)*x2604))+(((2.14681069867194e+56)*x2605)))),IkReal(((((1.36249153167196e+56)*x2605))+(((-2.14681069867194e+56)*x2604)))),IKFAST_ATAN2_MAGTHRESH);
if(!x2606.valid){
continue;
}
CheckValue<IkReal> x2607=IKPowWithIntegerCheck(IKsign(((((-2.56196288697451e+56)*(new_r02*new_r02)))+(((-2.56196288697451e+56)*(new_r12*new_r12))))),-1);
if(!x2607.valid){
continue;
}
j5array[0]=((-1.5707963267949)+(x2606.value)+(((1.5707963267949)*(x2607.value))));
sj5array[0]=IKsin(j5array[0]);
cj5array[0]=IKcos(j5array[0]);
if( j5array[0] > IKPI )
{
    j5array[0]-=IK2PI;
}
else if( j5array[0] < -IKPI )
{    j5array[0]+=IK2PI;
}
j5valid[0] = true;
for(int ij5 = 0; ij5 < 1; ++ij5)
{
if( !j5valid[ij5] )
{
    continue;
}
_ij5[0] = ij5; _ij5[1] = -1;
for(int iij5 = ij5+1; iij5 < 1; ++iij5)
{
if( j5valid[iij5] && IKabs(cj5array[ij5]-cj5array[iij5]) < IKFAST_SOLUTION_THRESH && IKabs(sj5array[ij5]-sj5array[iij5]) < IKFAST_SOLUTION_THRESH )
{
    j5valid[iij5]=false; _ij5[1] = iij5; break; 
}
}
j5 = j5array[ij5]; cj5 = cj5array[ij5]; sj5 = sj5array[ij5];
{
IkReal evalcond[9];
IkReal x2608=IKcos(j5);
IkReal x2609=IKsin(j5);
IkReal x2610=gconst11*gconst11;
IkReal x2611=((0.837955424564001)*gconst11);
IkReal x2612=((0.122486725237355)*gconst11);
IkReal x2613=(new_r02*x2608);
IkReal x2614=(gconst11*x2608);
IkReal x2615=(gconst11*x2609);
IkReal x2616=(new_r12*x2609);
IkReal x2617=(new_r12*x2608);
IkReal x2618=(new_r02*x2609);
evalcond[0]=((((0.531815483588428)*gconst11))+x2617+x2618);
evalcond[1]=((((-1.0)*x2616))+(((-1.0)*x2611))+x2613);
evalcond[2]=((((-1.0)*x2608*x2611))+new_r02+(((0.531815483588428)*x2615)));
evalcond[3]=(((x2609*x2611))+new_r12+(((0.531815483588428)*x2614)));
evalcond[4]=((((0.535849798705775)*x2616))+(((-6.54422001705664e-7)*gconst11))+(((-0.535849798705775)*x2613))+(((-0.844313326436599)*x2617))+(((-0.844313326436599)*x2618)));
evalcond[5]=((1.0)+(((-1.0)*x2611*x2613))+(((-0.0150029978593712)*x2610))+(((0.531815483588428)*new_r02*x2615))+(((0.531815483588428)*new_r12*x2614))+((x2611*x2616)));
evalcond[6]=(((new_r20*x2612))+(((0.531815483588428)*new_r00*x2615))+(((0.531815483588428)*new_r10*x2614))+(((-1.0)*new_r00*x2608*x2611))+((new_r10*x2609*x2611)));
evalcond[7]=(((new_r11*x2609*x2611))+((new_r21*x2612))+(((0.531815483588428)*new_r01*x2615))+(((0.531815483588428)*new_r11*x2614))+(((-1.0)*new_r01*x2608*x2611)));
evalcond[8]=((((0.103420015812922)*gconst11*x2613))+(((-0.103420015812922)*new_r12*x2615))+(((-0.121564418783519)*x2610))+(((-0.0656300100348293)*new_r12*x2614))+(((-0.0656300100348293)*new_r02*x2615)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j3eval[2];
IkReal x2619=x2350;
sj4=gconst10;
cj4=gconst11;
j4=nan;
CheckValue<IkReal> x2620 = IKatan2WithCheck(IkReal(((((-12.7678698223466)*new_r12))+(((8.1032363594977)*new_r02)))),IkReal(x2619),IKFAST_ATAN2_MAGTHRESH);
if(!x2620.valid){
continue;
}
IkReal gconst9=((3.14159265358979)+(((-1.0)*(x2620.value))));
IkReal gconst10=0;
IkReal x2621 = x2619*x2619;
if(IKabs(x2621)==0){
continue;
}
IkReal gconst11=((-1.0)*x2619*(pow(x2621,-0.5)));
j3eval[0]=34506202940.0186;
j3eval[1]=1.0;
if( IKabs(j3eval[0]) < 0.0000010000000000  || IKabs(j3eval[1]) < 0.0000010000000000  )
{
{
IkReal j3array[1], cj3array[1], sj3array[1];
bool j3valid[1]={false};
_nj3 = 1;
IkReal x2622=(cj5*new_r10);
IkReal x2623=(gconst11*new_r20);
IkReal x2624=(new_r00*sj5);
IkReal x2625=(gconst11*x2624);
CheckValue<IkReal> x2626=IKPowWithIntegerCheck(IKsign(gconst11),-1);
if(!x2626.valid){
continue;
}
CheckValue<IkReal> x2627 = IKatan2WithCheck(IkReal(((((0.0630802599313394)*x2623))+(((0.953912320189798)*x2625))+(((0.953912320189798)*gconst11*x2622))+(((-1.47476155376408e-6)*x2622))+(((-1.47476155376408e-6)*x2624))+(((-0.233054011708033)*new_r20)))),IkReal(((((0.0181157120800272)*x2623))+(((0.273949425080978)*gconst11*x2622))+(((5.13522966898714e-6)*x2624))+(((5.13522966898714e-6)*x2622))+(((0.273949425080978)*x2625))+(((0.811511442202281)*new_r20)))),IKFAST_ATAN2_MAGTHRESH);
if(!x2627.valid){
continue;
}
j3array[0]=((-1.5707963267949)+(((1.5707963267949)*(x2626.value)))+(x2627.value));
sj3array[0]=IKsin(j3array[0]);
cj3array[0]=IKcos(j3array[0]);
if( j3array[0] > IKPI )
{
    j3array[0]-=IK2PI;
}
else if( j3array[0] < -IKPI )
{    j3array[0]+=IK2PI;
}
j3valid[0] = true;
for(int ij3 = 0; ij3 < 1; ++ij3)
{
if( !j3valid[ij3] )
{
    continue;
}
_ij3[0] = ij3; _ij3[1] = -1;
for(int iij3 = ij3+1; iij3 < 1; ++iij3)
{
if( j3valid[iij3] && IKabs(cj3array[ij3]-cj3array[iij3]) < IKFAST_SOLUTION_THRESH && IKabs(sj3array[ij3]-sj3array[iij3]) < IKFAST_SOLUTION_THRESH )
{
    j3valid[iij3]=false; _ij3[1] = iij3; break; 
}
}
j3 = j3array[ij3]; cj3 = cj3array[ij3]; sj3 = sj3array[ij3];
{
IkReal evalcond[14];
IkReal x2628=IKsin(j3);
IkReal x2629=IKcos(j3);
IkReal x2630=(new_r10*sj5);
IkReal x2631=(cj5*gconst11);
IkReal x2632=(cj5*new_r01);
IkReal x2633=(gconst11*sj5);
IkReal x2634=((0.515031836328808)*sj5);
IkReal x2635=(new_r01*sj5);
IkReal x2636=(new_r00*sj5);
IkReal x2637=(new_r11*sj5);
IkReal x2638=(cj5*new_r00);
IkReal x2639=((0.844313326436599)*cj5);
IkReal x2640=((0.992470151748698)*gconst11);
IkReal x2641=((0.276027873078388)*x2628);
IkReal x2642=((0.961149631058464)*x2629);
IkReal x2643=((0.276027873078388)*x2629);
IkReal x2644=((0.961149631058464)*x2628);
IkReal x2645=((0.147909480226238)*x2629);
IkReal x2646=(cj5*x2628);
IkReal x2647=((0.0181157120800272)*x2628);
IkReal x2648=((0.0994021100426501)*x2628);
IkReal x2649=(gconst11*x2629);
IkReal x2650=((0.0994021100426501)*x2629);
IkReal x2651=(gconst11*x2628);
IkReal x2652=((0.147909480226238)*x2628);
IkReal x2653=((0.028546806998574)*x2628);
IkReal x2654=(sj5*x2628);
IkReal x2655=((0.811511442202281)*x2629);
IkReal x2656=((0.0630802599313394)*x2628);
IkReal x2657=(cj5*x2629);
IkReal x2658=((0.0181157120800272)*x2629);
IkReal x2659=((0.028546806998574)*x2629);
IkReal x2660=((0.0630802599313394)*x2629);
IkReal x2661=(x2643+x2644);
evalcond[0]=((((5.13522966898714e-6)*x2628))+(((-0.953912320189798)*x2649))+(((1.47476155376408e-6)*x2629))+new_r20+(((0.273949425080978)*x2651)));
evalcond[1]=((((-0.953912320189798)*x2651))+(((1.47476155376408e-6)*x2628))+new_r21+(((-5.13522966898714e-6)*x2629))+(((-0.273949425080978)*x2649)));
evalcond[2]=((((-1.0)*gconst11*x2647))+((cj5*new_r10))+(((0.0630802599313394)*x2649))+(((-0.233054011708033)*x2629))+(((-0.811511442202281)*x2628))+x2636);
evalcond[3]=(((cj5*new_r11))+(((0.0630802599313394)*x2651))+(((-0.233054011708033)*x2628))+(((0.0181157120800272)*x2649))+x2635+x2655);
evalcond[4]=((((-1.0)*x2645))+(((-1.0)*x2630))+(((0.028546806998574)*x2651))+(((-0.515031836328808)*x2628))+(((-0.0994021100426501)*x2649))+x2638);
evalcond[5]=((((-1.0)*gconst11*x2648))+(((-0.028546806998574)*x2649))+(((-1.0)*x2652))+(((-1.0)*x2637))+x2632+(((0.515031836328808)*x2629)));
evalcond[6]=((((-0.844313326436599)*x2636))+(((5.34279939673075e-6)*new_r20))+(((-1.0)*new_r10*x2639))+(((0.535849798705775)*x2630))+(((-0.535849798705775)*x2638))+x2661);
evalcond[7]=((((-0.844313326436599)*x2635))+(((5.34279939673075e-6)*new_r21))+(((-1.0)*new_r11*x2639))+(((0.535849798705775)*x2637))+(((-1.0)*x2642))+(((-0.535849798705775)*x2632))+x2641);
evalcond[8]=((((-0.0656300100348293)*new_r10*x2631))+((new_r20*x2640))+(((-0.0656300100348293)*new_r00*x2633))+(((0.103420015812922)*new_r00*x2631))+(((-0.103420015812922)*gconst11*x2630))+(((-1.0)*x2642))+x2641);
evalcond[9]=((((-0.0656300100348293)*new_r11*x2631))+(((0.103420015812922)*new_r01*x2631))+((new_r21*x2640))+(((-0.0656300100348293)*new_r01*x2633))+(((-1.0)*x2661))+(((-0.103420015812922)*new_r11*x2633)));
evalcond[10]=((((-0.515031836328808)*x2646))+(((-0.811511442202281)*x2654))+((x2633*x2660))+((x2631*x2653))+(((-1.0)*cj5*x2645))+(((-0.233054011708033)*sj5*x2629))+new_r00+(((-1.0)*x2633*x2647))+(((-1.0)*x2631*x2650)));
evalcond[11]=((((0.515031836328808)*x2657))+(((-0.233054011708033)*x2654))+((x2633*x2656))+((x2633*x2658))+((sj5*x2655))+new_r01+(((-1.0)*x2631*x2659))+(((-1.0)*x2631*x2648))+(((-0.147909480226238)*x2646)));
evalcond[12]=((((-0.233054011708033)*x2657))+(((-0.811511442202281)*x2646))+((x2628*x2634))+((x2633*x2650))+((x2631*x2660))+((sj5*x2645))+new_r10+(((-1.0)*x2633*x2653))+(((-1.0)*x2631*x2647)));
evalcond[13]=((((-0.233054011708033)*x2646))+((cj5*x2655))+((x2631*x2656))+((x2631*x2658))+(((-1.0)*x2629*x2634))+((x2633*x2659))+((x2633*x2648))+((sj5*x2652))+new_r11);
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[9]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[10]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[11]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[12]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[13]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j2;
vinfos[0].indices[0] = _ij2[0];
vinfos[0].indices[1] = _ij2[1];
vinfos[0].maxsolutions = _nj2;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j3;
vinfos[1].indices[0] = _ij3[0];
vinfos[1].indices[1] = _ij3[1];
vinfos[1].maxsolutions = _nj3;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j4;
vinfos[2].indices[0] = _ij4[0];
vinfos[2].indices[1] = _ij4[1];
vinfos[2].maxsolutions = _nj4;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j5;
vinfos[3].indices[0] = _ij5[0];
vinfos[3].indices[1] = _ij5[1];
vinfos[3].maxsolutions = _nj5;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j6;
vinfos[4].indices[0] = _ij6[0];
vinfos[4].indices[1] = _ij6[1];
vinfos[4].maxsolutions = _nj6;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j7;
vinfos[5].indices[0] = _ij7[0];
vinfos[5].indices[1] = _ij7[1];
vinfos[5].maxsolutions = _nj7;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j8;
vinfos[6].indices[0] = _ij8[0];
vinfos[6].indices[1] = _ij8[1];
vinfos[6].maxsolutions = _nj8;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

} else
{
{
IkReal j3array[1], cj3array[1], sj3array[1];
bool j3valid[1]={false};
_nj3 = 1;
IkReal x2662=(gconst11*new_r21);
IkReal x2663=(gconst11*new_r20);
CheckValue<IkReal> x2664=IKPowWithIntegerCheck(IKsign(((2.85455053937064e-11)+(((0.984997002112083)*(gconst11*gconst11))))),-1);
if(!x2664.valid){
continue;
}
CheckValue<IkReal> x2665 = IKatan2WithCheck(IkReal(((((0.953912320189798)*x2662))+(((-5.13522966898714e-6)*new_r20))+(((-1.47476155376408e-6)*new_r21))+(((-0.273949425080978)*x2663)))),IkReal(((((0.953912320189798)*x2663))+(((0.273949425080978)*x2662))+(((5.13522966898714e-6)*new_r21))+(((-1.47476155376408e-6)*new_r20)))),IKFAST_ATAN2_MAGTHRESH);
if(!x2665.valid){
continue;
}
j3array[0]=((-1.5707963267949)+(((1.5707963267949)*(x2664.value)))+(x2665.value));
sj3array[0]=IKsin(j3array[0]);
cj3array[0]=IKcos(j3array[0]);
if( j3array[0] > IKPI )
{
    j3array[0]-=IK2PI;
}
else if( j3array[0] < -IKPI )
{    j3array[0]+=IK2PI;
}
j3valid[0] = true;
for(int ij3 = 0; ij3 < 1; ++ij3)
{
if( !j3valid[ij3] )
{
    continue;
}
_ij3[0] = ij3; _ij3[1] = -1;
for(int iij3 = ij3+1; iij3 < 1; ++iij3)
{
if( j3valid[iij3] && IKabs(cj3array[ij3]-cj3array[iij3]) < IKFAST_SOLUTION_THRESH && IKabs(sj3array[ij3]-sj3array[iij3]) < IKFAST_SOLUTION_THRESH )
{
    j3valid[iij3]=false; _ij3[1] = iij3; break; 
}
}
j3 = j3array[ij3]; cj3 = cj3array[ij3]; sj3 = sj3array[ij3];
{
IkReal evalcond[14];
IkReal x2666=IKsin(j3);
IkReal x2667=IKcos(j3);
IkReal x2668=(new_r10*sj5);
IkReal x2669=(cj5*gconst11);
IkReal x2670=(cj5*new_r01);
IkReal x2671=(gconst11*sj5);
IkReal x2672=((0.515031836328808)*sj5);
IkReal x2673=(new_r01*sj5);
IkReal x2674=(new_r00*sj5);
IkReal x2675=(new_r11*sj5);
IkReal x2676=(cj5*new_r00);
IkReal x2677=((0.844313326436599)*cj5);
IkReal x2678=((0.992470151748698)*gconst11);
IkReal x2679=((0.276027873078388)*x2666);
IkReal x2680=((0.961149631058464)*x2667);
IkReal x2681=((0.276027873078388)*x2667);
IkReal x2682=((0.961149631058464)*x2666);
IkReal x2683=((0.147909480226238)*x2667);
IkReal x2684=(cj5*x2666);
IkReal x2685=((0.0181157120800272)*x2666);
IkReal x2686=((0.0994021100426501)*x2666);
IkReal x2687=(gconst11*x2667);
IkReal x2688=((0.0994021100426501)*x2667);
IkReal x2689=(gconst11*x2666);
IkReal x2690=((0.147909480226238)*x2666);
IkReal x2691=((0.028546806998574)*x2666);
IkReal x2692=(sj5*x2666);
IkReal x2693=((0.811511442202281)*x2667);
IkReal x2694=((0.0630802599313394)*x2666);
IkReal x2695=(cj5*x2667);
IkReal x2696=((0.0181157120800272)*x2667);
IkReal x2697=((0.028546806998574)*x2667);
IkReal x2698=((0.0630802599313394)*x2667);
IkReal x2699=(x2681+x2682);
evalcond[0]=((((1.47476155376408e-6)*x2667))+(((-0.953912320189798)*x2687))+(((0.273949425080978)*x2689))+new_r20+(((5.13522966898714e-6)*x2666)));
evalcond[1]=((((-5.13522966898714e-6)*x2667))+(((1.47476155376408e-6)*x2666))+(((-0.953912320189798)*x2689))+new_r21+(((-0.273949425080978)*x2687)));
evalcond[2]=(((cj5*new_r10))+(((-0.811511442202281)*x2666))+(((-1.0)*gconst11*x2685))+(((-0.233054011708033)*x2667))+(((0.0630802599313394)*x2687))+x2674);
evalcond[3]=(((cj5*new_r11))+(((0.0181157120800272)*x2687))+(((-0.233054011708033)*x2666))+(((0.0630802599313394)*x2689))+x2673+x2693);
evalcond[4]=((((-1.0)*x2668))+(((-0.515031836328808)*x2666))+(((0.028546806998574)*x2689))+(((-1.0)*x2683))+(((-0.0994021100426501)*x2687))+x2676);
evalcond[5]=((((-1.0)*x2675))+(((0.515031836328808)*x2667))+(((-1.0)*gconst11*x2686))+(((-1.0)*x2690))+(((-0.028546806998574)*x2687))+x2670);
evalcond[6]=((((-0.844313326436599)*x2674))+(((5.34279939673075e-6)*new_r20))+(((-1.0)*new_r10*x2677))+(((-0.535849798705775)*x2676))+(((0.535849798705775)*x2668))+x2699);
evalcond[7]=((((-0.844313326436599)*x2673))+(((5.34279939673075e-6)*new_r21))+(((-1.0)*new_r11*x2677))+(((-1.0)*x2680))+(((-0.535849798705775)*x2670))+(((0.535849798705775)*x2675))+x2679);
evalcond[8]=((((-0.0656300100348293)*new_r10*x2669))+((new_r20*x2678))+(((-0.103420015812922)*gconst11*x2668))+(((-0.0656300100348293)*new_r00*x2671))+(((0.103420015812922)*new_r00*x2669))+(((-1.0)*x2680))+x2679);
evalcond[9]=((((-0.0656300100348293)*new_r11*x2669))+(((-1.0)*x2699))+(((-0.0656300100348293)*new_r01*x2671))+(((-0.103420015812922)*new_r11*x2671))+(((0.103420015812922)*new_r01*x2669))+((new_r21*x2678)));
evalcond[10]=((((-0.515031836328808)*x2684))+(((-0.233054011708033)*sj5*x2667))+(((-1.0)*x2671*x2685))+((x2671*x2698))+(((-0.811511442202281)*x2692))+(((-1.0)*x2669*x2688))+new_r00+(((-1.0)*cj5*x2683))+((x2669*x2691)));
evalcond[11]=((((-0.233054011708033)*x2692))+(((-0.147909480226238)*x2684))+((x2671*x2694))+((x2671*x2696))+(((-1.0)*x2669*x2697))+(((0.515031836328808)*x2695))+(((-1.0)*x2669*x2686))+new_r01+((sj5*x2693)));
evalcond[12]=((((-0.233054011708033)*x2695))+(((-1.0)*x2671*x2691))+((x2666*x2672))+((x2671*x2688))+((sj5*x2683))+(((-1.0)*x2669*x2685))+(((-0.811511442202281)*x2684))+new_r10+((x2669*x2698)));
evalcond[13]=((((-0.233054011708033)*x2684))+((cj5*x2693))+((x2671*x2686))+((x2671*x2697))+(((-1.0)*x2667*x2672))+new_r11+((sj5*x2690))+((x2669*x2694))+((x2669*x2696)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[9]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[10]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[11]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[12]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[13]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j2;
vinfos[0].indices[0] = _ij2[0];
vinfos[0].indices[1] = _ij2[1];
vinfos[0].maxsolutions = _nj2;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j3;
vinfos[1].indices[0] = _ij3[0];
vinfos[1].indices[1] = _ij3[1];
vinfos[1].maxsolutions = _nj3;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j4;
vinfos[2].indices[0] = _ij4[0];
vinfos[2].indices[1] = _ij4[1];
vinfos[2].maxsolutions = _nj4;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j5;
vinfos[3].indices[0] = _ij5[0];
vinfos[3].indices[1] = _ij5[1];
vinfos[3].maxsolutions = _nj5;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j6;
vinfos[4].indices[0] = _ij6[0];
vinfos[4].indices[1] = _ij6[1];
vinfos[4].maxsolutions = _nj6;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j7;
vinfos[5].indices[0] = _ij7[0];
vinfos[5].indices[1] = _ij7[1];
vinfos[5].maxsolutions = _nj7;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j8;
vinfos[6].indices[0] = _ij8[0];
vinfos[6].indices[1] = _ij8[1];
vinfos[6].maxsolutions = _nj8;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((IKabs(new_r12))+(IKabs(new_r02)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j5eval[2];
new_r02=0;
new_r12=0;
new_r20=0;
new_r21=0;
j5eval[0]=0.0150029978879168;
j5eval[1]=sj4;
if( IKabs(j5eval[0]) < 0.0000010000000000  || IKabs(j5eval[1]) < 0.0000010000000000  )
{
{
IkReal j3eval[2];
new_r02=0;
new_r12=0;
new_r20=0;
new_r21=0;
j3eval[0]=0.984997002112083;
j3eval[1]=cj4;
if( IKabs(j3eval[0]) < 0.0000010000000000  || IKabs(j3eval[1]) < 0.0000010000000000  )
{
{
IkReal j5eval[3];
new_r02=0;
new_r12=0;
new_r20=0;
new_r21=0;
j5eval[0]=0.0150029978879168;
j5eval[1]=sj4;
j5eval[2]=1.0;
if( IKabs(j5eval[0]) < 0.0000010000000000  || IKabs(j5eval[1]) < 0.0000010000000000  || IKabs(j5eval[2]) < 0.0000010000000000  )
{
{
IkReal evalcond[1];
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-1.5707963267949)+j4)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j3array[2], cj3array[2], sj3array[2];
bool j3valid[2]={false};
_nj3 = 2;
j3array[0]=-1.85041166626154;
sj3array[0]=IKsin(j3array[0]);
cj3array[0]=IKcos(j3array[0]);
j3array[1]=1.29118098732825;
sj3array[1]=IKsin(j3array[1]);
cj3array[1]=IKcos(j3array[1]);
if( j3array[0] > IKPI )
{
    j3array[0]-=IK2PI;
}
else if( j3array[0] < -IKPI )
{    j3array[0]+=IK2PI;
}
j3valid[0] = true;
if( j3array[1] > IKPI )
{
    j3array[1]-=IK2PI;
}
else if( j3array[1] < -IKPI )
{    j3array[1]+=IK2PI;
}
j3valid[1] = true;
for(int ij3 = 0; ij3 < 2; ++ij3)
{
if( !j3valid[ij3] )
{
    continue;
}
_ij3[0] = ij3; _ij3[1] = -1;
for(int iij3 = ij3+1; iij3 < 2; ++iij3)
{
if( j3valid[iij3] && IKabs(cj3array[ij3]-cj3array[iij3]) < IKFAST_SOLUTION_THRESH && IKabs(sj3array[ij3]-sj3array[iij3]) < IKFAST_SOLUTION_THRESH )
{
    j3valid[iij3]=false; _ij3[1] = iij3; break; 
}
}
j3 = j3array[ij3]; cj3 = cj3array[ij3]; sj3 = sj3array[ij3];
{
IkReal evalcond[1];
evalcond[0]=((((0.117729545532997)*(IKsin(j3))))+(((0.033804615017935)*(IKcos(j3)))));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j5eval[1];
new_r02=0;
new_r12=0;
new_r20=0;
new_r21=0;
sj4=1.0;
cj4=0;
j4=1.5707963267949;
j5eval[0]=((IKabs(((((1.94128872830752)*new_r00))+cj3+(((3.48207454681763)*sj3))+(((3.05879734905186)*new_r10)))))+(IKabs(((((-6.11759469810373)*new_r00))+(((3.88257745661505)*new_r10))))));
if( IKabs(j5eval[0]) < 0.0000000100000000  )
{
{
IkReal j5eval[1];
new_r02=0;
new_r12=0;
new_r20=0;
new_r21=0;
sj4=1.0;
cj4=0;
j4=1.5707963267949;
j5eval[0]=((IKabs(((((-6.11759469810373)*new_r01))+(((3.88257745661505)*new_r11)))))+(IKabs(((((-3.48207454681763)*cj3))+(((1.94128872830752)*new_r01))+sj3+(((3.05879734905186)*new_r11))))));
if( IKabs(j5eval[0]) < 0.0000000100000000  )
{
{
IkReal j5eval[1];
new_r02=0;
new_r12=0;
new_r20=0;
new_r21=0;
sj4=1.0;
cj4=0;
j4=1.5707963267949;
j5eval[0]=((IKabs(((2.02734260780584e+39)*new_r00)))+(((1.48802788121992e+38)*(IKabs(((((-6.81217950749611)*new_r10))+(((1.89446878412041)*cj3))+(((-6.528161616669)*sj3))))))));
if( IKabs(j5eval[0]) < 0.0000000100000000  )
{
continue; // no branches [j5]

} else
{
IkReal op[2+1], zeror[2];
int numroots;
IkReal x2700=((1.89446878412041)*cj3);
IkReal x2701=((6.81217950749611)*new_r10);
IkReal x2702=((6.528161616669)*sj3);
op[0]=(x2700+(((-1.0)*x2701))+(((-1.0)*x2702)));
op[1]=((13.6243590149922)*new_r00);
op[2]=(x2701+x2700+(((-1.0)*x2702)));
polyroots2(op,zeror,numroots);
IkReal j5array[2], cj5array[2], sj5array[2], tempj5array[1];
int numsolutions = 0;
for(int ij5 = 0; ij5 < numroots; ++ij5)
{
IkReal htj5 = zeror[ij5];
tempj5array[0]=((2.0)*(atan(htj5)));
for(int kj5 = 0; kj5 < 1; ++kj5)
{
j5array[numsolutions] = tempj5array[kj5];
if( j5array[numsolutions] > IKPI )
{
    j5array[numsolutions]-=IK2PI;
}
else if( j5array[numsolutions] < -IKPI )
{
    j5array[numsolutions]+=IK2PI;
}
sj5array[numsolutions] = IKsin(j5array[numsolutions]);
cj5array[numsolutions] = IKcos(j5array[numsolutions]);
numsolutions++;
}
}
bool j5valid[2]={true,true};
_nj5 = 2;
for(int ij5 = 0; ij5 < numsolutions; ++ij5)
    {
if( !j5valid[ij5] )
{
    continue;
}
    j5 = j5array[ij5]; cj5 = cj5array[ij5]; sj5 = sj5array[ij5];
htj5 = IKtan(j5/2);

_ij5[0] = ij5; _ij5[1] = -1;
for(int iij5 = ij5+1; iij5 < numsolutions; ++iij5)
{
if( j5valid[iij5] && IKabs(cj5array[ij5]-cj5array[iij5]) < IKFAST_SOLUTION_THRESH && IKabs(sj5array[ij5]-sj5array[iij5]) < IKFAST_SOLUTION_THRESH )
{
    j5valid[iij5]=false; _ij5[1] = iij5; break; 
}
}
{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j2;
vinfos[0].indices[0] = _ij2[0];
vinfos[0].indices[1] = _ij2[1];
vinfos[0].maxsolutions = _nj2;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j3;
vinfos[1].indices[0] = _ij3[0];
vinfos[1].indices[1] = _ij3[1];
vinfos[1].maxsolutions = _nj3;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j4;
vinfos[2].indices[0] = _ij4[0];
vinfos[2].indices[1] = _ij4[1];
vinfos[2].maxsolutions = _nj4;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j5;
vinfos[3].indices[0] = _ij5[0];
vinfos[3].indices[1] = _ij5[1];
vinfos[3].maxsolutions = _nj5;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j6;
vinfos[4].indices[0] = _ij6[0];
vinfos[4].indices[1] = _ij6[1];
vinfos[4].maxsolutions = _nj6;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j7;
vinfos[5].indices[0] = _ij7[0];
vinfos[5].indices[1] = _ij7[1];
vinfos[5].maxsolutions = _nj7;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j8;
vinfos[6].indices[0] = _ij8[0];
vinfos[6].indices[1] = _ij8[1];
vinfos[6].maxsolutions = _nj8;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
    }

}

}

} else
{
IkReal op[2+1], zeror[2];
int numroots;
IkReal x2703=((1.94128872830752)*new_r01);
IkReal x2704=((3.05879734905186)*new_r11);
IkReal x2705=((3.48207454681763)*cj3);
IkReal x2706=(x2704+x2703);
op[0]=(x2706+sj3+(((-1.0)*x2705)));
op[1]=((((-6.11759469810373)*new_r01))+(((3.88257745661505)*new_r11)));
op[2]=(sj3+(((-1.0)*x2706))+(((-1.0)*x2705)));
polyroots2(op,zeror,numroots);
IkReal j5array[2], cj5array[2], sj5array[2], tempj5array[1];
int numsolutions = 0;
for(int ij5 = 0; ij5 < numroots; ++ij5)
{
IkReal htj5 = zeror[ij5];
tempj5array[0]=((2.0)*(atan(htj5)));
for(int kj5 = 0; kj5 < 1; ++kj5)
{
j5array[numsolutions] = tempj5array[kj5];
if( j5array[numsolutions] > IKPI )
{
    j5array[numsolutions]-=IK2PI;
}
else if( j5array[numsolutions] < -IKPI )
{
    j5array[numsolutions]+=IK2PI;
}
sj5array[numsolutions] = IKsin(j5array[numsolutions]);
cj5array[numsolutions] = IKcos(j5array[numsolutions]);
numsolutions++;
}
}
bool j5valid[2]={true,true};
_nj5 = 2;
for(int ij5 = 0; ij5 < numsolutions; ++ij5)
    {
if( !j5valid[ij5] )
{
    continue;
}
    j5 = j5array[ij5]; cj5 = cj5array[ij5]; sj5 = sj5array[ij5];
htj5 = IKtan(j5/2);

_ij5[0] = ij5; _ij5[1] = -1;
for(int iij5 = ij5+1; iij5 < numsolutions; ++iij5)
{
if( j5valid[iij5] && IKabs(cj5array[ij5]-cj5array[iij5]) < IKFAST_SOLUTION_THRESH && IKabs(sj5array[ij5]-sj5array[iij5]) < IKFAST_SOLUTION_THRESH )
{
    j5valid[iij5]=false; _ij5[1] = iij5; break; 
}
}
{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j2;
vinfos[0].indices[0] = _ij2[0];
vinfos[0].indices[1] = _ij2[1];
vinfos[0].maxsolutions = _nj2;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j3;
vinfos[1].indices[0] = _ij3[0];
vinfos[1].indices[1] = _ij3[1];
vinfos[1].maxsolutions = _nj3;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j4;
vinfos[2].indices[0] = _ij4[0];
vinfos[2].indices[1] = _ij4[1];
vinfos[2].maxsolutions = _nj4;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j5;
vinfos[3].indices[0] = _ij5[0];
vinfos[3].indices[1] = _ij5[1];
vinfos[3].maxsolutions = _nj5;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j6;
vinfos[4].indices[0] = _ij6[0];
vinfos[4].indices[1] = _ij6[1];
vinfos[4].maxsolutions = _nj6;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j7;
vinfos[5].indices[0] = _ij7[0];
vinfos[5].indices[1] = _ij7[1];
vinfos[5].maxsolutions = _nj7;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j8;
vinfos[6].indices[0] = _ij8[0];
vinfos[6].indices[1] = _ij8[1];
vinfos[6].maxsolutions = _nj8;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
    }

}

}

} else
{
IkReal op[2+1], zeror[2];
int numroots;
IkReal x2707=((3.48207454681763)*sj3);
IkReal x2708=((1.94128872830752)*new_r00);
IkReal x2709=((3.05879734905186)*new_r10);
IkReal x2710=(x2707+cj3);
IkReal x2711=(x2709+x2708);
op[0]=(x2710+x2711);
op[1]=((((-6.11759469810373)*new_r00))+(((3.88257745661505)*new_r10)));
op[2]=(x2710+(((-1.0)*x2711)));
polyroots2(op,zeror,numroots);
IkReal j5array[2], cj5array[2], sj5array[2], tempj5array[1];
int numsolutions = 0;
for(int ij5 = 0; ij5 < numroots; ++ij5)
{
IkReal htj5 = zeror[ij5];
tempj5array[0]=((2.0)*(atan(htj5)));
for(int kj5 = 0; kj5 < 1; ++kj5)
{
j5array[numsolutions] = tempj5array[kj5];
if( j5array[numsolutions] > IKPI )
{
    j5array[numsolutions]-=IK2PI;
}
else if( j5array[numsolutions] < -IKPI )
{
    j5array[numsolutions]+=IK2PI;
}
sj5array[numsolutions] = IKsin(j5array[numsolutions]);
cj5array[numsolutions] = IKcos(j5array[numsolutions]);
numsolutions++;
}
}
bool j5valid[2]={true,true};
_nj5 = 2;
for(int ij5 = 0; ij5 < numsolutions; ++ij5)
    {
if( !j5valid[ij5] )
{
    continue;
}
    j5 = j5array[ij5]; cj5 = cj5array[ij5]; sj5 = sj5array[ij5];
htj5 = IKtan(j5/2);

_ij5[0] = ij5; _ij5[1] = -1;
for(int iij5 = ij5+1; iij5 < numsolutions; ++iij5)
{
if( j5valid[iij5] && IKabs(cj5array[ij5]-cj5array[iij5]) < IKFAST_SOLUTION_THRESH && IKabs(sj5array[ij5]-sj5array[iij5]) < IKFAST_SOLUTION_THRESH )
{
    j5valid[iij5]=false; _ij5[1] = iij5; break; 
}
}
{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j2;
vinfos[0].indices[0] = _ij2[0];
vinfos[0].indices[1] = _ij2[1];
vinfos[0].maxsolutions = _nj2;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j3;
vinfos[1].indices[0] = _ij3[0];
vinfos[1].indices[1] = _ij3[1];
vinfos[1].maxsolutions = _nj3;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j4;
vinfos[2].indices[0] = _ij4[0];
vinfos[2].indices[1] = _ij4[1];
vinfos[2].maxsolutions = _nj4;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j5;
vinfos[3].indices[0] = _ij5[0];
vinfos[3].indices[1] = _ij5[1];
vinfos[3].maxsolutions = _nj5;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j6;
vinfos[4].indices[0] = _ij6[0];
vinfos[4].indices[1] = _ij6[1];
vinfos[4].maxsolutions = _nj6;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j7;
vinfos[5].indices[0] = _ij7[0];
vinfos[5].indices[1] = _ij7[1];
vinfos[5].maxsolutions = _nj7;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j8;
vinfos[6].indices[0] = _ij8[0];
vinfos[6].indices[1] = _ij8[1];
vinfos[6].maxsolutions = _nj8;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
    }

}

}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((1.5707963267949)+j4)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j3array[2], cj3array[2], sj3array[2];
bool j3valid[2]={false};
_nj3 = 2;
j3array[0]=1.29109374849673;
sj3array[0]=IKsin(j3array[0]);
cj3array[0]=IKcos(j3array[0]);
j3array[1]=4.43268640208652;
sj3array[1]=IKsin(j3array[1]);
cj3array[1]=IKcos(j3array[1]);
if( j3array[0] > IKPI )
{
    j3array[0]-=IK2PI;
}
else if( j3array[0] < -IKPI )
{    j3array[0]+=IK2PI;
}
j3valid[0] = true;
if( j3array[1] > IKPI )
{
    j3array[1]-=IK2PI;
}
else if( j3array[1] < -IKPI )
{    j3array[1]+=IK2PI;
}
j3valid[1] = true;
for(int ij3 = 0; ij3 < 2; ++ij3)
{
if( !j3valid[ij3] )
{
    continue;
}
_ij3[0] = ij3; _ij3[1] = -1;
for(int iij3 = ij3+1; iij3 < 2; ++iij3)
{
if( j3valid[iij3] && IKabs(cj3array[ij3]-cj3array[iij3]) < IKFAST_SOLUTION_THRESH && IKabs(sj3array[ij3]-sj3array[iij3]) < IKFAST_SOLUTION_THRESH )
{
    j3valid[iij3]=false; _ij3[1] = iij3; break; 
}
}
j3 = j3array[ij3]; cj3 = cj3array[ij3]; sj3 = sj3array[ij3];
{
IkReal evalcond[1];
evalcond[0]=((((-0.117726596009889)*(IKsin(j3))))+(((-0.033814885477273)*(IKcos(j3)))));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j5eval[1];
new_r02=0;
new_r12=0;
new_r20=0;
new_r21=0;
sj4=-1.0;
cj4=0;
j4=-1.5707963267949;
j5eval[0]=((IKabs(((((1.94128872830752)*new_r00))+cj3+(((3.48207454681763)*sj3))+(((3.05879734905186)*new_r10)))))+(IKabs(((((-6.11759469810373)*new_r00))+(((3.88257745661505)*new_r10))))));
if( IKabs(j5eval[0]) < 0.0000000100000000  )
{
{
IkReal j5eval[1];
new_r02=0;
new_r12=0;
new_r20=0;
new_r21=0;
sj4=-1.0;
cj4=0;
j4=-1.5707963267949;
j5eval[0]=((IKabs(((((-6.11759469810373)*new_r01))+(((3.88257745661505)*new_r11)))))+(IKabs(((((-3.48207454681763)*cj3))+(((1.94128872830752)*new_r01))+sj3+(((3.05879734905186)*new_r11))))));
if( IKabs(j5eval[0]) < 0.0000000100000000  )
{
{
IkReal j5eval[1];
new_r02=0;
new_r12=0;
new_r20=0;
new_r21=0;
sj4=-1.0;
cj4=0;
j4=-1.5707963267949;
j5eval[0]=((IKabs(((2.02734260780584e+39)*new_r00)))+(((1.48802788121992e+38)*(IKabs(((((-5.06968030951485)*cj3))+(((-6.81217950749611)*new_r10))+(((-4.528161616669)*sj3))))))));
if( IKabs(j5eval[0]) < 0.0000000100000000  )
{
continue; // no branches [j5]

} else
{
IkReal op[2+1], zeror[2];
int numroots;
IkReal x2712=((6.81217950749611)*new_r10);
IkReal x2713=((4.528161616669)*sj3);
IkReal x2714=((5.06968030951485)*cj3);
IkReal x2715=(x2713+x2714);
op[0]=((((-1.0)*x2712))+(((-1.0)*x2715)));
op[1]=((13.6243590149922)*new_r00);
op[2]=(x2712+(((-1.0)*x2715)));
polyroots2(op,zeror,numroots);
IkReal j5array[2], cj5array[2], sj5array[2], tempj5array[1];
int numsolutions = 0;
for(int ij5 = 0; ij5 < numroots; ++ij5)
{
IkReal htj5 = zeror[ij5];
tempj5array[0]=((2.0)*(atan(htj5)));
for(int kj5 = 0; kj5 < 1; ++kj5)
{
j5array[numsolutions] = tempj5array[kj5];
if( j5array[numsolutions] > IKPI )
{
    j5array[numsolutions]-=IK2PI;
}
else if( j5array[numsolutions] < -IKPI )
{
    j5array[numsolutions]+=IK2PI;
}
sj5array[numsolutions] = IKsin(j5array[numsolutions]);
cj5array[numsolutions] = IKcos(j5array[numsolutions]);
numsolutions++;
}
}
bool j5valid[2]={true,true};
_nj5 = 2;
for(int ij5 = 0; ij5 < numsolutions; ++ij5)
    {
if( !j5valid[ij5] )
{
    continue;
}
    j5 = j5array[ij5]; cj5 = cj5array[ij5]; sj5 = sj5array[ij5];
htj5 = IKtan(j5/2);

_ij5[0] = ij5; _ij5[1] = -1;
for(int iij5 = ij5+1; iij5 < numsolutions; ++iij5)
{
if( j5valid[iij5] && IKabs(cj5array[ij5]-cj5array[iij5]) < IKFAST_SOLUTION_THRESH && IKabs(sj5array[ij5]-sj5array[iij5]) < IKFAST_SOLUTION_THRESH )
{
    j5valid[iij5]=false; _ij5[1] = iij5; break; 
}
}
{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j2;
vinfos[0].indices[0] = _ij2[0];
vinfos[0].indices[1] = _ij2[1];
vinfos[0].maxsolutions = _nj2;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j3;
vinfos[1].indices[0] = _ij3[0];
vinfos[1].indices[1] = _ij3[1];
vinfos[1].maxsolutions = _nj3;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j4;
vinfos[2].indices[0] = _ij4[0];
vinfos[2].indices[1] = _ij4[1];
vinfos[2].maxsolutions = _nj4;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j5;
vinfos[3].indices[0] = _ij5[0];
vinfos[3].indices[1] = _ij5[1];
vinfos[3].maxsolutions = _nj5;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j6;
vinfos[4].indices[0] = _ij6[0];
vinfos[4].indices[1] = _ij6[1];
vinfos[4].maxsolutions = _nj6;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j7;
vinfos[5].indices[0] = _ij7[0];
vinfos[5].indices[1] = _ij7[1];
vinfos[5].maxsolutions = _nj7;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j8;
vinfos[6].indices[0] = _ij8[0];
vinfos[6].indices[1] = _ij8[1];
vinfos[6].maxsolutions = _nj8;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
    }

}

}

} else
{
IkReal op[2+1], zeror[2];
int numroots;
IkReal x2716=((1.94128872830752)*new_r01);
IkReal x2717=((3.05879734905186)*new_r11);
IkReal x2718=((3.48207454681763)*cj3);
IkReal x2719=(x2716+x2717);
op[0]=(x2719+(((-1.0)*x2718))+sj3);
op[1]=((((-6.11759469810373)*new_r01))+(((3.88257745661505)*new_r11)));
op[2]=((((-1.0)*x2719))+(((-1.0)*x2718))+sj3);
polyroots2(op,zeror,numroots);
IkReal j5array[2], cj5array[2], sj5array[2], tempj5array[1];
int numsolutions = 0;
for(int ij5 = 0; ij5 < numroots; ++ij5)
{
IkReal htj5 = zeror[ij5];
tempj5array[0]=((2.0)*(atan(htj5)));
for(int kj5 = 0; kj5 < 1; ++kj5)
{
j5array[numsolutions] = tempj5array[kj5];
if( j5array[numsolutions] > IKPI )
{
    j5array[numsolutions]-=IK2PI;
}
else if( j5array[numsolutions] < -IKPI )
{
    j5array[numsolutions]+=IK2PI;
}
sj5array[numsolutions] = IKsin(j5array[numsolutions]);
cj5array[numsolutions] = IKcos(j5array[numsolutions]);
numsolutions++;
}
}
bool j5valid[2]={true,true};
_nj5 = 2;
for(int ij5 = 0; ij5 < numsolutions; ++ij5)
    {
if( !j5valid[ij5] )
{
    continue;
}
    j5 = j5array[ij5]; cj5 = cj5array[ij5]; sj5 = sj5array[ij5];
htj5 = IKtan(j5/2);

_ij5[0] = ij5; _ij5[1] = -1;
for(int iij5 = ij5+1; iij5 < numsolutions; ++iij5)
{
if( j5valid[iij5] && IKabs(cj5array[ij5]-cj5array[iij5]) < IKFAST_SOLUTION_THRESH && IKabs(sj5array[ij5]-sj5array[iij5]) < IKFAST_SOLUTION_THRESH )
{
    j5valid[iij5]=false; _ij5[1] = iij5; break; 
}
}
{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j2;
vinfos[0].indices[0] = _ij2[0];
vinfos[0].indices[1] = _ij2[1];
vinfos[0].maxsolutions = _nj2;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j3;
vinfos[1].indices[0] = _ij3[0];
vinfos[1].indices[1] = _ij3[1];
vinfos[1].maxsolutions = _nj3;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j4;
vinfos[2].indices[0] = _ij4[0];
vinfos[2].indices[1] = _ij4[1];
vinfos[2].maxsolutions = _nj4;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j5;
vinfos[3].indices[0] = _ij5[0];
vinfos[3].indices[1] = _ij5[1];
vinfos[3].maxsolutions = _nj5;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j6;
vinfos[4].indices[0] = _ij6[0];
vinfos[4].indices[1] = _ij6[1];
vinfos[4].maxsolutions = _nj6;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j7;
vinfos[5].indices[0] = _ij7[0];
vinfos[5].indices[1] = _ij7[1];
vinfos[5].maxsolutions = _nj7;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j8;
vinfos[6].indices[0] = _ij8[0];
vinfos[6].indices[1] = _ij8[1];
vinfos[6].maxsolutions = _nj8;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
    }

}

}

} else
{
IkReal op[2+1], zeror[2];
int numroots;
IkReal x2720=((3.48207454681763)*sj3);
IkReal x2721=((1.94128872830752)*new_r00);
IkReal x2722=((3.05879734905186)*new_r10);
IkReal x2723=(x2720+cj3);
IkReal x2724=(x2722+x2721);
op[0]=(x2724+x2723);
op[1]=((((-6.11759469810373)*new_r00))+(((3.88257745661505)*new_r10)));
op[2]=(x2723+(((-1.0)*x2724)));
polyroots2(op,zeror,numroots);
IkReal j5array[2], cj5array[2], sj5array[2], tempj5array[1];
int numsolutions = 0;
for(int ij5 = 0; ij5 < numroots; ++ij5)
{
IkReal htj5 = zeror[ij5];
tempj5array[0]=((2.0)*(atan(htj5)));
for(int kj5 = 0; kj5 < 1; ++kj5)
{
j5array[numsolutions] = tempj5array[kj5];
if( j5array[numsolutions] > IKPI )
{
    j5array[numsolutions]-=IK2PI;
}
else if( j5array[numsolutions] < -IKPI )
{
    j5array[numsolutions]+=IK2PI;
}
sj5array[numsolutions] = IKsin(j5array[numsolutions]);
cj5array[numsolutions] = IKcos(j5array[numsolutions]);
numsolutions++;
}
}
bool j5valid[2]={true,true};
_nj5 = 2;
for(int ij5 = 0; ij5 < numsolutions; ++ij5)
    {
if( !j5valid[ij5] )
{
    continue;
}
    j5 = j5array[ij5]; cj5 = cj5array[ij5]; sj5 = sj5array[ij5];
htj5 = IKtan(j5/2);

_ij5[0] = ij5; _ij5[1] = -1;
for(int iij5 = ij5+1; iij5 < numsolutions; ++iij5)
{
if( j5valid[iij5] && IKabs(cj5array[ij5]-cj5array[iij5]) < IKFAST_SOLUTION_THRESH && IKabs(sj5array[ij5]-sj5array[iij5]) < IKFAST_SOLUTION_THRESH )
{
    j5valid[iij5]=false; _ij5[1] = iij5; break; 
}
}
{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j2;
vinfos[0].indices[0] = _ij2[0];
vinfos[0].indices[1] = _ij2[1];
vinfos[0].maxsolutions = _nj2;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j3;
vinfos[1].indices[0] = _ij3[0];
vinfos[1].indices[1] = _ij3[1];
vinfos[1].maxsolutions = _nj3;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j4;
vinfos[2].indices[0] = _ij4[0];
vinfos[2].indices[1] = _ij4[1];
vinfos[2].maxsolutions = _nj4;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j5;
vinfos[3].indices[0] = _ij5[0];
vinfos[3].indices[1] = _ij5[1];
vinfos[3].maxsolutions = _nj5;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j6;
vinfos[4].indices[0] = _ij6[0];
vinfos[4].indices[1] = _ij6[1];
vinfos[4].maxsolutions = _nj6;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j7;
vinfos[5].indices[0] = _ij7[0];
vinfos[5].indices[1] = _ij7[1];
vinfos[5].maxsolutions = _nj7;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j8;
vinfos[6].indices[0] = _ij8[0];
vinfos[6].indices[1] = _ij8[1];
vinfos[6].maxsolutions = _nj8;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
    }

}

}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
if( 1 )
{
bgotonextstatement=false;
continue; // branch miss [j3, j5]

}
} while(0);
if( bgotonextstatement )
{
}
}
}
}

} else
{
{
IkReal j5array[2], cj5array[2], sj5array[2];
bool j5valid[2]={false};
_nj5 = 2;
IkReal x2725=((0.531815483588428)*cj4);
IkReal x2726=((0.0656300100348293)*sj4);
IkReal x2727=((0.837955424564001)*cj4);
IkReal x2728=((0.103420015812922)*sj4);
CheckValue<IkReal> x2730 = IKatan2WithCheck(IkReal(((((-1.0)*new_r00*x2727))+((new_r10*x2725))+(((-1.0)*new_r10*x2726))+((new_r00*x2728)))),IkReal(((((-1.0)*new_r00*x2726))+((new_r10*x2727))+(((-1.0)*new_r10*x2728))+((new_r00*x2725)))),IKFAST_ATAN2_MAGTHRESH);
if(!x2730.valid){
continue;
}
IkReal x2729=x2730.value;
j5array[0]=((-1.0)*x2729);
sj5array[0]=IKsin(j5array[0]);
cj5array[0]=IKcos(j5array[0]);
j5array[1]=((3.14159265358979)+(((-1.0)*x2729)));
sj5array[1]=IKsin(j5array[1]);
cj5array[1]=IKcos(j5array[1]);
if( j5array[0] > IKPI )
{
    j5array[0]-=IK2PI;
}
else if( j5array[0] < -IKPI )
{    j5array[0]+=IK2PI;
}
j5valid[0] = true;
if( j5array[1] > IKPI )
{
    j5array[1]-=IK2PI;
}
else if( j5array[1] < -IKPI )
{    j5array[1]+=IK2PI;
}
j5valid[1] = true;
for(int ij5 = 0; ij5 < 2; ++ij5)
{
if( !j5valid[ij5] )
{
    continue;
}
_ij5[0] = ij5; _ij5[1] = -1;
for(int iij5 = ij5+1; iij5 < 2; ++iij5)
{
if( j5valid[iij5] && IKabs(cj5array[ij5]-cj5array[iij5]) < IKFAST_SOLUTION_THRESH && IKabs(sj5array[ij5]-sj5array[iij5]) < IKFAST_SOLUTION_THRESH )
{
    j5valid[iij5]=false; _ij5[1] = iij5; break; 
}
}
j5 = j5array[ij5]; cj5 = cj5array[ij5]; sj5 = sj5array[ij5];
{
IkReal evalcond[3];
IkReal x2731=IKsin(j5);
IkReal x2732=IKcos(j5);
IkReal x2733=((0.103420015812922)*sj4);
IkReal x2734=((0.837955424564001)*cj4);
IkReal x2735=(new_r01*x2732);
IkReal x2736=(new_r11*x2731);
IkReal x2737=((0.0656300100348293)*sj4*x2732);
IkReal x2738=((0.531815483588428)*cj4*x2731);
IkReal x2739=((0.531815483588428)*cj4*x2732);
IkReal x2740=((0.0656300100348293)*sj4*x2731);
evalcond[0]=(x2738+((x2732*x2733))+(((-1.0)*x2740))+(((-1.0)*x2732*x2734)));
evalcond[1]=(x2739+(((-1.0)*x2731*x2733))+((x2731*x2734))+(((-1.0)*x2737)));
evalcond[2]=(((new_r11*x2739))+(((-1.0)*new_r11*x2737))+(((-1.0)*x2733*x2736))+(((-1.0)*x2734*x2735))+((x2734*x2736))+((new_r01*x2738))+(((-1.0)*new_r01*x2740))+((x2733*x2735)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j3array[1], cj3array[1], sj3array[1];
bool j3valid[1]={false};
_nj3 = 1;
IkReal x2741=((0.515031836328808)*cj5);
IkReal x2742=(new_r11*sj5);
IkReal x2743=(new_r10*sj5);
IkReal x2744=(cj5*new_r10);
IkReal x2745=((0.147909480226238)*cj5);
IkReal x2746=(new_r00*sj5);
IkReal x2747=(cj5*new_r11);
IkReal x2748=(new_r01*sj5);
if( IKabs(((((-0.147909480226238)*x2742))+((new_r00*x2741))+((new_r01*x2745))+(((-0.515031836328808)*x2743))+(((0.233054011708033)*x2747))+(((0.233054011708033)*x2748))+(((0.811511442202281)*x2744))+(((0.811511442202281)*x2746)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((((-0.147909480226238)*x2743))+(((0.515031836328808)*x2742))+((new_r00*x2745))+(((-0.811511442202281)*x2747))+(((-0.811511442202281)*x2748))+(((0.233054011708033)*x2746))+(((0.233054011708033)*x2744))+(((-1.0)*new_r01*x2741)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((((-0.147909480226238)*x2742))+((new_r00*x2741))+((new_r01*x2745))+(((-0.515031836328808)*x2743))+(((0.233054011708033)*x2747))+(((0.233054011708033)*x2748))+(((0.811511442202281)*x2744))+(((0.811511442202281)*x2746))))+IKsqr(((((-0.147909480226238)*x2743))+(((0.515031836328808)*x2742))+((new_r00*x2745))+(((-0.811511442202281)*x2747))+(((-0.811511442202281)*x2748))+(((0.233054011708033)*x2746))+(((0.233054011708033)*x2744))+(((-1.0)*new_r01*x2741))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j3array[0]=IKatan2(((((-0.147909480226238)*x2742))+((new_r00*x2741))+((new_r01*x2745))+(((-0.515031836328808)*x2743))+(((0.233054011708033)*x2747))+(((0.233054011708033)*x2748))+(((0.811511442202281)*x2744))+(((0.811511442202281)*x2746))), ((((-0.147909480226238)*x2743))+(((0.515031836328808)*x2742))+((new_r00*x2745))+(((-0.811511442202281)*x2747))+(((-0.811511442202281)*x2748))+(((0.233054011708033)*x2746))+(((0.233054011708033)*x2744))+(((-1.0)*new_r01*x2741))));
sj3array[0]=IKsin(j3array[0]);
cj3array[0]=IKcos(j3array[0]);
if( j3array[0] > IKPI )
{
    j3array[0]-=IK2PI;
}
else if( j3array[0] < -IKPI )
{    j3array[0]+=IK2PI;
}
j3valid[0] = true;
for(int ij3 = 0; ij3 < 1; ++ij3)
{
if( !j3valid[ij3] )
{
    continue;
}
_ij3[0] = ij3; _ij3[1] = -1;
for(int iij3 = ij3+1; iij3 < 1; ++iij3)
{
if( j3valid[iij3] && IKabs(cj3array[ij3]-cj3array[iij3]) < IKFAST_SOLUTION_THRESH && IKabs(sj3array[ij3]-sj3array[iij3]) < IKFAST_SOLUTION_THRESH )
{
    j3valid[iij3]=false; _ij3[1] = iij3; break; 
}
}
j3 = j3array[ij3]; cj3 = cj3array[ij3]; sj3 = sj3array[ij3];
{
IkReal evalcond[14];
IkReal x2749=IKsin(j3);
IkReal x2750=IKcos(j3);
IkReal x2751=(cj5*sj4);
IkReal x2752=(new_r01*sj5);
IkReal x2753=((0.531815483588428)*sj4);
IkReal x2754=(new_r10*sj5);
IkReal x2755=(cj5*new_r01);
IkReal x2756=((0.0181157120800272)*sj5);
IkReal x2757=((0.515031836328808)*sj5);
IkReal x2758=(new_r00*sj5);
IkReal x2759=(new_r11*sj5);
IkReal x2760=((0.0630802599313394)*sj5);
IkReal x2761=((0.0656300100348293)*cj4);
IkReal x2762=(cj5*new_r00);
IkReal x2763=((0.028546806998574)*sj5);
IkReal x2764=(sj4*sj5);
IkReal x2765=((0.837955424564001)*sj4);
IkReal x2766=((0.0994021100426501)*sj5);
IkReal x2767=(cj5*new_r10);
IkReal x2768=((0.103420015812922)*cj4);
IkReal x2769=(cj5*new_r11);
IkReal x2770=((0.276027873078388)*x2749);
IkReal x2771=((0.961149631058464)*x2750);
IkReal x2772=((0.276027873078388)*x2750);
IkReal x2773=((0.961149631058464)*x2749);
IkReal x2774=((0.805400547163128)*x2749);
IkReal x2775=(sj4*x2750);
IkReal x2776=((0.147909480226238)*x2750);
IkReal x2777=(cj5*x2749);
IkReal x2778=(cj4*x2750);
IkReal x2779=((0.511154255842196)*x2749);
IkReal x2780=(cj4*x2749);
IkReal x2781=((0.146795896805068)*x2749);
IkReal x2782=((0.231299053576899)*x2749);
IkReal x2783=((0.147909480226238)*x2749);
IkReal x2784=(sj5*x2749);
IkReal x2785=((0.811511442202281)*x2750);
IkReal x2786=(cj5*x2750);
IkReal x2787=(sj4*x2749);
IkReal x2788=(x2772+x2773);
evalcond[0]=(x2788+(((0.535849798705775)*x2754))+(((-0.535849798705775)*x2762))+(((-0.844313326436599)*x2767))+(((-0.844313326436599)*x2758)));
evalcond[1]=(x2770+(((0.535849798705775)*x2759))+(((-0.535849798705775)*x2755))+(((-0.844313326436599)*x2769))+(((-0.844313326436599)*x2752))+(((-1.0)*x2771)));
evalcond[2]=((((5.13522966898714e-6)*x2749))+(((-0.033809750247604)*x2787))+(((0.117728070771443)*x2775))+(((-0.953912320189798)*x2778))+(((0.273949425080978)*x2780))+(((1.47476155376408e-6)*x2750)));
evalcond[3]=((((-0.953912320189798)*x2780))+(((-5.13522966898714e-6)*x2750))+(((1.47476155376408e-6)*x2749))+(((-0.273949425080978)*x2778))+(((0.033809750247604)*x2775))+(((0.117728070771443)*x2787)));
evalcond[4]=(x2758+x2767+(((-0.811511442202281)*x2749))+(((-1.0)*sj4*x2781))+(((-0.233054011708033)*x2750))+(((-0.0181157120800272)*x2780))+(((0.0630802599313394)*x2778))+(((0.511154255842196)*x2775)));
evalcond[5]=(x2752+x2769+x2785+(((0.146795896805068)*x2775))+(((0.0630802599313394)*x2780))+((sj4*x2779))+(((-0.233054011708033)*x2749))+(((0.0181157120800272)*x2778)));
evalcond[6]=(x2762+(((-0.805400547163128)*x2775))+(((-0.515031836328808)*x2749))+(((-0.0994021100426501)*x2778))+(((-1.0)*x2776))+(((-1.0)*x2754))+((sj4*x2782))+(((0.028546806998574)*x2780)));
evalcond[7]=((((-1.0)*x2783))+(((-0.028546806998574)*x2778))+x2755+(((-0.231299053576899)*x2775))+(((0.515031836328808)*x2750))+(((-1.0)*sj4*x2774))+(((-1.0)*x2759))+(((-0.0994021100426501)*x2780)));
evalcond[8]=(x2770+(((0.837955424564001)*new_r00*x2751))+(((-1.0)*x2761*x2767))+((x2762*x2768))+(((-1.0)*x2758*x2761))+(((-1.0)*x2753*x2758))+(((-0.531815483588428)*new_r10*x2751))+(((-1.0)*x2771))+(((-1.0)*x2754*x2768))+(((-1.0)*x2754*x2765)));
evalcond[9]=((((-1.0)*x2788))+(((0.837955424564001)*new_r01*x2751))+(((-1.0)*x2752*x2753))+(((-1.0)*x2752*x2761))+(((-1.0)*x2761*x2769))+(((-1.0)*x2759*x2768))+(((-1.0)*x2759*x2765))+((x2755*x2768))+(((-0.531815483588428)*new_r11*x2751)));
evalcond[10]=((((-1.0)*x2756*x2780))+(((-1.0)*cj5*x2776))+(((-0.233054011708033)*sj5*x2750))+(((-1.0)*x2764*x2781))+(((0.028546806998574)*cj4*x2777))+(((0.511154255842196)*x2750*x2764))+(((-0.811511442202281)*x2784))+new_r00+((x2760*x2778))+(((-0.0994021100426501)*cj5*x2778))+(((-0.515031836328808)*x2777))+(((-0.805400547163128)*x2750*x2751))+((x2751*x2782)));
evalcond[11]=(((x2756*x2778))+(((0.146795896805068)*x2750*x2764))+((sj5*x2785))+(((-1.0)*x2751*x2774))+((x2760*x2780))+(((-0.147909480226238)*x2777))+(((-0.233054011708033)*x2784))+(((0.515031836328808)*x2786))+(((-0.028546806998574)*cj5*x2778))+((x2764*x2779))+new_r01+(((-0.231299053576899)*x2750*x2751))+(((-0.0994021100426501)*cj4*x2777)));
evalcond[12]=(((x2749*x2757))+(((0.0630802599313394)*cj5*x2778))+((x2766*x2778))+(((-1.0)*x2764*x2782))+(((-0.811511442202281)*x2777))+(((0.511154255842196)*x2750*x2751))+(((-0.233054011708033)*x2786))+(((-1.0)*x2763*x2780))+(((-1.0)*x2751*x2781))+((sj5*x2776))+(((-0.0181157120800272)*cj4*x2777))+new_r10+(((0.805400547163128)*x2750*x2764)));
evalcond[13]=(((x2763*x2778))+(((-0.233054011708033)*x2777))+(((0.0181157120800272)*cj5*x2778))+((sj5*x2783))+(((0.146795896805068)*x2750*x2751))+((x2751*x2779))+(((-1.0)*x2750*x2757))+((x2766*x2780))+((x2764*x2774))+new_r11+(((0.231299053576899)*x2750*x2764))+(((0.0630802599313394)*cj4*x2777))+((cj5*x2785)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[9]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[10]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[11]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[12]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[13]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j2;
vinfos[0].indices[0] = _ij2[0];
vinfos[0].indices[1] = _ij2[1];
vinfos[0].maxsolutions = _nj2;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j3;
vinfos[1].indices[0] = _ij3[0];
vinfos[1].indices[1] = _ij3[1];
vinfos[1].maxsolutions = _nj3;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j4;
vinfos[2].indices[0] = _ij4[0];
vinfos[2].indices[1] = _ij4[1];
vinfos[2].maxsolutions = _nj4;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j5;
vinfos[3].indices[0] = _ij5[0];
vinfos[3].indices[1] = _ij5[1];
vinfos[3].maxsolutions = _nj5;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j6;
vinfos[4].indices[0] = _ij6[0];
vinfos[4].indices[1] = _ij6[1];
vinfos[4].maxsolutions = _nj6;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j7;
vinfos[5].indices[0] = _ij7[0];
vinfos[5].indices[1] = _ij7[1];
vinfos[5].maxsolutions = _nj7;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j8;
vinfos[6].indices[0] = _ij8[0];
vinfos[6].indices[1] = _ij8[1];
vinfos[6].maxsolutions = _nj8;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}
}
}

}

}

} else
{
{
IkReal j3array[2], cj3array[2], sj3array[2];
bool j3valid[2]={false};
_nj3 = 2;
CheckValue<IkReal> x2790 = IKatan2WithCheck(IkReal(((1.47476155376408e-6)+(((0.117728070771443)*sj4))+(((-0.953912320189798)*cj4)))),IkReal(((5.13522966898714e-6)+(((-0.033809750247604)*sj4))+(((0.273949425080978)*cj4)))),IKFAST_ATAN2_MAGTHRESH);
if(!x2790.valid){
continue;
}
IkReal x2789=x2790.value;
j3array[0]=((-1.0)*x2789);
sj3array[0]=IKsin(j3array[0]);
cj3array[0]=IKcos(j3array[0]);
j3array[1]=((3.14159265358979)+(((-1.0)*x2789)));
sj3array[1]=IKsin(j3array[1]);
cj3array[1]=IKcos(j3array[1]);
if( j3array[0] > IKPI )
{
    j3array[0]-=IK2PI;
}
else if( j3array[0] < -IKPI )
{    j3array[0]+=IK2PI;
}
j3valid[0] = true;
if( j3array[1] > IKPI )
{
    j3array[1]-=IK2PI;
}
else if( j3array[1] < -IKPI )
{    j3array[1]+=IK2PI;
}
j3valid[1] = true;
for(int ij3 = 0; ij3 < 2; ++ij3)
{
if( !j3valid[ij3] )
{
    continue;
}
_ij3[0] = ij3; _ij3[1] = -1;
for(int iij3 = ij3+1; iij3 < 2; ++iij3)
{
if( j3valid[iij3] && IKabs(cj3array[ij3]-cj3array[iij3]) < IKFAST_SOLUTION_THRESH && IKabs(sj3array[ij3]-sj3array[iij3]) < IKFAST_SOLUTION_THRESH )
{
    j3valid[iij3]=false; _ij3[1] = iij3; break; 
}
}
j3 = j3array[ij3]; cj3 = cj3array[ij3]; sj3 = sj3array[ij3];
{
IkReal evalcond[1];
IkReal x2791=IKsin(j3);
IkReal x2792=IKcos(j3);
evalcond[0]=((((0.117728070771443)*sj4*x2791))+(((-0.273949425080978)*cj4*x2792))+(((-0.953912320189798)*cj4*x2791))+(((1.47476155376408e-6)*x2791))+(((0.033809750247604)*sj4*x2792))+(((-5.13522966898714e-6)*x2792)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j5eval[1];
new_r02=0;
new_r12=0;
new_r20=0;
new_r21=0;
j5eval[0]=((IKabs(((((1.94128872830752)*new_r00))+cj3+(((3.48207454681763)*sj3))+(((3.05879734905186)*new_r10)))))+(IKabs(((((-6.11759469810373)*new_r00))+(((3.88257745661505)*new_r10))))));
if( IKabs(j5eval[0]) < 0.0000000100000000  )
{
{
IkReal j5eval[1];
new_r02=0;
new_r12=0;
new_r20=0;
new_r21=0;
j5eval[0]=((IKabs(((((-6.11759469810373)*new_r01))+(((3.88257745661505)*new_r11)))))+(IKabs(((((-3.48207454681763)*cj3))+(((1.94128872830752)*new_r01))+sj3+(((3.05879734905186)*new_r11))))));
if( IKabs(j5eval[0]) < 0.0000000100000000  )
{
{
IkReal j5eval[1];
new_r02=0;
new_r12=0;
new_r20=0;
new_r21=0;
j5eval[0]=((IKabs(((724857009.573076)*new_r00)))+(((6565650.44230769)*(IKabs(((((-8.1032363594977)*sj3*sj4))+(((-1.0)*cj4*sj3))+(((-12.8647447408362)*cj3))+(((-55.2007006725676)*new_r10))+(((28.2160730742541)*cj3*sj4))+(((3.48207454681763)*cj3*cj4))+(((-44.7960002133718)*sj3))))))));
if( IKabs(j5eval[0]) < 0.0000000100000000  )
{
continue; // no branches [j5]

} else
{
IkReal op[2+1], zeror[2];
int numroots;
IkReal x2793=((55.2007006725676)*new_r10);
IkReal x2794=((44.7960002133718)*sj3);
IkReal x2795=((12.8647447408362)*cj3);
IkReal x2796=((28.2160730742541)*cj3*sj4);
IkReal x2797=((3.48207454681763)*cj3*cj4);
IkReal x2798=((8.1032363594977)*sj3*sj4);
IkReal x2799=((1.0)*cj4*sj3);
IkReal x2800=(x2796+x2797);
IkReal x2801=(x2798+x2799+x2794+x2795);
op[0]=((((-1.0)*x2801))+(((-1.0)*x2793))+x2800);
op[1]=((110.401401345135)*new_r00);
op[2]=(x2793+(((-1.0)*x2801))+x2800);
polyroots2(op,zeror,numroots);
IkReal j5array[2], cj5array[2], sj5array[2], tempj5array[1];
int numsolutions = 0;
for(int ij5 = 0; ij5 < numroots; ++ij5)
{
IkReal htj5 = zeror[ij5];
tempj5array[0]=((2.0)*(atan(htj5)));
for(int kj5 = 0; kj5 < 1; ++kj5)
{
j5array[numsolutions] = tempj5array[kj5];
if( j5array[numsolutions] > IKPI )
{
    j5array[numsolutions]-=IK2PI;
}
else if( j5array[numsolutions] < -IKPI )
{
    j5array[numsolutions]+=IK2PI;
}
sj5array[numsolutions] = IKsin(j5array[numsolutions]);
cj5array[numsolutions] = IKcos(j5array[numsolutions]);
numsolutions++;
}
}
bool j5valid[2]={true,true};
_nj5 = 2;
for(int ij5 = 0; ij5 < numsolutions; ++ij5)
    {
if( !j5valid[ij5] )
{
    continue;
}
    j5 = j5array[ij5]; cj5 = cj5array[ij5]; sj5 = sj5array[ij5];
htj5 = IKtan(j5/2);

_ij5[0] = ij5; _ij5[1] = -1;
for(int iij5 = ij5+1; iij5 < numsolutions; ++iij5)
{
if( j5valid[iij5] && IKabs(cj5array[ij5]-cj5array[iij5]) < IKFAST_SOLUTION_THRESH && IKabs(sj5array[ij5]-sj5array[iij5]) < IKFAST_SOLUTION_THRESH )
{
    j5valid[iij5]=false; _ij5[1] = iij5; break; 
}
}
{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j2;
vinfos[0].indices[0] = _ij2[0];
vinfos[0].indices[1] = _ij2[1];
vinfos[0].maxsolutions = _nj2;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j3;
vinfos[1].indices[0] = _ij3[0];
vinfos[1].indices[1] = _ij3[1];
vinfos[1].maxsolutions = _nj3;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j4;
vinfos[2].indices[0] = _ij4[0];
vinfos[2].indices[1] = _ij4[1];
vinfos[2].maxsolutions = _nj4;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j5;
vinfos[3].indices[0] = _ij5[0];
vinfos[3].indices[1] = _ij5[1];
vinfos[3].maxsolutions = _nj5;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j6;
vinfos[4].indices[0] = _ij6[0];
vinfos[4].indices[1] = _ij6[1];
vinfos[4].maxsolutions = _nj6;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j7;
vinfos[5].indices[0] = _ij7[0];
vinfos[5].indices[1] = _ij7[1];
vinfos[5].maxsolutions = _nj7;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j8;
vinfos[6].indices[0] = _ij8[0];
vinfos[6].indices[1] = _ij8[1];
vinfos[6].maxsolutions = _nj8;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
    }

}

}

} else
{
IkReal op[2+1], zeror[2];
int numroots;
IkReal x2802=((1.94128872830752)*new_r01);
IkReal x2803=((3.05879734905186)*new_r11);
IkReal x2804=((3.48207454681763)*cj3);
IkReal x2805=(x2802+x2803);
op[0]=((((-1.0)*x2804))+sj3+x2805);
op[1]=((((-6.11759469810373)*new_r01))+(((3.88257745661505)*new_r11)));
op[2]=((((-1.0)*x2805))+(((-1.0)*x2804))+sj3);
polyroots2(op,zeror,numroots);
IkReal j5array[2], cj5array[2], sj5array[2], tempj5array[1];
int numsolutions = 0;
for(int ij5 = 0; ij5 < numroots; ++ij5)
{
IkReal htj5 = zeror[ij5];
tempj5array[0]=((2.0)*(atan(htj5)));
for(int kj5 = 0; kj5 < 1; ++kj5)
{
j5array[numsolutions] = tempj5array[kj5];
if( j5array[numsolutions] > IKPI )
{
    j5array[numsolutions]-=IK2PI;
}
else if( j5array[numsolutions] < -IKPI )
{
    j5array[numsolutions]+=IK2PI;
}
sj5array[numsolutions] = IKsin(j5array[numsolutions]);
cj5array[numsolutions] = IKcos(j5array[numsolutions]);
numsolutions++;
}
}
bool j5valid[2]={true,true};
_nj5 = 2;
for(int ij5 = 0; ij5 < numsolutions; ++ij5)
    {
if( !j5valid[ij5] )
{
    continue;
}
    j5 = j5array[ij5]; cj5 = cj5array[ij5]; sj5 = sj5array[ij5];
htj5 = IKtan(j5/2);

_ij5[0] = ij5; _ij5[1] = -1;
for(int iij5 = ij5+1; iij5 < numsolutions; ++iij5)
{
if( j5valid[iij5] && IKabs(cj5array[ij5]-cj5array[iij5]) < IKFAST_SOLUTION_THRESH && IKabs(sj5array[ij5]-sj5array[iij5]) < IKFAST_SOLUTION_THRESH )
{
    j5valid[iij5]=false; _ij5[1] = iij5; break; 
}
}
{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j2;
vinfos[0].indices[0] = _ij2[0];
vinfos[0].indices[1] = _ij2[1];
vinfos[0].maxsolutions = _nj2;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j3;
vinfos[1].indices[0] = _ij3[0];
vinfos[1].indices[1] = _ij3[1];
vinfos[1].maxsolutions = _nj3;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j4;
vinfos[2].indices[0] = _ij4[0];
vinfos[2].indices[1] = _ij4[1];
vinfos[2].maxsolutions = _nj4;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j5;
vinfos[3].indices[0] = _ij5[0];
vinfos[3].indices[1] = _ij5[1];
vinfos[3].maxsolutions = _nj5;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j6;
vinfos[4].indices[0] = _ij6[0];
vinfos[4].indices[1] = _ij6[1];
vinfos[4].maxsolutions = _nj6;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j7;
vinfos[5].indices[0] = _ij7[0];
vinfos[5].indices[1] = _ij7[1];
vinfos[5].maxsolutions = _nj7;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j8;
vinfos[6].indices[0] = _ij8[0];
vinfos[6].indices[1] = _ij8[1];
vinfos[6].maxsolutions = _nj8;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
    }

}

}

} else
{
IkReal op[2+1], zeror[2];
int numroots;
IkReal x2806=((3.48207454681763)*sj3);
IkReal x2807=((1.94128872830752)*new_r00);
IkReal x2808=((3.05879734905186)*new_r10);
IkReal x2809=(cj3+x2806);
IkReal x2810=(x2808+x2807);
op[0]=(x2809+x2810);
op[1]=((((-6.11759469810373)*new_r00))+(((3.88257745661505)*new_r10)));
op[2]=((((-1.0)*x2810))+x2809);
polyroots2(op,zeror,numroots);
IkReal j5array[2], cj5array[2], sj5array[2], tempj5array[1];
int numsolutions = 0;
for(int ij5 = 0; ij5 < numroots; ++ij5)
{
IkReal htj5 = zeror[ij5];
tempj5array[0]=((2.0)*(atan(htj5)));
for(int kj5 = 0; kj5 < 1; ++kj5)
{
j5array[numsolutions] = tempj5array[kj5];
if( j5array[numsolutions] > IKPI )
{
    j5array[numsolutions]-=IK2PI;
}
else if( j5array[numsolutions] < -IKPI )
{
    j5array[numsolutions]+=IK2PI;
}
sj5array[numsolutions] = IKsin(j5array[numsolutions]);
cj5array[numsolutions] = IKcos(j5array[numsolutions]);
numsolutions++;
}
}
bool j5valid[2]={true,true};
_nj5 = 2;
for(int ij5 = 0; ij5 < numsolutions; ++ij5)
    {
if( !j5valid[ij5] )
{
    continue;
}
    j5 = j5array[ij5]; cj5 = cj5array[ij5]; sj5 = sj5array[ij5];
htj5 = IKtan(j5/2);

_ij5[0] = ij5; _ij5[1] = -1;
for(int iij5 = ij5+1; iij5 < numsolutions; ++iij5)
{
if( j5valid[iij5] && IKabs(cj5array[ij5]-cj5array[iij5]) < IKFAST_SOLUTION_THRESH && IKabs(sj5array[ij5]-sj5array[iij5]) < IKFAST_SOLUTION_THRESH )
{
    j5valid[iij5]=false; _ij5[1] = iij5; break; 
}
}
{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j2;
vinfos[0].indices[0] = _ij2[0];
vinfos[0].indices[1] = _ij2[1];
vinfos[0].maxsolutions = _nj2;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j3;
vinfos[1].indices[0] = _ij3[0];
vinfos[1].indices[1] = _ij3[1];
vinfos[1].maxsolutions = _nj3;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j4;
vinfos[2].indices[0] = _ij4[0];
vinfos[2].indices[1] = _ij4[1];
vinfos[2].maxsolutions = _nj4;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j5;
vinfos[3].indices[0] = _ij5[0];
vinfos[3].indices[1] = _ij5[1];
vinfos[3].maxsolutions = _nj5;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j6;
vinfos[4].indices[0] = _ij6[0];
vinfos[4].indices[1] = _ij6[1];
vinfos[4].maxsolutions = _nj6;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j7;
vinfos[5].indices[0] = _ij7[0];
vinfos[5].indices[1] = _ij7[1];
vinfos[5].maxsolutions = _nj7;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j8;
vinfos[6].indices[0] = _ij8[0];
vinfos[6].indices[1] = _ij8[1];
vinfos[6].maxsolutions = _nj8;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
    }

}

}
}
}

}

}

} else
{
{
IkReal j5array[2], cj5array[2], sj5array[2];
bool j5valid[2]={false};
_nj5 = 2;
CheckValue<IkReal> x2812 = IKatan2WithCheck(IkReal(((((0.103420015812922)*sj4))+(((-0.837955424564001)*cj4)))),IkReal(((((-0.0656300100348293)*sj4))+(((0.531815483588428)*cj4)))),IKFAST_ATAN2_MAGTHRESH);
if(!x2812.valid){
continue;
}
IkReal x2811=x2812.value;
j5array[0]=((-1.0)*x2811);
sj5array[0]=IKsin(j5array[0]);
cj5array[0]=IKcos(j5array[0]);
j5array[1]=((3.14159265358979)+(((-1.0)*x2811)));
sj5array[1]=IKsin(j5array[1]);
cj5array[1]=IKcos(j5array[1]);
if( j5array[0] > IKPI )
{
    j5array[0]-=IK2PI;
}
else if( j5array[0] < -IKPI )
{    j5array[0]+=IK2PI;
}
j5valid[0] = true;
if( j5array[1] > IKPI )
{
    j5array[1]-=IK2PI;
}
else if( j5array[1] < -IKPI )
{    j5array[1]+=IK2PI;
}
j5valid[1] = true;
for(int ij5 = 0; ij5 < 2; ++ij5)
{
if( !j5valid[ij5] )
{
    continue;
}
_ij5[0] = ij5; _ij5[1] = -1;
for(int iij5 = ij5+1; iij5 < 2; ++iij5)
{
if( j5valid[iij5] && IKabs(cj5array[ij5]-cj5array[iij5]) < IKFAST_SOLUTION_THRESH && IKabs(sj5array[ij5]-sj5array[iij5]) < IKFAST_SOLUTION_THRESH )
{
    j5valid[iij5]=false; _ij5[1] = iij5; break; 
}
}
j5 = j5array[ij5]; cj5 = cj5array[ij5]; sj5 = sj5array[ij5];
{
IkReal evalcond[3];
IkReal x2813=IKsin(j5);
IkReal x2814=IKcos(j5);
IkReal x2815=(sj4*x2814);
IkReal x2816=(cj4*x2814);
IkReal x2817=(cj4*x2813);
IkReal x2818=((0.103420015812922)*sj4*x2813);
IkReal x2819=((0.0656300100348293)*sj4*x2813);
evalcond[0]=((((-0.0656300100348293)*x2815))+(((-1.0)*x2818))+(((0.531815483588428)*x2816))+(((0.837955424564001)*x2817)));
evalcond[1]=((((0.103420015812922)*new_r00*x2815))+(((0.531815483588428)*new_r00*x2817))+(((-0.0656300100348293)*new_r10*x2815))+(((-1.0)*new_r10*x2818))+(((0.531815483588428)*new_r10*x2816))+(((0.837955424564001)*new_r10*x2817))+(((-1.0)*new_r00*x2819))+(((-0.837955424564001)*new_r00*x2816)));
evalcond[2]=((((-0.0656300100348293)*new_r11*x2815))+(((-1.0)*new_r11*x2818))+(((-0.837955424564001)*new_r01*x2816))+(((0.531815483588428)*new_r11*x2816))+(((-1.0)*new_r01*x2819))+(((0.837955424564001)*new_r11*x2817))+(((0.103420015812922)*new_r01*x2815))+(((0.531815483588428)*new_r01*x2817)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j3array[1], cj3array[1], sj3array[1];
bool j3valid[1]={false};
_nj3 = 1;
IkReal x2820=((0.515031836328808)*cj5);
IkReal x2821=(new_r11*sj5);
IkReal x2822=(new_r10*sj5);
IkReal x2823=(cj5*new_r10);
IkReal x2824=((0.147909480226238)*cj5);
IkReal x2825=(new_r00*sj5);
IkReal x2826=(cj5*new_r11);
IkReal x2827=(new_r01*sj5);
if( IKabs(((((0.233054011708033)*x2826))+(((0.233054011708033)*x2827))+((new_r01*x2824))+((new_r00*x2820))+(((-0.515031836328808)*x2822))+(((0.811511442202281)*x2823))+(((0.811511442202281)*x2825))+(((-0.147909480226238)*x2821)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((((0.515031836328808)*x2821))+(((0.233054011708033)*x2823))+(((0.233054011708033)*x2825))+((new_r00*x2824))+(((-0.811511442202281)*x2826))+(((-0.811511442202281)*x2827))+(((-1.0)*new_r01*x2820))+(((-0.147909480226238)*x2822)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((((0.233054011708033)*x2826))+(((0.233054011708033)*x2827))+((new_r01*x2824))+((new_r00*x2820))+(((-0.515031836328808)*x2822))+(((0.811511442202281)*x2823))+(((0.811511442202281)*x2825))+(((-0.147909480226238)*x2821))))+IKsqr(((((0.515031836328808)*x2821))+(((0.233054011708033)*x2823))+(((0.233054011708033)*x2825))+((new_r00*x2824))+(((-0.811511442202281)*x2826))+(((-0.811511442202281)*x2827))+(((-1.0)*new_r01*x2820))+(((-0.147909480226238)*x2822))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j3array[0]=IKatan2(((((0.233054011708033)*x2826))+(((0.233054011708033)*x2827))+((new_r01*x2824))+((new_r00*x2820))+(((-0.515031836328808)*x2822))+(((0.811511442202281)*x2823))+(((0.811511442202281)*x2825))+(((-0.147909480226238)*x2821))), ((((0.515031836328808)*x2821))+(((0.233054011708033)*x2823))+(((0.233054011708033)*x2825))+((new_r00*x2824))+(((-0.811511442202281)*x2826))+(((-0.811511442202281)*x2827))+(((-1.0)*new_r01*x2820))+(((-0.147909480226238)*x2822))));
sj3array[0]=IKsin(j3array[0]);
cj3array[0]=IKcos(j3array[0]);
if( j3array[0] > IKPI )
{
    j3array[0]-=IK2PI;
}
else if( j3array[0] < -IKPI )
{    j3array[0]+=IK2PI;
}
j3valid[0] = true;
for(int ij3 = 0; ij3 < 1; ++ij3)
{
if( !j3valid[ij3] )
{
    continue;
}
_ij3[0] = ij3; _ij3[1] = -1;
for(int iij3 = ij3+1; iij3 < 1; ++iij3)
{
if( j3valid[iij3] && IKabs(cj3array[ij3]-cj3array[iij3]) < IKFAST_SOLUTION_THRESH && IKabs(sj3array[ij3]-sj3array[iij3]) < IKFAST_SOLUTION_THRESH )
{
    j3valid[iij3]=false; _ij3[1] = iij3; break; 
}
}
j3 = j3array[ij3]; cj3 = cj3array[ij3]; sj3 = sj3array[ij3];
{
IkReal evalcond[14];
IkReal x2828=IKsin(j3);
IkReal x2829=IKcos(j3);
IkReal x2830=(cj5*sj4);
IkReal x2831=(new_r01*sj5);
IkReal x2832=((0.531815483588428)*sj4);
IkReal x2833=(new_r10*sj5);
IkReal x2834=(cj5*new_r01);
IkReal x2835=((0.0181157120800272)*sj5);
IkReal x2836=((0.515031836328808)*sj5);
IkReal x2837=(new_r00*sj5);
IkReal x2838=(new_r11*sj5);
IkReal x2839=((0.0630802599313394)*sj5);
IkReal x2840=((0.0656300100348293)*cj4);
IkReal x2841=(cj5*new_r00);
IkReal x2842=((0.028546806998574)*sj5);
IkReal x2843=(sj4*sj5);
IkReal x2844=((0.837955424564001)*sj4);
IkReal x2845=((0.0994021100426501)*sj5);
IkReal x2846=(cj5*new_r10);
IkReal x2847=((0.103420015812922)*cj4);
IkReal x2848=(cj5*new_r11);
IkReal x2849=((0.276027873078388)*x2828);
IkReal x2850=((0.961149631058464)*x2829);
IkReal x2851=((0.276027873078388)*x2829);
IkReal x2852=((0.961149631058464)*x2828);
IkReal x2853=((0.805400547163128)*x2828);
IkReal x2854=(sj4*x2829);
IkReal x2855=((0.147909480226238)*x2829);
IkReal x2856=(cj5*x2828);
IkReal x2857=(cj4*x2829);
IkReal x2858=((0.511154255842196)*x2828);
IkReal x2859=(cj4*x2828);
IkReal x2860=((0.146795896805068)*x2828);
IkReal x2861=((0.231299053576899)*x2828);
IkReal x2862=((0.147909480226238)*x2828);
IkReal x2863=(sj5*x2828);
IkReal x2864=((0.811511442202281)*x2829);
IkReal x2865=(cj5*x2829);
IkReal x2866=(sj4*x2828);
IkReal x2867=(x2851+x2852);
evalcond[0]=((((0.535849798705775)*x2833))+(((-0.844313326436599)*x2846))+(((-0.844313326436599)*x2837))+(((-0.535849798705775)*x2841))+x2867);
evalcond[1]=((((0.535849798705775)*x2838))+(((-0.535849798705775)*x2834))+(((-0.844313326436599)*x2848))+(((-0.844313326436599)*x2831))+x2849+(((-1.0)*x2850)));
evalcond[2]=((((0.273949425080978)*x2859))+(((-0.953912320189798)*x2857))+(((-0.033809750247604)*x2866))+(((5.13522966898714e-6)*x2828))+(((0.117728070771443)*x2854))+(((1.47476155376408e-6)*x2829)));
evalcond[3]=((((-0.953912320189798)*x2859))+(((0.117728070771443)*x2866))+(((0.033809750247604)*x2854))+(((-0.273949425080978)*x2857))+(((-5.13522966898714e-6)*x2829))+(((1.47476155376408e-6)*x2828)));
evalcond[4]=((((0.0630802599313394)*x2857))+(((-0.0181157120800272)*x2859))+(((-0.811511442202281)*x2828))+(((-1.0)*sj4*x2860))+(((-0.233054011708033)*x2829))+x2846+x2837+(((0.511154255842196)*x2854)));
evalcond[5]=((((0.146795896805068)*x2854))+(((0.0630802599313394)*x2859))+(((0.0181157120800272)*x2857))+(((-0.233054011708033)*x2828))+x2848+x2831+x2864+((sj4*x2858)));
evalcond[6]=((((-0.805400547163128)*x2854))+(((-1.0)*x2833))+((sj4*x2861))+(((0.028546806998574)*x2859))+x2841+(((-0.0994021100426501)*x2857))+(((-0.515031836328808)*x2828))+(((-1.0)*x2855)));
evalcond[7]=((((-0.028546806998574)*x2857))+(((-1.0)*x2838))+(((0.515031836328808)*x2829))+(((-0.231299053576899)*x2854))+(((-1.0)*x2862))+x2834+(((-0.0994021100426501)*x2859))+(((-1.0)*sj4*x2853)));
evalcond[8]=((((-1.0)*x2840*x2846))+(((-0.531815483588428)*new_r10*x2830))+(((-1.0)*x2832*x2837))+(((-1.0)*x2833*x2844))+(((-1.0)*x2833*x2847))+x2849+(((0.837955424564001)*new_r00*x2830))+(((-1.0)*x2837*x2840))+((x2841*x2847))+(((-1.0)*x2850)));
evalcond[9]=((((-1.0)*x2840*x2848))+(((-1.0)*x2831*x2840))+(((-0.531815483588428)*new_r11*x2830))+(((-1.0)*x2867))+(((-1.0)*x2838*x2844))+(((-1.0)*x2838*x2847))+((x2834*x2847))+(((0.837955424564001)*new_r01*x2830))+(((-1.0)*x2831*x2832)));
evalcond[10]=((((-0.515031836328808)*x2856))+(((-0.233054011708033)*sj5*x2829))+(((-0.811511442202281)*x2863))+(((0.028546806998574)*cj4*x2856))+(((-0.0994021100426501)*cj5*x2857))+(((-1.0)*cj5*x2855))+(((-1.0)*x2843*x2860))+(((-1.0)*x2835*x2859))+new_r00+(((-0.805400547163128)*x2829*x2830))+((x2839*x2857))+(((0.511154255842196)*x2829*x2843))+((x2830*x2861)));
evalcond[11]=((((-0.147909480226238)*x2856))+((x2835*x2857))+(((-0.231299053576899)*x2829*x2830))+(((-0.028546806998574)*cj5*x2857))+(((-1.0)*x2830*x2853))+(((0.146795896805068)*x2829*x2843))+(((-0.233054011708033)*x2863))+(((-0.0994021100426501)*cj4*x2856))+((x2843*x2858))+(((0.515031836328808)*x2865))+new_r01+((x2839*x2859))+((sj5*x2864)));
evalcond[12]=((((0.805400547163128)*x2829*x2843))+(((0.0630802599313394)*cj5*x2857))+(((-1.0)*x2842*x2859))+(((0.511154255842196)*x2829*x2830))+(((-0.233054011708033)*x2865))+((x2828*x2836))+((sj5*x2855))+(((-0.0181157120800272)*cj4*x2856))+((x2845*x2857))+(((-1.0)*x2843*x2861))+(((-0.811511442202281)*x2856))+(((-1.0)*x2830*x2860))+new_r10);
evalcond[13]=((((0.0630802599313394)*cj4*x2856))+(((0.146795896805068)*x2829*x2830))+((cj5*x2864))+((x2843*x2853))+((x2842*x2857))+((x2845*x2859))+(((-0.233054011708033)*x2856))+((x2830*x2858))+new_r11+((sj5*x2862))+(((-1.0)*x2829*x2836))+(((0.0181157120800272)*cj5*x2857))+(((0.231299053576899)*x2829*x2843)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[9]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[10]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[11]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[12]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[13]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j2;
vinfos[0].indices[0] = _ij2[0];
vinfos[0].indices[1] = _ij2[1];
vinfos[0].maxsolutions = _nj2;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j3;
vinfos[1].indices[0] = _ij3[0];
vinfos[1].indices[1] = _ij3[1];
vinfos[1].maxsolutions = _nj3;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j4;
vinfos[2].indices[0] = _ij4[0];
vinfos[2].indices[1] = _ij4[1];
vinfos[2].maxsolutions = _nj4;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j5;
vinfos[3].indices[0] = _ij5[0];
vinfos[3].indices[1] = _ij5[1];
vinfos[3].maxsolutions = _nj5;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j6;
vinfos[4].indices[0] = _ij6[0];
vinfos[4].indices[1] = _ij6[1];
vinfos[4].maxsolutions = _nj6;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j7;
vinfos[5].indices[0] = _ij7[0];
vinfos[5].indices[1] = _ij7[1];
vinfos[5].maxsolutions = _nj7;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j8;
vinfos[6].indices[0] = _ij8[0];
vinfos[6].indices[1] = _ij8[1];
vinfos[6].maxsolutions = _nj8;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
if( 1 )
{
bgotonextstatement=false;
continue; // branch miss [j3, j5]

}
} while(0);
if( bgotonextstatement )
{
}
}
}
}
}
}
}
}
}
}

} else
{
{
IkReal j5array[1], cj5array[1], sj5array[1];
bool j5valid[1]={false};
_nj5 = 1;
IkReal x2868=cj4*cj4;
IkReal x2869=(cj4*sj4);
CheckValue<IkReal> x2870 = IKatan2WithCheck(IkReal(((0.00678745667560425)+(((0.438850212664446)*x2868))+(((-0.109995388645147)*x2869))+((new_r02*new_r12)))),IkReal(((0.00430729821717179)+(((-1.0)*(new_r02*new_r02)))+(((0.278520410367222)*x2868))+(((-0.0698061110491722)*x2869)))),IKFAST_ATAN2_MAGTHRESH);
if(!x2870.valid){
continue;
}
CheckValue<IkReal> x2871=IKPowWithIntegerCheck(IKsign(((((0.0656300100348293)*new_r12*sj4))+(((-0.837955424564001)*cj4*new_r02))+(((0.103420015812922)*new_r02*sj4))+(((-0.531815483588428)*cj4*new_r12)))),-1);
if(!x2871.valid){
continue;
}
j5array[0]=((-1.5707963267949)+(x2870.value)+(((1.5707963267949)*(x2871.value))));
sj5array[0]=IKsin(j5array[0]);
cj5array[0]=IKcos(j5array[0]);
if( j5array[0] > IKPI )
{
    j5array[0]-=IK2PI;
}
else if( j5array[0] < -IKPI )
{    j5array[0]+=IK2PI;
}
j5valid[0] = true;
for(int ij5 = 0; ij5 < 1; ++ij5)
{
if( !j5valid[ij5] )
{
    continue;
}
_ij5[0] = ij5; _ij5[1] = -1;
for(int iij5 = ij5+1; iij5 < 1; ++iij5)
{
if( j5valid[iij5] && IKabs(cj5array[ij5]-cj5array[iij5]) < IKFAST_SOLUTION_THRESH && IKabs(sj5array[ij5]-sj5array[iij5]) < IKFAST_SOLUTION_THRESH )
{
    j5valid[iij5]=false; _ij5[1] = iij5; break; 
}
}
j5 = j5array[ij5]; cj5 = cj5array[ij5]; sj5 = sj5array[ij5];
{
IkReal evalcond[9];
IkReal x2872=IKcos(j5);
IkReal x2873=IKsin(j5);
IkReal x2874=((0.0656300100348293)*sj4);
IkReal x2875=((0.122486725237355)*new_r22);
IkReal x2876=(new_r12*sj4);
IkReal x2877=((0.531815483588428)*cj4);
IkReal x2878=((0.837955424564001)*cj4);
IkReal x2879=((0.122486725237355)*cj4);
IkReal x2880=((0.992470151748698)*sj4);
IkReal x2881=((0.0656300100348293)*cj4);
IkReal x2882=((0.103420015812922)*cj4);
IkReal x2883=((0.837955424564001)*x2873);
IkReal x2884=(new_r10*x2872);
IkReal x2885=(new_r12*x2872);
IkReal x2886=(new_r02*x2872);
IkReal x2887=(new_r12*x2873);
IkReal x2888=(new_r01*x2873);
IkReal x2889=(new_r02*x2873);
IkReal x2890=(new_r00*x2873);
IkReal x2891=(new_r11*x2872);
IkReal x2892=((0.103420015812922)*sj4*x2872);
IkReal x2893=((0.103420015812922)*sj4*x2873);
evalcond[0]=((((-1.0)*x2874))+x2885+x2889+x2877);
evalcond[1]=((((0.103420015812922)*sj4))+(((-1.0)*x2878))+(((-1.0)*x2887))+x2886);
evalcond[2]=(((x2873*x2877))+(((-1.0)*x2872*x2878))+(((-1.0)*x2873*x2874))+new_r02+x2892);
evalcond[3]=(((x2872*x2877))+((x2873*x2878))+(((-1.0)*x2872*x2874))+(((-1.0)*x2893))+new_r12);
evalcond[4]=((((5.34279939673075e-6)*new_r22))+(((0.535849798705775)*x2887))+(((-0.535849798705775)*x2886))+(((-0.844313326436599)*x2885))+(((-0.844313326436599)*x2889)));
evalcond[5]=((((0.992470151748698)*cj4*new_r22))+(((-1.0)*x2882*x2887))+(((-0.531815483588428)*x2872*x2876))+(((-1.0)*x2876*x2883))+(((-0.531815483588428)*sj4*x2889))+(((-1.0)*sj4*x2875))+((x2882*x2886))+(((0.837955424564001)*sj4*x2886))+(((-1.0)*x2881*x2889))+(((-1.0)*x2881*x2885)));
evalcond[6]=(((x2877*x2884))+(((-1.0)*new_r10*x2893))+(((-1.0)*x2874*x2890))+(((-1.0)*new_r00*x2872*x2878))+(((-1.0)*x2874*x2884))+((new_r00*x2892))+((new_r20*x2880))+((new_r10*x2873*x2878))+((new_r20*x2879))+((x2877*x2890)));
evalcond[7]=(((x2877*x2888))+(((-1.0)*new_r11*x2893))+((new_r11*x2873*x2878))+((new_r21*x2879))+((new_r21*x2880))+(((-1.0)*x2874*x2891))+(((-1.0)*x2874*x2888))+((new_r01*x2892))+(((-1.0)*new_r01*x2872*x2878))+((x2877*x2891)));
evalcond[8]=((1.0)+((x2877*x2889))+((x2877*x2885))+((cj4*x2875))+((new_r22*x2880))+(((-1.0)*x2874*x2889))+(((-1.0)*x2874*x2885))+(((-0.103420015812922)*x2873*x2876))+(((0.103420015812922)*sj4*x2886))+((x2878*x2887))+(((-1.0)*x2878*x2886)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j3array[1], cj3array[1], sj3array[1];
bool j3valid[1]={false};
_nj3 = 1;
IkReal x2894=(new_r10*sj5);
IkReal x2895=(cj5*new_r00);
IkReal x2896=((11807.3987699217)*sj4);
IkReal x2897=(cj5*new_r10);
IkReal x2898=(new_r00*sj5);
IkReal x2899=((5342.89621935131)*sj4);
IkReal x2900=(cj4*new_r20);
IkReal x2901=((27475.4362619396)*cj4);
IkReal x2902=(new_r20*sj4);
IkReal x2903=((95671.5172704101)*cj4);
IkReal x2904=((150745.110265814)*cj4);
IkReal x2905=((3390.90924423569)*sj4);
IkReal x2906=((18604.3629316913)*sj4);
IkReal x2907=((43291.7527292989)*cj4);
if( IKabs(((((0.515031836328808)*x2895))+(((-0.273949425080978)*x2900))+(((-1.0)*x2894*x2901))+(((-51663.5292815391)*new_r21))+((x2894*x2905))+(((-5.13522966898714e-6)*new_r20))+((x2898*x2907))+((x2897*x2907))+(((-1.0)*x2898*x2899))+(((-1.0)*x2897*x2899))+(((-1.0)*x2895*x2905))+(((-0.515031836328808)*x2894))+(((0.811511442202281)*x2897))+(((0.811511442202281)*x2898))+((x2895*x2901))+(((0.033809750247604)*x2902)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((((-1.47476155376408e-6)*new_r20))+(((0.233054011708033)*x2897))+(((0.233054011708033)*x2898))+(((-1.0)*x2898*x2904))+((x2895*x2896))+(((0.953912320189799)*x2900))+(((-1.0)*x2897*x2904))+((x2894*x2903))+((x2898*x2906))+((x2897*x2906))+(((179896.260310015)*new_r21))+(((0.147909480226238)*x2895))+(((-0.147909480226238)*x2894))+(((-1.0)*x2895*x2903))+(((-1.0)*x2894*x2896))+(((-0.117728070771443)*x2902)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((((0.515031836328808)*x2895))+(((-0.273949425080978)*x2900))+(((-1.0)*x2894*x2901))+(((-51663.5292815391)*new_r21))+((x2894*x2905))+(((-5.13522966898714e-6)*new_r20))+((x2898*x2907))+((x2897*x2907))+(((-1.0)*x2898*x2899))+(((-1.0)*x2897*x2899))+(((-1.0)*x2895*x2905))+(((-0.515031836328808)*x2894))+(((0.811511442202281)*x2897))+(((0.811511442202281)*x2898))+((x2895*x2901))+(((0.033809750247604)*x2902))))+IKsqr(((((-1.47476155376408e-6)*new_r20))+(((0.233054011708033)*x2897))+(((0.233054011708033)*x2898))+(((-1.0)*x2898*x2904))+((x2895*x2896))+(((0.953912320189799)*x2900))+(((-1.0)*x2897*x2904))+((x2894*x2903))+((x2898*x2906))+((x2897*x2906))+(((179896.260310015)*new_r21))+(((0.147909480226238)*x2895))+(((-0.147909480226238)*x2894))+(((-1.0)*x2895*x2903))+(((-1.0)*x2894*x2896))+(((-0.117728070771443)*x2902))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j3array[0]=IKatan2(((((0.515031836328808)*x2895))+(((-0.273949425080978)*x2900))+(((-1.0)*x2894*x2901))+(((-51663.5292815391)*new_r21))+((x2894*x2905))+(((-5.13522966898714e-6)*new_r20))+((x2898*x2907))+((x2897*x2907))+(((-1.0)*x2898*x2899))+(((-1.0)*x2897*x2899))+(((-1.0)*x2895*x2905))+(((-0.515031836328808)*x2894))+(((0.811511442202281)*x2897))+(((0.811511442202281)*x2898))+((x2895*x2901))+(((0.033809750247604)*x2902))), ((((-1.47476155376408e-6)*new_r20))+(((0.233054011708033)*x2897))+(((0.233054011708033)*x2898))+(((-1.0)*x2898*x2904))+((x2895*x2896))+(((0.953912320189799)*x2900))+(((-1.0)*x2897*x2904))+((x2894*x2903))+((x2898*x2906))+((x2897*x2906))+(((179896.260310015)*new_r21))+(((0.147909480226238)*x2895))+(((-0.147909480226238)*x2894))+(((-1.0)*x2895*x2903))+(((-1.0)*x2894*x2896))+(((-0.117728070771443)*x2902))));
sj3array[0]=IKsin(j3array[0]);
cj3array[0]=IKcos(j3array[0]);
if( j3array[0] > IKPI )
{
    j3array[0]-=IK2PI;
}
else if( j3array[0] < -IKPI )
{    j3array[0]+=IK2PI;
}
j3valid[0] = true;
for(int ij3 = 0; ij3 < 1; ++ij3)
{
if( !j3valid[ij3] )
{
    continue;
}
_ij3[0] = ij3; _ij3[1] = -1;
for(int iij3 = ij3+1; iij3 < 1; ++iij3)
{
if( j3valid[iij3] && IKabs(cj3array[ij3]-cj3array[iij3]) < IKFAST_SOLUTION_THRESH && IKabs(sj3array[ij3]-sj3array[iij3]) < IKFAST_SOLUTION_THRESH )
{
    j3valid[iij3]=false; _ij3[1] = iij3; break; 
}
}
j3 = j3array[ij3]; cj3 = cj3array[ij3]; sj3 = sj3array[ij3];
{
IkReal evalcond[14];
IkReal x2908=IKsin(j3);
IkReal x2909=IKcos(j3);
IkReal x2910=(cj5*sj4);
IkReal x2911=(new_r01*sj5);
IkReal x2912=((0.531815483588428)*sj4);
IkReal x2913=(new_r10*sj5);
IkReal x2914=(cj5*new_r01);
IkReal x2915=((0.0181157120800272)*sj5);
IkReal x2916=((0.515031836328808)*sj5);
IkReal x2917=(new_r00*sj5);
IkReal x2918=((0.122486725237355)*sj4);
IkReal x2919=(new_r11*sj5);
IkReal x2920=((0.0630802599313394)*sj5);
IkReal x2921=((0.0656300100348293)*cj4);
IkReal x2922=(cj5*new_r00);
IkReal x2923=((0.028546806998574)*sj5);
IkReal x2924=(sj4*sj5);
IkReal x2925=((0.837955424564001)*sj4);
IkReal x2926=((0.0994021100426501)*sj5);
IkReal x2927=(cj5*new_r10);
IkReal x2928=((0.103420015812922)*cj4);
IkReal x2929=(cj5*new_r11);
IkReal x2930=((0.992470151748698)*cj4);
IkReal x2931=((0.276027873078388)*x2908);
IkReal x2932=((0.961149631058464)*x2909);
IkReal x2933=((0.276027873078388)*x2909);
IkReal x2934=((0.961149631058464)*x2908);
IkReal x2935=((0.805400547163128)*x2908);
IkReal x2936=(sj4*x2909);
IkReal x2937=((0.147909480226238)*x2909);
IkReal x2938=(cj5*x2908);
IkReal x2939=(cj4*x2909);
IkReal x2940=((0.511154255842196)*x2908);
IkReal x2941=(cj4*x2908);
IkReal x2942=((0.146795896805068)*x2908);
IkReal x2943=((0.231299053576899)*x2908);
IkReal x2944=((0.147909480226238)*x2908);
IkReal x2945=(sj5*x2908);
IkReal x2946=((0.811511442202281)*x2909);
IkReal x2947=(cj5*x2909);
IkReal x2948=(sj4*x2908);
IkReal x2949=(x2934+x2933);
evalcond[0]=((((5.34279939673075e-6)*new_r20))+(((-0.844313326436599)*x2917))+(((0.535849798705775)*x2913))+(((-0.535849798705775)*x2922))+x2949+(((-0.844313326436599)*x2927)));
evalcond[1]=((((-1.0)*x2932))+(((5.34279939673075e-6)*new_r21))+(((-0.844313326436599)*x2911))+(((0.535849798705775)*x2919))+x2931+(((-0.844313326436599)*x2929))+(((-0.535849798705775)*x2914)));
evalcond[2]=((((-0.953912320189798)*x2939))+(((0.273949425080978)*x2941))+(((-0.033809750247604)*x2948))+(((5.13522966898714e-6)*x2908))+new_r20+(((1.47476155376408e-6)*x2909))+(((0.117728070771443)*x2936)));
evalcond[3]=((((0.033809750247604)*x2936))+(((-5.13522966898714e-6)*x2909))+(((-0.953912320189798)*x2941))+(((-0.273949425080978)*x2939))+(((0.117728070771443)*x2948))+new_r21+(((1.47476155376408e-6)*x2908)));
evalcond[4]=((((-0.233054011708033)*x2909))+(((0.511154255842196)*x2936))+(((-1.0)*sj4*x2942))+(((-0.811511442202281)*x2908))+x2917+x2927+(((0.0630802599313394)*x2939))+(((-0.0181157120800272)*x2941)));
evalcond[5]=(((sj4*x2940))+(((0.146795896805068)*x2936))+(((-0.233054011708033)*x2908))+(((0.0181157120800272)*x2939))+(((0.0630802599313394)*x2941))+x2911+x2929+x2946);
evalcond[6]=((((0.028546806998574)*x2941))+((sj4*x2943))+(((-0.515031836328808)*x2908))+(((-1.0)*x2937))+(((-0.805400547163128)*x2936))+(((-1.0)*x2913))+(((-0.0994021100426501)*x2939))+x2922);
evalcond[7]=((((-0.028546806998574)*x2939))+(((-1.0)*sj4*x2935))+(((0.515031836328808)*x2909))+(((-0.0994021100426501)*x2941))+(((-1.0)*x2944))+(((-1.0)*x2919))+x2914+(((-0.231299053576899)*x2936)));
evalcond[8]=((((-1.0)*x2912*x2917))+((new_r20*x2930))+(((-1.0)*x2921*x2927))+(((-1.0)*new_r20*x2918))+(((-0.531815483588428)*new_r10*x2910))+(((-1.0)*x2932))+(((-1.0)*x2917*x2921))+(((-1.0)*x2913*x2925))+(((-1.0)*x2913*x2928))+(((0.837955424564001)*new_r00*x2910))+((x2922*x2928))+x2931);
evalcond[9]=((((-1.0)*x2911*x2921))+(((-0.531815483588428)*new_r11*x2910))+(((-1.0)*x2921*x2929))+(((-1.0)*new_r21*x2918))+((x2914*x2928))+(((-1.0)*x2919*x2928))+(((-1.0)*x2919*x2925))+(((-1.0)*x2949))+(((-1.0)*x2911*x2912))+((new_r21*x2930))+(((0.837955424564001)*new_r01*x2910)));
evalcond[10]=(((x2920*x2939))+(((0.028546806998574)*cj4*x2938))+(((-1.0)*x2915*x2941))+(((0.511154255842196)*x2909*x2924))+((x2910*x2943))+(((-0.0994021100426501)*cj5*x2939))+(((-1.0)*x2924*x2942))+(((-1.0)*cj5*x2937))+(((-0.811511442202281)*x2945))+(((-0.515031836328808)*x2938))+(((-0.233054011708033)*sj5*x2909))+new_r00+(((-0.805400547163128)*x2909*x2910)));
evalcond[11]=(((x2915*x2939))+(((-1.0)*x2910*x2935))+(((-0.0994021100426501)*cj4*x2938))+(((-0.231299053576899)*x2909*x2910))+(((-0.028546806998574)*cj5*x2939))+((sj5*x2946))+((x2924*x2940))+((x2920*x2941))+new_r01+(((-0.147909480226238)*x2938))+(((0.515031836328808)*x2947))+(((-0.233054011708033)*x2945))+(((0.146795896805068)*x2909*x2924)));
evalcond[12]=((((-1.0)*x2910*x2942))+((sj5*x2937))+(((-0.0181157120800272)*cj4*x2938))+(((-1.0)*x2924*x2943))+((x2926*x2939))+(((-1.0)*x2923*x2941))+(((0.511154255842196)*x2909*x2910))+(((0.805400547163128)*x2909*x2924))+(((-0.811511442202281)*x2938))+new_r10+((x2908*x2916))+(((-0.233054011708033)*x2947))+(((0.0630802599313394)*cj5*x2939)));
evalcond[13]=(((x2926*x2941))+((x2924*x2935))+((x2910*x2940))+(((0.0181157120800272)*cj5*x2939))+((cj5*x2946))+((sj5*x2944))+(((0.146795896805068)*x2909*x2910))+(((-1.0)*x2909*x2916))+new_r11+(((-0.233054011708033)*x2938))+(((0.0630802599313394)*cj4*x2938))+(((0.231299053576899)*x2909*x2924))+((x2923*x2939)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[9]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[10]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[11]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[12]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[13]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j2;
vinfos[0].indices[0] = _ij2[0];
vinfos[0].indices[1] = _ij2[1];
vinfos[0].maxsolutions = _nj2;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j3;
vinfos[1].indices[0] = _ij3[0];
vinfos[1].indices[1] = _ij3[1];
vinfos[1].maxsolutions = _nj3;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j4;
vinfos[2].indices[0] = _ij4[0];
vinfos[2].indices[1] = _ij4[1];
vinfos[2].maxsolutions = _nj4;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j5;
vinfos[3].indices[0] = _ij5[0];
vinfos[3].indices[1] = _ij5[1];
vinfos[3].maxsolutions = _nj5;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j6;
vinfos[4].indices[0] = _ij6[0];
vinfos[4].indices[1] = _ij6[1];
vinfos[4].maxsolutions = _nj6;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j7;
vinfos[5].indices[0] = _ij7[0];
vinfos[5].indices[1] = _ij7[1];
vinfos[5].maxsolutions = _nj7;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j8;
vinfos[6].indices[0] = _ij8[0];
vinfos[6].indices[1] = _ij8[1];
vinfos[6].maxsolutions = _nj8;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}
}
}

}

}

} else
{
{
IkReal j5array[1], cj5array[1], sj5array[1];
bool j5valid[1]={false};
_nj5 = 1;
IkReal x2950=(cj4*new_r02);
IkReal x2951=(new_r02*sj4);
IkReal x2952=(cj4*new_r12);
IkReal x2953=(new_r12*sj4);
CheckValue<IkReal> x2954=IKPowWithIntegerCheck(IKsign(((new_r12*new_r12)+(new_r02*new_r02))),-1);
if(!x2954.valid){
continue;
}
CheckValue<IkReal> x2955 = IKatan2WithCheck(IkReal(((((-0.531815483588428)*x2950))+(((0.0656300100348293)*x2951))+(((0.103420015812922)*x2953))+(((-0.837955424564001)*x2952)))),IkReal(((((-0.531815483588428)*x2952))+(((-0.103420015812922)*x2951))+(((0.0656300100348293)*x2953))+(((0.837955424564001)*x2950)))),IKFAST_ATAN2_MAGTHRESH);
if(!x2955.valid){
continue;
}
j5array[0]=((-1.5707963267949)+(((1.5707963267949)*(x2954.value)))+(x2955.value));
sj5array[0]=IKsin(j5array[0]);
cj5array[0]=IKcos(j5array[0]);
if( j5array[0] > IKPI )
{
    j5array[0]-=IK2PI;
}
else if( j5array[0] < -IKPI )
{    j5array[0]+=IK2PI;
}
j5valid[0] = true;
for(int ij5 = 0; ij5 < 1; ++ij5)
{
if( !j5valid[ij5] )
{
    continue;
}
_ij5[0] = ij5; _ij5[1] = -1;
for(int iij5 = ij5+1; iij5 < 1; ++iij5)
{
if( j5valid[iij5] && IKabs(cj5array[ij5]-cj5array[iij5]) < IKFAST_SOLUTION_THRESH && IKabs(sj5array[ij5]-sj5array[iij5]) < IKFAST_SOLUTION_THRESH )
{
    j5valid[iij5]=false; _ij5[1] = iij5; break; 
}
}
j5 = j5array[ij5]; cj5 = cj5array[ij5]; sj5 = sj5array[ij5];
{
IkReal evalcond[9];
IkReal x2956=IKcos(j5);
IkReal x2957=IKsin(j5);
IkReal x2958=((0.0656300100348293)*sj4);
IkReal x2959=((0.122486725237355)*new_r22);
IkReal x2960=(new_r12*sj4);
IkReal x2961=((0.531815483588428)*cj4);
IkReal x2962=((0.837955424564001)*cj4);
IkReal x2963=((0.122486725237355)*cj4);
IkReal x2964=((0.992470151748698)*sj4);
IkReal x2965=((0.0656300100348293)*cj4);
IkReal x2966=((0.103420015812922)*cj4);
IkReal x2967=((0.837955424564001)*x2957);
IkReal x2968=(new_r10*x2956);
IkReal x2969=(new_r12*x2956);
IkReal x2970=(new_r02*x2956);
IkReal x2971=(new_r12*x2957);
IkReal x2972=(new_r01*x2957);
IkReal x2973=(new_r02*x2957);
IkReal x2974=(new_r00*x2957);
IkReal x2975=(new_r11*x2956);
IkReal x2976=((0.103420015812922)*sj4*x2956);
IkReal x2977=((0.103420015812922)*sj4*x2957);
evalcond[0]=((((-1.0)*x2958))+x2973+x2961+x2969);
evalcond[1]=((((-1.0)*x2971))+(((0.103420015812922)*sj4))+(((-1.0)*x2962))+x2970);
evalcond[2]=(((x2957*x2961))+(((-1.0)*x2956*x2962))+new_r02+(((-1.0)*x2957*x2958))+x2976);
evalcond[3]=(((x2956*x2961))+(((-1.0)*x2977))+((x2957*x2962))+(((-1.0)*x2956*x2958))+new_r12);
evalcond[4]=((((-0.844313326436599)*x2969))+(((0.535849798705775)*x2971))+(((-0.535849798705775)*x2970))+(((5.34279939673075e-6)*new_r22))+(((-0.844313326436599)*x2973)));
evalcond[5]=((((0.992470151748698)*cj4*new_r22))+(((-1.0)*sj4*x2959))+(((-1.0)*x2965*x2969))+(((-1.0)*x2965*x2973))+(((-0.531815483588428)*x2956*x2960))+(((0.837955424564001)*sj4*x2970))+((x2966*x2970))+(((-1.0)*x2960*x2967))+(((-1.0)*x2966*x2971))+(((-0.531815483588428)*sj4*x2973)));
evalcond[6]=((((-1.0)*new_r00*x2956*x2962))+((new_r10*x2957*x2962))+((new_r20*x2963))+((new_r20*x2964))+(((-1.0)*x2958*x2974))+((x2961*x2968))+((new_r00*x2976))+((x2961*x2974))+(((-1.0)*x2958*x2968))+(((-1.0)*new_r10*x2977)));
evalcond[7]=((((-1.0)*new_r01*x2956*x2962))+(((-1.0)*x2958*x2975))+(((-1.0)*x2958*x2972))+((new_r11*x2957*x2962))+((new_r01*x2976))+((x2961*x2972))+((x2961*x2975))+(((-1.0)*new_r11*x2977))+((new_r21*x2964))+((new_r21*x2963)));
evalcond[8]=((1.0)+((new_r22*x2964))+((x2962*x2971))+(((-0.103420015812922)*x2957*x2960))+(((-1.0)*x2962*x2970))+(((-1.0)*x2958*x2973))+((x2961*x2969))+((cj4*x2959))+(((0.103420015812922)*sj4*x2970))+((x2961*x2973))+(((-1.0)*x2958*x2969)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j3array[1], cj3array[1], sj3array[1];
bool j3valid[1]={false};
_nj3 = 1;
IkReal x2978=(new_r10*sj5);
IkReal x2979=(cj5*new_r00);
IkReal x2980=((11807.3987699217)*sj4);
IkReal x2981=(cj5*new_r10);
IkReal x2982=(new_r00*sj5);
IkReal x2983=((5342.89621935131)*sj4);
IkReal x2984=(cj4*new_r20);
IkReal x2985=((27475.4362619396)*cj4);
IkReal x2986=(new_r20*sj4);
IkReal x2987=((95671.5172704101)*cj4);
IkReal x2988=((150745.110265814)*cj4);
IkReal x2989=((3390.90924423569)*sj4);
IkReal x2990=((18604.3629316913)*sj4);
IkReal x2991=((43291.7527292989)*cj4);
if( IKabs(((((-0.515031836328808)*x2978))+((x2981*x2991))+(((-1.0)*x2978*x2985))+(((-1.0)*x2982*x2983))+(((-1.0)*x2979*x2989))+(((-1.0)*x2981*x2983))+(((-0.273949425080978)*x2984))+((x2982*x2991))+(((0.811511442202281)*x2981))+(((0.811511442202281)*x2982))+(((-51663.5292815391)*new_r21))+(((0.515031836328808)*x2979))+((x2978*x2989))+(((-5.13522966898714e-6)*new_r20))+(((0.033809750247604)*x2986))+((x2979*x2985)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((((-1.47476155376408e-6)*new_r20))+((x2981*x2990))+(((-1.0)*x2978*x2980))+(((-1.0)*x2982*x2988))+(((0.953912320189799)*x2984))+(((-1.0)*x2979*x2987))+(((-1.0)*x2981*x2988))+((x2982*x2990))+((x2978*x2987))+(((179896.260310015)*new_r21))+((x2979*x2980))+(((-0.117728070771443)*x2986))+(((0.147909480226238)*x2979))+(((0.233054011708033)*x2982))+(((0.233054011708033)*x2981))+(((-0.147909480226238)*x2978)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((((-0.515031836328808)*x2978))+((x2981*x2991))+(((-1.0)*x2978*x2985))+(((-1.0)*x2982*x2983))+(((-1.0)*x2979*x2989))+(((-1.0)*x2981*x2983))+(((-0.273949425080978)*x2984))+((x2982*x2991))+(((0.811511442202281)*x2981))+(((0.811511442202281)*x2982))+(((-51663.5292815391)*new_r21))+(((0.515031836328808)*x2979))+((x2978*x2989))+(((-5.13522966898714e-6)*new_r20))+(((0.033809750247604)*x2986))+((x2979*x2985))))+IKsqr(((((-1.47476155376408e-6)*new_r20))+((x2981*x2990))+(((-1.0)*x2978*x2980))+(((-1.0)*x2982*x2988))+(((0.953912320189799)*x2984))+(((-1.0)*x2979*x2987))+(((-1.0)*x2981*x2988))+((x2982*x2990))+((x2978*x2987))+(((179896.260310015)*new_r21))+((x2979*x2980))+(((-0.117728070771443)*x2986))+(((0.147909480226238)*x2979))+(((0.233054011708033)*x2982))+(((0.233054011708033)*x2981))+(((-0.147909480226238)*x2978))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j3array[0]=IKatan2(((((-0.515031836328808)*x2978))+((x2981*x2991))+(((-1.0)*x2978*x2985))+(((-1.0)*x2982*x2983))+(((-1.0)*x2979*x2989))+(((-1.0)*x2981*x2983))+(((-0.273949425080978)*x2984))+((x2982*x2991))+(((0.811511442202281)*x2981))+(((0.811511442202281)*x2982))+(((-51663.5292815391)*new_r21))+(((0.515031836328808)*x2979))+((x2978*x2989))+(((-5.13522966898714e-6)*new_r20))+(((0.033809750247604)*x2986))+((x2979*x2985))), ((((-1.47476155376408e-6)*new_r20))+((x2981*x2990))+(((-1.0)*x2978*x2980))+(((-1.0)*x2982*x2988))+(((0.953912320189799)*x2984))+(((-1.0)*x2979*x2987))+(((-1.0)*x2981*x2988))+((x2982*x2990))+((x2978*x2987))+(((179896.260310015)*new_r21))+((x2979*x2980))+(((-0.117728070771443)*x2986))+(((0.147909480226238)*x2979))+(((0.233054011708033)*x2982))+(((0.233054011708033)*x2981))+(((-0.147909480226238)*x2978))));
sj3array[0]=IKsin(j3array[0]);
cj3array[0]=IKcos(j3array[0]);
if( j3array[0] > IKPI )
{
    j3array[0]-=IK2PI;
}
else if( j3array[0] < -IKPI )
{    j3array[0]+=IK2PI;
}
j3valid[0] = true;
for(int ij3 = 0; ij3 < 1; ++ij3)
{
if( !j3valid[ij3] )
{
    continue;
}
_ij3[0] = ij3; _ij3[1] = -1;
for(int iij3 = ij3+1; iij3 < 1; ++iij3)
{
if( j3valid[iij3] && IKabs(cj3array[ij3]-cj3array[iij3]) < IKFAST_SOLUTION_THRESH && IKabs(sj3array[ij3]-sj3array[iij3]) < IKFAST_SOLUTION_THRESH )
{
    j3valid[iij3]=false; _ij3[1] = iij3; break; 
}
}
j3 = j3array[ij3]; cj3 = cj3array[ij3]; sj3 = sj3array[ij3];
{
IkReal evalcond[14];
IkReal x2992=IKsin(j3);
IkReal x2993=IKcos(j3);
IkReal x2994=(cj5*sj4);
IkReal x2995=(new_r01*sj5);
IkReal x2996=((0.531815483588428)*sj4);
IkReal x2997=(new_r10*sj5);
IkReal x2998=(cj5*new_r01);
IkReal x2999=((0.0181157120800272)*sj5);
IkReal x3000=((0.515031836328808)*sj5);
IkReal x3001=(new_r00*sj5);
IkReal x3002=((0.122486725237355)*sj4);
IkReal x3003=(new_r11*sj5);
IkReal x3004=((0.0630802599313394)*sj5);
IkReal x3005=((0.0656300100348293)*cj4);
IkReal x3006=(cj5*new_r00);
IkReal x3007=((0.028546806998574)*sj5);
IkReal x3008=(sj4*sj5);
IkReal x3009=((0.837955424564001)*sj4);
IkReal x3010=((0.0994021100426501)*sj5);
IkReal x3011=(cj5*new_r10);
IkReal x3012=((0.103420015812922)*cj4);
IkReal x3013=(cj5*new_r11);
IkReal x3014=((0.992470151748698)*cj4);
IkReal x3015=((0.276027873078388)*x2992);
IkReal x3016=((0.961149631058464)*x2993);
IkReal x3017=((0.276027873078388)*x2993);
IkReal x3018=((0.961149631058464)*x2992);
IkReal x3019=((0.805400547163128)*x2992);
IkReal x3020=(sj4*x2993);
IkReal x3021=((0.147909480226238)*x2993);
IkReal x3022=(cj5*x2992);
IkReal x3023=(cj4*x2993);
IkReal x3024=((0.511154255842196)*x2992);
IkReal x3025=(cj4*x2992);
IkReal x3026=((0.146795896805068)*x2992);
IkReal x3027=((0.231299053576899)*x2992);
IkReal x3028=((0.147909480226238)*x2992);
IkReal x3029=(sj5*x2992);
IkReal x3030=((0.811511442202281)*x2993);
IkReal x3031=(cj5*x2993);
IkReal x3032=(sj4*x2992);
IkReal x3033=(x3018+x3017);
evalcond[0]=((((-0.535849798705775)*x3006))+x3033+(((5.34279939673075e-6)*new_r20))+(((0.535849798705775)*x2997))+(((-0.844313326436599)*x3001))+(((-0.844313326436599)*x3011)));
evalcond[1]=((((-0.535849798705775)*x2998))+(((0.535849798705775)*x3003))+x3015+(((5.34279939673075e-6)*new_r21))+(((-1.0)*x3016))+(((-0.844313326436599)*x2995))+(((-0.844313326436599)*x3013)));
evalcond[2]=((((0.273949425080978)*x3025))+(((-0.033809750247604)*x3032))+(((0.117728070771443)*x3020))+(((-0.953912320189798)*x3023))+(((5.13522966898714e-6)*x2992))+new_r20+(((1.47476155376408e-6)*x2993)));
evalcond[3]=((((0.033809750247604)*x3020))+(((-5.13522966898714e-6)*x2993))+(((-0.273949425080978)*x3023))+(((-0.953912320189798)*x3025))+new_r21+(((0.117728070771443)*x3032))+(((1.47476155376408e-6)*x2992)));
evalcond[4]=(x3011+x3001+(((0.511154255842196)*x3020))+(((-1.0)*sj4*x3026))+(((-0.0181157120800272)*x3025))+(((-0.233054011708033)*x2993))+(((0.0630802599313394)*x3023))+(((-0.811511442202281)*x2992)));
evalcond[5]=((((0.0181157120800272)*x3023))+x3013+x3030+(((0.146795896805068)*x3020))+(((-0.233054011708033)*x2992))+((sj4*x3024))+(((0.0630802599313394)*x3025))+x2995);
evalcond[6]=(x3006+(((-1.0)*x3021))+(((-0.515031836328808)*x2992))+(((-0.805400547163128)*x3020))+((sj4*x3027))+(((-1.0)*x2997))+(((0.028546806998574)*x3025))+(((-0.0994021100426501)*x3023)));
evalcond[7]=((((-1.0)*x3003))+(((-0.028546806998574)*x3023))+(((-1.0)*x3028))+(((-0.231299053576899)*x3020))+(((-1.0)*sj4*x3019))+(((0.515031836328808)*x2993))+(((-0.0994021100426501)*x3025))+x2998);
evalcond[8]=((((-1.0)*x2997*x3009))+(((-1.0)*x2997*x3012))+x3015+((new_r20*x3014))+(((-0.531815483588428)*new_r10*x2994))+(((-1.0)*x2996*x3001))+(((-1.0)*x3016))+(((-1.0)*new_r20*x3002))+(((0.837955424564001)*new_r00*x2994))+(((-1.0)*x3005*x3011))+((x3006*x3012))+(((-1.0)*x3001*x3005)));
evalcond[9]=(((new_r21*x3014))+(((-1.0)*x2995*x2996))+(((-1.0)*x3003*x3012))+(((-1.0)*x3003*x3009))+((x2998*x3012))+(((-0.531815483588428)*new_r11*x2994))+(((-1.0)*x2995*x3005))+(((-1.0)*new_r21*x3002))+(((-1.0)*x3033))+(((0.837955424564001)*new_r01*x2994))+(((-1.0)*x3005*x3013)));
evalcond[10]=((((-0.515031836328808)*x3022))+(((-1.0)*x3008*x3026))+((x3004*x3023))+(((-0.805400547163128)*x2993*x2994))+(((-1.0)*x2999*x3025))+(((0.511154255842196)*x2993*x3008))+(((-1.0)*cj5*x3021))+new_r00+(((-0.0994021100426501)*cj5*x3023))+(((-0.811511442202281)*x3029))+(((-0.233054011708033)*sj5*x2993))+(((0.028546806998574)*cj4*x3022))+((x2994*x3027)));
evalcond[11]=((((-0.028546806998574)*cj5*x3023))+(((-0.231299053576899)*x2993*x2994))+((x3004*x3025))+(((-1.0)*x2994*x3019))+((x3008*x3024))+(((0.146795896805068)*x2993*x3008))+(((-0.147909480226238)*x3022))+((x2999*x3023))+(((-0.233054011708033)*x3029))+(((-0.0994021100426501)*cj4*x3022))+((sj5*x3030))+(((0.515031836328808)*x3031))+new_r01);
evalcond[12]=((((0.511154255842196)*x2993*x2994))+(((0.805400547163128)*x2993*x3008))+(((-0.233054011708033)*x3031))+(((-1.0)*x3008*x3027))+((x3010*x3023))+(((-1.0)*x2994*x3026))+new_r10+(((-0.811511442202281)*x3022))+(((-1.0)*x3007*x3025))+((x2992*x3000))+(((0.0630802599313394)*cj5*x3023))+((sj5*x3021))+(((-0.0181157120800272)*cj4*x3022)));
evalcond[13]=((((0.0630802599313394)*cj4*x3022))+((x3008*x3019))+((x3007*x3023))+(((0.231299053576899)*x2993*x3008))+(((0.0181157120800272)*cj5*x3023))+(((-1.0)*x2993*x3000))+(((0.146795896805068)*x2993*x2994))+((x3010*x3025))+(((-0.233054011708033)*x3022))+new_r11+((cj5*x3030))+((sj5*x3028))+((x2994*x3024)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[9]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[10]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[11]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[12]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[13]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j2;
vinfos[0].indices[0] = _ij2[0];
vinfos[0].indices[1] = _ij2[1];
vinfos[0].maxsolutions = _nj2;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j3;
vinfos[1].indices[0] = _ij3[0];
vinfos[1].indices[1] = _ij3[1];
vinfos[1].maxsolutions = _nj3;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j4;
vinfos[2].indices[0] = _ij4[0];
vinfos[2].indices[1] = _ij4[1];
vinfos[2].maxsolutions = _nj4;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j5;
vinfos[3].indices[0] = _ij5[0];
vinfos[3].indices[1] = _ij5[1];
vinfos[3].maxsolutions = _nj5;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j6;
vinfos[4].indices[0] = _ij6[0];
vinfos[4].indices[1] = _ij6[1];
vinfos[4].maxsolutions = _nj6;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j7;
vinfos[5].indices[0] = _ij7[0];
vinfos[5].indices[1] = _ij7[1];
vinfos[5].maxsolutions = _nj7;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j8;
vinfos[6].indices[0] = _ij8[0];
vinfos[6].indices[1] = _ij8[1];
vinfos[6].maxsolutions = _nj8;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}
}
}

}

}

} else
{
{
IkReal j5array[1], cj5array[1], sj5array[1];
bool j5valid[1]={false};
_nj5 = 1;
IkReal x3034=cj4*cj4;
IkReal x3035=(cj4*sj4);
CheckValue<IkReal> x3036=IKPowWithIntegerCheck(IKsign(((((0.531815483588428)*cj4*new_r02))+(((-0.837955424564001)*cj4*new_r12))+(((-0.0656300100348293)*new_r02*sj4))+(((0.103420015812922)*new_r12*sj4)))),-1);
if(!x3036.valid){
continue;
}
CheckValue<IkReal> x3037 = IKatan2WithCheck(IkReal(((-0.00430729821717179)+(new_r12*new_r12)+(((-0.278520410367222)*x3034))+(((0.0698061110491722)*x3035)))),IkReal(((0.00678745667560425)+(((0.438850212664446)*x3034))+(((-0.109995388645147)*x3035))+(((-1.0)*new_r02*new_r12)))),IKFAST_ATAN2_MAGTHRESH);
if(!x3037.valid){
continue;
}
j5array[0]=((-1.5707963267949)+(((1.5707963267949)*(x3036.value)))+(x3037.value));
sj5array[0]=IKsin(j5array[0]);
cj5array[0]=IKcos(j5array[0]);
if( j5array[0] > IKPI )
{
    j5array[0]-=IK2PI;
}
else if( j5array[0] < -IKPI )
{    j5array[0]+=IK2PI;
}
j5valid[0] = true;
for(int ij5 = 0; ij5 < 1; ++ij5)
{
if( !j5valid[ij5] )
{
    continue;
}
_ij5[0] = ij5; _ij5[1] = -1;
for(int iij5 = ij5+1; iij5 < 1; ++iij5)
{
if( j5valid[iij5] && IKabs(cj5array[ij5]-cj5array[iij5]) < IKFAST_SOLUTION_THRESH && IKabs(sj5array[ij5]-sj5array[iij5]) < IKFAST_SOLUTION_THRESH )
{
    j5valid[iij5]=false; _ij5[1] = iij5; break; 
}
}
j5 = j5array[ij5]; cj5 = cj5array[ij5]; sj5 = sj5array[ij5];
{
IkReal evalcond[9];
IkReal x3038=IKcos(j5);
IkReal x3039=IKsin(j5);
IkReal x3040=((0.0656300100348293)*sj4);
IkReal x3041=((0.122486725237355)*new_r22);
IkReal x3042=(new_r12*sj4);
IkReal x3043=((0.531815483588428)*cj4);
IkReal x3044=((0.837955424564001)*cj4);
IkReal x3045=((0.122486725237355)*cj4);
IkReal x3046=((0.992470151748698)*sj4);
IkReal x3047=((0.0656300100348293)*cj4);
IkReal x3048=((0.103420015812922)*cj4);
IkReal x3049=((0.837955424564001)*x3039);
IkReal x3050=(new_r10*x3038);
IkReal x3051=(new_r12*x3038);
IkReal x3052=(new_r02*x3038);
IkReal x3053=(new_r12*x3039);
IkReal x3054=(new_r01*x3039);
IkReal x3055=(new_r02*x3039);
IkReal x3056=(new_r00*x3039);
IkReal x3057=(new_r11*x3038);
IkReal x3058=((0.103420015812922)*sj4*x3038);
IkReal x3059=((0.103420015812922)*sj4*x3039);
evalcond[0]=(x3043+x3055+x3051+(((-1.0)*x3040)));
evalcond[1]=(x3052+(((-1.0)*x3053))+(((0.103420015812922)*sj4))+(((-1.0)*x3044)));
evalcond[2]=(x3058+((x3039*x3043))+(((-1.0)*x3038*x3044))+(((-1.0)*x3039*x3040))+new_r02);
evalcond[3]=(((x3039*x3044))+(((-1.0)*x3038*x3040))+((x3038*x3043))+(((-1.0)*x3059))+new_r12);
evalcond[4]=((((-0.844313326436599)*x3055))+(((-0.844313326436599)*x3051))+(((0.535849798705775)*x3053))+(((5.34279939673075e-6)*new_r22))+(((-0.535849798705775)*x3052)));
evalcond[5]=(((x3048*x3052))+(((-1.0)*x3042*x3049))+(((0.992470151748698)*cj4*new_r22))+(((-1.0)*x3047*x3055))+(((-1.0)*x3047*x3051))+(((-1.0)*sj4*x3041))+(((-1.0)*x3048*x3053))+(((-0.531815483588428)*x3038*x3042))+(((-0.531815483588428)*sj4*x3055))+(((0.837955424564001)*sj4*x3052)));
evalcond[6]=(((new_r10*x3039*x3044))+((new_r20*x3045))+((new_r20*x3046))+(((-1.0)*new_r00*x3038*x3044))+(((-1.0)*x3040*x3050))+(((-1.0)*x3040*x3056))+(((-1.0)*new_r10*x3059))+((x3043*x3050))+((x3043*x3056))+((new_r00*x3058)));
evalcond[7]=(((new_r11*x3039*x3044))+(((-1.0)*x3040*x3054))+(((-1.0)*x3040*x3057))+(((-1.0)*new_r01*x3038*x3044))+(((-1.0)*new_r11*x3059))+((x3043*x3057))+((x3043*x3054))+((new_r21*x3046))+((new_r21*x3045))+((new_r01*x3058)));
evalcond[8]=((1.0)+((x3044*x3053))+(((-1.0)*x3040*x3051))+(((-1.0)*x3040*x3055))+((new_r22*x3046))+(((-1.0)*x3044*x3052))+((cj4*x3041))+(((-0.103420015812922)*x3039*x3042))+((x3043*x3051))+((x3043*x3055))+(((0.103420015812922)*sj4*x3052)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j3array[1], cj3array[1], sj3array[1];
bool j3valid[1]={false};
_nj3 = 1;
IkReal x3060=(new_r10*sj5);
IkReal x3061=(cj5*new_r00);
IkReal x3062=((11807.3987699217)*sj4);
IkReal x3063=(cj5*new_r10);
IkReal x3064=(new_r00*sj5);
IkReal x3065=((5342.89621935131)*sj4);
IkReal x3066=(cj4*new_r20);
IkReal x3067=((27475.4362619396)*cj4);
IkReal x3068=(new_r20*sj4);
IkReal x3069=((95671.5172704101)*cj4);
IkReal x3070=((150745.110265814)*cj4);
IkReal x3071=((3390.90924423569)*sj4);
IkReal x3072=((18604.3629316913)*sj4);
IkReal x3073=((43291.7527292989)*cj4);
if( IKabs(((((0.811511442202281)*x3064))+(((0.811511442202281)*x3063))+(((-0.273949425080978)*x3066))+(((-1.0)*x3060*x3067))+(((-1.0)*x3061*x3071))+(((-1.0)*x3063*x3065))+(((-51663.5292815391)*new_r21))+(((-5.13522966898714e-6)*new_r20))+((x3064*x3073))+((x3060*x3071))+((x3061*x3067))+(((-1.0)*x3064*x3065))+(((0.515031836328808)*x3061))+(((-0.515031836328808)*x3060))+((x3063*x3073))+(((0.033809750247604)*x3068)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((((-1.47476155376408e-6)*new_r20))+(((-1.0)*x3060*x3062))+(((0.233054011708033)*x3064))+(((0.233054011708033)*x3063))+(((-1.0)*x3063*x3070))+(((-1.0)*x3061*x3069))+(((-0.147909480226238)*x3060))+(((0.953912320189799)*x3066))+((x3064*x3072))+(((-1.0)*x3064*x3070))+(((179896.260310015)*new_r21))+(((0.147909480226238)*x3061))+((x3061*x3062))+((x3060*x3069))+((x3063*x3072))+(((-0.117728070771443)*x3068)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((((0.811511442202281)*x3064))+(((0.811511442202281)*x3063))+(((-0.273949425080978)*x3066))+(((-1.0)*x3060*x3067))+(((-1.0)*x3061*x3071))+(((-1.0)*x3063*x3065))+(((-51663.5292815391)*new_r21))+(((-5.13522966898714e-6)*new_r20))+((x3064*x3073))+((x3060*x3071))+((x3061*x3067))+(((-1.0)*x3064*x3065))+(((0.515031836328808)*x3061))+(((-0.515031836328808)*x3060))+((x3063*x3073))+(((0.033809750247604)*x3068))))+IKsqr(((((-1.47476155376408e-6)*new_r20))+(((-1.0)*x3060*x3062))+(((0.233054011708033)*x3064))+(((0.233054011708033)*x3063))+(((-1.0)*x3063*x3070))+(((-1.0)*x3061*x3069))+(((-0.147909480226238)*x3060))+(((0.953912320189799)*x3066))+((x3064*x3072))+(((-1.0)*x3064*x3070))+(((179896.260310015)*new_r21))+(((0.147909480226238)*x3061))+((x3061*x3062))+((x3060*x3069))+((x3063*x3072))+(((-0.117728070771443)*x3068))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j3array[0]=IKatan2(((((0.811511442202281)*x3064))+(((0.811511442202281)*x3063))+(((-0.273949425080978)*x3066))+(((-1.0)*x3060*x3067))+(((-1.0)*x3061*x3071))+(((-1.0)*x3063*x3065))+(((-51663.5292815391)*new_r21))+(((-5.13522966898714e-6)*new_r20))+((x3064*x3073))+((x3060*x3071))+((x3061*x3067))+(((-1.0)*x3064*x3065))+(((0.515031836328808)*x3061))+(((-0.515031836328808)*x3060))+((x3063*x3073))+(((0.033809750247604)*x3068))), ((((-1.47476155376408e-6)*new_r20))+(((-1.0)*x3060*x3062))+(((0.233054011708033)*x3064))+(((0.233054011708033)*x3063))+(((-1.0)*x3063*x3070))+(((-1.0)*x3061*x3069))+(((-0.147909480226238)*x3060))+(((0.953912320189799)*x3066))+((x3064*x3072))+(((-1.0)*x3064*x3070))+(((179896.260310015)*new_r21))+(((0.147909480226238)*x3061))+((x3061*x3062))+((x3060*x3069))+((x3063*x3072))+(((-0.117728070771443)*x3068))));
sj3array[0]=IKsin(j3array[0]);
cj3array[0]=IKcos(j3array[0]);
if( j3array[0] > IKPI )
{
    j3array[0]-=IK2PI;
}
else if( j3array[0] < -IKPI )
{    j3array[0]+=IK2PI;
}
j3valid[0] = true;
for(int ij3 = 0; ij3 < 1; ++ij3)
{
if( !j3valid[ij3] )
{
    continue;
}
_ij3[0] = ij3; _ij3[1] = -1;
for(int iij3 = ij3+1; iij3 < 1; ++iij3)
{
if( j3valid[iij3] && IKabs(cj3array[ij3]-cj3array[iij3]) < IKFAST_SOLUTION_THRESH && IKabs(sj3array[ij3]-sj3array[iij3]) < IKFAST_SOLUTION_THRESH )
{
    j3valid[iij3]=false; _ij3[1] = iij3; break; 
}
}
j3 = j3array[ij3]; cj3 = cj3array[ij3]; sj3 = sj3array[ij3];
{
IkReal evalcond[14];
IkReal x3074=IKsin(j3);
IkReal x3075=IKcos(j3);
IkReal x3076=(cj5*sj4);
IkReal x3077=(new_r01*sj5);
IkReal x3078=((0.531815483588428)*sj4);
IkReal x3079=(new_r10*sj5);
IkReal x3080=(cj5*new_r01);
IkReal x3081=((0.0181157120800272)*sj5);
IkReal x3082=((0.515031836328808)*sj5);
IkReal x3083=(new_r00*sj5);
IkReal x3084=((0.122486725237355)*sj4);
IkReal x3085=(new_r11*sj5);
IkReal x3086=((0.0630802599313394)*sj5);
IkReal x3087=((0.0656300100348293)*cj4);
IkReal x3088=(cj5*new_r00);
IkReal x3089=((0.028546806998574)*sj5);
IkReal x3090=(sj4*sj5);
IkReal x3091=((0.837955424564001)*sj4);
IkReal x3092=((0.0994021100426501)*sj5);
IkReal x3093=(cj5*new_r10);
IkReal x3094=((0.103420015812922)*cj4);
IkReal x3095=(cj5*new_r11);
IkReal x3096=((0.992470151748698)*cj4);
IkReal x3097=((0.276027873078388)*x3074);
IkReal x3098=((0.961149631058464)*x3075);
IkReal x3099=((0.276027873078388)*x3075);
IkReal x3100=((0.961149631058464)*x3074);
IkReal x3101=((0.805400547163128)*x3074);
IkReal x3102=(sj4*x3075);
IkReal x3103=((0.147909480226238)*x3075);
IkReal x3104=(cj5*x3074);
IkReal x3105=(cj4*x3075);
IkReal x3106=((0.511154255842196)*x3074);
IkReal x3107=(cj4*x3074);
IkReal x3108=((0.146795896805068)*x3074);
IkReal x3109=((0.231299053576899)*x3074);
IkReal x3110=((0.147909480226238)*x3074);
IkReal x3111=(sj5*x3074);
IkReal x3112=((0.811511442202281)*x3075);
IkReal x3113=(cj5*x3075);
IkReal x3114=(sj4*x3074);
IkReal x3115=(x3100+x3099);
evalcond[0]=(x3115+(((0.535849798705775)*x3079))+(((-0.844313326436599)*x3083))+(((5.34279939673075e-6)*new_r20))+(((-0.535849798705775)*x3088))+(((-0.844313326436599)*x3093)));
evalcond[1]=(x3097+(((-1.0)*x3098))+(((0.535849798705775)*x3085))+(((5.34279939673075e-6)*new_r21))+(((-0.535849798705775)*x3080))+(((-0.844313326436599)*x3095))+(((-0.844313326436599)*x3077)));
evalcond[2]=((((0.117728070771443)*x3102))+(((5.13522966898714e-6)*x3074))+(((-0.033809750247604)*x3114))+(((1.47476155376408e-6)*x3075))+(((0.273949425080978)*x3107))+new_r20+(((-0.953912320189798)*x3105)));
evalcond[3]=((((0.117728070771443)*x3114))+(((1.47476155376408e-6)*x3074))+(((-5.13522966898714e-6)*x3075))+new_r21+(((-0.953912320189798)*x3107))+(((-0.273949425080978)*x3105))+(((0.033809750247604)*x3102)));
evalcond[4]=((((-0.233054011708033)*x3075))+x3083+x3093+(((0.0630802599313394)*x3105))+(((-0.0181157120800272)*x3107))+(((-0.811511442202281)*x3074))+(((0.511154255842196)*x3102))+(((-1.0)*sj4*x3108)));
evalcond[5]=(x3112+(((-0.233054011708033)*x3074))+x3095+x3077+(((0.146795896805068)*x3102))+(((0.0630802599313394)*x3107))+(((0.0181157120800272)*x3105))+((sj4*x3106)));
evalcond[6]=((((-1.0)*x3079))+(((-0.515031836328808)*x3074))+(((-0.805400547163128)*x3102))+x3088+(((-1.0)*x3103))+(((0.028546806998574)*x3107))+((sj4*x3109))+(((-0.0994021100426501)*x3105)));
evalcond[7]=((((0.515031836328808)*x3075))+x3080+(((-0.231299053576899)*x3102))+(((-1.0)*x3110))+(((-1.0)*x3085))+(((-0.028546806998574)*x3105))+(((-1.0)*sj4*x3101))+(((-0.0994021100426501)*x3107)));
evalcond[8]=((((-0.531815483588428)*new_r10*x3076))+x3097+(((-1.0)*x3083*x3087))+(((-1.0)*x3098))+((x3088*x3094))+(((-1.0)*x3079*x3091))+(((-1.0)*x3079*x3094))+((new_r20*x3096))+(((-1.0)*x3078*x3083))+(((0.837955424564001)*new_r00*x3076))+(((-1.0)*x3087*x3093))+(((-1.0)*new_r20*x3084)));
evalcond[9]=((((-1.0)*x3085*x3094))+(((-1.0)*x3085*x3091))+(((-1.0)*x3115))+(((-1.0)*x3077*x3087))+((new_r21*x3096))+((x3080*x3094))+(((0.837955424564001)*new_r01*x3076))+(((-1.0)*x3087*x3095))+(((-1.0)*new_r21*x3084))+(((-0.531815483588428)*new_r11*x3076))+(((-1.0)*x3077*x3078)));
evalcond[10]=(((x3086*x3105))+(((-0.233054011708033)*sj5*x3075))+(((-0.811511442202281)*x3111))+(((-1.0)*cj5*x3103))+(((0.028546806998574)*cj4*x3104))+(((0.511154255842196)*x3075*x3090))+(((-1.0)*x3090*x3108))+(((-0.515031836328808)*x3104))+((x3076*x3109))+(((-0.805400547163128)*x3075*x3076))+(((-1.0)*x3081*x3107))+(((-0.0994021100426501)*cj5*x3105))+new_r00);
evalcond[11]=(((x3081*x3105))+((x3086*x3107))+(((0.515031836328808)*x3113))+((sj5*x3112))+(((-1.0)*x3076*x3101))+(((-0.231299053576899)*x3075*x3076))+(((-0.0994021100426501)*cj4*x3104))+new_r01+((x3090*x3106))+(((0.146795896805068)*x3075*x3090))+(((-0.233054011708033)*x3111))+(((-0.028546806998574)*cj5*x3105))+(((-0.147909480226238)*x3104)));
evalcond[12]=((((-0.811511442202281)*x3104))+((sj5*x3103))+(((-1.0)*x3090*x3109))+((x3074*x3082))+((x3092*x3105))+(((-1.0)*x3089*x3107))+(((-1.0)*x3076*x3108))+(((-0.0181157120800272)*cj4*x3104))+new_r10+(((0.805400547163128)*x3075*x3090))+(((0.0630802599313394)*cj5*x3105))+(((-0.233054011708033)*x3113))+(((0.511154255842196)*x3075*x3076)));
evalcond[13]=((((-0.233054011708033)*x3104))+(((-1.0)*x3075*x3082))+((x3092*x3107))+((x3076*x3106))+((sj5*x3110))+(((0.146795896805068)*x3075*x3076))+((x3089*x3105))+new_r11+(((0.0630802599313394)*cj4*x3104))+(((0.0181157120800272)*cj5*x3105))+((x3090*x3101))+((cj5*x3112))+(((0.231299053576899)*x3075*x3090)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[9]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[10]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[11]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[12]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[13]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j2;
vinfos[0].indices[0] = _ij2[0];
vinfos[0].indices[1] = _ij2[1];
vinfos[0].maxsolutions = _nj2;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j3;
vinfos[1].indices[0] = _ij3[0];
vinfos[1].indices[1] = _ij3[1];
vinfos[1].maxsolutions = _nj3;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j4;
vinfos[2].indices[0] = _ij4[0];
vinfos[2].indices[1] = _ij4[1];
vinfos[2].maxsolutions = _nj4;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j5;
vinfos[3].indices[0] = _ij5[0];
vinfos[3].indices[1] = _ij5[1];
vinfos[3].maxsolutions = _nj5;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j6;
vinfos[4].indices[0] = _ij6[0];
vinfos[4].indices[1] = _ij6[1];
vinfos[4].maxsolutions = _nj6;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j7;
vinfos[5].indices[0] = _ij7[0];
vinfos[5].indices[1] = _ij7[1];
vinfos[5].maxsolutions = _nj7;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j8;
vinfos[6].indices[0] = _ij8[0];
vinfos[6].indices[1] = _ij8[1];
vinfos[6].maxsolutions = _nj8;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}
}
}

}

}
}
}
}
}static inline void polyroots2(IkReal rawcoeffs[2+1], IkReal rawroots[2], int& numroots) {
    IkReal det = rawcoeffs[1]*rawcoeffs[1]-4*rawcoeffs[0]*rawcoeffs[2];
    if( det < 0 ) {
        numroots=0;
    }
    else if( det == 0 ) {
        rawroots[0] = -0.5*rawcoeffs[1]/rawcoeffs[0];
        numroots = 1;
    }
    else {
        det = IKsqrt(det);
        rawroots[0] = (-rawcoeffs[1]+det)/(2*rawcoeffs[0]);
        rawroots[1] = (-rawcoeffs[1]-det)/(2*rawcoeffs[0]);//rawcoeffs[2]/(rawcoeffs[0]*rawroots[0]);
        numroots = 2;
    }
}
};


/// solves the inverse kinematics equations.
/// \param pfree is an array specifying the free joints of the chain.
IKFAST_API bool ComputeIk(const IkReal* eetrans, const IkReal* eerot, const IkReal* pfree, IkSolutionListBase<IkReal>& solutions) {
IKSolver solver;
return solver.ComputeIk(eetrans,eerot,pfree,solutions);
}

IKFAST_API bool ComputeIk2(const IkReal* eetrans, const IkReal* eerot, const IkReal* pfree, IkSolutionListBase<IkReal>& solutions, void* pOpenRAVEManip) {
IKSolver solver;
return solver.ComputeIk(eetrans,eerot,pfree,solutions);
}

IKFAST_API const char* GetKinematicsHash() { return "<robot:GenericRobot - rucobot (322305a75e8d8a2bb29c955b49e86e62)>"; }

IKFAST_API const char* GetIkFastVersion() { return "0x10000049"; }

#ifdef IKFAST_NAMESPACE
} // end namespace
#endif

#ifndef IKFAST_NO_MAIN
#include <stdio.h>
#include <stdlib.h>
#ifdef IKFAST_NAMESPACE
using namespace IKFAST_NAMESPACE;
#endif
int main(int argc, char** argv)
{
    if( argc != 12+GetNumFreeParameters()+1 ) {
        printf("\nUsage: ./ik r00 r01 r02 t0 r10 r11 r12 t1 r20 r21 r22 t2 free0 ...\n\n"
               "Returns the ik solutions given the transformation of the end effector specified by\n"
               "a 3x3 rotation R (rXX), and a 3x1 translation (tX).\n"
               "There are %d free parameters that have to be specified.\n\n",GetNumFreeParameters());
        return 1;
    }

    IkSolutionList<IkReal> solutions;
    std::vector<IkReal> vfree(GetNumFreeParameters());
    IkReal eerot[9],eetrans[3];
    eerot[0] = atof(argv[1]); eerot[1] = atof(argv[2]); eerot[2] = atof(argv[3]); eetrans[0] = atof(argv[4]);
    eerot[3] = atof(argv[5]); eerot[4] = atof(argv[6]); eerot[5] = atof(argv[7]); eetrans[1] = atof(argv[8]);
    eerot[6] = atof(argv[9]); eerot[7] = atof(argv[10]); eerot[8] = atof(argv[11]); eetrans[2] = atof(argv[12]);
    for(std::size_t i = 0; i < vfree.size(); ++i)
        vfree[i] = atof(argv[13+i]);
    bool bSuccess = ComputeIk(eetrans, eerot, vfree.size() > 0 ? &vfree[0] : NULL, solutions);

    if( !bSuccess ) {
        fprintf(stderr,"Failed to get ik solution\n");
        return -1;
    }

    printf("Found %d ik solutions:\n", (int)solutions.GetNumSolutions());
    std::vector<IkReal> solvalues(GetNumJoints());
    for(std::size_t i = 0; i < solutions.GetNumSolutions(); ++i) {
        const IkSolutionBase<IkReal>& sol = solutions.GetSolution(i);
        printf("sol%d (free=%d): ", (int)i, (int)sol.GetFree().size());
        std::vector<IkReal> vsolfree(sol.GetFree().size());
        sol.GetSolution(&solvalues[0],vsolfree.size()>0?&vsolfree[0]:NULL);
        for( std::size_t j = 0; j < solvalues.size(); ++j)
            printf("%.15f, ", solvalues[j]);
        printf("\n");
    }
    return 0;
}

#endif
